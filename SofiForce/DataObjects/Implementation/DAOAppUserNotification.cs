/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppUserNotification : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _userNotificationId;
		protected Int32? _notificationId;
		protected Int32? _userId;
		protected DateTime? _readDate;
		protected bool? _isReaded;
		#endregion

		#region class methods
		public DAOAppUserNotification()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table AppUser_Notification based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAppUserNotification
		///</returns>
		///<parameters>
		///Int32? userNotificationId
		///</parameters>
		public static DAOAppUserNotification SelectOne(Int32? userNotificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserNotificationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userNotificationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOAppUserNotification retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAppUserNotification();
					retObj._userNotificationId					 = Convert.IsDBNull(dt.Rows[0]["UserNotificationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserNotificationId"];
					retObj._notificationId					 = Convert.IsDBNull(dt.Rows[0]["NotificationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["NotificationId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._readDate					 = Convert.IsDBNull(dt.Rows[0]["ReadDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ReadDate"];
					retObj._isReaded					 = Convert.IsDBNull(dt.Rows[0]["IsReaded"]) ? (bool?)null : (bool?)dt.Rows[0]["IsReaded"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table AppUser_Notification based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserNotificationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_userNotificationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser_Notification based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUserNotification.
		///</returns>
		///<parameters>
		///Int32? notificationId
		///</parameters>
		public static IList<DAOAppUserNotification> SelectAllByNotificationId(Int32? notificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_SelectAllByNotificationId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)notificationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserNotification> objList = new List<DAOAppUserNotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserNotification retObj = new DAOAppUserNotification();
						retObj._userNotificationId					 = Convert.IsDBNull(row["UserNotificationId"]) ? (Int32?)null : (Int32?)row["UserNotificationId"];
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._readDate					 = Convert.IsDBNull(row["ReadDate"]) ? (DateTime?)null : (DateTime?)row["ReadDate"];
						retObj._isReaded					 = Convert.IsDBNull(row["IsReaded"]) ? (bool?)null : (bool?)row["IsReaded"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? notificationId
		///</parameters>
		public static Int32 SelectAllByNotificationIdCount(Int32? notificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_SelectAllByNotificationIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)notificationId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser_Notification with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? notificationId
		///</parameters>
		public static void DeleteAllByNotificationId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? notificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_DeleteAllByNotificationId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)notificationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser_Notification based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUserNotification.
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static IList<DAOAppUserNotification> SelectAllByUserId(Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_SelectAllByUserId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserNotification> objList = new List<DAOAppUserNotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserNotification retObj = new DAOAppUserNotification();
						retObj._userNotificationId					 = Convert.IsDBNull(row["UserNotificationId"]) ? (Int32?)null : (Int32?)row["UserNotificationId"];
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._readDate					 = Convert.IsDBNull(row["ReadDate"]) ? (DateTime?)null : (DateTime?)row["ReadDate"];
						retObj._isReaded					 = Convert.IsDBNull(row["IsReaded"]) ? (bool?)null : (bool?)row["IsReaded"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static Int32 SelectAllByUserIdCount(Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_SelectAllByUserIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser_Notification with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userId
		///</parameters>
		public static void DeleteAllByUserId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_DeleteAllByUserId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table AppUser_Notification
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserNotificationId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _userNotificationId));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_notificationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReadDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_readDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsReaded", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isReaded?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_userNotificationId					 = Convert.IsDBNull(command.Parameters["@UserNotificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserNotificationId"].Value;
				_notificationId					 = Convert.IsDBNull(command.Parameters["@NotificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@NotificationId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_readDate					 = Convert.IsDBNull(command.Parameters["@ReadDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ReadDate"].Value;
				_isReaded					 = Convert.IsDBNull(command.Parameters["@IsReaded"].Value) ? (bool?)null : (bool?)command.Parameters["@IsReaded"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppUser_Notification
		///</Summary>
		///<returns>
		///IList-DAOAppUserNotification.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppUserNotification> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserNotification> objList = new List<DAOAppUserNotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserNotification retObj = new DAOAppUserNotification();
						retObj._userNotificationId					 = Convert.IsDBNull(row["UserNotificationId"]) ? (Int32?)null : (Int32?)row["UserNotificationId"];
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._readDate					 = Convert.IsDBNull(row["ReadDate"]) ? (DateTime?)null : (DateTime?)row["ReadDate"];
						retObj._isReaded					 = Convert.IsDBNull(row["IsReaded"]) ? (bool?)null : (bool?)row["IsReaded"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppUser_Notification
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_Notification_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "UserNotificationId", true) == 0) lst.Add(Convert.IsDBNull(row["UserNotificationId"]) ? (Int32?)null : (Int32?)row["UserNotificationId"]);
						if (string.Compare(projection.Member, "NotificationId", true) == 0) lst.Add(Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "ReadDate", true) == 0) lst.Add(Convert.IsDBNull(row["ReadDate"]) ? (DateTime?)null : (DateTime?)row["ReadDate"]);
						if (string.Compare(projection.Member, "IsReaded", true) == 0) lst.Add(Convert.IsDBNull(row["IsReaded"]) ? (bool?)null : (bool?)row["IsReaded"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppUser_Notification
		///</Summary>
		///<returns>
		///IList-DAOAppUserNotification.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppUserNotification> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_Notification_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserNotification> objList = new List<DAOAppUserNotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserNotification retObj = new DAOAppUserNotification();
						retObj._userNotificationId					 = Convert.IsDBNull(row["UserNotificationId"]) ? (Int32?)null : (Int32?)row["UserNotificationId"];
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._readDate					 = Convert.IsDBNull(row["ReadDate"]) ? (DateTime?)null : (DateTime?)row["ReadDate"];
						retObj._isReaded					 = Convert.IsDBNull(row["IsReaded"]) ? (bool?)null : (bool?)row["IsReaded"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppUser_Notification
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_Notification_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table AppUser_Notification based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Notification_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserNotificationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_userNotificationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_notificationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReadDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_readDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsReaded", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isReaded?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_userNotificationId					 = Convert.IsDBNull(command.Parameters["@UserNotificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserNotificationId"].Value;
				_notificationId					 = Convert.IsDBNull(command.Parameters["@NotificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@NotificationId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_readDate					 = Convert.IsDBNull(command.Parameters["@ReadDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ReadDate"].Value;
				_isReaded					 = Convert.IsDBNull(command.Parameters["@IsReaded"].Value) ? (bool?)null : (bool?)command.Parameters["@IsReaded"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? UserNotificationId
		{
			get
			{
				return _userNotificationId;
			}
			set
			{
				_userNotificationId = value;
			}
		}

		public Int32? NotificationId
		{
			get
			{
				return _notificationId;
			}
			set
			{
				_notificationId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public DateTime? ReadDate
		{
			get
			{
				return _readDate;
			}
			set
			{
				_readDate = value;
			}
		}

		public bool? IsReaded
		{
			get
			{
				return _isReaded;
			}
			set
			{
				_isReaded = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppUser_Notification_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[UserNotificationId]
			,[NotificationId]
			,[UserId]
			,[ReadDate]
			,[IsReaded]
			FROM [dbo].[AppUser_Notification]
			WHERE 
			[UserNotificationId] = @UserNotificationId
			";

		internal static string ctprAppUser_Notification_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[AppUser_Notification]
			WHERE 
			[UserNotificationId] = @UserNotificationId
			";

		internal static string ctprAppUser_Notification_SelectAllByNotificationId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[UserNotificationId]
			,[NotificationId]
			,[UserId]
			,[ReadDate]
			,[IsReaded]
			FROM [dbo].[AppUser_Notification]
			WHERE 
			[NotificationId] = @NotificationId OR ([NotificationId] IS NULL AND @NotificationId IS NULL)
			";

		internal static string ctprAppUser_Notification_SelectAllByNotificationIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Notification]
			WHERE 
			[NotificationId] = @NotificationId OR ([NotificationId] IS NULL AND @NotificationId IS NULL)
			";

		internal static string ctprAppUser_Notification_DeleteAllByNotificationId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser_Notification]
			WHERE 
			[NotificationId] = @NotificationId OR ([NotificationId] IS NULL AND @NotificationId IS NULL)
			";

		internal static string ctprAppUser_Notification_SelectAllByUserId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[UserNotificationId]
			,[NotificationId]
			,[UserId]
			,[ReadDate]
			,[IsReaded]
			FROM [dbo].[AppUser_Notification]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_Notification_SelectAllByUserIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Notification]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_Notification_DeleteAllByUserId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser_Notification]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_Notification_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[AppUser_Notification]
			(
			[NotificationId]
			,[UserId]
			,[ReadDate]
			,[IsReaded]
			)
			VALUES
			(
			@NotificationId
			,@UserId
			,@ReadDate
			,@IsReaded
			)
			SELECT 
			@UserNotificationId = [UserNotificationId]
			,@NotificationId = [NotificationId]
			,@UserId = [UserId]
			,@ReadDate = [ReadDate]
			,@IsReaded = [IsReaded]
			FROM [dbo].[AppUser_Notification]
			WHERE 
			[UserNotificationId] = SCOPE_IDENTITY()
			";

		internal static string ctprAppUser_Notification_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[UserNotificationId]
			,[NotificationId]
			,[UserId]
			,[ReadDate]
			,[IsReaded]
			FROM [dbo].[AppUser_Notification]
			";

		internal static string ctprAppUser_Notification_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Notification]
			";

		internal static string ctprAppUser_Notification_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppUser_Notification]
			##CRITERIA##
			";

		internal static string ctprAppUser_Notification_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[UserNotificationId]
			,[NotificationId]
			,[UserId]
			,[ReadDate]
			,[IsReaded]
			FROM [dbo].[AppUser_Notification]
			##CRITERIA##
			";

		internal static string ctprAppUser_Notification_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Notification]
			##CRITERIA##
			";

		internal static string ctprAppUser_Notification_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[AppUser_Notification]
			SET
			[NotificationId] = @NotificationId
			,[UserId] = @UserId
			,[ReadDate] = @ReadDate
			,[IsReaded] = @IsReaded
			WHERE 
			[UserNotificationId] = @UserNotificationId
			SELECT 
			@UserNotificationId = [UserNotificationId]
			,@NotificationId = [NotificationId]
			,@UserId = [UserId]
			,@ReadDate = [ReadDate]
			,@IsReaded = [IsReaded]
			FROM [dbo].[AppUser_Notification]
			WHERE 
			[UserNotificationId] = @UserNotificationId
			";

	}
}
#endregion
