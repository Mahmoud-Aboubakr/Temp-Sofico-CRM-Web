/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrderMessages : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _salesMessageId;
		protected Int64? _salesId;
		protected Int32? _userId;
		protected DateTime? _messageDate;
		protected string _message;
		#endregion

		#region class methods
		public DAOSalesOrderMessages()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table SalesOrder_Messages based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSalesOrderMessages
		///</returns>
		///<parameters>
		///Int64? salesMessageId
		///</parameters>
		public static DAOSalesOrderMessages SelectOne(Int64? salesMessageId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Messages");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesMessageId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)salesMessageId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSalesOrderMessages retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSalesOrderMessages();
					retObj._salesMessageId					 = Convert.IsDBNull(dt.Rows[0]["SalesMessageId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesMessageId"];
					retObj._salesId					 = Convert.IsDBNull(dt.Rows[0]["SalesId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._messageDate					 = Convert.IsDBNull(dt.Rows[0]["MessageDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["MessageDate"];
					retObj._message					 = Convert.IsDBNull(dt.Rows[0]["Message"]) ? null : (string)dt.Rows[0]["Message"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table SalesOrder_Messages based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesMessageId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_salesMessageId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Messages based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderMessages.
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static IList<DAOSalesOrderMessages> SelectAllBySalesId(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_SelectAllBySalesId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Messages");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderMessages> objList = new List<DAOSalesOrderMessages>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderMessages retObj = new DAOSalesOrderMessages();
						retObj._salesMessageId					 = Convert.IsDBNull(row["SalesMessageId"]) ? (Int64?)null : (Int64?)row["SalesMessageId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._messageDate					 = Convert.IsDBNull(row["MessageDate"]) ? (DateTime?)null : (DateTime?)row["MessageDate"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static Int32 SelectAllBySalesIdCount(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_SelectAllBySalesIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Messages with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId
		///</parameters>
		public static void DeleteAllBySalesId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_DeleteAllBySalesId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table SalesOrder_Messages
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesMessageId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _salesMessageId));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MessageDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_messageDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_salesMessageId					 = Convert.IsDBNull(command.Parameters["@SalesMessageId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesMessageId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_messageDate					 = Convert.IsDBNull(command.Parameters["@MessageDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@MessageDate"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrder_Messages
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderMessages.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrderMessages> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Messages");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderMessages> objList = new List<DAOSalesOrderMessages>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderMessages retObj = new DAOSalesOrderMessages();
						retObj._salesMessageId					 = Convert.IsDBNull(row["SalesMessageId"]) ? (Int64?)null : (Int64?)row["SalesMessageId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._messageDate					 = Convert.IsDBNull(row["MessageDate"]) ? (DateTime?)null : (DateTime?)row["MessageDate"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrder_Messages
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Messages_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Messages");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "SalesMessageId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesMessageId"]) ? (Int64?)null : (Int64?)row["SalesMessageId"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "MessageDate", true) == 0) lst.Add(Convert.IsDBNull(row["MessageDate"]) ? (DateTime?)null : (DateTime?)row["MessageDate"]);
						if (string.Compare(projection.Member, "Message", true) == 0) lst.Add(Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Messages
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderMessages.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrderMessages> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Messages_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Messages");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderMessages> objList = new List<DAOSalesOrderMessages>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderMessages retObj = new DAOSalesOrderMessages();
						retObj._salesMessageId					 = Convert.IsDBNull(row["SalesMessageId"]) ? (Int64?)null : (Int64?)row["SalesMessageId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._messageDate					 = Convert.IsDBNull(row["MessageDate"]) ? (DateTime?)null : (DateTime?)row["MessageDate"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Messages
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Messages_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table SalesOrder_Messages based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Messages_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesMessageId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_salesMessageId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MessageDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_messageDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_salesMessageId					 = Convert.IsDBNull(command.Parameters["@SalesMessageId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesMessageId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_messageDate					 = Convert.IsDBNull(command.Parameters["@MessageDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@MessageDate"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? SalesMessageId
		{
			get
			{
				return _salesMessageId;
			}
			set
			{
				_salesMessageId = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public DateTime? MessageDate
		{
			get
			{
				return _messageDate;
			}
			set
			{
				_messageDate = value;
			}
		}

		public string Message
		{
			get
			{
				return _message;
			}
			set
			{
				_message = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrder_Messages_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[SalesMessageId]
			,[SalesId]
			,[UserId]
			,[MessageDate]
			,[Message]
			FROM [dbo].[SalesOrder_Messages]
			WHERE 
			[SalesMessageId] = @SalesMessageId
			";

		internal static string ctprSalesOrder_Messages_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Messages]
			WHERE 
			[SalesMessageId] = @SalesMessageId
			";

		internal static string ctprSalesOrder_Messages_SelectAllBySalesId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesMessageId]
			,[SalesId]
			,[UserId]
			,[MessageDate]
			,[Message]
			FROM [dbo].[SalesOrder_Messages]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Messages_SelectAllBySalesIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Messages]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Messages_DeleteAllBySalesId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Messages]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Messages_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[SalesOrder_Messages]
			(
			[SalesId]
			,[UserId]
			,[MessageDate]
			,[Message]
			)
			VALUES
			(
			@SalesId
			,@UserId
			,@MessageDate
			,@Message
			)
			SELECT 
			@SalesMessageId = [SalesMessageId]
			,@SalesId = [SalesId]
			,@UserId = [UserId]
			,@MessageDate = [MessageDate]
			,@Message = [Message]
			FROM [dbo].[SalesOrder_Messages]
			WHERE 
			[SalesMessageId] = SCOPE_IDENTITY()
			";

		internal static string ctprSalesOrder_Messages_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[SalesMessageId]
			,[SalesId]
			,[UserId]
			,[MessageDate]
			,[Message]
			FROM [dbo].[SalesOrder_Messages]
			";

		internal static string ctprSalesOrder_Messages_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Messages]
			";

		internal static string ctprSalesOrder_Messages_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrder_Messages]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Messages_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[SalesMessageId]
			,[SalesId]
			,[UserId]
			,[MessageDate]
			,[Message]
			FROM [dbo].[SalesOrder_Messages]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Messages_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Messages]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Messages_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[SalesOrder_Messages]
			SET
			[SalesId] = @SalesId
			,[UserId] = @UserId
			,[MessageDate] = @MessageDate
			,[Message] = @Message
			WHERE 
			[SalesMessageId] = @SalesMessageId
			SELECT 
			@SalesMessageId = [SalesMessageId]
			,@SalesId = [SalesId]
			,@UserId = [UserId]
			,@MessageDate = [MessageDate]
			,@Message = [Message]
			FROM [dbo].[SalesOrder_Messages]
			WHERE 
			[SalesMessageId] = @SalesMessageId
			";

	}
}
#endregion
