/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrderLogVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _userId;
		protected DateTime? _logDate;
		protected Int32? _salesOrderLogTypeId;
		protected Int64? _salesId;
		protected Int64? _logId;
		protected string _salesOrderLogTypeNameEn;
		protected string _salesOrderLogTypeNameAr;
		protected string _realName;
		#endregion

		#region class methods
		public DAOSalesOrderLogVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrder_LogVw
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderLogVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrderLogVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_LogVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_LogVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderLogVw> objList = new List<DAOSalesOrderLogVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderLogVw retObj = new DAOSalesOrderLogVw();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._logDate					 = Convert.IsDBNull(row["LogDate"]) ? (DateTime?)null : (DateTime?)row["LogDate"];
						retObj._salesOrderLogTypeId					 = Convert.IsDBNull(row["SalesOrderLogTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderLogTypeId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._logId					 = Convert.IsDBNull(row["LogId"]) ? (Int64?)null : (Int64?)row["LogId"];
						retObj._salesOrderLogTypeNameEn					 = Convert.IsDBNull(row["SalesOrderLogTypeNameEn"]) ? null : (string)row["SalesOrderLogTypeNameEn"];
						retObj._salesOrderLogTypeNameAr					 = Convert.IsDBNull(row["SalesOrderLogTypeNameAr"]) ? null : (string)row["SalesOrderLogTypeNameAr"];
						retObj._realName					 = Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_LogVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrder_LogVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_LogVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_LogVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "LogDate", true) == 0) lst.Add(Convert.IsDBNull(row["LogDate"]) ? (DateTime?)null : (DateTime?)row["LogDate"]);
						if (string.Compare(projection.Member, "SalesOrderLogTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderLogTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderLogTypeId"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "LogId", true) == 0) lst.Add(Convert.IsDBNull(row["LogId"]) ? (Int64?)null : (Int64?)row["LogId"]);
						if (string.Compare(projection.Member, "SalesOrderLogTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderLogTypeNameEn"]) ? null : (string)row["SalesOrderLogTypeNameEn"]);
						if (string.Compare(projection.Member, "SalesOrderLogTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderLogTypeNameAr"]) ? null : (string)row["SalesOrderLogTypeNameAr"]);
						if (string.Compare(projection.Member, "RealName", true) == 0) lst.Add(Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrder_LogVw
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderLogVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrderLogVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_LogVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_LogVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderLogVw> objList = new List<DAOSalesOrderLogVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderLogVw retObj = new DAOSalesOrderLogVw();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._logDate					 = Convert.IsDBNull(row["LogDate"]) ? (DateTime?)null : (DateTime?)row["LogDate"];
						retObj._salesOrderLogTypeId					 = Convert.IsDBNull(row["SalesOrderLogTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderLogTypeId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._logId					 = Convert.IsDBNull(row["LogId"]) ? (Int64?)null : (Int64?)row["LogId"];
						retObj._salesOrderLogTypeNameEn					 = Convert.IsDBNull(row["SalesOrderLogTypeNameEn"]) ? null : (string)row["SalesOrderLogTypeNameEn"];
						retObj._salesOrderLogTypeNameAr					 = Convert.IsDBNull(row["SalesOrderLogTypeNameAr"]) ? null : (string)row["SalesOrderLogTypeNameAr"];
						retObj._realName					 = Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrder_LogVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_LogVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public DateTime? LogDate
		{
			get
			{
				return _logDate;
			}
			set
			{
				_logDate = value;
			}
		}

		public Int32? SalesOrderLogTypeId
		{
			get
			{
				return _salesOrderLogTypeId;
			}
			set
			{
				_salesOrderLogTypeId = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public Int64? LogId
		{
			get
			{
				return _logId;
			}
			set
			{
				_logId = value;
			}
		}

		public string SalesOrderLogTypeNameEn
		{
			get
			{
				return _salesOrderLogTypeNameEn;
			}
			set
			{
				_salesOrderLogTypeNameEn = value;
			}
		}

		public string SalesOrderLogTypeNameAr
		{
			get
			{
				return _salesOrderLogTypeNameAr;
			}
			set
			{
				_salesOrderLogTypeNameAr = value;
			}
		}

		public string RealName
		{
			get
			{
				return _realName;
			}
			set
			{
				_realName = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrder_LogVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[LogDate]
			,[SalesOrderLogTypeId]
			,[SalesId]
			,[LogId]
			,[SalesOrderLogTypeNameEn]
			,[SalesOrderLogTypeNameAr]
			,[RealName]
			FROM [dbo].[SalesOrder_LogVw]
			";

		internal static string ctprSalesOrder_LogVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_LogVw]
			";

		internal static string ctprSalesOrder_LogVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrder_LogVw]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_LogVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[UserId]
			,[LogDate]
			,[SalesOrderLogTypeId]
			,[SalesId]
			,[LogId]
			,[SalesOrderLogTypeNameEn]
			,[SalesOrderLogTypeNameAr]
			,[RealName]
			FROM [dbo].[SalesOrder_LogVw]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_LogVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_LogVw]
			##CRITERIA##
			";

	}
}
#endregion
