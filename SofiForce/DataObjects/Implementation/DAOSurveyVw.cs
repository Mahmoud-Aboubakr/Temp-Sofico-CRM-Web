/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSurveyVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _surveyId;
		protected string _surveyCode;
		protected DateTime? _createDate;
		protected Int32? _serveyGroupId;
		protected string _surveyNameEn;
		protected string _surveyNameAr;
		protected bool? _isActive;
		protected string _serveyGroupNameEn;
		protected string _serveyGroupNameAr;
		#endregion

		#region class methods
		public DAOSurveyVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SurveyVw
		///</Summary>
		///<returns>
		///IList-DAOSurveyVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSurveyVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSurveyVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SurveyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSurveyVw> objList = new List<DAOSurveyVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSurveyVw retObj = new DAOSurveyVw();
						retObj._surveyId					 = Convert.IsDBNull(row["SurveyId"]) ? (Int32?)null : (Int32?)row["SurveyId"];
						retObj._surveyCode					 = Convert.IsDBNull(row["SurveyCode"]) ? null : (string)row["SurveyCode"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._serveyGroupId					 = Convert.IsDBNull(row["ServeyGroupId"]) ? (Int32?)null : (Int32?)row["ServeyGroupId"];
						retObj._surveyNameEn					 = Convert.IsDBNull(row["SurveyNameEn"]) ? null : (string)row["SurveyNameEn"];
						retObj._surveyNameAr					 = Convert.IsDBNull(row["SurveyNameAr"]) ? null : (string)row["SurveyNameAr"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._serveyGroupNameEn					 = Convert.IsDBNull(row["ServeyGroupNameEn"]) ? null : (string)row["ServeyGroupNameEn"];
						retObj._serveyGroupNameAr					 = Convert.IsDBNull(row["ServeyGroupNameAr"]) ? null : (string)row["ServeyGroupNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSurveyVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSurveyVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSurveyVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SurveyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "SurveyId", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyId"]) ? (Int32?)null : (Int32?)row["SurveyId"]);
						if (string.Compare(projection.Member, "SurveyCode", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyCode"]) ? null : (string)row["SurveyCode"]);
						if (string.Compare(projection.Member, "CreateDate", true) == 0) lst.Add(Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"]);
						if (string.Compare(projection.Member, "ServeyGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyGroupId"]) ? (Int32?)null : (Int32?)row["ServeyGroupId"]);
						if (string.Compare(projection.Member, "SurveyNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyNameEn"]) ? null : (string)row["SurveyNameEn"]);
						if (string.Compare(projection.Member, "SurveyNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyNameAr"]) ? null : (string)row["SurveyNameAr"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "ServeyGroupNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyGroupNameEn"]) ? null : (string)row["ServeyGroupNameEn"]);
						if (string.Compare(projection.Member, "ServeyGroupNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyGroupNameAr"]) ? null : (string)row["ServeyGroupNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SurveyVw
		///</Summary>
		///<returns>
		///IList-DAOSurveyVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSurveyVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSurveyVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SurveyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSurveyVw> objList = new List<DAOSurveyVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSurveyVw retObj = new DAOSurveyVw();
						retObj._surveyId					 = Convert.IsDBNull(row["SurveyId"]) ? (Int32?)null : (Int32?)row["SurveyId"];
						retObj._surveyCode					 = Convert.IsDBNull(row["SurveyCode"]) ? null : (string)row["SurveyCode"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._serveyGroupId					 = Convert.IsDBNull(row["ServeyGroupId"]) ? (Int32?)null : (Int32?)row["ServeyGroupId"];
						retObj._surveyNameEn					 = Convert.IsDBNull(row["SurveyNameEn"]) ? null : (string)row["SurveyNameEn"];
						retObj._surveyNameAr					 = Convert.IsDBNull(row["SurveyNameAr"]) ? null : (string)row["SurveyNameAr"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._serveyGroupNameEn					 = Convert.IsDBNull(row["ServeyGroupNameEn"]) ? null : (string)row["ServeyGroupNameEn"];
						retObj._serveyGroupNameAr					 = Convert.IsDBNull(row["ServeyGroupNameAr"]) ? null : (string)row["ServeyGroupNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SurveyVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSurveyVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? SurveyId
		{
			get
			{
				return _surveyId;
			}
			set
			{
				_surveyId = value;
			}
		}

		public string SurveyCode
		{
			get
			{
				return _surveyCode;
			}
			set
			{
				_surveyCode = value;
			}
		}

		public DateTime? CreateDate
		{
			get
			{
				return _createDate;
			}
			set
			{
				_createDate = value;
			}
		}

		public Int32? ServeyGroupId
		{
			get
			{
				return _serveyGroupId;
			}
			set
			{
				_serveyGroupId = value;
			}
		}

		public string SurveyNameEn
		{
			get
			{
				return _surveyNameEn;
			}
			set
			{
				_surveyNameEn = value;
			}
		}

		public string SurveyNameAr
		{
			get
			{
				return _surveyNameAr;
			}
			set
			{
				_surveyNameAr = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public string ServeyGroupNameEn
		{
			get
			{
				return _serveyGroupNameEn;
			}
			set
			{
				_serveyGroupNameEn = value;
			}
		}

		public string ServeyGroupNameAr
		{
			get
			{
				return _serveyGroupNameAr;
			}
			set
			{
				_serveyGroupNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSurveyVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[SurveyId]
			,[SurveyCode]
			,[CreateDate]
			,[ServeyGroupId]
			,[SurveyNameEn]
			,[SurveyNameAr]
			,[IsActive]
			,[ServeyGroupNameEn]
			,[ServeyGroupNameAr]
			FROM [dbo].[SurveyVw]
			";

		internal static string ctprSurveyVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SurveyVw]
			";

		internal static string ctprSurveyVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SurveyVw]
			##CRITERIA##
			";

		internal static string ctprSurveyVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[SurveyId]
			,[SurveyCode]
			,[CreateDate]
			,[ServeyGroupId]
			,[SurveyNameEn]
			,[SurveyNameAr]
			,[IsActive]
			,[ServeyGroupNameEn]
			,[ServeyGroupNameAr]
			FROM [dbo].[SurveyVw]
			##CRITERIA##
			";

		internal static string ctprSurveyVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SurveyVw]
			##CRITERIA##
			";

	}
}
#endregion
