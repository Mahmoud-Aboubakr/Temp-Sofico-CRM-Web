/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOOperationRequestVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _operationId;
		protected string _operationCode;
		protected Int32? _agentId;
		protected Int32? _operationTypeId;
		protected Int32? _representativeId;
		protected DateTime? _startDate;
		protected Int32? _targetDays;
		protected string _mapPoints;
		protected bool? _isClosed;
		protected DateTime? _closeDate;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _operationTypeNameEn;
		protected string _operationTypeNameAr;
		protected string _phone;
		protected DateTime? _operationDate;
		protected decimal? _accuracy;
		protected decimal? _clientsPerformance;
		protected decimal? _daysPerformance;
		protected Int32? _actualClients;
		protected Int32? _targetClients;
		protected Int32? _actualDays;
		protected Int32? _governerateId;
		protected string _governerateNameAr;
		protected string _governerateNameEn;
		#endregion

		#region class methods
		public DAOOperationRequestVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table OperationRequestVw
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOOperationRequestVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequestVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequestVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestVw> objList = new List<DAOOperationRequestVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestVw retObj = new DAOOperationRequestVw();
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationCode					 = Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._targetDays					 = Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"];
						retObj._mapPoints					 = Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._operationTypeNameEn					 = Convert.IsDBNull(row["OperationTypeNameEn"]) ? null : (string)row["OperationTypeNameEn"];
						retObj._operationTypeNameAr					 = Convert.IsDBNull(row["OperationTypeNameAr"]) ? null : (string)row["OperationTypeNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._clientsPerformance					 = Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"];
						retObj._daysPerformance					 = Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"];
						retObj._actualClients					 = Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"];
						retObj._targetClients					 = Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"];
						retObj._actualDays					 = Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequestVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiOperationRequestVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequestVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequestVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "OperationId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"]);
						if (string.Compare(projection.Member, "OperationCode", true) == 0) lst.Add(Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"]);
						if (string.Compare(projection.Member, "AgentId", true) == 0) lst.Add(Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"]);
						if (string.Compare(projection.Member, "OperationTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "StartDate", true) == 0) lst.Add(Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"]);
						if (string.Compare(projection.Member, "TargetDays", true) == 0) lst.Add(Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"]);
						if (string.Compare(projection.Member, "MapPoints", true) == 0) lst.Add(Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"]);
						if (string.Compare(projection.Member, "IsClosed", true) == 0) lst.Add(Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"]);
						if (string.Compare(projection.Member, "CloseDate", true) == 0) lst.Add(Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "OperationTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["OperationTypeNameEn"]) ? null : (string)row["OperationTypeNameEn"]);
						if (string.Compare(projection.Member, "OperationTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["OperationTypeNameAr"]) ? null : (string)row["OperationTypeNameAr"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "OperationDate", true) == 0) lst.Add(Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"]);
						if (string.Compare(projection.Member, "Accuracy", true) == 0) lst.Add(Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"]);
						if (string.Compare(projection.Member, "ClientsPerformance", true) == 0) lst.Add(Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"]);
						if (string.Compare(projection.Member, "DaysPerformance", true) == 0) lst.Add(Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"]);
						if (string.Compare(projection.Member, "ActualClients", true) == 0) lst.Add(Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"]);
						if (string.Compare(projection.Member, "TargetClients", true) == 0) lst.Add(Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"]);
						if (string.Compare(projection.Member, "ActualDays", true) == 0) lst.Add(Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "GovernerateNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"]);
						if (string.Compare(projection.Member, "GovernerateNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api OperationRequestVw
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOOperationRequestVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequestVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequestVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestVw> objList = new List<DAOOperationRequestVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestVw retObj = new DAOOperationRequestVw();
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationCode					 = Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._targetDays					 = Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"];
						retObj._mapPoints					 = Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._operationTypeNameEn					 = Convert.IsDBNull(row["OperationTypeNameEn"]) ? null : (string)row["OperationTypeNameEn"];
						retObj._operationTypeNameAr					 = Convert.IsDBNull(row["OperationTypeNameAr"]) ? null : (string)row["OperationTypeNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._clientsPerformance					 = Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"];
						retObj._daysPerformance					 = Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"];
						retObj._actualClients					 = Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"];
						retObj._targetClients					 = Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"];
						retObj._actualDays					 = Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api OperationRequestVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequestVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? OperationId
		{
			get
			{
				return _operationId;
			}
			set
			{
				_operationId = value;
			}
		}

		public string OperationCode
		{
			get
			{
				return _operationCode;
			}
			set
			{
				_operationCode = value;
			}
		}

		public Int32? AgentId
		{
			get
			{
				return _agentId;
			}
			set
			{
				_agentId = value;
			}
		}

		public Int32? OperationTypeId
		{
			get
			{
				return _operationTypeId;
			}
			set
			{
				_operationTypeId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public DateTime? StartDate
		{
			get
			{
				return _startDate;
			}
			set
			{
				_startDate = value;
			}
		}

		public Int32? TargetDays
		{
			get
			{
				return _targetDays;
			}
			set
			{
				_targetDays = value;
			}
		}

		public string MapPoints
		{
			get
			{
				return _mapPoints;
			}
			set
			{
				_mapPoints = value;
			}
		}

		public bool? IsClosed
		{
			get
			{
				return _isClosed;
			}
			set
			{
				_isClosed = value;
			}
		}

		public DateTime? CloseDate
		{
			get
			{
				return _closeDate;
			}
			set
			{
				_closeDate = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public string OperationTypeNameEn
		{
			get
			{
				return _operationTypeNameEn;
			}
			set
			{
				_operationTypeNameEn = value;
			}
		}

		public string OperationTypeNameAr
		{
			get
			{
				return _operationTypeNameAr;
			}
			set
			{
				_operationTypeNameAr = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public DateTime? OperationDate
		{
			get
			{
				return _operationDate;
			}
			set
			{
				_operationDate = value;
			}
		}

		public decimal? Accuracy
		{
			get
			{
				return _accuracy;
			}
			set
			{
				_accuracy = value;
			}
		}

		public decimal? ClientsPerformance
		{
			get
			{
				return _clientsPerformance;
			}
			set
			{
				_clientsPerformance = value;
			}
		}

		public decimal? DaysPerformance
		{
			get
			{
				return _daysPerformance;
			}
			set
			{
				_daysPerformance = value;
			}
		}

		public Int32? ActualClients
		{
			get
			{
				return _actualClients;
			}
			set
			{
				_actualClients = value;
			}
		}

		public Int32? TargetClients
		{
			get
			{
				return _targetClients;
			}
			set
			{
				_targetClients = value;
			}
		}

		public Int32? ActualDays
		{
			get
			{
				return _actualDays;
			}
			set
			{
				_actualDays = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public string GovernerateNameAr
		{
			get
			{
				return _governerateNameAr;
			}
			set
			{
				_governerateNameAr = value;
			}
		}

		public string GovernerateNameEn
		{
			get
			{
				return _governerateNameEn;
			}
			set
			{
				_governerateNameEn = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprOperationRequestVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[RepresentativeId]
			,[StartDate]
			,[TargetDays]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[OperationTypeNameEn]
			,[OperationTypeNameAr]
			,[Phone]
			,[OperationDate]
			,[Accuracy]
			,[ClientsPerformance]
			,[DaysPerformance]
			,[ActualClients]
			,[TargetClients]
			,[ActualDays]
			,[GovernerateId]
			,[GovernerateNameAr]
			,[GovernerateNameEn]
			FROM [dbo].[OperationRequestVw]
			";

		internal static string ctprOperationRequestVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequestVw]
			";

		internal static string ctprOperationRequestVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[OperationRequestVw]
			##CRITERIA##
			";

		internal static string ctprOperationRequestVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[RepresentativeId]
			,[StartDate]
			,[TargetDays]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[OperationTypeNameEn]
			,[OperationTypeNameAr]
			,[Phone]
			,[OperationDate]
			,[Accuracy]
			,[ClientsPerformance]
			,[DaysPerformance]
			,[ActualClients]
			,[TargetClients]
			,[ActualDays]
			,[GovernerateId]
			,[GovernerateNameAr]
			,[GovernerateNameEn]
			FROM [dbo].[OperationRequestVw]
			##CRITERIA##
			";

		internal static string ctprOperationRequestVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[OperationRequestVw]
			##CRITERIA##
			";

	}
}
#endregion
