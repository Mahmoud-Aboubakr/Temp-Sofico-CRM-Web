/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOArticleDetailVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected DateTime? _articleTime;
		protected Int32? _articleId;
		protected string _articleContentAr;
		protected string _articleContentEn;
		protected string _articleTitleAr;
		protected string _articleTitleEn;
		protected string _articleImage;
		protected bool? _isActive;
		protected string _articleCategoryNameEn;
		protected string _articleCategoryNameAr;
		#endregion

		#region class methods
		public DAOArticleDetailVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Article_DetailVw
		///</Summary>
		///<returns>
		///IList-DAOArticleDetailVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOArticleDetailVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_DetailVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_DetailVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOArticleDetailVw> objList = new List<DAOArticleDetailVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOArticleDetailVw retObj = new DAOArticleDetailVw();
						retObj._articleTime					 = Convert.IsDBNull(row["ArticleTime"]) ? (DateTime?)null : (DateTime?)row["ArticleTime"];
						retObj._articleId					 = Convert.IsDBNull(row["ArticleId"]) ? (Int32?)null : (Int32?)row["ArticleId"];
						retObj._articleContentAr					 = Convert.IsDBNull(row["ArticleContentAr"]) ? null : (string)row["ArticleContentAr"];
						retObj._articleContentEn					 = Convert.IsDBNull(row["ArticleContentEn"]) ? null : (string)row["ArticleContentEn"];
						retObj._articleTitleAr					 = Convert.IsDBNull(row["ArticleTitleAr"]) ? null : (string)row["ArticleTitleAr"];
						retObj._articleTitleEn					 = Convert.IsDBNull(row["ArticleTitleEn"]) ? null : (string)row["ArticleTitleEn"];
						retObj._articleImage					 = Convert.IsDBNull(row["ArticleImage"]) ? null : (string)row["ArticleImage"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._articleCategoryNameEn					 = Convert.IsDBNull(row["ArticleCategoryNameEn"]) ? null : (string)row["ArticleCategoryNameEn"];
						retObj._articleCategoryNameAr					 = Convert.IsDBNull(row["ArticleCategoryNameAr"]) ? null : (string)row["ArticleCategoryNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_DetailVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiArticle_DetailVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprArticle_DetailVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_DetailVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ArticleTime", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleTime"]) ? (DateTime?)null : (DateTime?)row["ArticleTime"]);
						if (string.Compare(projection.Member, "ArticleId", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleId"]) ? (Int32?)null : (Int32?)row["ArticleId"]);
						if (string.Compare(projection.Member, "ArticleContentAr", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleContentAr"]) ? null : (string)row["ArticleContentAr"]);
						if (string.Compare(projection.Member, "ArticleContentEn", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleContentEn"]) ? null : (string)row["ArticleContentEn"]);
						if (string.Compare(projection.Member, "ArticleTitleAr", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleTitleAr"]) ? null : (string)row["ArticleTitleAr"]);
						if (string.Compare(projection.Member, "ArticleTitleEn", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleTitleEn"]) ? null : (string)row["ArticleTitleEn"]);
						if (string.Compare(projection.Member, "ArticleImage", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleImage"]) ? null : (string)row["ArticleImage"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "ArticleCategoryNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleCategoryNameEn"]) ? null : (string)row["ArticleCategoryNameEn"]);
						if (string.Compare(projection.Member, "ArticleCategoryNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleCategoryNameAr"]) ? null : (string)row["ArticleCategoryNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Article_DetailVw
		///</Summary>
		///<returns>
		///IList-DAOArticleDetailVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOArticleDetailVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprArticle_DetailVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_DetailVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOArticleDetailVw> objList = new List<DAOArticleDetailVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOArticleDetailVw retObj = new DAOArticleDetailVw();
						retObj._articleTime					 = Convert.IsDBNull(row["ArticleTime"]) ? (DateTime?)null : (DateTime?)row["ArticleTime"];
						retObj._articleId					 = Convert.IsDBNull(row["ArticleId"]) ? (Int32?)null : (Int32?)row["ArticleId"];
						retObj._articleContentAr					 = Convert.IsDBNull(row["ArticleContentAr"]) ? null : (string)row["ArticleContentAr"];
						retObj._articleContentEn					 = Convert.IsDBNull(row["ArticleContentEn"]) ? null : (string)row["ArticleContentEn"];
						retObj._articleTitleAr					 = Convert.IsDBNull(row["ArticleTitleAr"]) ? null : (string)row["ArticleTitleAr"];
						retObj._articleTitleEn					 = Convert.IsDBNull(row["ArticleTitleEn"]) ? null : (string)row["ArticleTitleEn"];
						retObj._articleImage					 = Convert.IsDBNull(row["ArticleImage"]) ? null : (string)row["ArticleImage"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._articleCategoryNameEn					 = Convert.IsDBNull(row["ArticleCategoryNameEn"]) ? null : (string)row["ArticleCategoryNameEn"];
						retObj._articleCategoryNameAr					 = Convert.IsDBNull(row["ArticleCategoryNameAr"]) ? null : (string)row["ArticleCategoryNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Article_DetailVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprArticle_DetailVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public DateTime? ArticleTime
		{
			get
			{
				return _articleTime;
			}
			set
			{
				_articleTime = value;
			}
		}

		public Int32? ArticleId
		{
			get
			{
				return _articleId;
			}
			set
			{
				_articleId = value;
			}
		}

		public string ArticleContentAr
		{
			get
			{
				return _articleContentAr;
			}
			set
			{
				_articleContentAr = value;
			}
		}

		public string ArticleContentEn
		{
			get
			{
				return _articleContentEn;
			}
			set
			{
				_articleContentEn = value;
			}
		}

		public string ArticleTitleAr
		{
			get
			{
				return _articleTitleAr;
			}
			set
			{
				_articleTitleAr = value;
			}
		}

		public string ArticleTitleEn
		{
			get
			{
				return _articleTitleEn;
			}
			set
			{
				_articleTitleEn = value;
			}
		}

		public string ArticleImage
		{
			get
			{
				return _articleImage;
			}
			set
			{
				_articleImage = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public string ArticleCategoryNameEn
		{
			get
			{
				return _articleCategoryNameEn;
			}
			set
			{
				_articleCategoryNameEn = value;
			}
		}

		public string ArticleCategoryNameAr
		{
			get
			{
				return _articleCategoryNameAr;
			}
			set
			{
				_articleCategoryNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprArticle_DetailVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ArticleTime]
			,[ArticleId]
			,[ArticleContentAr]
			,[ArticleContentEn]
			,[ArticleTitleAr]
			,[ArticleTitleEn]
			,[ArticleImage]
			,[IsActive]
			,[ArticleCategoryNameEn]
			,[ArticleCategoryNameAr]
			FROM [dbo].[Article_DetailVw]
			";

		internal static string ctprArticle_DetailVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Article_DetailVw]
			";

		internal static string ctprArticle_DetailVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Article_DetailVw]
			##CRITERIA##
			";

		internal static string ctprArticle_DetailVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ArticleTime]
			,[ArticleId]
			,[ArticleContentAr]
			,[ArticleContentEn]
			,[ArticleTitleAr]
			,[ArticleTitleEn]
			,[ArticleImage]
			,[IsActive]
			,[ArticleCategoryNameEn]
			,[ArticleCategoryNameAr]
			FROM [dbo].[Article_DetailVw]
			##CRITERIA##
			";

		internal static string ctprArticle_DetailVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Article_DetailVw]
			##CRITERIA##
			";

	}
}
#endregion
