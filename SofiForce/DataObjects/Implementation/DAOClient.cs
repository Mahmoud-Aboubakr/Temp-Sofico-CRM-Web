/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClient : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _clientId;
		protected Int32? _clientAccountId;
		protected Int32? _clientTypeId;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _businessUnitId;
		protected Int32? _branchId;
		protected Int32? _regionId;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected Int32? _locationLevelId;
		protected Int32? _clientGroupId;
		protected Int32? _clientGroupSubId;
		protected Int32? _clientClassificationId;
		protected decimal? _creditLimit;
		protected decimal? _creditBalance;
		protected Int32? _paymentTermId;
		protected bool? _isChain;
		protected string _building;
		protected string _floor;
		protected string _property;
		protected string _address;
		protected string _landmark;
		protected string _phone;
		protected string _mobile;
		protected string _whatsApp;
		protected bool? _isActive;
		protected double? _latitude;
		protected double? _longitude;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool? _isTaxable;
		protected bool? _isCashDiscount;
		protected string _responsibleNameAr;
		protected string _responsibleNameEn;
		protected string _taxCode;
		protected string _commercialCode;
		protected bool? _isNew;
		protected bool? _needValidation;
		protected Int32? _cashGroupId;
		protected bool? _inRoute;
		protected Int32? _salesChannelId;
		protected Int32? _salesPoolId;
		protected Int32? _userId;
		protected Int32? _points;
		protected decimal? _wallet;
		protected Int32? _dealId;
		#endregion

		#region class methods
		public DAOClient()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClient
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static DAOClient SelectOne(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClient retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClient();
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._clientAccountId					 = Convert.IsDBNull(dt.Rows[0]["ClientAccountId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientAccountId"];
					retObj._clientTypeId					 = Convert.IsDBNull(dt.Rows[0]["ClientTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientTypeId"];
					retObj._clientCode					 = Convert.IsDBNull(dt.Rows[0]["ClientCode"]) ? null : (string)dt.Rows[0]["ClientCode"];
					retObj._clientNameAr					 = Convert.IsDBNull(dt.Rows[0]["ClientNameAr"]) ? null : (string)dt.Rows[0]["ClientNameAr"];
					retObj._clientNameEn					 = Convert.IsDBNull(dt.Rows[0]["ClientNameEn"]) ? null : (string)dt.Rows[0]["ClientNameEn"];
					retObj._businessUnitId					 = Convert.IsDBNull(dt.Rows[0]["BusinessUnitId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BusinessUnitId"];
					retObj._branchId					 = Convert.IsDBNull(dt.Rows[0]["BranchId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BranchId"];
					retObj._regionId					 = Convert.IsDBNull(dt.Rows[0]["RegionId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RegionId"];
					retObj._governerateId					 = Convert.IsDBNull(dt.Rows[0]["GovernerateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["GovernerateId"];
					retObj._cityId					 = Convert.IsDBNull(dt.Rows[0]["CityId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CityId"];
					retObj._locationLevelId					 = Convert.IsDBNull(dt.Rows[0]["LocationLevelId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["LocationLevelId"];
					retObj._clientGroupId					 = Convert.IsDBNull(dt.Rows[0]["ClientGroupId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientGroupId"];
					retObj._clientGroupSubId					 = Convert.IsDBNull(dt.Rows[0]["ClientGroupSubId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientGroupSubId"];
					retObj._clientClassificationId					 = Convert.IsDBNull(dt.Rows[0]["ClientClassificationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientClassificationId"];
					retObj._creditLimit					 = Convert.IsDBNull(dt.Rows[0]["CreditLimit"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CreditLimit"];
					retObj._creditBalance					 = Convert.IsDBNull(dt.Rows[0]["CreditBalance"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CreditBalance"];
					retObj._paymentTermId					 = Convert.IsDBNull(dt.Rows[0]["PaymentTermId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PaymentTermId"];
					retObj._isChain					 = Convert.IsDBNull(dt.Rows[0]["IsChain"]) ? (bool?)null : (bool?)dt.Rows[0]["IsChain"];
					retObj._building					 = Convert.IsDBNull(dt.Rows[0]["Building"]) ? null : (string)dt.Rows[0]["Building"];
					retObj._floor					 = Convert.IsDBNull(dt.Rows[0]["Floor"]) ? null : (string)dt.Rows[0]["Floor"];
					retObj._property					 = Convert.IsDBNull(dt.Rows[0]["Property"]) ? null : (string)dt.Rows[0]["Property"];
					retObj._address					 = Convert.IsDBNull(dt.Rows[0]["Address"]) ? null : (string)dt.Rows[0]["Address"];
					retObj._landmark					 = Convert.IsDBNull(dt.Rows[0]["Landmark"]) ? null : (string)dt.Rows[0]["Landmark"];
					retObj._phone					 = Convert.IsDBNull(dt.Rows[0]["Phone"]) ? null : (string)dt.Rows[0]["Phone"];
					retObj._mobile					 = Convert.IsDBNull(dt.Rows[0]["Mobile"]) ? null : (string)dt.Rows[0]["Mobile"];
					retObj._whatsApp					 = Convert.IsDBNull(dt.Rows[0]["WhatsApp"]) ? null : (string)dt.Rows[0]["WhatsApp"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._isTaxable					 = Convert.IsDBNull(dt.Rows[0]["IsTaxable"]) ? (bool?)null : (bool?)dt.Rows[0]["IsTaxable"];
					retObj._isCashDiscount					 = Convert.IsDBNull(dt.Rows[0]["IsCashDiscount"]) ? (bool?)null : (bool?)dt.Rows[0]["IsCashDiscount"];
					retObj._responsibleNameAr					 = Convert.IsDBNull(dt.Rows[0]["ResponsibleNameAr"]) ? null : (string)dt.Rows[0]["ResponsibleNameAr"];
					retObj._responsibleNameEn					 = Convert.IsDBNull(dt.Rows[0]["ResponsibleNameEn"]) ? null : (string)dt.Rows[0]["ResponsibleNameEn"];
					retObj._taxCode					 = Convert.IsDBNull(dt.Rows[0]["TaxCode"]) ? null : (string)dt.Rows[0]["TaxCode"];
					retObj._commercialCode					 = Convert.IsDBNull(dt.Rows[0]["CommercialCode"]) ? null : (string)dt.Rows[0]["CommercialCode"];
					retObj._isNew					 = Convert.IsDBNull(dt.Rows[0]["IsNew"]) ? (bool?)null : (bool?)dt.Rows[0]["IsNew"];
					retObj._needValidation					 = Convert.IsDBNull(dt.Rows[0]["NeedValidation"]) ? (bool?)null : (bool?)dt.Rows[0]["NeedValidation"];
					retObj._cashGroupId					 = Convert.IsDBNull(dt.Rows[0]["CashGroupId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CashGroupId"];
					retObj._inRoute					 = Convert.IsDBNull(dt.Rows[0]["InRoute"]) ? (bool?)null : (bool?)dt.Rows[0]["InRoute"];
					retObj._salesChannelId					 = Convert.IsDBNull(dt.Rows[0]["SalesChannelId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesChannelId"];
					retObj._salesPoolId					 = Convert.IsDBNull(dt.Rows[0]["SalesPoolId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesPoolId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._points					 = Convert.IsDBNull(dt.Rows[0]["Points"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Points"];
					retObj._wallet					 = Convert.IsDBNull(dt.Rows[0]["Wallet"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Wallet"];
					retObj._dealId					 = Convert.IsDBNull(dt.Rows[0]["DealId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DealId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? clientAccountId
		///</parameters>
		public static IList<DAOClient> SelectAllByClientAccountId(Int32? clientAccountId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientAccountId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientAccountId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientAccountId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientAccountId
		///</parameters>
		public static Int32 SelectAllByClientAccountIdCount(Int32? clientAccountId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientAccountIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientAccountId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientAccountId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientAccountId
		///</parameters>
		public static void DeleteAllByClientAccountId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientAccountId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByClientAccountId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientAccountId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientAccountId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? clientTypeId
		///</parameters>
		public static IList<DAOClient> SelectAllByClientTypeId(Int32? clientTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientTypeId
		///</parameters>
		public static Int32 SelectAllByClientTypeIdCount(Int32? clientTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientTypeId
		///</parameters>
		public static void DeleteAllByClientTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByClientTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? businessUnitId
		///</parameters>
		public static IList<DAOClient> SelectAllByBusinessUnitId(Int32? businessUnitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByBusinessUnitId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)businessUnitId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? businessUnitId
		///</parameters>
		public static Int32 SelectAllByBusinessUnitIdCount(Int32? businessUnitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByBusinessUnitIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)businessUnitId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? businessUnitId
		///</parameters>
		public static void DeleteAllByBusinessUnitId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? businessUnitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByBusinessUnitId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)businessUnitId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static IList<DAOClient> SelectAllByBranchId(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByBranchId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static Int32 SelectAllByBranchIdCount(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByBranchIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId
		///</parameters>
		public static void DeleteAllByBranchId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByBranchId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? regionId
		///</parameters>
		public static IList<DAOClient> SelectAllByRegionId(Int32? regionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByRegionId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)regionId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? regionId
		///</parameters>
		public static Int32 SelectAllByRegionIdCount(Int32? regionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByRegionIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)regionId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? regionId
		///</parameters>
		public static void DeleteAllByRegionId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? regionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByRegionId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)regionId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static IList<DAOClient> SelectAllByGovernerateId(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByGovernerateId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static Int32 SelectAllByGovernerateIdCount(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByGovernerateIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId
		///</parameters>
		public static void DeleteAllByGovernerateId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByGovernerateId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static IList<DAOClient> SelectAllByCityId(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByCityId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static Int32 SelectAllByCityIdCount(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByCityIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId
		///</parameters>
		public static void DeleteAllByCityId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByCityId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? locationLevelId
		///</parameters>
		public static IList<DAOClient> SelectAllByLocationLevelId(Int32? locationLevelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByLocationLevelId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)locationLevelId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? locationLevelId
		///</parameters>
		public static Int32 SelectAllByLocationLevelIdCount(Int32? locationLevelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByLocationLevelIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)locationLevelId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? locationLevelId
		///</parameters>
		public static void DeleteAllByLocationLevelId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? locationLevelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByLocationLevelId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)locationLevelId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? clientGroupId
		///</parameters>
		public static IList<DAOClient> SelectAllByClientGroupId(Int32? clientGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientGroupId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientGroupId
		///</parameters>
		public static Int32 SelectAllByClientGroupIdCount(Int32? clientGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientGroupIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientGroupId
		///</parameters>
		public static void DeleteAllByClientGroupId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByClientGroupId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientGroupId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? clientGroupSubId
		///</parameters>
		public static IList<DAOClient> SelectAllByClientGroupSubId(Int32? clientGroupSubId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientGroupSubId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupSubId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientGroupSubId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientGroupSubId
		///</parameters>
		public static Int32 SelectAllByClientGroupSubIdCount(Int32? clientGroupSubId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientGroupSubIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupSubId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientGroupSubId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientGroupSubId
		///</parameters>
		public static void DeleteAllByClientGroupSubId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientGroupSubId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByClientGroupSubId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupSubId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientGroupSubId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? clientClassificationId
		///</parameters>
		public static IList<DAOClient> SelectAllByClientClassificationId(Int32? clientClassificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientClassificationId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientClassificationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientClassificationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientClassificationId
		///</parameters>
		public static Int32 SelectAllByClientClassificationIdCount(Int32? clientClassificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByClientClassificationIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientClassificationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientClassificationId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientClassificationId
		///</parameters>
		public static void DeleteAllByClientClassificationId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientClassificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByClientClassificationId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientClassificationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientClassificationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? paymentTermId
		///</parameters>
		public static IList<DAOClient> SelectAllByPaymentTermId(Int32? paymentTermId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByPaymentTermId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentTermId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? paymentTermId
		///</parameters>
		public static Int32 SelectAllByPaymentTermIdCount(Int32? paymentTermId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByPaymentTermIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentTermId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? paymentTermId
		///</parameters>
		public static void DeleteAllByPaymentTermId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? paymentTermId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByPaymentTermId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentTermId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? cashGroupId
		///</parameters>
		public static IList<DAOClient> SelectAllByCashGroupId(Int32? cashGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByCashGroupId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CashGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cashGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? cashGroupId
		///</parameters>
		public static Int32 SelectAllByCashGroupIdCount(Int32? cashGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllByCashGroupIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CashGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cashGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cashGroupId
		///</parameters>
		public static void DeleteAllByCashGroupId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cashGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllByCashGroupId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CashGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cashGroupId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? salesChannelId
		///</parameters>
		public static IList<DAOClient> SelectAllBySalesChannelId(Int32? salesChannelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllBySalesChannelId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesChannelId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesChannelId
		///</parameters>
		public static Int32 SelectAllBySalesChannelIdCount(Int32? salesChannelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllBySalesChannelIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesChannelId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesChannelId
		///</parameters>
		public static void DeleteAllBySalesChannelId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesChannelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllBySalesChannelId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesChannelId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///Int32? salesPoolId
		///</parameters>
		public static IList<DAOClient> SelectAllBySalesPoolId(Int32? salesPoolId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllBySalesPoolId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesPoolId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesPoolId
		///</parameters>
		public static Int32 SelectAllBySalesPoolIdCount(Int32? salesPoolId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllBySalesPoolIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesPoolId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesPoolId
		///</parameters>
		public static void DeleteAllBySalesPoolId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesPoolId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_DeleteAllBySalesPoolId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesPoolId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _clientId));
				command.Parameters.Add(CtSqlParameter.Get("@ClientAccountId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientAccountId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_businessUnitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_regionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_locationLevelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupSubId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientGroupSubId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientClassificationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientClassificationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CreditLimit", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_creditLimit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CreditBalance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_creditBalance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_paymentTermId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsChain", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isChain?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Building", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_building?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Floor", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_floor?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Property", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_property?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Landmark", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_landmark?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Mobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WhatsApp", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_whatsApp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsTaxable", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isTaxable?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsCashDiscount", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isCashDiscount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_taxCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CommercialCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_commercialCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNew", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNew?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NeedValidation", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_needValidation?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cashGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InRoute", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inRoute?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesChannelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesPoolId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Points", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_points?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Wallet", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_wallet?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DealId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_dealId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_clientAccountId					 = Convert.IsDBNull(command.Parameters["@ClientAccountId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientAccountId"].Value;
				_clientTypeId					 = Convert.IsDBNull(command.Parameters["@ClientTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientTypeId"].Value;
				_clientCode					 = Convert.IsDBNull(command.Parameters["@ClientCode"].Value) ? null : (string)command.Parameters["@ClientCode"].Value;
				_clientNameAr					 = Convert.IsDBNull(command.Parameters["@ClientNameAr"].Value) ? null : (string)command.Parameters["@ClientNameAr"].Value;
				_clientNameEn					 = Convert.IsDBNull(command.Parameters["@ClientNameEn"].Value) ? null : (string)command.Parameters["@ClientNameEn"].Value;
				_businessUnitId					 = Convert.IsDBNull(command.Parameters["@BusinessUnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BusinessUnitId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_regionId					 = Convert.IsDBNull(command.Parameters["@RegionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegionId"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_locationLevelId					 = Convert.IsDBNull(command.Parameters["@LocationLevelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@LocationLevelId"].Value;
				_clientGroupId					 = Convert.IsDBNull(command.Parameters["@ClientGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientGroupId"].Value;
				_clientGroupSubId					 = Convert.IsDBNull(command.Parameters["@ClientGroupSubId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientGroupSubId"].Value;
				_clientClassificationId					 = Convert.IsDBNull(command.Parameters["@ClientClassificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientClassificationId"].Value;
				_creditLimit					 = Convert.IsDBNull(command.Parameters["@CreditLimit"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CreditLimit"].Value;
				_creditBalance					 = Convert.IsDBNull(command.Parameters["@CreditBalance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CreditBalance"].Value;
				_paymentTermId					 = Convert.IsDBNull(command.Parameters["@PaymentTermId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PaymentTermId"].Value;
				_isChain					 = Convert.IsDBNull(command.Parameters["@IsChain"].Value) ? (bool?)null : (bool?)command.Parameters["@IsChain"].Value;
				_building					 = Convert.IsDBNull(command.Parameters["@Building"].Value) ? null : (string)command.Parameters["@Building"].Value;
				_floor					 = Convert.IsDBNull(command.Parameters["@Floor"].Value) ? null : (string)command.Parameters["@Floor"].Value;
				_property					 = Convert.IsDBNull(command.Parameters["@Property"].Value) ? null : (string)command.Parameters["@Property"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_landmark					 = Convert.IsDBNull(command.Parameters["@Landmark"].Value) ? null : (string)command.Parameters["@Landmark"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_mobile					 = Convert.IsDBNull(command.Parameters["@Mobile"].Value) ? null : (string)command.Parameters["@Mobile"].Value;
				_whatsApp					 = Convert.IsDBNull(command.Parameters["@WhatsApp"].Value) ? null : (string)command.Parameters["@WhatsApp"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_isTaxable					 = Convert.IsDBNull(command.Parameters["@IsTaxable"].Value) ? (bool?)null : (bool?)command.Parameters["@IsTaxable"].Value;
				_isCashDiscount					 = Convert.IsDBNull(command.Parameters["@IsCashDiscount"].Value) ? (bool?)null : (bool?)command.Parameters["@IsCashDiscount"].Value;
				_responsibleNameAr					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameAr"].Value) ? null : (string)command.Parameters["@ResponsibleNameAr"].Value;
				_responsibleNameEn					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameEn"].Value) ? null : (string)command.Parameters["@ResponsibleNameEn"].Value;
				_taxCode					 = Convert.IsDBNull(command.Parameters["@TaxCode"].Value) ? null : (string)command.Parameters["@TaxCode"].Value;
				_commercialCode					 = Convert.IsDBNull(command.Parameters["@CommercialCode"].Value) ? null : (string)command.Parameters["@CommercialCode"].Value;
				_isNew					 = Convert.IsDBNull(command.Parameters["@IsNew"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNew"].Value;
				_needValidation					 = Convert.IsDBNull(command.Parameters["@NeedValidation"].Value) ? (bool?)null : (bool?)command.Parameters["@NeedValidation"].Value;
				_cashGroupId					 = Convert.IsDBNull(command.Parameters["@CashGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CashGroupId"].Value;
				_inRoute					 = Convert.IsDBNull(command.Parameters["@InRoute"].Value) ? (bool?)null : (bool?)command.Parameters["@InRoute"].Value;
				_salesChannelId					 = Convert.IsDBNull(command.Parameters["@SalesChannelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesChannelId"].Value;
				_salesPoolId					 = Convert.IsDBNull(command.Parameters["@SalesPoolId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesPoolId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_points					 = Convert.IsDBNull(command.Parameters["@Points"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Points"].Value;
				_wallet					 = Convert.IsDBNull(command.Parameters["@Wallet"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Wallet"].Value;
				_dealId					 = Convert.IsDBNull(command.Parameters["@DealId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DealId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClient> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "ClientAccountId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"]);
						if (string.Compare(projection.Member, "ClientTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "BusinessUnitId", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "RegionId", true) == 0) lst.Add(Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "LocationLevelId", true) == 0) lst.Add(Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"]);
						if (string.Compare(projection.Member, "ClientGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"]);
						if (string.Compare(projection.Member, "ClientGroupSubId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"]);
						if (string.Compare(projection.Member, "ClientClassificationId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"]);
						if (string.Compare(projection.Member, "CreditLimit", true) == 0) lst.Add(Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"]);
						if (string.Compare(projection.Member, "CreditBalance", true) == 0) lst.Add(Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"]);
						if (string.Compare(projection.Member, "PaymentTermId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"]);
						if (string.Compare(projection.Member, "IsChain", true) == 0) lst.Add(Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"]);
						if (string.Compare(projection.Member, "Building", true) == 0) lst.Add(Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"]);
						if (string.Compare(projection.Member, "Floor", true) == 0) lst.Add(Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"]);
						if (string.Compare(projection.Member, "Property", true) == 0) lst.Add(Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "Landmark", true) == 0) lst.Add(Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "Mobile", true) == 0) lst.Add(Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"]);
						if (string.Compare(projection.Member, "WhatsApp", true) == 0) lst.Add(Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "IsTaxable", true) == 0) lst.Add(Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"]);
						if (string.Compare(projection.Member, "IsCashDiscount", true) == 0) lst.Add(Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"]);
						if (string.Compare(projection.Member, "ResponsibleNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"]);
						if (string.Compare(projection.Member, "ResponsibleNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"]);
						if (string.Compare(projection.Member, "TaxCode", true) == 0) lst.Add(Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"]);
						if (string.Compare(projection.Member, "CommercialCode", true) == 0) lst.Add(Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"]);
						if (string.Compare(projection.Member, "IsNew", true) == 0) lst.Add(Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"]);
						if (string.Compare(projection.Member, "NeedValidation", true) == 0) lst.Add(Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"]);
						if (string.Compare(projection.Member, "CashGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"]);
						if (string.Compare(projection.Member, "InRoute", true) == 0) lst.Add(Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"]);
						if (string.Compare(projection.Member, "SalesChannelId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"]);
						if (string.Compare(projection.Member, "SalesPoolId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "Points", true) == 0) lst.Add(Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"]);
						if (string.Compare(projection.Member, "Wallet", true) == 0) lst.Add(Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"]);
						if (string.Compare(projection.Member, "DealId", true) == 0) lst.Add(Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client
		///</Summary>
		///<returns>
		///IList-DAOClient.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClient> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClient> objList = new List<DAOClient>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClient retObj = new DAOClient();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._points					 = Convert.IsDBNull(row["Points"]) ? (Int32?)null : (Int32?)row["Points"];
						retObj._wallet					 = Convert.IsDBNull(row["Wallet"]) ? (decimal?)null : (decimal?)row["Wallet"];
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientAccountId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientAccountId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_businessUnitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_regionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_locationLevelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientGroupSubId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientGroupSubId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientClassificationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientClassificationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CreditLimit", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_creditLimit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CreditBalance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_creditBalance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_paymentTermId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsChain", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isChain?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Building", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_building?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Floor", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_floor?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Property", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_property?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Landmark", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_landmark?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Mobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WhatsApp", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_whatsApp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsTaxable", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isTaxable?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsCashDiscount", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isCashDiscount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_taxCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CommercialCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_commercialCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNew", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNew?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NeedValidation", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_needValidation?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cashGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InRoute", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inRoute?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesChannelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesPoolId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Points", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_points?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Wallet", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_wallet?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DealId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_dealId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_clientAccountId					 = Convert.IsDBNull(command.Parameters["@ClientAccountId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientAccountId"].Value;
				_clientTypeId					 = Convert.IsDBNull(command.Parameters["@ClientTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientTypeId"].Value;
				_clientCode					 = Convert.IsDBNull(command.Parameters["@ClientCode"].Value) ? null : (string)command.Parameters["@ClientCode"].Value;
				_clientNameAr					 = Convert.IsDBNull(command.Parameters["@ClientNameAr"].Value) ? null : (string)command.Parameters["@ClientNameAr"].Value;
				_clientNameEn					 = Convert.IsDBNull(command.Parameters["@ClientNameEn"].Value) ? null : (string)command.Parameters["@ClientNameEn"].Value;
				_businessUnitId					 = Convert.IsDBNull(command.Parameters["@BusinessUnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BusinessUnitId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_regionId					 = Convert.IsDBNull(command.Parameters["@RegionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegionId"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_locationLevelId					 = Convert.IsDBNull(command.Parameters["@LocationLevelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@LocationLevelId"].Value;
				_clientGroupId					 = Convert.IsDBNull(command.Parameters["@ClientGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientGroupId"].Value;
				_clientGroupSubId					 = Convert.IsDBNull(command.Parameters["@ClientGroupSubId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientGroupSubId"].Value;
				_clientClassificationId					 = Convert.IsDBNull(command.Parameters["@ClientClassificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientClassificationId"].Value;
				_creditLimit					 = Convert.IsDBNull(command.Parameters["@CreditLimit"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CreditLimit"].Value;
				_creditBalance					 = Convert.IsDBNull(command.Parameters["@CreditBalance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CreditBalance"].Value;
				_paymentTermId					 = Convert.IsDBNull(command.Parameters["@PaymentTermId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PaymentTermId"].Value;
				_isChain					 = Convert.IsDBNull(command.Parameters["@IsChain"].Value) ? (bool?)null : (bool?)command.Parameters["@IsChain"].Value;
				_building					 = Convert.IsDBNull(command.Parameters["@Building"].Value) ? null : (string)command.Parameters["@Building"].Value;
				_floor					 = Convert.IsDBNull(command.Parameters["@Floor"].Value) ? null : (string)command.Parameters["@Floor"].Value;
				_property					 = Convert.IsDBNull(command.Parameters["@Property"].Value) ? null : (string)command.Parameters["@Property"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_landmark					 = Convert.IsDBNull(command.Parameters["@Landmark"].Value) ? null : (string)command.Parameters["@Landmark"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_mobile					 = Convert.IsDBNull(command.Parameters["@Mobile"].Value) ? null : (string)command.Parameters["@Mobile"].Value;
				_whatsApp					 = Convert.IsDBNull(command.Parameters["@WhatsApp"].Value) ? null : (string)command.Parameters["@WhatsApp"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_isTaxable					 = Convert.IsDBNull(command.Parameters["@IsTaxable"].Value) ? (bool?)null : (bool?)command.Parameters["@IsTaxable"].Value;
				_isCashDiscount					 = Convert.IsDBNull(command.Parameters["@IsCashDiscount"].Value) ? (bool?)null : (bool?)command.Parameters["@IsCashDiscount"].Value;
				_responsibleNameAr					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameAr"].Value) ? null : (string)command.Parameters["@ResponsibleNameAr"].Value;
				_responsibleNameEn					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameEn"].Value) ? null : (string)command.Parameters["@ResponsibleNameEn"].Value;
				_taxCode					 = Convert.IsDBNull(command.Parameters["@TaxCode"].Value) ? null : (string)command.Parameters["@TaxCode"].Value;
				_commercialCode					 = Convert.IsDBNull(command.Parameters["@CommercialCode"].Value) ? null : (string)command.Parameters["@CommercialCode"].Value;
				_isNew					 = Convert.IsDBNull(command.Parameters["@IsNew"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNew"].Value;
				_needValidation					 = Convert.IsDBNull(command.Parameters["@NeedValidation"].Value) ? (bool?)null : (bool?)command.Parameters["@NeedValidation"].Value;
				_cashGroupId					 = Convert.IsDBNull(command.Parameters["@CashGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CashGroupId"].Value;
				_inRoute					 = Convert.IsDBNull(command.Parameters["@InRoute"].Value) ? (bool?)null : (bool?)command.Parameters["@InRoute"].Value;
				_salesChannelId					 = Convert.IsDBNull(command.Parameters["@SalesChannelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesChannelId"].Value;
				_salesPoolId					 = Convert.IsDBNull(command.Parameters["@SalesPoolId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesPoolId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_points					 = Convert.IsDBNull(command.Parameters["@Points"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Points"].Value;
				_wallet					 = Convert.IsDBNull(command.Parameters["@Wallet"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Wallet"].Value;
				_dealId					 = Convert.IsDBNull(command.Parameters["@DealId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DealId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? ClientAccountId
		{
			get
			{
				return _clientAccountId;
			}
			set
			{
				_clientAccountId = value;
			}
		}

		public Int32? ClientTypeId
		{
			get
			{
				return _clientTypeId;
			}
			set
			{
				_clientTypeId = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int32? BusinessUnitId
		{
			get
			{
				return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? RegionId
		{
			get
			{
				return _regionId;
			}
			set
			{
				_regionId = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public Int32? LocationLevelId
		{
			get
			{
				return _locationLevelId;
			}
			set
			{
				_locationLevelId = value;
			}
		}

		public Int32? ClientGroupId
		{
			get
			{
				return _clientGroupId;
			}
			set
			{
				_clientGroupId = value;
			}
		}

		public Int32? ClientGroupSubId
		{
			get
			{
				return _clientGroupSubId;
			}
			set
			{
				_clientGroupSubId = value;
			}
		}

		public Int32? ClientClassificationId
		{
			get
			{
				return _clientClassificationId;
			}
			set
			{
				_clientClassificationId = value;
			}
		}

		public decimal? CreditLimit
		{
			get
			{
				return _creditLimit;
			}
			set
			{
				_creditLimit = value;
			}
		}

		public decimal? CreditBalance
		{
			get
			{
				return _creditBalance;
			}
			set
			{
				_creditBalance = value;
			}
		}

		public Int32? PaymentTermId
		{
			get
			{
				return _paymentTermId;
			}
			set
			{
				_paymentTermId = value;
			}
		}

		public bool? IsChain
		{
			get
			{
				return _isChain;
			}
			set
			{
				_isChain = value;
			}
		}

		public string Building
		{
			get
			{
				return _building;
			}
			set
			{
				_building = value;
			}
		}

		public string Floor
		{
			get
			{
				return _floor;
			}
			set
			{
				_floor = value;
			}
		}

		public string Property
		{
			get
			{
				return _property;
			}
			set
			{
				_property = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public string Landmark
		{
			get
			{
				return _landmark;
			}
			set
			{
				_landmark = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string Mobile
		{
			get
			{
				return _mobile;
			}
			set
			{
				_mobile = value;
			}
		}

		public string WhatsApp
		{
			get
			{
				return _whatsApp;
			}
			set
			{
				_whatsApp = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public bool? IsTaxable
		{
			get
			{
				return _isTaxable;
			}
			set
			{
				_isTaxable = value;
			}
		}

		public bool? IsCashDiscount
		{
			get
			{
				return _isCashDiscount;
			}
			set
			{
				_isCashDiscount = value;
			}
		}

		public string ResponsibleNameAr
		{
			get
			{
				return _responsibleNameAr;
			}
			set
			{
				_responsibleNameAr = value;
			}
		}

		public string ResponsibleNameEn
		{
			get
			{
				return _responsibleNameEn;
			}
			set
			{
				_responsibleNameEn = value;
			}
		}

		public string TaxCode
		{
			get
			{
				return _taxCode;
			}
			set
			{
				_taxCode = value;
			}
		}

		public string CommercialCode
		{
			get
			{
				return _commercialCode;
			}
			set
			{
				_commercialCode = value;
			}
		}

		public bool? IsNew
		{
			get
			{
				return _isNew;
			}
			set
			{
				_isNew = value;
			}
		}

		public bool? NeedValidation
		{
			get
			{
				return _needValidation;
			}
			set
			{
				_needValidation = value;
			}
		}

		public Int32? CashGroupId
		{
			get
			{
				return _cashGroupId;
			}
			set
			{
				_cashGroupId = value;
			}
		}

		public bool? InRoute
		{
			get
			{
				return _inRoute;
			}
			set
			{
				_inRoute = value;
			}
		}

		public Int32? SalesChannelId
		{
			get
			{
				return _salesChannelId;
			}
			set
			{
				_salesChannelId = value;
			}
		}

		public Int32? SalesPoolId
		{
			get
			{
				return _salesPoolId;
			}
			set
			{
				_salesPoolId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? Points
		{
			get
			{
				return _points;
			}
			set
			{
				_points = value;
			}
		}

		public decimal? Wallet
		{
			get
			{
				return _wallet;
			}
			set
			{
				_wallet = value;
			}
		}

		public Int32? DealId
		{
			get
			{
				return _dealId;
			}
			set
			{
				_dealId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientId] = @ClientId
			";

		internal static string ctprClient_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[ClientId] = @ClientId
			";

		internal static string ctprClient_SelectAllByClientAccountId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientAccountId] = @ClientAccountId OR ([ClientAccountId] IS NULL AND @ClientAccountId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientAccountIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[ClientAccountId] = @ClientAccountId OR ([ClientAccountId] IS NULL AND @ClientAccountId IS NULL)
			";

		internal static string ctprClient_DeleteAllByClientAccountId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[ClientAccountId] = @ClientAccountId OR ([ClientAccountId] IS NULL AND @ClientAccountId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientTypeId] = @ClientTypeId OR ([ClientTypeId] IS NULL AND @ClientTypeId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[ClientTypeId] = @ClientTypeId OR ([ClientTypeId] IS NULL AND @ClientTypeId IS NULL)
			";

		internal static string ctprClient_DeleteAllByClientTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[ClientTypeId] = @ClientTypeId OR ([ClientTypeId] IS NULL AND @ClientTypeId IS NULL)
			";

		internal static string ctprClient_SelectAllByBusinessUnitId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[BusinessUnitId] = @BusinessUnitId OR ([BusinessUnitId] IS NULL AND @BusinessUnitId IS NULL)
			";

		internal static string ctprClient_SelectAllByBusinessUnitIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[BusinessUnitId] = @BusinessUnitId OR ([BusinessUnitId] IS NULL AND @BusinessUnitId IS NULL)
			";

		internal static string ctprClient_DeleteAllByBusinessUnitId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[BusinessUnitId] = @BusinessUnitId OR ([BusinessUnitId] IS NULL AND @BusinessUnitId IS NULL)
			";

		internal static string ctprClient_SelectAllByBranchId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprClient_SelectAllByBranchIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprClient_DeleteAllByBranchId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprClient_SelectAllByRegionId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[RegionId] = @RegionId OR ([RegionId] IS NULL AND @RegionId IS NULL)
			";

		internal static string ctprClient_SelectAllByRegionIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[RegionId] = @RegionId OR ([RegionId] IS NULL AND @RegionId IS NULL)
			";

		internal static string ctprClient_DeleteAllByRegionId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[RegionId] = @RegionId OR ([RegionId] IS NULL AND @RegionId IS NULL)
			";

		internal static string ctprClient_SelectAllByGovernerateId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprClient_SelectAllByGovernerateIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprClient_DeleteAllByGovernerateId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprClient_SelectAllByCityId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprClient_SelectAllByCityIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprClient_DeleteAllByCityId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprClient_SelectAllByLocationLevelId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[LocationLevelId] = @LocationLevelId OR ([LocationLevelId] IS NULL AND @LocationLevelId IS NULL)
			";

		internal static string ctprClient_SelectAllByLocationLevelIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[LocationLevelId] = @LocationLevelId OR ([LocationLevelId] IS NULL AND @LocationLevelId IS NULL)
			";

		internal static string ctprClient_DeleteAllByLocationLevelId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[LocationLevelId] = @LocationLevelId OR ([LocationLevelId] IS NULL AND @LocationLevelId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientGroupId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientGroupId] = @ClientGroupId OR ([ClientGroupId] IS NULL AND @ClientGroupId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientGroupIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[ClientGroupId] = @ClientGroupId OR ([ClientGroupId] IS NULL AND @ClientGroupId IS NULL)
			";

		internal static string ctprClient_DeleteAllByClientGroupId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[ClientGroupId] = @ClientGroupId OR ([ClientGroupId] IS NULL AND @ClientGroupId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientGroupSubId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientGroupSubId] = @ClientGroupSubId OR ([ClientGroupSubId] IS NULL AND @ClientGroupSubId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientGroupSubIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[ClientGroupSubId] = @ClientGroupSubId OR ([ClientGroupSubId] IS NULL AND @ClientGroupSubId IS NULL)
			";

		internal static string ctprClient_DeleteAllByClientGroupSubId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[ClientGroupSubId] = @ClientGroupSubId OR ([ClientGroupSubId] IS NULL AND @ClientGroupSubId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientClassificationId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientClassificationId] = @ClientClassificationId OR ([ClientClassificationId] IS NULL AND @ClientClassificationId IS NULL)
			";

		internal static string ctprClient_SelectAllByClientClassificationIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[ClientClassificationId] = @ClientClassificationId OR ([ClientClassificationId] IS NULL AND @ClientClassificationId IS NULL)
			";

		internal static string ctprClient_DeleteAllByClientClassificationId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[ClientClassificationId] = @ClientClassificationId OR ([ClientClassificationId] IS NULL AND @ClientClassificationId IS NULL)
			";

		internal static string ctprClient_SelectAllByPaymentTermId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[PaymentTermId] = @PaymentTermId OR ([PaymentTermId] IS NULL AND @PaymentTermId IS NULL)
			";

		internal static string ctprClient_SelectAllByPaymentTermIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[PaymentTermId] = @PaymentTermId OR ([PaymentTermId] IS NULL AND @PaymentTermId IS NULL)
			";

		internal static string ctprClient_DeleteAllByPaymentTermId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[PaymentTermId] = @PaymentTermId OR ([PaymentTermId] IS NULL AND @PaymentTermId IS NULL)
			";

		internal static string ctprClient_SelectAllByCashGroupId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[CashGroupId] = @CashGroupId OR ([CashGroupId] IS NULL AND @CashGroupId IS NULL)
			";

		internal static string ctprClient_SelectAllByCashGroupIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[CashGroupId] = @CashGroupId OR ([CashGroupId] IS NULL AND @CashGroupId IS NULL)
			";

		internal static string ctprClient_DeleteAllByCashGroupId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[CashGroupId] = @CashGroupId OR ([CashGroupId] IS NULL AND @CashGroupId IS NULL)
			";

		internal static string ctprClient_SelectAllBySalesChannelId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[SalesChannelId] = @SalesChannelId OR ([SalesChannelId] IS NULL AND @SalesChannelId IS NULL)
			";

		internal static string ctprClient_SelectAllBySalesChannelIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[SalesChannelId] = @SalesChannelId OR ([SalesChannelId] IS NULL AND @SalesChannelId IS NULL)
			";

		internal static string ctprClient_DeleteAllBySalesChannelId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[SalesChannelId] = @SalesChannelId OR ([SalesChannelId] IS NULL AND @SalesChannelId IS NULL)
			";

		internal static string ctprClient_SelectAllBySalesPoolId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			WHERE 
			[SalesPoolId] = @SalesPoolId OR ([SalesPoolId] IS NULL AND @SalesPoolId IS NULL)
			";

		internal static string ctprClient_SelectAllBySalesPoolIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			WHERE 
			[SalesPoolId] = @SalesPoolId OR ([SalesPoolId] IS NULL AND @SalesPoolId IS NULL)
			";

		internal static string ctprClient_DeleteAllBySalesPoolId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client]
			WHERE 
			[SalesPoolId] = @SalesPoolId OR ([SalesPoolId] IS NULL AND @SalesPoolId IS NULL)
			";

		internal static string ctprClient_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client]
			(
			[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			)
			VALUES
			(
			@ClientAccountId
			,@ClientTypeId
			,@ClientCode
			,@ClientNameAr
			,@ClientNameEn
			,@BusinessUnitId
			,@BranchId
			,@RegionId
			,@GovernerateId
			,@CityId
			,@LocationLevelId
			,@ClientGroupId
			,@ClientGroupSubId
			,@ClientClassificationId
			,@CreditLimit
			,@CreditBalance
			,@PaymentTermId
			,@IsChain
			,@Building
			,@Floor
			,@Property
			,@Address
			,@Landmark
			,@Phone
			,@Mobile
			,@WhatsApp
			,@IsActive
			,@Latitude
			,@Longitude
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@IsTaxable
			,@IsCashDiscount
			,@ResponsibleNameAr
			,@ResponsibleNameEn
			,@TaxCode
			,@CommercialCode
			,@IsNew
			,@NeedValidation
			,@CashGroupId
			,@InRoute
			,@SalesChannelId
			,@SalesPoolId
			,@UserId
			,@Points
			,@Wallet
			,@DealId
			)
			SELECT 
			@ClientId = [ClientId]
			,@ClientAccountId = [ClientAccountId]
			,@ClientTypeId = [ClientTypeId]
			,@ClientCode = [ClientCode]
			,@ClientNameAr = [ClientNameAr]
			,@ClientNameEn = [ClientNameEn]
			,@BusinessUnitId = [BusinessUnitId]
			,@BranchId = [BranchId]
			,@RegionId = [RegionId]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@LocationLevelId = [LocationLevelId]
			,@ClientGroupId = [ClientGroupId]
			,@ClientGroupSubId = [ClientGroupSubId]
			,@ClientClassificationId = [ClientClassificationId]
			,@CreditLimit = [CreditLimit]
			,@CreditBalance = [CreditBalance]
			,@PaymentTermId = [PaymentTermId]
			,@IsChain = [IsChain]
			,@Building = [Building]
			,@Floor = [Floor]
			,@Property = [Property]
			,@Address = [Address]
			,@Landmark = [Landmark]
			,@Phone = [Phone]
			,@Mobile = [Mobile]
			,@WhatsApp = [WhatsApp]
			,@IsActive = [IsActive]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@IsTaxable = [IsTaxable]
			,@IsCashDiscount = [IsCashDiscount]
			,@ResponsibleNameAr = [ResponsibleNameAr]
			,@ResponsibleNameEn = [ResponsibleNameEn]
			,@TaxCode = [TaxCode]
			,@CommercialCode = [CommercialCode]
			,@IsNew = [IsNew]
			,@NeedValidation = [NeedValidation]
			,@CashGroupId = [CashGroupId]
			,@InRoute = [InRoute]
			,@SalesChannelId = [SalesChannelId]
			,@SalesPoolId = [SalesPoolId]
			,@UserId = [UserId]
			,@Points = [Points]
			,@Wallet = [Wallet]
			,@DealId = [DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			";

		internal static string ctprClient_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client]
			";

		internal static string ctprClient_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client]
			##CRITERIA##
			";

		internal static string ctprClient_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientId]
			,[ClientAccountId]
			,[ClientTypeId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BusinessUnitId]
			,[BranchId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[CreditLimit]
			,[CreditBalance]
			,[PaymentTermId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[Latitude]
			,[Longitude]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsTaxable]
			,[IsCashDiscount]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsNew]
			,[NeedValidation]
			,[CashGroupId]
			,[InRoute]
			,[SalesChannelId]
			,[SalesPoolId]
			,[UserId]
			,[Points]
			,[Wallet]
			,[DealId]
			FROM [dbo].[Client]
			##CRITERIA##
			";

		internal static string ctprClient_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client]
			##CRITERIA##
			";

		internal static string ctprClient_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client]
			SET
			[ClientAccountId] = @ClientAccountId
			,[ClientTypeId] = @ClientTypeId
			,[ClientCode] = @ClientCode
			,[ClientNameAr] = @ClientNameAr
			,[ClientNameEn] = @ClientNameEn
			,[BusinessUnitId] = @BusinessUnitId
			,[BranchId] = @BranchId
			,[RegionId] = @RegionId
			,[GovernerateId] = @GovernerateId
			,[CityId] = @CityId
			,[LocationLevelId] = @LocationLevelId
			,[ClientGroupId] = @ClientGroupId
			,[ClientGroupSubId] = @ClientGroupSubId
			,[ClientClassificationId] = @ClientClassificationId
			,[CreditLimit] = @CreditLimit
			,[CreditBalance] = @CreditBalance
			,[PaymentTermId] = @PaymentTermId
			,[IsChain] = @IsChain
			,[Building] = @Building
			,[Floor] = @Floor
			,[Property] = @Property
			,[Address] = @Address
			,[Landmark] = @Landmark
			,[Phone] = @Phone
			,[Mobile] = @Mobile
			,[WhatsApp] = @WhatsApp
			,[IsActive] = @IsActive
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[IsTaxable] = @IsTaxable
			,[IsCashDiscount] = @IsCashDiscount
			,[ResponsibleNameAr] = @ResponsibleNameAr
			,[ResponsibleNameEn] = @ResponsibleNameEn
			,[TaxCode] = @TaxCode
			,[CommercialCode] = @CommercialCode
			,[IsNew] = @IsNew
			,[NeedValidation] = @NeedValidation
			,[CashGroupId] = @CashGroupId
			,[InRoute] = @InRoute
			,[SalesChannelId] = @SalesChannelId
			,[SalesPoolId] = @SalesPoolId
			,[UserId] = @UserId
			,[Points] = @Points
			,[Wallet] = @Wallet
			,[DealId] = @DealId
			WHERE 
			[ClientId] = @ClientId
			SELECT 
			@ClientId = [ClientId]
			,@ClientAccountId = [ClientAccountId]
			,@ClientTypeId = [ClientTypeId]
			,@ClientCode = [ClientCode]
			,@ClientNameAr = [ClientNameAr]
			,@ClientNameEn = [ClientNameEn]
			,@BusinessUnitId = [BusinessUnitId]
			,@BranchId = [BranchId]
			,@RegionId = [RegionId]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@LocationLevelId = [LocationLevelId]
			,@ClientGroupId = [ClientGroupId]
			,@ClientGroupSubId = [ClientGroupSubId]
			,@ClientClassificationId = [ClientClassificationId]
			,@CreditLimit = [CreditLimit]
			,@CreditBalance = [CreditBalance]
			,@PaymentTermId = [PaymentTermId]
			,@IsChain = [IsChain]
			,@Building = [Building]
			,@Floor = [Floor]
			,@Property = [Property]
			,@Address = [Address]
			,@Landmark = [Landmark]
			,@Phone = [Phone]
			,@Mobile = [Mobile]
			,@WhatsApp = [WhatsApp]
			,@IsActive = [IsActive]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@IsTaxable = [IsTaxable]
			,@IsCashDiscount = [IsCashDiscount]
			,@ResponsibleNameAr = [ResponsibleNameAr]
			,@ResponsibleNameEn = [ResponsibleNameEn]
			,@TaxCode = [TaxCode]
			,@CommercialCode = [CommercialCode]
			,@IsNew = [IsNew]
			,@NeedValidation = [NeedValidation]
			,@CashGroupId = [CashGroupId]
			,@InRoute = [InRoute]
			,@SalesChannelId = [SalesChannelId]
			,@SalesPoolId = [SalesPoolId]
			,@UserId = [UserId]
			,@Points = [Points]
			,@Wallet = [Wallet]
			,@DealId = [DealId]
			FROM [dbo].[Client]
			WHERE 
			[ClientId] = @ClientId
			";

	}
}
#endregion
