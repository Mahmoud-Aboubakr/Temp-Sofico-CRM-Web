/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAORepresentativeComission : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _comissionId;
		protected Int32? _representativeId;
		protected DateTime? _comissionDate;
		protected decimal? _comissionValue;
		protected bool? _isApproved;
		protected Int32? _comissionTypeId;
		protected string _notes;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAORepresentativeComission()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Representative_Comission based on the primary key(s)
		///</Summary>
		///<returns>
		///DAORepresentativeComission
		///</returns>
		///<parameters>
		///Int32? comissionId
		///</parameters>
		public static DAORepresentativeComission SelectOne(Int32? comissionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_Comission");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComissionId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)comissionId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAORepresentativeComission retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAORepresentativeComission();
					retObj._comissionId					 = Convert.IsDBNull(dt.Rows[0]["ComissionId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ComissionId"];
					retObj._representativeId					 = Convert.IsDBNull(dt.Rows[0]["RepresentativeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RepresentativeId"];
					retObj._comissionDate					 = Convert.IsDBNull(dt.Rows[0]["ComissionDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ComissionDate"];
					retObj._comissionValue					 = Convert.IsDBNull(dt.Rows[0]["ComissionValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ComissionValue"];
					retObj._isApproved					 = Convert.IsDBNull(dt.Rows[0]["IsApproved"]) ? (bool?)null : (bool?)dt.Rows[0]["IsApproved"];
					retObj._comissionTypeId					 = Convert.IsDBNull(dt.Rows[0]["ComissionTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ComissionTypeId"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Representative_Comission based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComissionId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_comissionId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Representative_Comission based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAORepresentativeComission.
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static IList<DAORepresentativeComission> SelectAllByRepresentativeId(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_SelectAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_Comission");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeComission> objList = new List<DAORepresentativeComission>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeComission retObj = new DAORepresentativeComission();
						retObj._comissionId					 = Convert.IsDBNull(row["ComissionId"]) ? (Int32?)null : (Int32?)row["ComissionId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._comissionDate					 = Convert.IsDBNull(row["ComissionDate"]) ? (DateTime?)null : (DateTime?)row["ComissionDate"];
						retObj._comissionValue					 = Convert.IsDBNull(row["ComissionValue"]) ? (decimal?)null : (decimal?)row["ComissionValue"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._comissionTypeId					 = Convert.IsDBNull(row["ComissionTypeId"]) ? (Int32?)null : (Int32?)row["ComissionTypeId"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static Int32 SelectAllByRepresentativeIdCount(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_SelectAllByRepresentativeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Representative_Comission with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId
		///</parameters>
		public static void DeleteAllByRepresentativeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_DeleteAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Representative_Comission based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAORepresentativeComission.
		///</returns>
		///<parameters>
		///Int32? comissionTypeId
		///</parameters>
		public static IList<DAORepresentativeComission> SelectAllByComissionTypeId(Int32? comissionTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_SelectAllByComissionTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_Comission");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComissionTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)comissionTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeComission> objList = new List<DAORepresentativeComission>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeComission retObj = new DAORepresentativeComission();
						retObj._comissionId					 = Convert.IsDBNull(row["ComissionId"]) ? (Int32?)null : (Int32?)row["ComissionId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._comissionDate					 = Convert.IsDBNull(row["ComissionDate"]) ? (DateTime?)null : (DateTime?)row["ComissionDate"];
						retObj._comissionValue					 = Convert.IsDBNull(row["ComissionValue"]) ? (decimal?)null : (decimal?)row["ComissionValue"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._comissionTypeId					 = Convert.IsDBNull(row["ComissionTypeId"]) ? (Int32?)null : (Int32?)row["ComissionTypeId"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? comissionTypeId
		///</parameters>
		public static Int32 SelectAllByComissionTypeIdCount(Int32? comissionTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_SelectAllByComissionTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComissionTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)comissionTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Representative_Comission with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? comissionTypeId
		///</parameters>
		public static void DeleteAllByComissionTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? comissionTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_DeleteAllByComissionTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComissionTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)comissionTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Representative_Comission
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComissionId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _comissionId));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComissionDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_comissionDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComissionValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_comissionValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsApproved", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isApproved?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComissionTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_comissionTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_comissionId					 = Convert.IsDBNull(command.Parameters["@ComissionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComissionId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_comissionDate					 = Convert.IsDBNull(command.Parameters["@ComissionDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ComissionDate"].Value;
				_comissionValue					 = Convert.IsDBNull(command.Parameters["@ComissionValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ComissionValue"].Value;
				_isApproved					 = Convert.IsDBNull(command.Parameters["@IsApproved"].Value) ? (bool?)null : (bool?)command.Parameters["@IsApproved"].Value;
				_comissionTypeId					 = Convert.IsDBNull(command.Parameters["@ComissionTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComissionTypeId"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Representative_Comission
		///</Summary>
		///<returns>
		///IList-DAORepresentativeComission.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAORepresentativeComission> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_Comission");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeComission> objList = new List<DAORepresentativeComission>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeComission retObj = new DAORepresentativeComission();
						retObj._comissionId					 = Convert.IsDBNull(row["ComissionId"]) ? (Int32?)null : (Int32?)row["ComissionId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._comissionDate					 = Convert.IsDBNull(row["ComissionDate"]) ? (DateTime?)null : (DateTime?)row["ComissionDate"];
						retObj._comissionValue					 = Convert.IsDBNull(row["ComissionValue"]) ? (decimal?)null : (decimal?)row["ComissionValue"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._comissionTypeId					 = Convert.IsDBNull(row["ComissionTypeId"]) ? (Int32?)null : (Int32?)row["ComissionTypeId"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiRepresentative_Comission
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentative_Comission_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_Comission");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ComissionId", true) == 0) lst.Add(Convert.IsDBNull(row["ComissionId"]) ? (Int32?)null : (Int32?)row["ComissionId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "ComissionDate", true) == 0) lst.Add(Convert.IsDBNull(row["ComissionDate"]) ? (DateTime?)null : (DateTime?)row["ComissionDate"]);
						if (string.Compare(projection.Member, "ComissionValue", true) == 0) lst.Add(Convert.IsDBNull(row["ComissionValue"]) ? (decimal?)null : (decimal?)row["ComissionValue"]);
						if (string.Compare(projection.Member, "IsApproved", true) == 0) lst.Add(Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"]);
						if (string.Compare(projection.Member, "ComissionTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ComissionTypeId"]) ? (Int32?)null : (Int32?)row["ComissionTypeId"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Representative_Comission
		///</Summary>
		///<returns>
		///IList-DAORepresentativeComission.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAORepresentativeComission> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentative_Comission_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_Comission");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeComission> objList = new List<DAORepresentativeComission>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeComission retObj = new DAORepresentativeComission();
						retObj._comissionId					 = Convert.IsDBNull(row["ComissionId"]) ? (Int32?)null : (Int32?)row["ComissionId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._comissionDate					 = Convert.IsDBNull(row["ComissionDate"]) ? (DateTime?)null : (DateTime?)row["ComissionDate"];
						retObj._comissionValue					 = Convert.IsDBNull(row["ComissionValue"]) ? (decimal?)null : (decimal?)row["ComissionValue"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._comissionTypeId					 = Convert.IsDBNull(row["ComissionTypeId"]) ? (Int32?)null : (Int32?)row["ComissionTypeId"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Representative_Comission
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentative_Comission_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Representative_Comission based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_Comission_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComissionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_comissionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComissionDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_comissionDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComissionValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_comissionValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsApproved", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isApproved?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComissionTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_comissionTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_comissionId					 = Convert.IsDBNull(command.Parameters["@ComissionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComissionId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_comissionDate					 = Convert.IsDBNull(command.Parameters["@ComissionDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ComissionDate"].Value;
				_comissionValue					 = Convert.IsDBNull(command.Parameters["@ComissionValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ComissionValue"].Value;
				_isApproved					 = Convert.IsDBNull(command.Parameters["@IsApproved"].Value) ? (bool?)null : (bool?)command.Parameters["@IsApproved"].Value;
				_comissionTypeId					 = Convert.IsDBNull(command.Parameters["@ComissionTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComissionTypeId"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ComissionId
		{
			get
			{
				return _comissionId;
			}
			set
			{
				_comissionId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public DateTime? ComissionDate
		{
			get
			{
				return _comissionDate;
			}
			set
			{
				_comissionDate = value;
			}
		}

		public decimal? ComissionValue
		{
			get
			{
				return _comissionValue;
			}
			set
			{
				_comissionValue = value;
			}
		}

		public bool? IsApproved
		{
			get
			{
				return _isApproved;
			}
			set
			{
				_isApproved = value;
			}
		}

		public Int32? ComissionTypeId
		{
			get
			{
				return _comissionTypeId;
			}
			set
			{
				_comissionTypeId = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprRepresentative_Comission_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ComissionId]
			,[RepresentativeId]
			,[ComissionDate]
			,[ComissionValue]
			,[IsApproved]
			,[ComissionTypeId]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Representative_Comission]
			WHERE 
			[ComissionId] = @ComissionId
			";

		internal static string ctprRepresentative_Comission_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Representative_Comission]
			WHERE 
			[ComissionId] = @ComissionId
			";

		internal static string ctprRepresentative_Comission_SelectAllByRepresentativeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ComissionId]
			,[RepresentativeId]
			,[ComissionDate]
			,[ComissionValue]
			,[IsApproved]
			,[ComissionTypeId]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Representative_Comission]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprRepresentative_Comission_SelectAllByRepresentativeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Representative_Comission]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprRepresentative_Comission_DeleteAllByRepresentativeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Representative_Comission]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprRepresentative_Comission_SelectAllByComissionTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ComissionId]
			,[RepresentativeId]
			,[ComissionDate]
			,[ComissionValue]
			,[IsApproved]
			,[ComissionTypeId]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Representative_Comission]
			WHERE 
			[ComissionTypeId] = @ComissionTypeId OR ([ComissionTypeId] IS NULL AND @ComissionTypeId IS NULL)
			";

		internal static string ctprRepresentative_Comission_SelectAllByComissionTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Representative_Comission]
			WHERE 
			[ComissionTypeId] = @ComissionTypeId OR ([ComissionTypeId] IS NULL AND @ComissionTypeId IS NULL)
			";

		internal static string ctprRepresentative_Comission_DeleteAllByComissionTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Representative_Comission]
			WHERE 
			[ComissionTypeId] = @ComissionTypeId OR ([ComissionTypeId] IS NULL AND @ComissionTypeId IS NULL)
			";

		internal static string ctprRepresentative_Comission_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Representative_Comission]
			(
			[RepresentativeId]
			,[ComissionDate]
			,[ComissionValue]
			,[IsApproved]
			,[ComissionTypeId]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@RepresentativeId
			,@ComissionDate
			,@ComissionValue
			,@IsApproved
			,@ComissionTypeId
			,@Notes
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@ComissionId = [ComissionId]
			,@RepresentativeId = [RepresentativeId]
			,@ComissionDate = [ComissionDate]
			,@ComissionValue = [ComissionValue]
			,@IsApproved = [IsApproved]
			,@ComissionTypeId = [ComissionTypeId]
			,@Notes = [Notes]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Representative_Comission]
			WHERE 
			[ComissionId] = SCOPE_IDENTITY()
			";

		internal static string ctprRepresentative_Comission_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ComissionId]
			,[RepresentativeId]
			,[ComissionDate]
			,[ComissionValue]
			,[IsApproved]
			,[ComissionTypeId]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Representative_Comission]
			";

		internal static string ctprRepresentative_Comission_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Representative_Comission]
			";

		internal static string ctprRepresentative_Comission_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Representative_Comission]
			##CRITERIA##
			";

		internal static string ctprRepresentative_Comission_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ComissionId]
			,[RepresentativeId]
			,[ComissionDate]
			,[ComissionValue]
			,[IsApproved]
			,[ComissionTypeId]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Representative_Comission]
			##CRITERIA##
			";

		internal static string ctprRepresentative_Comission_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Representative_Comission]
			##CRITERIA##
			";

		internal static string ctprRepresentative_Comission_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Representative_Comission]
			SET
			[RepresentativeId] = @RepresentativeId
			,[ComissionDate] = @ComissionDate
			,[ComissionValue] = @ComissionValue
			,[IsApproved] = @IsApproved
			,[ComissionTypeId] = @ComissionTypeId
			,[Notes] = @Notes
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[ComissionId] = @ComissionId
			SELECT 
			@ComissionId = [ComissionId]
			,@RepresentativeId = [RepresentativeId]
			,@ComissionDate = [ComissionDate]
			,@ComissionValue = [ComissionValue]
			,@IsApproved = [IsApproved]
			,@ComissionTypeId = [ComissionTypeId]
			,@Notes = [Notes]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Representative_Comission]
			WHERE 
			[ComissionId] = @ComissionId
			";

	}
}
#endregion
