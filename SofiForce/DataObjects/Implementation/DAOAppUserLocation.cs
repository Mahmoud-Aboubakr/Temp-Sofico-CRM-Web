/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppUserLocation : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _trackingId;
		protected Int32? _userId;
		protected Int32? _trackingTypeId;
		protected DateTime? _trackingDate;
		protected DateTime? _trackingTime;
		protected double? _latitude;
		protected double? _longitude;
		protected bool? _isPositive;
		protected Int64? _salesId;
		protected Int32? _clientId;
		protected bool? _inZone;
		protected Int32? _distance;
		#endregion

		#region class methods
		public DAOAppUserLocation()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table AppUser_Location based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAppUserLocation
		///</returns>
		///<parameters>
		///Int64? trackingId
		///</parameters>
		public static DAOAppUserLocation SelectOne(Int64? trackingId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Location");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TrackingId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)trackingId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOAppUserLocation retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAppUserLocation();
					retObj._trackingId					 = Convert.IsDBNull(dt.Rows[0]["TrackingId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["TrackingId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._trackingTypeId					 = Convert.IsDBNull(dt.Rows[0]["TrackingTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TrackingTypeId"];
					retObj._trackingDate					 = Convert.IsDBNull(dt.Rows[0]["TrackingDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TrackingDate"];
					retObj._trackingTime					 = Convert.IsDBNull(dt.Rows[0]["TrackingTime"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TrackingTime"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._isPositive					 = Convert.IsDBNull(dt.Rows[0]["IsPositive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsPositive"];
					retObj._salesId					 = Convert.IsDBNull(dt.Rows[0]["SalesId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._inZone					 = Convert.IsDBNull(dt.Rows[0]["InZone"]) ? (bool?)null : (bool?)dt.Rows[0]["InZone"];
					retObj._distance					 = Convert.IsDBNull(dt.Rows[0]["Distance"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Distance"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table AppUser_Location based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TrackingId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_trackingId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser_Location based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUserLocation.
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static IList<DAOAppUserLocation> SelectAllByUserId(Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_SelectAllByUserId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Location");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserLocation> objList = new List<DAOAppUserLocation>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserLocation retObj = new DAOAppUserLocation();
						retObj._trackingId					 = Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._trackingTypeId					 = Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"];
						retObj._trackingDate					 = Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"];
						retObj._trackingTime					 = Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static Int32 SelectAllByUserIdCount(Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_SelectAllByUserIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser_Location with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userId
		///</parameters>
		public static void DeleteAllByUserId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_DeleteAllByUserId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser_Location based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUserLocation.
		///</returns>
		///<parameters>
		///Int32? trackingTypeId
		///</parameters>
		public static IList<DAOAppUserLocation> SelectAllByTrackingTypeId(Int32? trackingTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_SelectAllByTrackingTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Location");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TrackingTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)trackingTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserLocation> objList = new List<DAOAppUserLocation>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserLocation retObj = new DAOAppUserLocation();
						retObj._trackingId					 = Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._trackingTypeId					 = Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"];
						retObj._trackingDate					 = Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"];
						retObj._trackingTime					 = Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? trackingTypeId
		///</parameters>
		public static Int32 SelectAllByTrackingTypeIdCount(Int32? trackingTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_SelectAllByTrackingTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TrackingTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)trackingTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser_Location with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? trackingTypeId
		///</parameters>
		public static void DeleteAllByTrackingTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? trackingTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_DeleteAllByTrackingTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TrackingTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)trackingTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table AppUser_Location
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TrackingId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _trackingId));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TrackingTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_trackingTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TrackingDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_trackingDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TrackingTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_trackingTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsPositive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isPositive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_trackingId					 = Convert.IsDBNull(command.Parameters["@TrackingId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@TrackingId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_trackingTypeId					 = Convert.IsDBNull(command.Parameters["@TrackingTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TrackingTypeId"].Value;
				_trackingDate					 = Convert.IsDBNull(command.Parameters["@TrackingDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TrackingDate"].Value;
				_trackingTime					 = Convert.IsDBNull(command.Parameters["@TrackingTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TrackingTime"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_isPositive					 = Convert.IsDBNull(command.Parameters["@IsPositive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsPositive"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Distance"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppUser_Location
		///</Summary>
		///<returns>
		///IList-DAOAppUserLocation.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppUserLocation> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Location");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserLocation> objList = new List<DAOAppUserLocation>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserLocation retObj = new DAOAppUserLocation();
						retObj._trackingId					 = Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._trackingTypeId					 = Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"];
						retObj._trackingDate					 = Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"];
						retObj._trackingTime					 = Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppUser_Location
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_Location_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Location");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "TrackingId", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "TrackingTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"]);
						if (string.Compare(projection.Member, "TrackingDate", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"]);
						if (string.Compare(projection.Member, "TrackingTime", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "IsPositive", true) == 0) lst.Add(Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppUser_Location
		///</Summary>
		///<returns>
		///IList-DAOAppUserLocation.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppUserLocation> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_Location_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_Location");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserLocation> objList = new List<DAOAppUserLocation>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserLocation retObj = new DAOAppUserLocation();
						retObj._trackingId					 = Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._trackingTypeId					 = Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"];
						retObj._trackingDate					 = Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"];
						retObj._trackingTime					 = Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppUser_Location
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_Location_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table AppUser_Location based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_Location_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TrackingId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_trackingId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TrackingTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_trackingTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TrackingDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_trackingDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TrackingTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_trackingTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsPositive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isPositive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_trackingId					 = Convert.IsDBNull(command.Parameters["@TrackingId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@TrackingId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_trackingTypeId					 = Convert.IsDBNull(command.Parameters["@TrackingTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TrackingTypeId"].Value;
				_trackingDate					 = Convert.IsDBNull(command.Parameters["@TrackingDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TrackingDate"].Value;
				_trackingTime					 = Convert.IsDBNull(command.Parameters["@TrackingTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TrackingTime"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_isPositive					 = Convert.IsDBNull(command.Parameters["@IsPositive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsPositive"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Distance"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? TrackingId
		{
			get
			{
				return _trackingId;
			}
			set
			{
				_trackingId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? TrackingTypeId
		{
			get
			{
				return _trackingTypeId;
			}
			set
			{
				_trackingTypeId = value;
			}
		}

		public DateTime? TrackingDate
		{
			get
			{
				return _trackingDate;
			}
			set
			{
				_trackingDate = value;
			}
		}

		public DateTime? TrackingTime
		{
			get
			{
				return _trackingTime;
			}
			set
			{
				_trackingTime = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public bool? IsPositive
		{
			get
			{
				return _isPositive;
			}
			set
			{
				_isPositive = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public Int32? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppUser_Location_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[TrackingId]
			,[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			FROM [dbo].[AppUser_Location]
			WHERE 
			[TrackingId] = @TrackingId
			";

		internal static string ctprAppUser_Location_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[AppUser_Location]
			WHERE 
			[TrackingId] = @TrackingId
			";

		internal static string ctprAppUser_Location_SelectAllByUserId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[TrackingId]
			,[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			FROM [dbo].[AppUser_Location]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_Location_SelectAllByUserIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Location]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_Location_DeleteAllByUserId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser_Location]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_Location_SelectAllByTrackingTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[TrackingId]
			,[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			FROM [dbo].[AppUser_Location]
			WHERE 
			[TrackingTypeId] = @TrackingTypeId OR ([TrackingTypeId] IS NULL AND @TrackingTypeId IS NULL)
			";

		internal static string ctprAppUser_Location_SelectAllByTrackingTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Location]
			WHERE 
			[TrackingTypeId] = @TrackingTypeId OR ([TrackingTypeId] IS NULL AND @TrackingTypeId IS NULL)
			";

		internal static string ctprAppUser_Location_DeleteAllByTrackingTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser_Location]
			WHERE 
			[TrackingTypeId] = @TrackingTypeId OR ([TrackingTypeId] IS NULL AND @TrackingTypeId IS NULL)
			";

		internal static string ctprAppUser_Location_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[AppUser_Location]
			(
			[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			)
			VALUES
			(
			@UserId
			,@TrackingTypeId
			,@TrackingDate
			,@TrackingTime
			,@Latitude
			,@Longitude
			,@IsPositive
			,@SalesId
			,@ClientId
			,@InZone
			,@Distance
			)
			SELECT 
			@TrackingId = [TrackingId]
			,@UserId = [UserId]
			,@TrackingTypeId = [TrackingTypeId]
			,@TrackingDate = [TrackingDate]
			,@TrackingTime = [TrackingTime]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@IsPositive = [IsPositive]
			,@SalesId = [SalesId]
			,@ClientId = [ClientId]
			,@InZone = [InZone]
			,@Distance = [Distance]
			FROM [dbo].[AppUser_Location]
			WHERE 
			[TrackingId] = SCOPE_IDENTITY()
			";

		internal static string ctprAppUser_Location_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[TrackingId]
			,[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			FROM [dbo].[AppUser_Location]
			";

		internal static string ctprAppUser_Location_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Location]
			";

		internal static string ctprAppUser_Location_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppUser_Location]
			##CRITERIA##
			";

		internal static string ctprAppUser_Location_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[TrackingId]
			,[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			FROM [dbo].[AppUser_Location]
			##CRITERIA##
			";

		internal static string ctprAppUser_Location_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppUser_Location]
			##CRITERIA##
			";

		internal static string ctprAppUser_Location_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[AppUser_Location]
			SET
			[UserId] = @UserId
			,[TrackingTypeId] = @TrackingTypeId
			,[TrackingDate] = @TrackingDate
			,[TrackingTime] = @TrackingTime
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[IsPositive] = @IsPositive
			,[SalesId] = @SalesId
			,[ClientId] = @ClientId
			,[InZone] = @InZone
			,[Distance] = @Distance
			WHERE 
			[TrackingId] = @TrackingId
			SELECT 
			@TrackingId = [TrackingId]
			,@UserId = [UserId]
			,@TrackingTypeId = [TrackingTypeId]
			,@TrackingDate = [TrackingDate]
			,@TrackingTime = [TrackingTime]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@IsPositive = [IsPositive]
			,@SalesId = [SalesId]
			,@ClientId = [ClientId]
			,@InZone = [InZone]
			,@Distance = [Distance]
			FROM [dbo].[AppUser_Location]
			WHERE 
			[TrackingId] = @TrackingId
			";

	}
}
#endregion
