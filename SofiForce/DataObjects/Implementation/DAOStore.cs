/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOStore : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _storeId;
		protected Int32? _branchId;
		protected Int32? _storeTypeId;
		protected string _storeNameEn;
		protected string _storeNameAr;
		protected string _storeCode;
		protected bool? _isActive;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected Int64? _recId;
		#endregion

		#region class methods
		public DAOStore()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Store based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOStore
		///</returns>
		///<parameters>
		///Int32? storeId
		///</parameters>
		public static DAOStore SelectOne(Int32? storeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Store");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)storeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOStore retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOStore();
					retObj._storeId					 = Convert.IsDBNull(dt.Rows[0]["StoreId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["StoreId"];
					retObj._branchId					 = Convert.IsDBNull(dt.Rows[0]["BranchId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BranchId"];
					retObj._storeTypeId					 = Convert.IsDBNull(dt.Rows[0]["StoreTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["StoreTypeId"];
					retObj._storeNameEn					 = Convert.IsDBNull(dt.Rows[0]["StoreNameEn"]) ? null : (string)dt.Rows[0]["StoreNameEn"];
					retObj._storeNameAr					 = Convert.IsDBNull(dt.Rows[0]["StoreNameAr"]) ? null : (string)dt.Rows[0]["StoreNameAr"];
					retObj._storeCode					 = Convert.IsDBNull(dt.Rows[0]["StoreCode"]) ? null : (string)dt.Rows[0]["StoreCode"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["Icon"]) ? null : (string)dt.Rows[0]["Icon"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["Color"]) ? null : (string)dt.Rows[0]["Color"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._canDelete					 = Convert.IsDBNull(dt.Rows[0]["CanDelete"]) ? (bool?)null : (bool?)dt.Rows[0]["CanDelete"];
					retObj._canEdit					 = Convert.IsDBNull(dt.Rows[0]["CanEdit"]) ? (bool?)null : (bool?)dt.Rows[0]["CanEdit"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._recId					 = Convert.IsDBNull(dt.Rows[0]["RecId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RecId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Store based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_storeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Store based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOStore.
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static IList<DAOStore> SelectAllByBranchId(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_SelectAllByBranchId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Store");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOStore> objList = new List<DAOStore>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOStore retObj = new DAOStore();
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeTypeId					 = Convert.IsDBNull(row["StoreTypeId"]) ? (Int32?)null : (Int32?)row["StoreTypeId"];
						retObj._storeNameEn					 = Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"];
						retObj._storeNameAr					 = Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"];
						retObj._storeCode					 = Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static Int32 SelectAllByBranchIdCount(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_SelectAllByBranchIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Store with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId
		///</parameters>
		public static void DeleteAllByBranchId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_DeleteAllByBranchId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Store based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOStore.
		///</returns>
		///<parameters>
		///Int32? storeTypeId
		///</parameters>
		public static IList<DAOStore> SelectAllByStoreTypeId(Int32? storeTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_SelectAllByStoreTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Store");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOStore> objList = new List<DAOStore>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOStore retObj = new DAOStore();
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeTypeId					 = Convert.IsDBNull(row["StoreTypeId"]) ? (Int32?)null : (Int32?)row["StoreTypeId"];
						retObj._storeNameEn					 = Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"];
						retObj._storeNameAr					 = Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"];
						retObj._storeCode					 = Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? storeTypeId
		///</parameters>
		public static Int32 SelectAllByStoreTypeIdCount(Int32? storeTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_SelectAllByStoreTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Store with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? storeTypeId
		///</parameters>
		public static void DeleteAllByStoreTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? storeTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_DeleteAllByStoreTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _storeId));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_storeTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_storeNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_storeNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_storeCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_storeId					 = Convert.IsDBNull(command.Parameters["@StoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_storeTypeId					 = Convert.IsDBNull(command.Parameters["@StoreTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreTypeId"].Value;
				_storeNameEn					 = Convert.IsDBNull(command.Parameters["@StoreNameEn"].Value) ? null : (string)command.Parameters["@StoreNameEn"].Value;
				_storeNameAr					 = Convert.IsDBNull(command.Parameters["@StoreNameAr"].Value) ? null : (string)command.Parameters["@StoreNameAr"].Value;
				_storeCode					 = Convert.IsDBNull(command.Parameters["@StoreCode"].Value) ? null : (string)command.Parameters["@StoreCode"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Store
		///</Summary>
		///<returns>
		///IList-DAOStore.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOStore> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Store");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOStore> objList = new List<DAOStore>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOStore retObj = new DAOStore();
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeTypeId					 = Convert.IsDBNull(row["StoreTypeId"]) ? (Int32?)null : (Int32?)row["StoreTypeId"];
						retObj._storeNameEn					 = Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"];
						retObj._storeNameAr					 = Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"];
						retObj._storeCode					 = Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiStore
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprStore_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Store");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "StoreId", true) == 0) lst.Add(Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "StoreTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["StoreTypeId"]) ? (Int32?)null : (Int32?)row["StoreTypeId"]);
						if (string.Compare(projection.Member, "StoreNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"]);
						if (string.Compare(projection.Member, "StoreNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"]);
						if (string.Compare(projection.Member, "StoreCode", true) == 0) lst.Add(Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "RecId", true) == 0) lst.Add(Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Store
		///</Summary>
		///<returns>
		///IList-DAOStore.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOStore> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprStore_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Store");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOStore> objList = new List<DAOStore>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOStore retObj = new DAOStore();
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeTypeId					 = Convert.IsDBNull(row["StoreTypeId"]) ? (Int32?)null : (Int32?)row["StoreTypeId"];
						retObj._storeNameEn					 = Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"];
						retObj._storeNameAr					 = Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"];
						retObj._storeCode					 = Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Store
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprStore_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Store based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprStore_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_storeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_storeTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_storeNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_storeNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_storeCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_storeId					 = Convert.IsDBNull(command.Parameters["@StoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_storeTypeId					 = Convert.IsDBNull(command.Parameters["@StoreTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreTypeId"].Value;
				_storeNameEn					 = Convert.IsDBNull(command.Parameters["@StoreNameEn"].Value) ? null : (string)command.Parameters["@StoreNameEn"].Value;
				_storeNameAr					 = Convert.IsDBNull(command.Parameters["@StoreNameAr"].Value) ? null : (string)command.Parameters["@StoreNameAr"].Value;
				_storeCode					 = Convert.IsDBNull(command.Parameters["@StoreCode"].Value) ? null : (string)command.Parameters["@StoreCode"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? StoreId
		{
			get
			{
				return _storeId;
			}
			set
			{
				_storeId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? StoreTypeId
		{
			get
			{
				return _storeTypeId;
			}
			set
			{
				_storeTypeId = value;
			}
		}

		public string StoreNameEn
		{
			get
			{
				return _storeNameEn;
			}
			set
			{
				_storeNameEn = value;
			}
		}

		public string StoreNameAr
		{
			get
			{
				return _storeNameAr;
			}
			set
			{
				_storeNameAr = value;
			}
		}

		public string StoreCode
		{
			get
			{
				return _storeCode;
			}
			set
			{
				_storeCode = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public Int64? RecId
		{
			get
			{
				return _recId;
			}
			set
			{
				_recId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprStore_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[StoreId]
			,[BranchId]
			,[StoreTypeId]
			,[StoreNameEn]
			,[StoreNameAr]
			,[StoreCode]
			,[IsActive]
			,[Icon]
			,[Color]
			,[DisplayOrder]
			,[CanDelete]
			,[CanEdit]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[RecId]
			FROM [dbo].[Store]
			WHERE 
			[StoreId] = @StoreId
			";

		internal static string ctprStore_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Store]
			WHERE 
			[StoreId] = @StoreId
			";

		internal static string ctprStore_SelectAllByBranchId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[StoreId]
			,[BranchId]
			,[StoreTypeId]
			,[StoreNameEn]
			,[StoreNameAr]
			,[StoreCode]
			,[IsActive]
			,[Icon]
			,[Color]
			,[DisplayOrder]
			,[CanDelete]
			,[CanEdit]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[RecId]
			FROM [dbo].[Store]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprStore_SelectAllByBranchIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Store]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprStore_DeleteAllByBranchId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Store]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprStore_SelectAllByStoreTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[StoreId]
			,[BranchId]
			,[StoreTypeId]
			,[StoreNameEn]
			,[StoreNameAr]
			,[StoreCode]
			,[IsActive]
			,[Icon]
			,[Color]
			,[DisplayOrder]
			,[CanDelete]
			,[CanEdit]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[RecId]
			FROM [dbo].[Store]
			WHERE 
			[StoreTypeId] = @StoreTypeId OR ([StoreTypeId] IS NULL AND @StoreTypeId IS NULL)
			";

		internal static string ctprStore_SelectAllByStoreTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Store]
			WHERE 
			[StoreTypeId] = @StoreTypeId OR ([StoreTypeId] IS NULL AND @StoreTypeId IS NULL)
			";

		internal static string ctprStore_DeleteAllByStoreTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Store]
			WHERE 
			[StoreTypeId] = @StoreTypeId OR ([StoreTypeId] IS NULL AND @StoreTypeId IS NULL)
			";

		internal static string ctprStore_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Store]
			(
			[BranchId]
			,[StoreTypeId]
			,[StoreNameEn]
			,[StoreNameAr]
			,[StoreCode]
			,[IsActive]
			,[Icon]
			,[Color]
			,[DisplayOrder]
			,[CanDelete]
			,[CanEdit]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[RecId]
			)
			VALUES
			(
			@BranchId
			,@StoreTypeId
			,@StoreNameEn
			,@StoreNameAr
			,@StoreCode
			,@IsActive
			,@Icon
			,@Color
			,@DisplayOrder
			,@CanDelete
			,@CanEdit
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@RecId
			)
			SELECT 
			@StoreId = [StoreId]
			,@BranchId = [BranchId]
			,@StoreTypeId = [StoreTypeId]
			,@StoreNameEn = [StoreNameEn]
			,@StoreNameAr = [StoreNameAr]
			,@StoreCode = [StoreCode]
			,@IsActive = [IsActive]
			,@Icon = [Icon]
			,@Color = [Color]
			,@DisplayOrder = [DisplayOrder]
			,@CanDelete = [CanDelete]
			,@CanEdit = [CanEdit]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@RecId = [RecId]
			FROM [dbo].[Store]
			WHERE 
			[StoreId] = SCOPE_IDENTITY()
			";

		internal static string ctprStore_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[StoreId]
			,[BranchId]
			,[StoreTypeId]
			,[StoreNameEn]
			,[StoreNameAr]
			,[StoreCode]
			,[IsActive]
			,[Icon]
			,[Color]
			,[DisplayOrder]
			,[CanDelete]
			,[CanEdit]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[RecId]
			FROM [dbo].[Store]
			";

		internal static string ctprStore_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Store]
			";

		internal static string ctprStore_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Store]
			##CRITERIA##
			";

		internal static string ctprStore_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[StoreId]
			,[BranchId]
			,[StoreTypeId]
			,[StoreNameEn]
			,[StoreNameAr]
			,[StoreCode]
			,[IsActive]
			,[Icon]
			,[Color]
			,[DisplayOrder]
			,[CanDelete]
			,[CanEdit]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[RecId]
			FROM [dbo].[Store]
			##CRITERIA##
			";

		internal static string ctprStore_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Store]
			##CRITERIA##
			";

		internal static string ctprStore_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Store]
			SET
			[BranchId] = @BranchId
			,[StoreTypeId] = @StoreTypeId
			,[StoreNameEn] = @StoreNameEn
			,[StoreNameAr] = @StoreNameAr
			,[StoreCode] = @StoreCode
			,[IsActive] = @IsActive
			,[Icon] = @Icon
			,[Color] = @Color
			,[DisplayOrder] = @DisplayOrder
			,[CanDelete] = @CanDelete
			,[CanEdit] = @CanEdit
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[RecId] = @RecId
			WHERE 
			[StoreId] = @StoreId
			SELECT 
			@StoreId = [StoreId]
			,@BranchId = [BranchId]
			,@StoreTypeId = [StoreTypeId]
			,@StoreNameEn = [StoreNameEn]
			,@StoreNameAr = [StoreNameAr]
			,@StoreCode = [StoreCode]
			,@IsActive = [IsActive]
			,@Icon = [Icon]
			,@Color = [Color]
			,@DisplayOrder = [DisplayOrder]
			,@CanDelete = [CanDelete]
			,@CanEdit = [CanEdit]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@RecId = [RecId]
			FROM [dbo].[Store]
			WHERE 
			[StoreId] = @StoreId
			";

	}
}
#endregion
