/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOCarVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected string _carNo;
		protected string _carCode;
		protected Int32? _branchId;
		protected Int32? _carId;
		protected Int32? _carTypeId;
		protected string _carTypeCode;
		protected string _carTypeNameEn;
		protected string _carTypeNameAr;
		protected Int32? _manufacturerId;
		protected Int32? _yearManufactur;
		protected string _manufacturerCode;
		protected string _manufacturerNameEn;
		protected string _manufacturerNameAr;
		protected string _model;
		protected bool? _isActive;
		#endregion

		#region class methods
		public DAOCarVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table CarVw
		///</Summary>
		///<returns>
		///IList-DAOCarVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOCarVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCarVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CarVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOCarVw> objList = new List<DAOCarVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCarVw retObj = new DAOCarVw();
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._carNo					 = Convert.IsDBNull(row["CarNo"]) ? null : (string)row["CarNo"];
						retObj._carCode					 = Convert.IsDBNull(row["CarCode"]) ? null : (string)row["CarCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._carId					 = Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"];
						retObj._carTypeId					 = Convert.IsDBNull(row["CarTypeId"]) ? (Int32?)null : (Int32?)row["CarTypeId"];
						retObj._carTypeCode					 = Convert.IsDBNull(row["CarTypeCode"]) ? null : (string)row["CarTypeCode"];
						retObj._carTypeNameEn					 = Convert.IsDBNull(row["CarTypeNameEn"]) ? null : (string)row["CarTypeNameEn"];
						retObj._carTypeNameAr					 = Convert.IsDBNull(row["CarTypeNameAr"]) ? null : (string)row["CarTypeNameAr"];
						retObj._manufacturerId					 = Convert.IsDBNull(row["ManufacturerId"]) ? (Int32?)null : (Int32?)row["ManufacturerId"];
						retObj._yearManufactur					 = Convert.IsDBNull(row["YearManufactur"]) ? (Int32?)null : (Int32?)row["YearManufactur"];
						retObj._manufacturerCode					 = Convert.IsDBNull(row["ManufacturerCode"]) ? null : (string)row["ManufacturerCode"];
						retObj._manufacturerNameEn					 = Convert.IsDBNull(row["ManufacturerNameEn"]) ? null : (string)row["ManufacturerNameEn"];
						retObj._manufacturerNameAr					 = Convert.IsDBNull(row["ManufacturerNameAr"]) ? null : (string)row["ManufacturerNameAr"];
						retObj._model					 = Convert.IsDBNull(row["Model"]) ? null : (string)row["Model"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCarVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiCarVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprCarVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CarVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "CarNo", true) == 0) lst.Add(Convert.IsDBNull(row["CarNo"]) ? null : (string)row["CarNo"]);
						if (string.Compare(projection.Member, "CarCode", true) == 0) lst.Add(Convert.IsDBNull(row["CarCode"]) ? null : (string)row["CarCode"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "CarId", true) == 0) lst.Add(Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"]);
						if (string.Compare(projection.Member, "CarTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["CarTypeId"]) ? (Int32?)null : (Int32?)row["CarTypeId"]);
						if (string.Compare(projection.Member, "CarTypeCode", true) == 0) lst.Add(Convert.IsDBNull(row["CarTypeCode"]) ? null : (string)row["CarTypeCode"]);
						if (string.Compare(projection.Member, "CarTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["CarTypeNameEn"]) ? null : (string)row["CarTypeNameEn"]);
						if (string.Compare(projection.Member, "CarTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["CarTypeNameAr"]) ? null : (string)row["CarTypeNameAr"]);
						if (string.Compare(projection.Member, "ManufacturerId", true) == 0) lst.Add(Convert.IsDBNull(row["ManufacturerId"]) ? (Int32?)null : (Int32?)row["ManufacturerId"]);
						if (string.Compare(projection.Member, "YearManufactur", true) == 0) lst.Add(Convert.IsDBNull(row["YearManufactur"]) ? (Int32?)null : (Int32?)row["YearManufactur"]);
						if (string.Compare(projection.Member, "ManufacturerCode", true) == 0) lst.Add(Convert.IsDBNull(row["ManufacturerCode"]) ? null : (string)row["ManufacturerCode"]);
						if (string.Compare(projection.Member, "ManufacturerNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ManufacturerNameEn"]) ? null : (string)row["ManufacturerNameEn"]);
						if (string.Compare(projection.Member, "ManufacturerNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ManufacturerNameAr"]) ? null : (string)row["ManufacturerNameAr"]);
						if (string.Compare(projection.Member, "Model", true) == 0) lst.Add(Convert.IsDBNull(row["Model"]) ? null : (string)row["Model"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api CarVw
		///</Summary>
		///<returns>
		///IList-DAOCarVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOCarVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprCarVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CarVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOCarVw> objList = new List<DAOCarVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCarVw retObj = new DAOCarVw();
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._carNo					 = Convert.IsDBNull(row["CarNo"]) ? null : (string)row["CarNo"];
						retObj._carCode					 = Convert.IsDBNull(row["CarCode"]) ? null : (string)row["CarCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._carId					 = Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"];
						retObj._carTypeId					 = Convert.IsDBNull(row["CarTypeId"]) ? (Int32?)null : (Int32?)row["CarTypeId"];
						retObj._carTypeCode					 = Convert.IsDBNull(row["CarTypeCode"]) ? null : (string)row["CarTypeCode"];
						retObj._carTypeNameEn					 = Convert.IsDBNull(row["CarTypeNameEn"]) ? null : (string)row["CarTypeNameEn"];
						retObj._carTypeNameAr					 = Convert.IsDBNull(row["CarTypeNameAr"]) ? null : (string)row["CarTypeNameAr"];
						retObj._manufacturerId					 = Convert.IsDBNull(row["ManufacturerId"]) ? (Int32?)null : (Int32?)row["ManufacturerId"];
						retObj._yearManufactur					 = Convert.IsDBNull(row["YearManufactur"]) ? (Int32?)null : (Int32?)row["YearManufactur"];
						retObj._manufacturerCode					 = Convert.IsDBNull(row["ManufacturerCode"]) ? null : (string)row["ManufacturerCode"];
						retObj._manufacturerNameEn					 = Convert.IsDBNull(row["ManufacturerNameEn"]) ? null : (string)row["ManufacturerNameEn"];
						retObj._manufacturerNameAr					 = Convert.IsDBNull(row["ManufacturerNameAr"]) ? null : (string)row["ManufacturerNameAr"];
						retObj._model					 = Convert.IsDBNull(row["Model"]) ? null : (string)row["Model"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api CarVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprCarVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string CarNo
		{
			get
			{
				return _carNo;
			}
			set
			{
				_carNo = value;
			}
		}

		public string CarCode
		{
			get
			{
				return _carCode;
			}
			set
			{
				_carCode = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? CarId
		{
			get
			{
				return _carId;
			}
			set
			{
				_carId = value;
			}
		}

		public Int32? CarTypeId
		{
			get
			{
				return _carTypeId;
			}
			set
			{
				_carTypeId = value;
			}
		}

		public string CarTypeCode
		{
			get
			{
				return _carTypeCode;
			}
			set
			{
				_carTypeCode = value;
			}
		}

		public string CarTypeNameEn
		{
			get
			{
				return _carTypeNameEn;
			}
			set
			{
				_carTypeNameEn = value;
			}
		}

		public string CarTypeNameAr
		{
			get
			{
				return _carTypeNameAr;
			}
			set
			{
				_carTypeNameAr = value;
			}
		}

		public Int32? ManufacturerId
		{
			get
			{
				return _manufacturerId;
			}
			set
			{
				_manufacturerId = value;
			}
		}

		public Int32? YearManufactur
		{
			get
			{
				return _yearManufactur;
			}
			set
			{
				_yearManufactur = value;
			}
		}

		public string ManufacturerCode
		{
			get
			{
				return _manufacturerCode;
			}
			set
			{
				_manufacturerCode = value;
			}
		}

		public string ManufacturerNameEn
		{
			get
			{
				return _manufacturerNameEn;
			}
			set
			{
				_manufacturerNameEn = value;
			}
		}

		public string ManufacturerNameAr
		{
			get
			{
				return _manufacturerNameAr;
			}
			set
			{
				_manufacturerNameAr = value;
			}
		}

		public string Model
		{
			get
			{
				return _model;
			}
			set
			{
				_model = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprCarVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[CarNo]
			,[CarCode]
			,[BranchId]
			,[CarId]
			,[CarTypeId]
			,[CarTypeCode]
			,[CarTypeNameEn]
			,[CarTypeNameAr]
			,[ManufacturerId]
			,[YearManufactur]
			,[ManufacturerCode]
			,[ManufacturerNameEn]
			,[ManufacturerNameAr]
			,[Model]
			,[IsActive]
			FROM [dbo].[CarVw]
			";

		internal static string ctprCarVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[CarVw]
			";

		internal static string ctprCarVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[CarVw]
			##CRITERIA##
			";

		internal static string ctprCarVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[CarNo]
			,[CarCode]
			,[BranchId]
			,[CarId]
			,[CarTypeId]
			,[CarTypeCode]
			,[CarTypeNameEn]
			,[CarTypeNameAr]
			,[ManufacturerId]
			,[YearManufactur]
			,[ManufacturerCode]
			,[ManufacturerNameEn]
			,[ManufacturerNameAr]
			,[Model]
			,[IsActive]
			FROM [dbo].[CarVw]
			##CRITERIA##
			";

		internal static string ctprCarVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[CarVw]
			##CRITERIA##
			";

	}
}
#endregion
