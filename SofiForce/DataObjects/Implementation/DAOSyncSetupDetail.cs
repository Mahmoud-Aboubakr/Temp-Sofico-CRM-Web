/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSyncSetupDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _detailId;
		protected Int32? _setupId;
		protected Int32? _userId;
		protected DateTime? _syncDate;
		protected string _payload1;
		protected string _payload2;
		protected string _payload3;
		protected string _payload4;
		protected bool? _isDone;
		protected bool? _inprogress;
		protected string _message;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOSyncSetupDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table SyncSetup_Detail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSyncSetupDetail
		///</returns>
		///<parameters>
		///Int64? detailId
		///</parameters>
		public static DAOSyncSetupDetail SelectOne(Int64? detailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SyncSetup_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)detailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSyncSetupDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSyncSetupDetail();
					retObj._detailId					 = Convert.IsDBNull(dt.Rows[0]["DetailId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["DetailId"];
					retObj._setupId					 = Convert.IsDBNull(dt.Rows[0]["SetupId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SetupId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._syncDate					 = Convert.IsDBNull(dt.Rows[0]["SyncDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["SyncDate"];
					retObj._payload1					 = Convert.IsDBNull(dt.Rows[0]["Payload1"]) ? null : (string)dt.Rows[0]["Payload1"];
					retObj._payload2					 = Convert.IsDBNull(dt.Rows[0]["Payload2"]) ? null : (string)dt.Rows[0]["Payload2"];
					retObj._payload3					 = Convert.IsDBNull(dt.Rows[0]["Payload3"]) ? null : (string)dt.Rows[0]["Payload3"];
					retObj._payload4					 = Convert.IsDBNull(dt.Rows[0]["Payload4"]) ? null : (string)dt.Rows[0]["Payload4"];
					retObj._isDone					 = Convert.IsDBNull(dt.Rows[0]["IsDone"]) ? (bool?)null : (bool?)dt.Rows[0]["IsDone"];
					retObj._inprogress					 = Convert.IsDBNull(dt.Rows[0]["Inprogress"]) ? (bool?)null : (bool?)dt.Rows[0]["Inprogress"];
					retObj._message					 = Convert.IsDBNull(dt.Rows[0]["Message"]) ? null : (string)dt.Rows[0]["Message"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table SyncSetup_Detail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SyncSetup_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSyncSetupDetail.
		///</returns>
		///<parameters>
		///Int32? setupId
		///</parameters>
		public static IList<DAOSyncSetupDetail> SelectAllBySetupId(Int32? setupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_SelectAllBySetupId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SyncSetup_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SetupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)setupId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSyncSetupDetail> objList = new List<DAOSyncSetupDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSyncSetupDetail retObj = new DAOSyncSetupDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._setupId					 = Convert.IsDBNull(row["SetupId"]) ? (Int32?)null : (Int32?)row["SetupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._syncDate					 = Convert.IsDBNull(row["SyncDate"]) ? (DateTime?)null : (DateTime?)row["SyncDate"];
						retObj._payload1					 = Convert.IsDBNull(row["Payload1"]) ? null : (string)row["Payload1"];
						retObj._payload2					 = Convert.IsDBNull(row["Payload2"]) ? null : (string)row["Payload2"];
						retObj._payload3					 = Convert.IsDBNull(row["Payload3"]) ? null : (string)row["Payload3"];
						retObj._payload4					 = Convert.IsDBNull(row["Payload4"]) ? null : (string)row["Payload4"];
						retObj._isDone					 = Convert.IsDBNull(row["IsDone"]) ? (bool?)null : (bool?)row["IsDone"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? setupId
		///</parameters>
		public static Int32 SelectAllBySetupIdCount(Int32? setupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_SelectAllBySetupIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SetupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)setupId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SyncSetup_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? setupId
		///</parameters>
		public static void DeleteAllBySetupId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? setupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_DeleteAllBySetupId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SetupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)setupId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table SyncSetup_Detail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _detailId));
				command.Parameters.Add(CtSqlParameter.Get("@SetupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_setupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SyncDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_syncDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload1", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload2", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload3", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload3?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload4", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload4?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsDone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isDone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Inprogress", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inprogress?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_setupId					 = Convert.IsDBNull(command.Parameters["@SetupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SetupId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_syncDate					 = Convert.IsDBNull(command.Parameters["@SyncDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@SyncDate"].Value;
				_payload1					 = Convert.IsDBNull(command.Parameters["@Payload1"].Value) ? null : (string)command.Parameters["@Payload1"].Value;
				_payload2					 = Convert.IsDBNull(command.Parameters["@Payload2"].Value) ? null : (string)command.Parameters["@Payload2"].Value;
				_payload3					 = Convert.IsDBNull(command.Parameters["@Payload3"].Value) ? null : (string)command.Parameters["@Payload3"].Value;
				_payload4					 = Convert.IsDBNull(command.Parameters["@Payload4"].Value) ? null : (string)command.Parameters["@Payload4"].Value;
				_isDone					 = Convert.IsDBNull(command.Parameters["@IsDone"].Value) ? (bool?)null : (bool?)command.Parameters["@IsDone"].Value;
				_inprogress					 = Convert.IsDBNull(command.Parameters["@Inprogress"].Value) ? (bool?)null : (bool?)command.Parameters["@Inprogress"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SyncSetup_Detail
		///</Summary>
		///<returns>
		///IList-DAOSyncSetupDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSyncSetupDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SyncSetup_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSyncSetupDetail> objList = new List<DAOSyncSetupDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSyncSetupDetail retObj = new DAOSyncSetupDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._setupId					 = Convert.IsDBNull(row["SetupId"]) ? (Int32?)null : (Int32?)row["SetupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._syncDate					 = Convert.IsDBNull(row["SyncDate"]) ? (DateTime?)null : (DateTime?)row["SyncDate"];
						retObj._payload1					 = Convert.IsDBNull(row["Payload1"]) ? null : (string)row["Payload1"];
						retObj._payload2					 = Convert.IsDBNull(row["Payload2"]) ? null : (string)row["Payload2"];
						retObj._payload3					 = Convert.IsDBNull(row["Payload3"]) ? null : (string)row["Payload3"];
						retObj._payload4					 = Convert.IsDBNull(row["Payload4"]) ? null : (string)row["Payload4"];
						retObj._isDone					 = Convert.IsDBNull(row["IsDone"]) ? (bool?)null : (bool?)row["IsDone"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSyncSetup_Detail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSyncSetup_Detail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SyncSetup_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"]);
						if (string.Compare(projection.Member, "SetupId", true) == 0) lst.Add(Convert.IsDBNull(row["SetupId"]) ? (Int32?)null : (Int32?)row["SetupId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "SyncDate", true) == 0) lst.Add(Convert.IsDBNull(row["SyncDate"]) ? (DateTime?)null : (DateTime?)row["SyncDate"]);
						if (string.Compare(projection.Member, "Payload1", true) == 0) lst.Add(Convert.IsDBNull(row["Payload1"]) ? null : (string)row["Payload1"]);
						if (string.Compare(projection.Member, "Payload2", true) == 0) lst.Add(Convert.IsDBNull(row["Payload2"]) ? null : (string)row["Payload2"]);
						if (string.Compare(projection.Member, "Payload3", true) == 0) lst.Add(Convert.IsDBNull(row["Payload3"]) ? null : (string)row["Payload3"]);
						if (string.Compare(projection.Member, "Payload4", true) == 0) lst.Add(Convert.IsDBNull(row["Payload4"]) ? null : (string)row["Payload4"]);
						if (string.Compare(projection.Member, "IsDone", true) == 0) lst.Add(Convert.IsDBNull(row["IsDone"]) ? (bool?)null : (bool?)row["IsDone"]);
						if (string.Compare(projection.Member, "Inprogress", true) == 0) lst.Add(Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"]);
						if (string.Compare(projection.Member, "Message", true) == 0) lst.Add(Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SyncSetup_Detail
		///</Summary>
		///<returns>
		///IList-DAOSyncSetupDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSyncSetupDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSyncSetup_Detail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SyncSetup_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSyncSetupDetail> objList = new List<DAOSyncSetupDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSyncSetupDetail retObj = new DAOSyncSetupDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._setupId					 = Convert.IsDBNull(row["SetupId"]) ? (Int32?)null : (Int32?)row["SetupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._syncDate					 = Convert.IsDBNull(row["SyncDate"]) ? (DateTime?)null : (DateTime?)row["SyncDate"];
						retObj._payload1					 = Convert.IsDBNull(row["Payload1"]) ? null : (string)row["Payload1"];
						retObj._payload2					 = Convert.IsDBNull(row["Payload2"]) ? null : (string)row["Payload2"];
						retObj._payload3					 = Convert.IsDBNull(row["Payload3"]) ? null : (string)row["Payload3"];
						retObj._payload4					 = Convert.IsDBNull(row["Payload4"]) ? null : (string)row["Payload4"];
						retObj._isDone					 = Convert.IsDBNull(row["IsDone"]) ? (bool?)null : (bool?)row["IsDone"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SyncSetup_Detail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSyncSetup_Detail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table SyncSetup_Detail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSyncSetup_Detail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SetupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_setupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SyncDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_syncDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload1", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload2", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload3", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload3?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Payload4", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_payload4?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsDone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isDone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Inprogress", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inprogress?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_setupId					 = Convert.IsDBNull(command.Parameters["@SetupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SetupId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_syncDate					 = Convert.IsDBNull(command.Parameters["@SyncDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@SyncDate"].Value;
				_payload1					 = Convert.IsDBNull(command.Parameters["@Payload1"].Value) ? null : (string)command.Parameters["@Payload1"].Value;
				_payload2					 = Convert.IsDBNull(command.Parameters["@Payload2"].Value) ? null : (string)command.Parameters["@Payload2"].Value;
				_payload3					 = Convert.IsDBNull(command.Parameters["@Payload3"].Value) ? null : (string)command.Parameters["@Payload3"].Value;
				_payload4					 = Convert.IsDBNull(command.Parameters["@Payload4"].Value) ? null : (string)command.Parameters["@Payload4"].Value;
				_isDone					 = Convert.IsDBNull(command.Parameters["@IsDone"].Value) ? (bool?)null : (bool?)command.Parameters["@IsDone"].Value;
				_inprogress					 = Convert.IsDBNull(command.Parameters["@Inprogress"].Value) ? (bool?)null : (bool?)command.Parameters["@Inprogress"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int32? SetupId
		{
			get
			{
				return _setupId;
			}
			set
			{
				_setupId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public DateTime? SyncDate
		{
			get
			{
				return _syncDate;
			}
			set
			{
				_syncDate = value;
			}
		}

		public string Payload1
		{
			get
			{
				return _payload1;
			}
			set
			{
				_payload1 = value;
			}
		}

		public string Payload2
		{
			get
			{
				return _payload2;
			}
			set
			{
				_payload2 = value;
			}
		}

		public string Payload3
		{
			get
			{
				return _payload3;
			}
			set
			{
				_payload3 = value;
			}
		}

		public string Payload4
		{
			get
			{
				return _payload4;
			}
			set
			{
				_payload4 = value;
			}
		}

		public bool? IsDone
		{
			get
			{
				return _isDone;
			}
			set
			{
				_isDone = value;
			}
		}

		public bool? Inprogress
		{
			get
			{
				return _inprogress;
			}
			set
			{
				_inprogress = value;
			}
		}

		public string Message
		{
			get
			{
				return _message;
			}
			set
			{
				_message = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSyncSetup_Detail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SetupId]
			,[UserId]
			,[SyncDate]
			,[Payload1]
			,[Payload2]
			,[Payload3]
			,[Payload4]
			,[IsDone]
			,[Inprogress]
			,[Message]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[SyncSetup_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprSyncSetup_Detail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[SyncSetup_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprSyncSetup_Detail_SelectAllBySetupId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SetupId]
			,[UserId]
			,[SyncDate]
			,[Payload1]
			,[Payload2]
			,[Payload3]
			,[Payload4]
			,[IsDone]
			,[Inprogress]
			,[Message]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[SyncSetup_Detail]
			WHERE 
			[SetupId] = @SetupId OR ([SetupId] IS NULL AND @SetupId IS NULL)
			";

		internal static string ctprSyncSetup_Detail_SelectAllBySetupIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SyncSetup_Detail]
			WHERE 
			[SetupId] = @SetupId OR ([SetupId] IS NULL AND @SetupId IS NULL)
			";

		internal static string ctprSyncSetup_Detail_DeleteAllBySetupId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SyncSetup_Detail]
			WHERE 
			[SetupId] = @SetupId OR ([SetupId] IS NULL AND @SetupId IS NULL)
			";

		internal static string ctprSyncSetup_Detail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[SyncSetup_Detail]
			(
			[SetupId]
			,[UserId]
			,[SyncDate]
			,[Payload1]
			,[Payload2]
			,[Payload3]
			,[Payload4]
			,[IsDone]
			,[Inprogress]
			,[Message]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@SetupId
			,@UserId
			,@SyncDate
			,@Payload1
			,@Payload2
			,@Payload3
			,@Payload4
			,@IsDone
			,@Inprogress
			,@Message
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@DetailId = [DetailId]
			,@SetupId = [SetupId]
			,@UserId = [UserId]
			,@SyncDate = [SyncDate]
			,@Payload1 = [Payload1]
			,@Payload2 = [Payload2]
			,@Payload3 = [Payload3]
			,@Payload4 = [Payload4]
			,@IsDone = [IsDone]
			,@Inprogress = [Inprogress]
			,@Message = [Message]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[SyncSetup_Detail]
			WHERE 
			[DetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprSyncSetup_Detail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SetupId]
			,[UserId]
			,[SyncDate]
			,[Payload1]
			,[Payload2]
			,[Payload3]
			,[Payload4]
			,[IsDone]
			,[Inprogress]
			,[Message]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[SyncSetup_Detail]
			";

		internal static string ctprSyncSetup_Detail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SyncSetup_Detail]
			";

		internal static string ctprSyncSetup_Detail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SyncSetup_Detail]
			##CRITERIA##
			";

		internal static string ctprSyncSetup_Detail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[SetupId]
			,[UserId]
			,[SyncDate]
			,[Payload1]
			,[Payload2]
			,[Payload3]
			,[Payload4]
			,[IsDone]
			,[Inprogress]
			,[Message]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[SyncSetup_Detail]
			##CRITERIA##
			";

		internal static string ctprSyncSetup_Detail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SyncSetup_Detail]
			##CRITERIA##
			";

		internal static string ctprSyncSetup_Detail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[SyncSetup_Detail]
			SET
			[SetupId] = @SetupId
			,[UserId] = @UserId
			,[SyncDate] = @SyncDate
			,[Payload1] = @Payload1
			,[Payload2] = @Payload2
			,[Payload3] = @Payload3
			,[Payload4] = @Payload4
			,[IsDone] = @IsDone
			,[Inprogress] = @Inprogress
			,[Message] = @Message
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[DetailId] = @DetailId
			SELECT 
			@DetailId = [DetailId]
			,@SetupId = [SetupId]
			,@UserId = [UserId]
			,@SyncDate = [SyncDate]
			,@Payload1 = [Payload1]
			,@Payload2 = [Payload2]
			,@Payload3 = [Payload3]
			,@Payload4 = [Payload4]
			,@IsDone = [IsDone]
			,@Inprogress = [Inprogress]
			,@Message = [Message]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[SyncSetup_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

	}
}
#endregion
