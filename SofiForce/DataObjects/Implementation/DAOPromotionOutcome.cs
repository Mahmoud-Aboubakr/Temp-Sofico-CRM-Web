/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPromotionOutcome : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _outcomeId;
		protected Int32? _promotionId;
		protected bool? _isActive;
		protected Int32? _count;
		protected Int32? _displayOrder;
		protected string _itemCode;
		protected decimal? _slice;
		protected decimal? _value;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOPromotionOutcome()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table PromotionOutcome based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOPromotionOutcome
		///</returns>
		///<parameters>
		///Int32? outcomeId
		///</parameters>
		public static DAOPromotionOutcome SelectOne(Int32? outcomeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOutcome");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OutcomeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)outcomeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOPromotionOutcome retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPromotionOutcome();
					retObj._outcomeId					 = Convert.IsDBNull(dt.Rows[0]["OutcomeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OutcomeId"];
					retObj._promotionId					 = Convert.IsDBNull(dt.Rows[0]["PromotionId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PromotionId"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._count					 = Convert.IsDBNull(dt.Rows[0]["Count"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Count"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._itemCode					 = Convert.IsDBNull(dt.Rows[0]["ItemCode"]) ? null : (string)dt.Rows[0]["ItemCode"];
					retObj._slice					 = Convert.IsDBNull(dt.Rows[0]["Slice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Slice"];
					retObj._value					 = Convert.IsDBNull(dt.Rows[0]["Value"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Value"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table PromotionOutcome based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OutcomeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_outcomeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PromotionOutcome based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotionOutcome.
		///</returns>
		///<parameters>
		///Int32? promotionId
		///</parameters>
		public static IList<DAOPromotionOutcome> SelectAllByPromotionId(Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_SelectAllByPromotionId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOutcome");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionOutcome> objList = new List<DAOPromotionOutcome>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionOutcome retObj = new DAOPromotionOutcome();
						retObj._outcomeId					 = Convert.IsDBNull(row["OutcomeId"]) ? (Int32?)null : (Int32?)row["OutcomeId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._count					 = Convert.IsDBNull(row["Count"]) ? (Int32?)null : (Int32?)row["Count"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._slice					 = Convert.IsDBNull(row["Slice"]) ? (decimal?)null : (decimal?)row["Slice"];
						retObj._value					 = Convert.IsDBNull(row["Value"]) ? (decimal?)null : (decimal?)row["Value"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? promotionId
		///</parameters>
		public static Int32 SelectAllByPromotionIdCount(Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_SelectAllByPromotionIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PromotionOutcome with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionId
		///</parameters>
		public static void DeleteAllByPromotionId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_DeleteAllByPromotionId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table PromotionOutcome
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OutcomeId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _outcomeId));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Count", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_count?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Slice", SqlDbType.Decimal, 17, ParameterDirection.InputOutput, true, 32, 16, "", DataRowVersion.Proposed, (object)_slice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Value", SqlDbType.Decimal, 17, ParameterDirection.InputOutput, true, 32, 16, "", DataRowVersion.Proposed, (object)_value?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_outcomeId					 = Convert.IsDBNull(command.Parameters["@OutcomeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OutcomeId"].Value;
				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_count					 = Convert.IsDBNull(command.Parameters["@Count"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Count"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_itemCode					 = Convert.IsDBNull(command.Parameters["@ItemCode"].Value) ? null : (string)command.Parameters["@ItemCode"].Value;
				_slice					 = Convert.IsDBNull(command.Parameters["@Slice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Slice"].Value;
				_value					 = Convert.IsDBNull(command.Parameters["@Value"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Value"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table PromotionOutcome
		///</Summary>
		///<returns>
		///IList-DAOPromotionOutcome.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPromotionOutcome> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOutcome");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionOutcome> objList = new List<DAOPromotionOutcome>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionOutcome retObj = new DAOPromotionOutcome();
						retObj._outcomeId					 = Convert.IsDBNull(row["OutcomeId"]) ? (Int32?)null : (Int32?)row["OutcomeId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._count					 = Convert.IsDBNull(row["Count"]) ? (Int32?)null : (Int32?)row["Count"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._slice					 = Convert.IsDBNull(row["Slice"]) ? (decimal?)null : (decimal?)row["Slice"];
						retObj._value					 = Convert.IsDBNull(row["Value"]) ? (decimal?)null : (decimal?)row["Value"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPromotionOutcome
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionOutcome_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOutcome");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "OutcomeId", true) == 0) lst.Add(Convert.IsDBNull(row["OutcomeId"]) ? (Int32?)null : (Int32?)row["OutcomeId"]);
						if (string.Compare(projection.Member, "PromotionId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "Count", true) == 0) lst.Add(Convert.IsDBNull(row["Count"]) ? (Int32?)null : (Int32?)row["Count"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "ItemCode", true) == 0) lst.Add(Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"]);
						if (string.Compare(projection.Member, "Slice", true) == 0) lst.Add(Convert.IsDBNull(row["Slice"]) ? (decimal?)null : (decimal?)row["Slice"]);
						if (string.Compare(projection.Member, "Value", true) == 0) lst.Add(Convert.IsDBNull(row["Value"]) ? (decimal?)null : (decimal?)row["Value"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api PromotionOutcome
		///</Summary>
		///<returns>
		///IList-DAOPromotionOutcome.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPromotionOutcome> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionOutcome_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOutcome");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionOutcome> objList = new List<DAOPromotionOutcome>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionOutcome retObj = new DAOPromotionOutcome();
						retObj._outcomeId					 = Convert.IsDBNull(row["OutcomeId"]) ? (Int32?)null : (Int32?)row["OutcomeId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._count					 = Convert.IsDBNull(row["Count"]) ? (Int32?)null : (Int32?)row["Count"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._slice					 = Convert.IsDBNull(row["Slice"]) ? (decimal?)null : (decimal?)row["Slice"];
						retObj._value					 = Convert.IsDBNull(row["Value"]) ? (decimal?)null : (decimal?)row["Value"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api PromotionOutcome
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionOutcome_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table PromotionOutcome based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOutcome_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OutcomeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_outcomeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Count", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_count?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Slice", SqlDbType.Decimal, 17, ParameterDirection.InputOutput, true, 32, 16, "", DataRowVersion.Proposed, (object)_slice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Value", SqlDbType.Decimal, 17, ParameterDirection.InputOutput, true, 32, 16, "", DataRowVersion.Proposed, (object)_value?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_outcomeId					 = Convert.IsDBNull(command.Parameters["@OutcomeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OutcomeId"].Value;
				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_count					 = Convert.IsDBNull(command.Parameters["@Count"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Count"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_itemCode					 = Convert.IsDBNull(command.Parameters["@ItemCode"].Value) ? null : (string)command.Parameters["@ItemCode"].Value;
				_slice					 = Convert.IsDBNull(command.Parameters["@Slice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Slice"].Value;
				_value					 = Convert.IsDBNull(command.Parameters["@Value"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Value"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? OutcomeId
		{
			get
			{
				return _outcomeId;
			}
			set
			{
				_outcomeId = value;
			}
		}

		public Int32? PromotionId
		{
			get
			{
				return _promotionId;
			}
			set
			{
				_promotionId = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? Count
		{
			get
			{
				return _count;
			}
			set
			{
				_count = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public string ItemCode
		{
			get
			{
				return _itemCode;
			}
			set
			{
				_itemCode = value;
			}
		}

		public decimal? Slice
		{
			get
			{
				return _slice;
			}
			set
			{
				_slice = value;
			}
		}

		public decimal? Value
		{
			get
			{
				return _value;
			}
			set
			{
				_value = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPromotionOutcome_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[OutcomeId]
			,[PromotionId]
			,[IsActive]
			,[Count]
			,[DisplayOrder]
			,[ItemCode]
			,[Slice]
			,[Value]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PromotionOutcome]
			WHERE 
			[OutcomeId] = @OutcomeId
			";

		internal static string ctprPromotionOutcome_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[PromotionOutcome]
			WHERE 
			[OutcomeId] = @OutcomeId
			";

		internal static string ctprPromotionOutcome_SelectAllByPromotionId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OutcomeId]
			,[PromotionId]
			,[IsActive]
			,[Count]
			,[DisplayOrder]
			,[ItemCode]
			,[Slice]
			,[Value]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PromotionOutcome]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprPromotionOutcome_SelectAllByPromotionIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromotionOutcome]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprPromotionOutcome_DeleteAllByPromotionId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PromotionOutcome]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprPromotionOutcome_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[PromotionOutcome]
			(
			[PromotionId]
			,[IsActive]
			,[Count]
			,[DisplayOrder]
			,[ItemCode]
			,[Slice]
			,[Value]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@PromotionId
			,@IsActive
			,@Count
			,@DisplayOrder
			,@ItemCode
			,@Slice
			,@Value
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@OutcomeId = [OutcomeId]
			,@PromotionId = [PromotionId]
			,@IsActive = [IsActive]
			,@Count = [Count]
			,@DisplayOrder = [DisplayOrder]
			,@ItemCode = [ItemCode]
			,@Slice = [Slice]
			,@Value = [Value]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[PromotionOutcome]
			WHERE 
			[OutcomeId] = SCOPE_IDENTITY()
			";

		internal static string ctprPromotionOutcome_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[OutcomeId]
			,[PromotionId]
			,[IsActive]
			,[Count]
			,[DisplayOrder]
			,[ItemCode]
			,[Slice]
			,[Value]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PromotionOutcome]
			";

		internal static string ctprPromotionOutcome_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromotionOutcome]
			";

		internal static string ctprPromotionOutcome_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[PromotionOutcome]
			##CRITERIA##
			";

		internal static string ctprPromotionOutcome_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[OutcomeId]
			,[PromotionId]
			,[IsActive]
			,[Count]
			,[DisplayOrder]
			,[ItemCode]
			,[Slice]
			,[Value]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PromotionOutcome]
			##CRITERIA##
			";

		internal static string ctprPromotionOutcome_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[PromotionOutcome]
			##CRITERIA##
			";

		internal static string ctprPromotionOutcome_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[PromotionOutcome]
			SET
			[PromotionId] = @PromotionId
			,[IsActive] = @IsActive
			,[Count] = @Count
			,[DisplayOrder] = @DisplayOrder
			,[ItemCode] = @ItemCode
			,[Slice] = @Slice
			,[Value] = @Value
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[OutcomeId] = @OutcomeId
			SELECT 
			@OutcomeId = [OutcomeId]
			,@PromotionId = [PromotionId]
			,@IsActive = [IsActive]
			,@Count = [Count]
			,@DisplayOrder = [DisplayOrder]
			,@ItemCode = [ItemCode]
			,@Slice = [Slice]
			,@Value = [Value]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[PromotionOutcome]
			WHERE 
			[OutcomeId] = @OutcomeId
			";

	}
}
#endregion
