/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOOperationRequest : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _operationId;
		protected string _operationCode;
		protected Int32? _agentId;
		protected Int32? _operationTypeId;
		protected Int32? _governerateId;
		protected Int32? _representativeId;
		protected DateTime? _operationDate;
		protected DateTime? _startDate;
		protected Int32? _targetDays;
		protected Int32? _actualDays;
		protected Int32? _targetClients;
		protected Int32? _actualClients;
		protected decimal? _daysPerformance;
		protected decimal? _clientsPerformance;
		protected decimal? _accuracy;
		protected string _mapPoints;
		protected bool? _isClosed;
		protected DateTime? _closeDate;
		protected string _notes;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOOperationRequest()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table OperationRequest based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOOperationRequest
		///</returns>
		///<parameters>
		///Int32? operationId
		///</parameters>
		public static DAOOperationRequest SelectOne(Int32? operationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)operationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOOperationRequest retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOperationRequest();
					retObj._operationId					 = Convert.IsDBNull(dt.Rows[0]["OperationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OperationId"];
					retObj._operationCode					 = Convert.IsDBNull(dt.Rows[0]["OperationCode"]) ? null : (string)dt.Rows[0]["OperationCode"];
					retObj._agentId					 = Convert.IsDBNull(dt.Rows[0]["AgentId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AgentId"];
					retObj._operationTypeId					 = Convert.IsDBNull(dt.Rows[0]["OperationTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OperationTypeId"];
					retObj._governerateId					 = Convert.IsDBNull(dt.Rows[0]["GovernerateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["GovernerateId"];
					retObj._representativeId					 = Convert.IsDBNull(dt.Rows[0]["RepresentativeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RepresentativeId"];
					retObj._operationDate					 = Convert.IsDBNull(dt.Rows[0]["OperationDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["OperationDate"];
					retObj._startDate					 = Convert.IsDBNull(dt.Rows[0]["StartDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["StartDate"];
					retObj._targetDays					 = Convert.IsDBNull(dt.Rows[0]["TargetDays"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetDays"];
					retObj._actualDays					 = Convert.IsDBNull(dt.Rows[0]["ActualDays"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ActualDays"];
					retObj._targetClients					 = Convert.IsDBNull(dt.Rows[0]["TargetClients"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetClients"];
					retObj._actualClients					 = Convert.IsDBNull(dt.Rows[0]["ActualClients"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ActualClients"];
					retObj._daysPerformance					 = Convert.IsDBNull(dt.Rows[0]["DaysPerformance"]) ? (decimal?)null : (decimal?)dt.Rows[0]["DaysPerformance"];
					retObj._clientsPerformance					 = Convert.IsDBNull(dt.Rows[0]["ClientsPerformance"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ClientsPerformance"];
					retObj._accuracy					 = Convert.IsDBNull(dt.Rows[0]["Accuracy"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Accuracy"];
					retObj._mapPoints					 = Convert.IsDBNull(dt.Rows[0]["MapPoints"]) ? null : (string)dt.Rows[0]["MapPoints"];
					retObj._isClosed					 = Convert.IsDBNull(dt.Rows[0]["IsClosed"]) ? (bool?)null : (bool?)dt.Rows[0]["IsClosed"];
					retObj._closeDate					 = Convert.IsDBNull(dt.Rows[0]["CloseDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CloseDate"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table OperationRequest based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_operationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequest.
		///</returns>
		///<parameters>
		///Int32? operationTypeId
		///</parameters>
		public static IList<DAOOperationRequest> SelectAllByOperationTypeId(Int32? operationTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAllByOperationTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequest> objList = new List<DAOOperationRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequest retObj = new DAOOperationRequest();
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationCode					 = Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._targetDays					 = Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"];
						retObj._actualDays					 = Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"];
						retObj._targetClients					 = Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"];
						retObj._actualClients					 = Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"];
						retObj._daysPerformance					 = Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"];
						retObj._clientsPerformance					 = Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._mapPoints					 = Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? operationTypeId
		///</parameters>
		public static Int32 SelectAllByOperationTypeIdCount(Int32? operationTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAllByOperationTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationTypeId
		///</parameters>
		public static void DeleteAllByOperationTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_DeleteAllByOperationTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequest.
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static IList<DAOOperationRequest> SelectAllByGovernerateId(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAllByGovernerateId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequest> objList = new List<DAOOperationRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequest retObj = new DAOOperationRequest();
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationCode					 = Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._targetDays					 = Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"];
						retObj._actualDays					 = Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"];
						retObj._targetClients					 = Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"];
						retObj._actualClients					 = Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"];
						retObj._daysPerformance					 = Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"];
						retObj._clientsPerformance					 = Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._mapPoints					 = Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static Int32 SelectAllByGovernerateIdCount(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAllByGovernerateIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId
		///</parameters>
		public static void DeleteAllByGovernerateId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_DeleteAllByGovernerateId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequest.
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static IList<DAOOperationRequest> SelectAllByRepresentativeId(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequest> objList = new List<DAOOperationRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequest retObj = new DAOOperationRequest();
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationCode					 = Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._targetDays					 = Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"];
						retObj._actualDays					 = Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"];
						retObj._targetClients					 = Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"];
						retObj._actualClients					 = Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"];
						retObj._daysPerformance					 = Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"];
						retObj._clientsPerformance					 = Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._mapPoints					 = Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static Int32 SelectAllByRepresentativeIdCount(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAllByRepresentativeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId
		///</parameters>
		public static void DeleteAllByRepresentativeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_DeleteAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table OperationRequest
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _operationId));
				command.Parameters.Add(CtSqlParameter.Get("@OperationCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_operationCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_agentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_operationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StartDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_startDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TargetDays", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_targetDays?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActualDays", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_actualDays?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TargetClients", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_targetClients?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActualClients", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_actualClients?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DaysPerformance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_daysPerformance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientsPerformance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_clientsPerformance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Accuracy", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_accuracy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MapPoints", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mapPoints?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsClosed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isClosed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CloseDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_closeDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_operationId					 = Convert.IsDBNull(command.Parameters["@OperationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationId"].Value;
				_operationCode					 = Convert.IsDBNull(command.Parameters["@OperationCode"].Value) ? null : (string)command.Parameters["@OperationCode"].Value;
				_agentId					 = Convert.IsDBNull(command.Parameters["@AgentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AgentId"].Value;
				_operationTypeId					 = Convert.IsDBNull(command.Parameters["@OperationTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationTypeId"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_operationDate					 = Convert.IsDBNull(command.Parameters["@OperationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@OperationDate"].Value;
				_startDate					 = Convert.IsDBNull(command.Parameters["@StartDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@StartDate"].Value;
				_targetDays					 = Convert.IsDBNull(command.Parameters["@TargetDays"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TargetDays"].Value;
				_actualDays					 = Convert.IsDBNull(command.Parameters["@ActualDays"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ActualDays"].Value;
				_targetClients					 = Convert.IsDBNull(command.Parameters["@TargetClients"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TargetClients"].Value;
				_actualClients					 = Convert.IsDBNull(command.Parameters["@ActualClients"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ActualClients"].Value;
				_daysPerformance					 = Convert.IsDBNull(command.Parameters["@DaysPerformance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DaysPerformance"].Value;
				_clientsPerformance					 = Convert.IsDBNull(command.Parameters["@ClientsPerformance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ClientsPerformance"].Value;
				_accuracy					 = Convert.IsDBNull(command.Parameters["@Accuracy"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Accuracy"].Value;
				_mapPoints					 = Convert.IsDBNull(command.Parameters["@MapPoints"].Value) ? null : (string)command.Parameters["@MapPoints"].Value;
				_isClosed					 = Convert.IsDBNull(command.Parameters["@IsClosed"].Value) ? (bool?)null : (bool?)command.Parameters["@IsClosed"].Value;
				_closeDate					 = Convert.IsDBNull(command.Parameters["@CloseDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CloseDate"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table OperationRequest
		///</Summary>
		///<returns>
		///IList-DAOOperationRequest.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOOperationRequest> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequest> objList = new List<DAOOperationRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequest retObj = new DAOOperationRequest();
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationCode					 = Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._targetDays					 = Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"];
						retObj._actualDays					 = Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"];
						retObj._targetClients					 = Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"];
						retObj._actualClients					 = Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"];
						retObj._daysPerformance					 = Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"];
						retObj._clientsPerformance					 = Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._mapPoints					 = Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiOperationRequest
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "OperationId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"]);
						if (string.Compare(projection.Member, "OperationCode", true) == 0) lst.Add(Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"]);
						if (string.Compare(projection.Member, "AgentId", true) == 0) lst.Add(Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"]);
						if (string.Compare(projection.Member, "OperationTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "OperationDate", true) == 0) lst.Add(Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"]);
						if (string.Compare(projection.Member, "StartDate", true) == 0) lst.Add(Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"]);
						if (string.Compare(projection.Member, "TargetDays", true) == 0) lst.Add(Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"]);
						if (string.Compare(projection.Member, "ActualDays", true) == 0) lst.Add(Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"]);
						if (string.Compare(projection.Member, "TargetClients", true) == 0) lst.Add(Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"]);
						if (string.Compare(projection.Member, "ActualClients", true) == 0) lst.Add(Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"]);
						if (string.Compare(projection.Member, "DaysPerformance", true) == 0) lst.Add(Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"]);
						if (string.Compare(projection.Member, "ClientsPerformance", true) == 0) lst.Add(Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"]);
						if (string.Compare(projection.Member, "Accuracy", true) == 0) lst.Add(Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"]);
						if (string.Compare(projection.Member, "MapPoints", true) == 0) lst.Add(Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"]);
						if (string.Compare(projection.Member, "IsClosed", true) == 0) lst.Add(Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"]);
						if (string.Compare(projection.Member, "CloseDate", true) == 0) lst.Add(Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api OperationRequest
		///</Summary>
		///<returns>
		///IList-DAOOperationRequest.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOOperationRequest> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequest> objList = new List<DAOOperationRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequest retObj = new DAOOperationRequest();
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationCode					 = Convert.IsDBNull(row["OperationCode"]) ? null : (string)row["OperationCode"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._targetDays					 = Convert.IsDBNull(row["TargetDays"]) ? (Int32?)null : (Int32?)row["TargetDays"];
						retObj._actualDays					 = Convert.IsDBNull(row["ActualDays"]) ? (Int32?)null : (Int32?)row["ActualDays"];
						retObj._targetClients					 = Convert.IsDBNull(row["TargetClients"]) ? (Int32?)null : (Int32?)row["TargetClients"];
						retObj._actualClients					 = Convert.IsDBNull(row["ActualClients"]) ? (Int32?)null : (Int32?)row["ActualClients"];
						retObj._daysPerformance					 = Convert.IsDBNull(row["DaysPerformance"]) ? (decimal?)null : (decimal?)row["DaysPerformance"];
						retObj._clientsPerformance					 = Convert.IsDBNull(row["ClientsPerformance"]) ? (decimal?)null : (decimal?)row["ClientsPerformance"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._mapPoints					 = Convert.IsDBNull(row["MapPoints"]) ? null : (string)row["MapPoints"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api OperationRequest
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table OperationRequest based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_operationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_operationCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_agentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_operationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StartDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_startDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TargetDays", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_targetDays?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActualDays", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_actualDays?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TargetClients", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_targetClients?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActualClients", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_actualClients?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DaysPerformance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_daysPerformance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientsPerformance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_clientsPerformance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Accuracy", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_accuracy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MapPoints", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mapPoints?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsClosed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isClosed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CloseDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_closeDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_operationId					 = Convert.IsDBNull(command.Parameters["@OperationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationId"].Value;
				_operationCode					 = Convert.IsDBNull(command.Parameters["@OperationCode"].Value) ? null : (string)command.Parameters["@OperationCode"].Value;
				_agentId					 = Convert.IsDBNull(command.Parameters["@AgentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AgentId"].Value;
				_operationTypeId					 = Convert.IsDBNull(command.Parameters["@OperationTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationTypeId"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_operationDate					 = Convert.IsDBNull(command.Parameters["@OperationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@OperationDate"].Value;
				_startDate					 = Convert.IsDBNull(command.Parameters["@StartDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@StartDate"].Value;
				_targetDays					 = Convert.IsDBNull(command.Parameters["@TargetDays"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TargetDays"].Value;
				_actualDays					 = Convert.IsDBNull(command.Parameters["@ActualDays"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ActualDays"].Value;
				_targetClients					 = Convert.IsDBNull(command.Parameters["@TargetClients"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TargetClients"].Value;
				_actualClients					 = Convert.IsDBNull(command.Parameters["@ActualClients"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ActualClients"].Value;
				_daysPerformance					 = Convert.IsDBNull(command.Parameters["@DaysPerformance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DaysPerformance"].Value;
				_clientsPerformance					 = Convert.IsDBNull(command.Parameters["@ClientsPerformance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ClientsPerformance"].Value;
				_accuracy					 = Convert.IsDBNull(command.Parameters["@Accuracy"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Accuracy"].Value;
				_mapPoints					 = Convert.IsDBNull(command.Parameters["@MapPoints"].Value) ? null : (string)command.Parameters["@MapPoints"].Value;
				_isClosed					 = Convert.IsDBNull(command.Parameters["@IsClosed"].Value) ? (bool?)null : (bool?)command.Parameters["@IsClosed"].Value;
				_closeDate					 = Convert.IsDBNull(command.Parameters["@CloseDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CloseDate"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? OperationId
		{
			get
			{
				return _operationId;
			}
			set
			{
				_operationId = value;
			}
		}

		public string OperationCode
		{
			get
			{
				return _operationCode;
			}
			set
			{
				_operationCode = value;
			}
		}

		public Int32? AgentId
		{
			get
			{
				return _agentId;
			}
			set
			{
				_agentId = value;
			}
		}

		public Int32? OperationTypeId
		{
			get
			{
				return _operationTypeId;
			}
			set
			{
				_operationTypeId = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public DateTime? OperationDate
		{
			get
			{
				return _operationDate;
			}
			set
			{
				_operationDate = value;
			}
		}

		public DateTime? StartDate
		{
			get
			{
				return _startDate;
			}
			set
			{
				_startDate = value;
			}
		}

		public Int32? TargetDays
		{
			get
			{
				return _targetDays;
			}
			set
			{
				_targetDays = value;
			}
		}

		public Int32? ActualDays
		{
			get
			{
				return _actualDays;
			}
			set
			{
				_actualDays = value;
			}
		}

		public Int32? TargetClients
		{
			get
			{
				return _targetClients;
			}
			set
			{
				_targetClients = value;
			}
		}

		public Int32? ActualClients
		{
			get
			{
				return _actualClients;
			}
			set
			{
				_actualClients = value;
			}
		}

		public decimal? DaysPerformance
		{
			get
			{
				return _daysPerformance;
			}
			set
			{
				_daysPerformance = value;
			}
		}

		public decimal? ClientsPerformance
		{
			get
			{
				return _clientsPerformance;
			}
			set
			{
				_clientsPerformance = value;
			}
		}

		public decimal? Accuracy
		{
			get
			{
				return _accuracy;
			}
			set
			{
				_accuracy = value;
			}
		}

		public string MapPoints
		{
			get
			{
				return _mapPoints;
			}
			set
			{
				_mapPoints = value;
			}
		}

		public bool? IsClosed
		{
			get
			{
				return _isClosed;
			}
			set
			{
				_isClosed = value;
			}
		}

		public DateTime? CloseDate
		{
			get
			{
				return _closeDate;
			}
			set
			{
				_closeDate = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprOperationRequest_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[GovernerateId]
			,[RepresentativeId]
			,[OperationDate]
			,[StartDate]
			,[TargetDays]
			,[ActualDays]
			,[TargetClients]
			,[ActualClients]
			,[DaysPerformance]
			,[ClientsPerformance]
			,[Accuracy]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[Notes]
			,[CBy]
			,[EBy]
			,[CDate]
			,[EDate]
			FROM [dbo].[OperationRequest]
			WHERE 
			[OperationId] = @OperationId
			";

		internal static string ctprOperationRequest_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest]
			WHERE 
			[OperationId] = @OperationId
			";

		internal static string ctprOperationRequest_SelectAllByOperationTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[GovernerateId]
			,[RepresentativeId]
			,[OperationDate]
			,[StartDate]
			,[TargetDays]
			,[ActualDays]
			,[TargetClients]
			,[ActualClients]
			,[DaysPerformance]
			,[ClientsPerformance]
			,[Accuracy]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[Notes]
			,[CBy]
			,[EBy]
			,[CDate]
			,[EDate]
			FROM [dbo].[OperationRequest]
			WHERE 
			[OperationTypeId] = @OperationTypeId OR ([OperationTypeId] IS NULL AND @OperationTypeId IS NULL)
			";

		internal static string ctprOperationRequest_SelectAllByOperationTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest]
			WHERE 
			[OperationTypeId] = @OperationTypeId OR ([OperationTypeId] IS NULL AND @OperationTypeId IS NULL)
			";

		internal static string ctprOperationRequest_DeleteAllByOperationTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest]
			WHERE 
			[OperationTypeId] = @OperationTypeId OR ([OperationTypeId] IS NULL AND @OperationTypeId IS NULL)
			";

		internal static string ctprOperationRequest_SelectAllByGovernerateId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[GovernerateId]
			,[RepresentativeId]
			,[OperationDate]
			,[StartDate]
			,[TargetDays]
			,[ActualDays]
			,[TargetClients]
			,[ActualClients]
			,[DaysPerformance]
			,[ClientsPerformance]
			,[Accuracy]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[Notes]
			,[CBy]
			,[EBy]
			,[CDate]
			,[EDate]
			FROM [dbo].[OperationRequest]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprOperationRequest_SelectAllByGovernerateIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprOperationRequest_DeleteAllByGovernerateId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprOperationRequest_SelectAllByRepresentativeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[GovernerateId]
			,[RepresentativeId]
			,[OperationDate]
			,[StartDate]
			,[TargetDays]
			,[ActualDays]
			,[TargetClients]
			,[ActualClients]
			,[DaysPerformance]
			,[ClientsPerformance]
			,[Accuracy]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[Notes]
			,[CBy]
			,[EBy]
			,[CDate]
			,[EDate]
			FROM [dbo].[OperationRequest]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprOperationRequest_SelectAllByRepresentativeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprOperationRequest_DeleteAllByRepresentativeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprOperationRequest_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[OperationRequest]
			(
			[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[GovernerateId]
			,[RepresentativeId]
			,[OperationDate]
			,[StartDate]
			,[TargetDays]
			,[ActualDays]
			,[TargetClients]
			,[ActualClients]
			,[DaysPerformance]
			,[ClientsPerformance]
			,[Accuracy]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[Notes]
			,[CBy]
			,[EBy]
			,[CDate]
			,[EDate]
			)
			VALUES
			(
			@OperationCode
			,@AgentId
			,@OperationTypeId
			,@GovernerateId
			,@RepresentativeId
			,@OperationDate
			,@StartDate
			,@TargetDays
			,@ActualDays
			,@TargetClients
			,@ActualClients
			,@DaysPerformance
			,@ClientsPerformance
			,@Accuracy
			,@MapPoints
			,@IsClosed
			,@CloseDate
			,@Notes
			,@CBy
			,@EBy
			,@CDate
			,@EDate
			)
			SELECT 
			@OperationId = [OperationId]
			,@OperationCode = [OperationCode]
			,@AgentId = [AgentId]
			,@OperationTypeId = [OperationTypeId]
			,@GovernerateId = [GovernerateId]
			,@RepresentativeId = [RepresentativeId]
			,@OperationDate = [OperationDate]
			,@StartDate = [StartDate]
			,@TargetDays = [TargetDays]
			,@ActualDays = [ActualDays]
			,@TargetClients = [TargetClients]
			,@ActualClients = [ActualClients]
			,@DaysPerformance = [DaysPerformance]
			,@ClientsPerformance = [ClientsPerformance]
			,@Accuracy = [Accuracy]
			,@MapPoints = [MapPoints]
			,@IsClosed = [IsClosed]
			,@CloseDate = [CloseDate]
			,@Notes = [Notes]
			,@CBy = [CBy]
			,@EBy = [EBy]
			,@CDate = [CDate]
			,@EDate = [EDate]
			FROM [dbo].[OperationRequest]
			WHERE 
			[OperationId] = SCOPE_IDENTITY()
			";

		internal static string ctprOperationRequest_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[GovernerateId]
			,[RepresentativeId]
			,[OperationDate]
			,[StartDate]
			,[TargetDays]
			,[ActualDays]
			,[TargetClients]
			,[ActualClients]
			,[DaysPerformance]
			,[ClientsPerformance]
			,[Accuracy]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[Notes]
			,[CBy]
			,[EBy]
			,[CDate]
			,[EDate]
			FROM [dbo].[OperationRequest]
			";

		internal static string ctprOperationRequest_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest]
			";

		internal static string ctprOperationRequest_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[OperationRequest]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[OperationId]
			,[OperationCode]
			,[AgentId]
			,[OperationTypeId]
			,[GovernerateId]
			,[RepresentativeId]
			,[OperationDate]
			,[StartDate]
			,[TargetDays]
			,[ActualDays]
			,[TargetClients]
			,[ActualClients]
			,[DaysPerformance]
			,[ClientsPerformance]
			,[Accuracy]
			,[MapPoints]
			,[IsClosed]
			,[CloseDate]
			,[Notes]
			,[CBy]
			,[EBy]
			,[CDate]
			,[EDate]
			FROM [dbo].[OperationRequest]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[OperationRequest]
			SET
			[OperationCode] = @OperationCode
			,[AgentId] = @AgentId
			,[OperationTypeId] = @OperationTypeId
			,[GovernerateId] = @GovernerateId
			,[RepresentativeId] = @RepresentativeId
			,[OperationDate] = @OperationDate
			,[StartDate] = @StartDate
			,[TargetDays] = @TargetDays
			,[ActualDays] = @ActualDays
			,[TargetClients] = @TargetClients
			,[ActualClients] = @ActualClients
			,[DaysPerformance] = @DaysPerformance
			,[ClientsPerformance] = @ClientsPerformance
			,[Accuracy] = @Accuracy
			,[MapPoints] = @MapPoints
			,[IsClosed] = @IsClosed
			,[CloseDate] = @CloseDate
			,[Notes] = @Notes
			,[CBy] = @CBy
			,[EBy] = @EBy
			,[CDate] = @CDate
			,[EDate] = @EDate
			WHERE 
			[OperationId] = @OperationId
			SELECT 
			@OperationId = [OperationId]
			,@OperationCode = [OperationCode]
			,@AgentId = [AgentId]
			,@OperationTypeId = [OperationTypeId]
			,@GovernerateId = [GovernerateId]
			,@RepresentativeId = [RepresentativeId]
			,@OperationDate = [OperationDate]
			,@StartDate = [StartDate]
			,@TargetDays = [TargetDays]
			,@ActualDays = [ActualDays]
			,@TargetClients = [TargetClients]
			,@ActualClients = [ActualClients]
			,@DaysPerformance = [DaysPerformance]
			,@ClientsPerformance = [ClientsPerformance]
			,@Accuracy = [Accuracy]
			,@MapPoints = [MapPoints]
			,@IsClosed = [IsClosed]
			,@CloseDate = [CloseDate]
			,@Notes = [Notes]
			,@CBy = [CBy]
			,@EBy = [EBy]
			,@CDate = [CDate]
			,@EDate = [EDate]
			FROM [dbo].[OperationRequest]
			WHERE 
			[OperationId] = @OperationId
			";

	}
}
#endregion
