/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOApplicationSetting : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _appSettingId;
		protected Int32? _applicationId;
		protected string _appSettingCode;
		protected string _appSettingName;
		protected string _appSettingValue;
		protected DateTime? _appSettingLastDate;
		#endregion

		#region class methods
		public DAOApplicationSetting()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Application_Setting based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOApplicationSetting
		///</returns>
		///<parameters>
		///Int32? appSettingId
		///</parameters>
		public static DAOApplicationSetting SelectOne(Int32? appSettingId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Setting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)appSettingId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOApplicationSetting retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOApplicationSetting();
					retObj._appSettingId					 = Convert.IsDBNull(dt.Rows[0]["AppSettingId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AppSettingId"];
					retObj._applicationId					 = Convert.IsDBNull(dt.Rows[0]["ApplicationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ApplicationId"];
					retObj._appSettingCode					 = Convert.IsDBNull(dt.Rows[0]["AppSettingCode"]) ? null : (string)dt.Rows[0]["AppSettingCode"];
					retObj._appSettingName					 = Convert.IsDBNull(dt.Rows[0]["AppSettingName"]) ? null : (string)dt.Rows[0]["AppSettingName"];
					retObj._appSettingValue					 = Convert.IsDBNull(dt.Rows[0]["AppSettingValue"]) ? null : (string)dt.Rows[0]["AppSettingValue"];
					retObj._appSettingLastDate					 = Convert.IsDBNull(dt.Rows[0]["AppSettingLastDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["AppSettingLastDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Application_Setting based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_appSettingId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Application_Setting based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOApplicationSetting.
		///</returns>
		///<parameters>
		///Int32? applicationId
		///</parameters>
		public static IList<DAOApplicationSetting> SelectAllByApplicationId(Int32? applicationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_SelectAllByApplicationId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Setting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)applicationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOApplicationSetting> objList = new List<DAOApplicationSetting>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOApplicationSetting retObj = new DAOApplicationSetting();
						retObj._appSettingId					 = Convert.IsDBNull(row["AppSettingId"]) ? (Int32?)null : (Int32?)row["AppSettingId"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						retObj._appSettingCode					 = Convert.IsDBNull(row["AppSettingCode"]) ? null : (string)row["AppSettingCode"];
						retObj._appSettingName					 = Convert.IsDBNull(row["AppSettingName"]) ? null : (string)row["AppSettingName"];
						retObj._appSettingValue					 = Convert.IsDBNull(row["AppSettingValue"]) ? null : (string)row["AppSettingValue"];
						retObj._appSettingLastDate					 = Convert.IsDBNull(row["AppSettingLastDate"]) ? (DateTime?)null : (DateTime?)row["AppSettingLastDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? applicationId
		///</parameters>
		public static Int32 SelectAllByApplicationIdCount(Int32? applicationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_SelectAllByApplicationIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)applicationId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Application_Setting with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? applicationId
		///</parameters>
		public static void DeleteAllByApplicationId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? applicationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_DeleteAllByApplicationId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)applicationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Application_Setting
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _appSettingId));
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_applicationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingName", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingValue", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingLastDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingLastDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_appSettingId					 = Convert.IsDBNull(command.Parameters["@AppSettingId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AppSettingId"].Value;
				_applicationId					 = Convert.IsDBNull(command.Parameters["@ApplicationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ApplicationId"].Value;
				_appSettingCode					 = Convert.IsDBNull(command.Parameters["@AppSettingCode"].Value) ? null : (string)command.Parameters["@AppSettingCode"].Value;
				_appSettingName					 = Convert.IsDBNull(command.Parameters["@AppSettingName"].Value) ? null : (string)command.Parameters["@AppSettingName"].Value;
				_appSettingValue					 = Convert.IsDBNull(command.Parameters["@AppSettingValue"].Value) ? null : (string)command.Parameters["@AppSettingValue"].Value;
				_appSettingLastDate					 = Convert.IsDBNull(command.Parameters["@AppSettingLastDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@AppSettingLastDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Application_Setting
		///</Summary>
		///<returns>
		///IList-DAOApplicationSetting.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOApplicationSetting> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Setting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOApplicationSetting> objList = new List<DAOApplicationSetting>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOApplicationSetting retObj = new DAOApplicationSetting();
						retObj._appSettingId					 = Convert.IsDBNull(row["AppSettingId"]) ? (Int32?)null : (Int32?)row["AppSettingId"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						retObj._appSettingCode					 = Convert.IsDBNull(row["AppSettingCode"]) ? null : (string)row["AppSettingCode"];
						retObj._appSettingName					 = Convert.IsDBNull(row["AppSettingName"]) ? null : (string)row["AppSettingName"];
						retObj._appSettingValue					 = Convert.IsDBNull(row["AppSettingValue"]) ? null : (string)row["AppSettingValue"];
						retObj._appSettingLastDate					 = Convert.IsDBNull(row["AppSettingLastDate"]) ? (DateTime?)null : (DateTime?)row["AppSettingLastDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiApplication_Setting
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprApplication_Setting_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Setting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "AppSettingId", true) == 0) lst.Add(Convert.IsDBNull(row["AppSettingId"]) ? (Int32?)null : (Int32?)row["AppSettingId"]);
						if (string.Compare(projection.Member, "ApplicationId", true) == 0) lst.Add(Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"]);
						if (string.Compare(projection.Member, "AppSettingCode", true) == 0) lst.Add(Convert.IsDBNull(row["AppSettingCode"]) ? null : (string)row["AppSettingCode"]);
						if (string.Compare(projection.Member, "AppSettingName", true) == 0) lst.Add(Convert.IsDBNull(row["AppSettingName"]) ? null : (string)row["AppSettingName"]);
						if (string.Compare(projection.Member, "AppSettingValue", true) == 0) lst.Add(Convert.IsDBNull(row["AppSettingValue"]) ? null : (string)row["AppSettingValue"]);
						if (string.Compare(projection.Member, "AppSettingLastDate", true) == 0) lst.Add(Convert.IsDBNull(row["AppSettingLastDate"]) ? (DateTime?)null : (DateTime?)row["AppSettingLastDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Application_Setting
		///</Summary>
		///<returns>
		///IList-DAOApplicationSetting.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOApplicationSetting> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprApplication_Setting_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Setting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOApplicationSetting> objList = new List<DAOApplicationSetting>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOApplicationSetting retObj = new DAOApplicationSetting();
						retObj._appSettingId					 = Convert.IsDBNull(row["AppSettingId"]) ? (Int32?)null : (Int32?)row["AppSettingId"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						retObj._appSettingCode					 = Convert.IsDBNull(row["AppSettingCode"]) ? null : (string)row["AppSettingCode"];
						retObj._appSettingName					 = Convert.IsDBNull(row["AppSettingName"]) ? null : (string)row["AppSettingName"];
						retObj._appSettingValue					 = Convert.IsDBNull(row["AppSettingValue"]) ? null : (string)row["AppSettingValue"];
						retObj._appSettingLastDate					 = Convert.IsDBNull(row["AppSettingLastDate"]) ? (DateTime?)null : (DateTime?)row["AppSettingLastDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Application_Setting
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprApplication_Setting_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Application_Setting based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Setting_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_appSettingId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_applicationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingName", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingValue", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppSettingLastDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appSettingLastDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_appSettingId					 = Convert.IsDBNull(command.Parameters["@AppSettingId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AppSettingId"].Value;
				_applicationId					 = Convert.IsDBNull(command.Parameters["@ApplicationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ApplicationId"].Value;
				_appSettingCode					 = Convert.IsDBNull(command.Parameters["@AppSettingCode"].Value) ? null : (string)command.Parameters["@AppSettingCode"].Value;
				_appSettingName					 = Convert.IsDBNull(command.Parameters["@AppSettingName"].Value) ? null : (string)command.Parameters["@AppSettingName"].Value;
				_appSettingValue					 = Convert.IsDBNull(command.Parameters["@AppSettingValue"].Value) ? null : (string)command.Parameters["@AppSettingValue"].Value;
				_appSettingLastDate					 = Convert.IsDBNull(command.Parameters["@AppSettingLastDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@AppSettingLastDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? AppSettingId
		{
			get
			{
				return _appSettingId;
			}
			set
			{
				_appSettingId = value;
			}
		}

		public Int32? ApplicationId
		{
			get
			{
				return _applicationId;
			}
			set
			{
				_applicationId = value;
			}
		}

		public string AppSettingCode
		{
			get
			{
				return _appSettingCode;
			}
			set
			{
				_appSettingCode = value;
			}
		}

		public string AppSettingName
		{
			get
			{
				return _appSettingName;
			}
			set
			{
				_appSettingName = value;
			}
		}

		public string AppSettingValue
		{
			get
			{
				return _appSettingValue;
			}
			set
			{
				_appSettingValue = value;
			}
		}

		public DateTime? AppSettingLastDate
		{
			get
			{
				return _appSettingLastDate;
			}
			set
			{
				_appSettingLastDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprApplication_Setting_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[AppSettingId]
			,[ApplicationId]
			,[AppSettingCode]
			,[AppSettingName]
			,[AppSettingValue]
			,[AppSettingLastDate]
			FROM [dbo].[Application_Setting]
			WHERE 
			[AppSettingId] = @AppSettingId
			";

		internal static string ctprApplication_Setting_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Application_Setting]
			WHERE 
			[AppSettingId] = @AppSettingId
			";

		internal static string ctprApplication_Setting_SelectAllByApplicationId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[AppSettingId]
			,[ApplicationId]
			,[AppSettingCode]
			,[AppSettingName]
			,[AppSettingValue]
			,[AppSettingLastDate]
			FROM [dbo].[Application_Setting]
			WHERE 
			[ApplicationId] = @ApplicationId OR ([ApplicationId] IS NULL AND @ApplicationId IS NULL)
			";

		internal static string ctprApplication_Setting_SelectAllByApplicationIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Application_Setting]
			WHERE 
			[ApplicationId] = @ApplicationId OR ([ApplicationId] IS NULL AND @ApplicationId IS NULL)
			";

		internal static string ctprApplication_Setting_DeleteAllByApplicationId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Application_Setting]
			WHERE 
			[ApplicationId] = @ApplicationId OR ([ApplicationId] IS NULL AND @ApplicationId IS NULL)
			";

		internal static string ctprApplication_Setting_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Application_Setting]
			(
			[ApplicationId]
			,[AppSettingCode]
			,[AppSettingName]
			,[AppSettingValue]
			,[AppSettingLastDate]
			)
			VALUES
			(
			@ApplicationId
			,@AppSettingCode
			,@AppSettingName
			,@AppSettingValue
			,@AppSettingLastDate
			)
			SELECT 
			@AppSettingId = [AppSettingId]
			,@ApplicationId = [ApplicationId]
			,@AppSettingCode = [AppSettingCode]
			,@AppSettingName = [AppSettingName]
			,@AppSettingValue = [AppSettingValue]
			,@AppSettingLastDate = [AppSettingLastDate]
			FROM [dbo].[Application_Setting]
			WHERE 
			[AppSettingId] = SCOPE_IDENTITY()
			";

		internal static string ctprApplication_Setting_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[AppSettingId]
			,[ApplicationId]
			,[AppSettingCode]
			,[AppSettingName]
			,[AppSettingValue]
			,[AppSettingLastDate]
			FROM [dbo].[Application_Setting]
			";

		internal static string ctprApplication_Setting_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Application_Setting]
			";

		internal static string ctprApplication_Setting_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Application_Setting]
			##CRITERIA##
			";

		internal static string ctprApplication_Setting_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[AppSettingId]
			,[ApplicationId]
			,[AppSettingCode]
			,[AppSettingName]
			,[AppSettingValue]
			,[AppSettingLastDate]
			FROM [dbo].[Application_Setting]
			##CRITERIA##
			";

		internal static string ctprApplication_Setting_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Application_Setting]
			##CRITERIA##
			";

		internal static string ctprApplication_Setting_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Application_Setting]
			SET
			[ApplicationId] = @ApplicationId
			,[AppSettingCode] = @AppSettingCode
			,[AppSettingName] = @AppSettingName
			,[AppSettingValue] = @AppSettingValue
			,[AppSettingLastDate] = @AppSettingLastDate
			WHERE 
			[AppSettingId] = @AppSettingId
			SELECT 
			@AppSettingId = [AppSettingId]
			,@ApplicationId = [ApplicationId]
			,@AppSettingCode = [AppSettingCode]
			,@AppSettingName = [AppSettingName]
			,@AppSettingValue = [AppSettingValue]
			,@AppSettingLastDate = [AppSettingLastDate]
			FROM [dbo].[Application_Setting]
			WHERE 
			[AppSettingId] = @AppSettingId
			";

	}
}
#endregion
