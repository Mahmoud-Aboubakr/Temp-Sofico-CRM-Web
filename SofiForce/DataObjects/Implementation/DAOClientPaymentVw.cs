/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientPaymentVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _paymentId;
		protected Int32? _clientId;
		protected DateTime? _paymentDate;
		protected Int32? _paymentMethodId;
		protected decimal? _paymentValue;
		protected string _paymentCode;
		protected Int32? _representativeId;
		protected Int32? _bankId;
		protected DateTime? _dueDate;
		protected string _bankNameEn;
		protected string _bankNameAr;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _paymentMethodNameAr;
		protected string _paymentMethodNameEn;
		protected decimal? _expr1;
		protected bool? _isRejected;
		#endregion

		#region class methods
		public DAOClientPaymentVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_PaymentVw
		///</Summary>
		///<returns>
		///IList-DAOClientPaymentVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientPaymentVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_PaymentVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_PaymentVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPaymentVw> objList = new List<DAOClientPaymentVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPaymentVw retObj = new DAOClientPaymentVw();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._bankNameEn					 = Convert.IsDBNull(row["BankNameEn"]) ? null : (string)row["BankNameEn"];
						retObj._bankNameAr					 = Convert.IsDBNull(row["BankNameAr"]) ? null : (string)row["BankNameAr"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._paymentMethodNameAr					 = Convert.IsDBNull(row["PaymentMethodNameAr"]) ? null : (string)row["PaymentMethodNameAr"];
						retObj._paymentMethodNameEn					 = Convert.IsDBNull(row["PaymentMethodNameEn"]) ? null : (string)row["PaymentMethodNameEn"];
						retObj._expr1					 = Convert.IsDBNull(row["Expr1"]) ? (decimal?)null : (decimal?)row["Expr1"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_PaymentVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_PaymentVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_PaymentVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_PaymentVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "PaymentId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "PaymentDate", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"]);
						if (string.Compare(projection.Member, "PaymentMethodId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"]);
						if (string.Compare(projection.Member, "PaymentValue", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"]);
						if (string.Compare(projection.Member, "PaymentCode", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "BankId", true) == 0) lst.Add(Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"]);
						if (string.Compare(projection.Member, "DueDate", true) == 0) lst.Add(Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"]);
						if (string.Compare(projection.Member, "BankNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BankNameEn"]) ? null : (string)row["BankNameEn"]);
						if (string.Compare(projection.Member, "BankNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BankNameAr"]) ? null : (string)row["BankNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "PaymentMethodNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentMethodNameAr"]) ? null : (string)row["PaymentMethodNameAr"]);
						if (string.Compare(projection.Member, "PaymentMethodNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentMethodNameEn"]) ? null : (string)row["PaymentMethodNameEn"]);
						if (string.Compare(projection.Member, "Expr1", true) == 0) lst.Add(Convert.IsDBNull(row["Expr1"]) ? (decimal?)null : (decimal?)row["Expr1"]);
						if (string.Compare(projection.Member, "IsRejected", true) == 0) lst.Add(Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_PaymentVw
		///</Summary>
		///<returns>
		///IList-DAOClientPaymentVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientPaymentVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_PaymentVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_PaymentVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPaymentVw> objList = new List<DAOClientPaymentVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPaymentVw retObj = new DAOClientPaymentVw();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._bankNameEn					 = Convert.IsDBNull(row["BankNameEn"]) ? null : (string)row["BankNameEn"];
						retObj._bankNameAr					 = Convert.IsDBNull(row["BankNameAr"]) ? null : (string)row["BankNameAr"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._paymentMethodNameAr					 = Convert.IsDBNull(row["PaymentMethodNameAr"]) ? null : (string)row["PaymentMethodNameAr"];
						retObj._paymentMethodNameEn					 = Convert.IsDBNull(row["PaymentMethodNameEn"]) ? null : (string)row["PaymentMethodNameEn"];
						retObj._expr1					 = Convert.IsDBNull(row["Expr1"]) ? (decimal?)null : (decimal?)row["Expr1"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_PaymentVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_PaymentVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? PaymentId
		{
			get
			{
				return _paymentId;
			}
			set
			{
				_paymentId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public DateTime? PaymentDate
		{
			get
			{
				return _paymentDate;
			}
			set
			{
				_paymentDate = value;
			}
		}

		public Int32? PaymentMethodId
		{
			get
			{
				return _paymentMethodId;
			}
			set
			{
				_paymentMethodId = value;
			}
		}

		public decimal? PaymentValue
		{
			get
			{
				return _paymentValue;
			}
			set
			{
				_paymentValue = value;
			}
		}

		public string PaymentCode
		{
			get
			{
				return _paymentCode;
			}
			set
			{
				_paymentCode = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? BankId
		{
			get
			{
				return _bankId;
			}
			set
			{
				_bankId = value;
			}
		}

		public DateTime? DueDate
		{
			get
			{
				return _dueDate;
			}
			set
			{
				_dueDate = value;
			}
		}

		public string BankNameEn
		{
			get
			{
				return _bankNameEn;
			}
			set
			{
				_bankNameEn = value;
			}
		}

		public string BankNameAr
		{
			get
			{
				return _bankNameAr;
			}
			set
			{
				_bankNameAr = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public string PaymentMethodNameAr
		{
			get
			{
				return _paymentMethodNameAr;
			}
			set
			{
				_paymentMethodNameAr = value;
			}
		}

		public string PaymentMethodNameEn
		{
			get
			{
				return _paymentMethodNameEn;
			}
			set
			{
				_paymentMethodNameEn = value;
			}
		}

		public decimal? Expr1
		{
			get
			{
				return _expr1;
			}
			set
			{
				_expr1 = value;
			}
		}

		public bool? IsRejected
		{
			get
			{
				return _isRejected;
			}
			set
			{
				_isRejected = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_PaymentVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[BankNameEn]
			,[BankNameAr]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[PaymentMethodNameAr]
			,[PaymentMethodNameEn]
			,[Expr1]
			,[IsRejected]
			FROM [dbo].[Client_PaymentVw]
			";

		internal static string ctprClient_PaymentVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_PaymentVw]
			";

		internal static string ctprClient_PaymentVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_PaymentVw]
			##CRITERIA##
			";

		internal static string ctprClient_PaymentVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[BankNameEn]
			,[BankNameAr]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[PaymentMethodNameAr]
			,[PaymentMethodNameEn]
			,[Expr1]
			,[IsRejected]
			FROM [dbo].[Client_PaymentVw]
			##CRITERIA##
			";

		internal static string ctprClient_PaymentVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_PaymentVw]
			##CRITERIA##
			";

	}
}
#endregion
