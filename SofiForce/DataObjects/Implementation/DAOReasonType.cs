/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOReasonType : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _reasonTypeId;
		protected string _reasonTypeCode;
		protected string _reasonTypeName;
		#endregion

		#region class methods
		public DAOReasonType()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table ReasonType based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOReasonType
		///</returns>
		///<parameters>
		///Int32? reasonTypeId
		///</parameters>
		public static DAOReasonType SelectOne(Int32? reasonTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprReasonType_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ReasonType");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)reasonTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOReasonType retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOReasonType();
					retObj._reasonTypeId					 = Convert.IsDBNull(dt.Rows[0]["ReasonTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ReasonTypeId"];
					retObj._reasonTypeCode					 = Convert.IsDBNull(dt.Rows[0]["ReasonTypeCode"]) ? null : (string)dt.Rows[0]["ReasonTypeCode"];
					retObj._reasonTypeName					 = Convert.IsDBNull(dt.Rows[0]["ReasonTypeName"]) ? null : (string)dt.Rows[0]["ReasonTypeName"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table ReasonType based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprReasonType_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_reasonTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table ReasonType
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprReasonType_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_reasonTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_reasonTypeCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeName", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_reasonTypeName?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_reasonTypeId					 = Convert.IsDBNull(command.Parameters["@ReasonTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReasonTypeId"].Value;
				_reasonTypeCode					 = Convert.IsDBNull(command.Parameters["@ReasonTypeCode"].Value) ? null : (string)command.Parameters["@ReasonTypeCode"].Value;
				_reasonTypeName					 = Convert.IsDBNull(command.Parameters["@ReasonTypeName"].Value) ? null : (string)command.Parameters["@ReasonTypeName"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table ReasonType
		///</Summary>
		///<returns>
		///IList-DAOReasonType.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOReasonType> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprReasonType_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ReasonType");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOReasonType> objList = new List<DAOReasonType>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOReasonType retObj = new DAOReasonType();
						retObj._reasonTypeId					 = Convert.IsDBNull(row["ReasonTypeId"]) ? (Int32?)null : (Int32?)row["ReasonTypeId"];
						retObj._reasonTypeCode					 = Convert.IsDBNull(row["ReasonTypeCode"]) ? null : (string)row["ReasonTypeCode"];
						retObj._reasonTypeName					 = Convert.IsDBNull(row["ReasonTypeName"]) ? null : (string)row["ReasonTypeName"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprReasonType_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiReasonType
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprReasonType_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ReasonType");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ReasonTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ReasonTypeId"]) ? (Int32?)null : (Int32?)row["ReasonTypeId"]);
						if (string.Compare(projection.Member, "ReasonTypeCode", true) == 0) lst.Add(Convert.IsDBNull(row["ReasonTypeCode"]) ? null : (string)row["ReasonTypeCode"]);
						if (string.Compare(projection.Member, "ReasonTypeName", true) == 0) lst.Add(Convert.IsDBNull(row["ReasonTypeName"]) ? null : (string)row["ReasonTypeName"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api ReasonType
		///</Summary>
		///<returns>
		///IList-DAOReasonType.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOReasonType> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprReasonType_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ReasonType");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOReasonType> objList = new List<DAOReasonType>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOReasonType retObj = new DAOReasonType();
						retObj._reasonTypeId					 = Convert.IsDBNull(row["ReasonTypeId"]) ? (Int32?)null : (Int32?)row["ReasonTypeId"];
						retObj._reasonTypeCode					 = Convert.IsDBNull(row["ReasonTypeCode"]) ? null : (string)row["ReasonTypeCode"];
						retObj._reasonTypeName					 = Convert.IsDBNull(row["ReasonTypeName"]) ? null : (string)row["ReasonTypeName"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api ReasonType
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprReasonType_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table ReasonType based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprReasonType_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_reasonTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_reasonTypeCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReasonTypeName", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_reasonTypeName?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_reasonTypeId					 = Convert.IsDBNull(command.Parameters["@ReasonTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReasonTypeId"].Value;
				_reasonTypeCode					 = Convert.IsDBNull(command.Parameters["@ReasonTypeCode"].Value) ? null : (string)command.Parameters["@ReasonTypeCode"].Value;
				_reasonTypeName					 = Convert.IsDBNull(command.Parameters["@ReasonTypeName"].Value) ? null : (string)command.Parameters["@ReasonTypeName"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ReasonTypeId
		{
			get
			{
				return _reasonTypeId;
			}
			set
			{
				_reasonTypeId = value;
			}
		}

		public string ReasonTypeCode
		{
			get
			{
				return _reasonTypeCode;
			}
			set
			{
				_reasonTypeCode = value;
			}
		}

		public string ReasonTypeName
		{
			get
			{
				return _reasonTypeName;
			}
			set
			{
				_reasonTypeName = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprReasonType_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ReasonTypeId]
			,[ReasonTypeCode]
			,[ReasonTypeName]
			FROM [dbo].[ReasonType]
			WHERE 
			[ReasonTypeId] = @ReasonTypeId
			";

		internal static string ctprReasonType_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[ReasonType]
			WHERE 
			[ReasonTypeId] = @ReasonTypeId
			";

		internal static string ctprReasonType_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[ReasonType]
			(
			[ReasonTypeId]
			,[ReasonTypeCode]
			,[ReasonTypeName]
			)
			VALUES
			(
			@ReasonTypeId
			,@ReasonTypeCode
			,@ReasonTypeName
			)
			SELECT 
			@ReasonTypeId = [ReasonTypeId]
			,@ReasonTypeCode = [ReasonTypeCode]
			,@ReasonTypeName = [ReasonTypeName]
			FROM [dbo].[ReasonType]
			WHERE 
			[ReasonTypeId] = @ReasonTypeId
			";

		internal static string ctprReasonType_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ReasonTypeId]
			,[ReasonTypeCode]
			,[ReasonTypeName]
			FROM [dbo].[ReasonType]
			";

		internal static string ctprReasonType_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[ReasonType]
			";

		internal static string ctprReasonType_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[ReasonType]
			##CRITERIA##
			";

		internal static string ctprReasonType_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ReasonTypeId]
			,[ReasonTypeCode]
			,[ReasonTypeName]
			FROM [dbo].[ReasonType]
			##CRITERIA##
			";

		internal static string ctprReasonType_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[ReasonType]
			##CRITERIA##
			";

		internal static string ctprReasonType_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[ReasonType]
			SET
			[ReasonTypeCode] = @ReasonTypeCode
			,[ReasonTypeName] = @ReasonTypeName
			WHERE 
			[ReasonTypeId] = @ReasonTypeId
			SELECT 
			@ReasonTypeId = [ReasonTypeId]
			,@ReasonTypeCode = [ReasonTypeCode]
			,@ReasonTypeName = [ReasonTypeName]
			FROM [dbo].[ReasonType]
			WHERE 
			[ReasonTypeId] = @ReasonTypeId
			";

	}
}
#endregion
