/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSupervisor : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _supervisorId;
		protected Int32? _supervisorTypeId;
		protected Int32? _businessUnitId;
		protected string _companyCode;
		protected string _supervisorCode;
		protected string _supervisorNameEn;
		protected string _supervisorNameAr;
		protected string _phone;
		protected string _phoneAlternative;
		protected DateTime? _joinDate;
		protected Int32? _userId;
		protected Int32? _branchId;
		protected bool? _isActive;
		protected string _color;
		protected Int32? _displayOrder;
		protected string _icon;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _notes;
		protected bool? _isTerminated;
		protected DateTime? _terminationDate;
		protected Int32? _terminationReasonId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOSupervisor()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Supervisor based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSupervisor
		///</returns>
		///<parameters>
		///Int32? supervisorId
		///</parameters>
		public static DAOSupervisor SelectOne(Int32? supervisorId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)supervisorId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSupervisor retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSupervisor();
					retObj._supervisorId					 = Convert.IsDBNull(dt.Rows[0]["SupervisorId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SupervisorId"];
					retObj._supervisorTypeId					 = Convert.IsDBNull(dt.Rows[0]["SupervisorTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SupervisorTypeId"];
					retObj._businessUnitId					 = Convert.IsDBNull(dt.Rows[0]["BusinessUnitId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BusinessUnitId"];
					retObj._companyCode					 = Convert.IsDBNull(dt.Rows[0]["CompanyCode"]) ? null : (string)dt.Rows[0]["CompanyCode"];
					retObj._supervisorCode					 = Convert.IsDBNull(dt.Rows[0]["SupervisorCode"]) ? null : (string)dt.Rows[0]["SupervisorCode"];
					retObj._supervisorNameEn					 = Convert.IsDBNull(dt.Rows[0]["SupervisorNameEn"]) ? null : (string)dt.Rows[0]["SupervisorNameEn"];
					retObj._supervisorNameAr					 = Convert.IsDBNull(dt.Rows[0]["SupervisorNameAr"]) ? null : (string)dt.Rows[0]["SupervisorNameAr"];
					retObj._phone					 = Convert.IsDBNull(dt.Rows[0]["Phone"]) ? null : (string)dt.Rows[0]["Phone"];
					retObj._phoneAlternative					 = Convert.IsDBNull(dt.Rows[0]["PhoneAlternative"]) ? null : (string)dt.Rows[0]["PhoneAlternative"];
					retObj._joinDate					 = Convert.IsDBNull(dt.Rows[0]["JoinDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["JoinDate"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._branchId					 = Convert.IsDBNull(dt.Rows[0]["BranchId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BranchId"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["Color"]) ? null : (string)dt.Rows[0]["Color"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["Icon"]) ? null : (string)dt.Rows[0]["Icon"];
					retObj._canEdit					 = Convert.IsDBNull(dt.Rows[0]["CanEdit"]) ? (bool?)null : (bool?)dt.Rows[0]["CanEdit"];
					retObj._canDelete					 = Convert.IsDBNull(dt.Rows[0]["CanDelete"]) ? (bool?)null : (bool?)dt.Rows[0]["CanDelete"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
					retObj._isTerminated					 = Convert.IsDBNull(dt.Rows[0]["IsTerminated"]) ? (bool?)null : (bool?)dt.Rows[0]["IsTerminated"];
					retObj._terminationDate					 = Convert.IsDBNull(dt.Rows[0]["TerminationDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TerminationDate"];
					retObj._terminationReasonId					 = Convert.IsDBNull(dt.Rows[0]["TerminationReasonId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TerminationReasonId"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Supervisor based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_supervisorId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Supervisor based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSupervisor.
		///</returns>
		///<parameters>
		///Int32? supervisorTypeId
		///</parameters>
		public static IList<DAOSupervisor> SelectAllBySupervisorTypeId(Int32? supervisorTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllBySupervisorTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supervisorTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSupervisor> objList = new List<DAOSupervisor>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSupervisor retObj = new DAOSupervisor();
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._supervisorTypeId					 = Convert.IsDBNull(row["SupervisorTypeId"]) ? (Int32?)null : (Int32?)row["SupervisorTypeId"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._supervisorCode					 = Convert.IsDBNull(row["SupervisorCode"]) ? null : (string)row["SupervisorCode"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? supervisorTypeId
		///</parameters>
		public static Int32 SelectAllBySupervisorTypeIdCount(Int32? supervisorTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllBySupervisorTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supervisorTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Supervisor with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? supervisorTypeId
		///</parameters>
		public static void DeleteAllBySupervisorTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? supervisorTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_DeleteAllBySupervisorTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supervisorTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Supervisor based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSupervisor.
		///</returns>
		///<parameters>
		///Int32? businessUnitId
		///</parameters>
		public static IList<DAOSupervisor> SelectAllByBusinessUnitId(Int32? businessUnitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllByBusinessUnitId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)businessUnitId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSupervisor> objList = new List<DAOSupervisor>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSupervisor retObj = new DAOSupervisor();
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._supervisorTypeId					 = Convert.IsDBNull(row["SupervisorTypeId"]) ? (Int32?)null : (Int32?)row["SupervisorTypeId"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._supervisorCode					 = Convert.IsDBNull(row["SupervisorCode"]) ? null : (string)row["SupervisorCode"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? businessUnitId
		///</parameters>
		public static Int32 SelectAllByBusinessUnitIdCount(Int32? businessUnitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllByBusinessUnitIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)businessUnitId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Supervisor with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? businessUnitId
		///</parameters>
		public static void DeleteAllByBusinessUnitId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? businessUnitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_DeleteAllByBusinessUnitId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)businessUnitId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Supervisor based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSupervisor.
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static IList<DAOSupervisor> SelectAllByBranchId(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllByBranchId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSupervisor> objList = new List<DAOSupervisor>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSupervisor retObj = new DAOSupervisor();
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._supervisorTypeId					 = Convert.IsDBNull(row["SupervisorTypeId"]) ? (Int32?)null : (Int32?)row["SupervisorTypeId"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._supervisorCode					 = Convert.IsDBNull(row["SupervisorCode"]) ? null : (string)row["SupervisorCode"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static Int32 SelectAllByBranchIdCount(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllByBranchIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Supervisor with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId
		///</parameters>
		public static void DeleteAllByBranchId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_DeleteAllByBranchId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Supervisor based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSupervisor.
		///</returns>
		///<parameters>
		///Int32? terminationReasonId
		///</parameters>
		public static IList<DAOSupervisor> SelectAllByTerminationReasonId(Int32? terminationReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllByTerminationReasonId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerminationReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)terminationReasonId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSupervisor> objList = new List<DAOSupervisor>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSupervisor retObj = new DAOSupervisor();
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._supervisorTypeId					 = Convert.IsDBNull(row["SupervisorTypeId"]) ? (Int32?)null : (Int32?)row["SupervisorTypeId"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._supervisorCode					 = Convert.IsDBNull(row["SupervisorCode"]) ? null : (string)row["SupervisorCode"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? terminationReasonId
		///</parameters>
		public static Int32 SelectAllByTerminationReasonIdCount(Int32? terminationReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllByTerminationReasonIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerminationReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)terminationReasonId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Supervisor with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? terminationReasonId
		///</parameters>
		public static void DeleteAllByTerminationReasonId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? terminationReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_DeleteAllByTerminationReasonId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerminationReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)terminationReasonId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Supervisor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _supervisorId));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_supervisorTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_businessUnitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CompanyCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_companyCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_supervisorCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_supervisorNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_supervisorNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneAlternative", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phoneAlternative?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@JoinDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_joinDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsTerminated", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isTerminated?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerminationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_terminationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerminationReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_terminationReasonId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_supervisorId					 = Convert.IsDBNull(command.Parameters["@SupervisorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SupervisorId"].Value;
				_supervisorTypeId					 = Convert.IsDBNull(command.Parameters["@SupervisorTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SupervisorTypeId"].Value;
				_businessUnitId					 = Convert.IsDBNull(command.Parameters["@BusinessUnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BusinessUnitId"].Value;
				_companyCode					 = Convert.IsDBNull(command.Parameters["@CompanyCode"].Value) ? null : (string)command.Parameters["@CompanyCode"].Value;
				_supervisorCode					 = Convert.IsDBNull(command.Parameters["@SupervisorCode"].Value) ? null : (string)command.Parameters["@SupervisorCode"].Value;
				_supervisorNameEn					 = Convert.IsDBNull(command.Parameters["@SupervisorNameEn"].Value) ? null : (string)command.Parameters["@SupervisorNameEn"].Value;
				_supervisorNameAr					 = Convert.IsDBNull(command.Parameters["@SupervisorNameAr"].Value) ? null : (string)command.Parameters["@SupervisorNameAr"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_phoneAlternative					 = Convert.IsDBNull(command.Parameters["@PhoneAlternative"].Value) ? null : (string)command.Parameters["@PhoneAlternative"].Value;
				_joinDate					 = Convert.IsDBNull(command.Parameters["@JoinDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@JoinDate"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_isTerminated					 = Convert.IsDBNull(command.Parameters["@IsTerminated"].Value) ? (bool?)null : (bool?)command.Parameters["@IsTerminated"].Value;
				_terminationDate					 = Convert.IsDBNull(command.Parameters["@TerminationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TerminationDate"].Value;
				_terminationReasonId					 = Convert.IsDBNull(command.Parameters["@TerminationReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TerminationReasonId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Supervisor
		///</Summary>
		///<returns>
		///IList-DAOSupervisor.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSupervisor> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSupervisor> objList = new List<DAOSupervisor>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSupervisor retObj = new DAOSupervisor();
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._supervisorTypeId					 = Convert.IsDBNull(row["SupervisorTypeId"]) ? (Int32?)null : (Int32?)row["SupervisorTypeId"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._supervisorCode					 = Convert.IsDBNull(row["SupervisorCode"]) ? null : (string)row["SupervisorCode"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSupervisor
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSupervisor_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "SupervisorId", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"]);
						if (string.Compare(projection.Member, "SupervisorTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorTypeId"]) ? (Int32?)null : (Int32?)row["SupervisorTypeId"]);
						if (string.Compare(projection.Member, "BusinessUnitId", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"]);
						if (string.Compare(projection.Member, "CompanyCode", true) == 0) lst.Add(Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"]);
						if (string.Compare(projection.Member, "SupervisorCode", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorCode"]) ? null : (string)row["SupervisorCode"]);
						if (string.Compare(projection.Member, "SupervisorNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"]);
						if (string.Compare(projection.Member, "SupervisorNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "PhoneAlternative", true) == 0) lst.Add(Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"]);
						if (string.Compare(projection.Member, "JoinDate", true) == 0) lst.Add(Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "IsTerminated", true) == 0) lst.Add(Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"]);
						if (string.Compare(projection.Member, "TerminationDate", true) == 0) lst.Add(Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"]);
						if (string.Compare(projection.Member, "TerminationReasonId", true) == 0) lst.Add(Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Supervisor
		///</Summary>
		///<returns>
		///IList-DAOSupervisor.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSupervisor> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSupervisor_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Supervisor");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSupervisor> objList = new List<DAOSupervisor>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSupervisor retObj = new DAOSupervisor();
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._supervisorTypeId					 = Convert.IsDBNull(row["SupervisorTypeId"]) ? (Int32?)null : (Int32?)row["SupervisorTypeId"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._supervisorCode					 = Convert.IsDBNull(row["SupervisorCode"]) ? null : (string)row["SupervisorCode"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Supervisor
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSupervisor_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Supervisor based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSupervisor_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_supervisorId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_supervisorTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BusinessUnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_businessUnitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CompanyCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_companyCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_supervisorCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_supervisorNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupervisorNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_supervisorNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneAlternative", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phoneAlternative?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@JoinDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_joinDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsTerminated", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isTerminated?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerminationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_terminationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerminationReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_terminationReasonId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_supervisorId					 = Convert.IsDBNull(command.Parameters["@SupervisorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SupervisorId"].Value;
				_supervisorTypeId					 = Convert.IsDBNull(command.Parameters["@SupervisorTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SupervisorTypeId"].Value;
				_businessUnitId					 = Convert.IsDBNull(command.Parameters["@BusinessUnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BusinessUnitId"].Value;
				_companyCode					 = Convert.IsDBNull(command.Parameters["@CompanyCode"].Value) ? null : (string)command.Parameters["@CompanyCode"].Value;
				_supervisorCode					 = Convert.IsDBNull(command.Parameters["@SupervisorCode"].Value) ? null : (string)command.Parameters["@SupervisorCode"].Value;
				_supervisorNameEn					 = Convert.IsDBNull(command.Parameters["@SupervisorNameEn"].Value) ? null : (string)command.Parameters["@SupervisorNameEn"].Value;
				_supervisorNameAr					 = Convert.IsDBNull(command.Parameters["@SupervisorNameAr"].Value) ? null : (string)command.Parameters["@SupervisorNameAr"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_phoneAlternative					 = Convert.IsDBNull(command.Parameters["@PhoneAlternative"].Value) ? null : (string)command.Parameters["@PhoneAlternative"].Value;
				_joinDate					 = Convert.IsDBNull(command.Parameters["@JoinDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@JoinDate"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_isTerminated					 = Convert.IsDBNull(command.Parameters["@IsTerminated"].Value) ? (bool?)null : (bool?)command.Parameters["@IsTerminated"].Value;
				_terminationDate					 = Convert.IsDBNull(command.Parameters["@TerminationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TerminationDate"].Value;
				_terminationReasonId					 = Convert.IsDBNull(command.Parameters["@TerminationReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TerminationReasonId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? SupervisorId
		{
			get
			{
				return _supervisorId;
			}
			set
			{
				_supervisorId = value;
			}
		}

		public Int32? SupervisorTypeId
		{
			get
			{
				return _supervisorTypeId;
			}
			set
			{
				_supervisorTypeId = value;
			}
		}

		public Int32? BusinessUnitId
		{
			get
			{
				return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
			}
		}

		public string CompanyCode
		{
			get
			{
				return _companyCode;
			}
			set
			{
				_companyCode = value;
			}
		}

		public string SupervisorCode
		{
			get
			{
				return _supervisorCode;
			}
			set
			{
				_supervisorCode = value;
			}
		}

		public string SupervisorNameEn
		{
			get
			{
				return _supervisorNameEn;
			}
			set
			{
				_supervisorNameEn = value;
			}
		}

		public string SupervisorNameAr
		{
			get
			{
				return _supervisorNameAr;
			}
			set
			{
				_supervisorNameAr = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string PhoneAlternative
		{
			get
			{
				return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
			}
		}

		public DateTime? JoinDate
		{
			get
			{
				return _joinDate;
			}
			set
			{
				_joinDate = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public bool? IsTerminated
		{
			get
			{
				return _isTerminated;
			}
			set
			{
				_isTerminated = value;
			}
		}

		public DateTime? TerminationDate
		{
			get
			{
				return _terminationDate;
			}
			set
			{
				_terminationDate = value;
			}
		}

		public Int32? TerminationReasonId
		{
			get
			{
				return _terminationReasonId;
			}
			set
			{
				_terminationReasonId = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSupervisor_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[SupervisorId]
			,[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Supervisor]
			WHERE 
			[SupervisorId] = @SupervisorId
			";

		internal static string ctprSupervisor_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Supervisor]
			WHERE 
			[SupervisorId] = @SupervisorId
			";

		internal static string ctprSupervisor_SelectAllBySupervisorTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SupervisorId]
			,[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Supervisor]
			WHERE 
			[SupervisorTypeId] = @SupervisorTypeId OR ([SupervisorTypeId] IS NULL AND @SupervisorTypeId IS NULL)
			";

		internal static string ctprSupervisor_SelectAllBySupervisorTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Supervisor]
			WHERE 
			[SupervisorTypeId] = @SupervisorTypeId OR ([SupervisorTypeId] IS NULL AND @SupervisorTypeId IS NULL)
			";

		internal static string ctprSupervisor_DeleteAllBySupervisorTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Supervisor]
			WHERE 
			[SupervisorTypeId] = @SupervisorTypeId OR ([SupervisorTypeId] IS NULL AND @SupervisorTypeId IS NULL)
			";

		internal static string ctprSupervisor_SelectAllByBusinessUnitId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SupervisorId]
			,[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Supervisor]
			WHERE 
			[BusinessUnitId] = @BusinessUnitId OR ([BusinessUnitId] IS NULL AND @BusinessUnitId IS NULL)
			";

		internal static string ctprSupervisor_SelectAllByBusinessUnitIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Supervisor]
			WHERE 
			[BusinessUnitId] = @BusinessUnitId OR ([BusinessUnitId] IS NULL AND @BusinessUnitId IS NULL)
			";

		internal static string ctprSupervisor_DeleteAllByBusinessUnitId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Supervisor]
			WHERE 
			[BusinessUnitId] = @BusinessUnitId OR ([BusinessUnitId] IS NULL AND @BusinessUnitId IS NULL)
			";

		internal static string ctprSupervisor_SelectAllByBranchId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SupervisorId]
			,[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Supervisor]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprSupervisor_SelectAllByBranchIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Supervisor]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprSupervisor_DeleteAllByBranchId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Supervisor]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprSupervisor_SelectAllByTerminationReasonId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SupervisorId]
			,[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Supervisor]
			WHERE 
			[TerminationReasonId] = @TerminationReasonId OR ([TerminationReasonId] IS NULL AND @TerminationReasonId IS NULL)
			";

		internal static string ctprSupervisor_SelectAllByTerminationReasonIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Supervisor]
			WHERE 
			[TerminationReasonId] = @TerminationReasonId OR ([TerminationReasonId] IS NULL AND @TerminationReasonId IS NULL)
			";

		internal static string ctprSupervisor_DeleteAllByTerminationReasonId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Supervisor]
			WHERE 
			[TerminationReasonId] = @TerminationReasonId OR ([TerminationReasonId] IS NULL AND @TerminationReasonId IS NULL)
			";

		internal static string ctprSupervisor_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Supervisor]
			(
			[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@SupervisorTypeId
			,@BusinessUnitId
			,@CompanyCode
			,@SupervisorCode
			,@SupervisorNameEn
			,@SupervisorNameAr
			,@Phone
			,@PhoneAlternative
			,@JoinDate
			,@UserId
			,@BranchId
			,@IsActive
			,@Color
			,@DisplayOrder
			,@Icon
			,@CanEdit
			,@CanDelete
			,@Notes
			,@IsTerminated
			,@TerminationDate
			,@TerminationReasonId
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@SupervisorId = [SupervisorId]
			,@SupervisorTypeId = [SupervisorTypeId]
			,@BusinessUnitId = [BusinessUnitId]
			,@CompanyCode = [CompanyCode]
			,@SupervisorCode = [SupervisorCode]
			,@SupervisorNameEn = [SupervisorNameEn]
			,@SupervisorNameAr = [SupervisorNameAr]
			,@Phone = [Phone]
			,@PhoneAlternative = [PhoneAlternative]
			,@JoinDate = [JoinDate]
			,@UserId = [UserId]
			,@BranchId = [BranchId]
			,@IsActive = [IsActive]
			,@Color = [Color]
			,@DisplayOrder = [DisplayOrder]
			,@Icon = [Icon]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@Notes = [Notes]
			,@IsTerminated = [IsTerminated]
			,@TerminationDate = [TerminationDate]
			,@TerminationReasonId = [TerminationReasonId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Supervisor]
			WHERE 
			[SupervisorId] = SCOPE_IDENTITY()
			";

		internal static string ctprSupervisor_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[SupervisorId]
			,[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Supervisor]
			";

		internal static string ctprSupervisor_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Supervisor]
			";

		internal static string ctprSupervisor_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Supervisor]
			##CRITERIA##
			";

		internal static string ctprSupervisor_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[SupervisorId]
			,[SupervisorTypeId]
			,[BusinessUnitId]
			,[CompanyCode]
			,[SupervisorCode]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[Phone]
			,[PhoneAlternative]
			,[JoinDate]
			,[UserId]
			,[BranchId]
			,[IsActive]
			,[Color]
			,[DisplayOrder]
			,[Icon]
			,[CanEdit]
			,[CanDelete]
			,[Notes]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Supervisor]
			##CRITERIA##
			";

		internal static string ctprSupervisor_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Supervisor]
			##CRITERIA##
			";

		internal static string ctprSupervisor_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Supervisor]
			SET
			[SupervisorTypeId] = @SupervisorTypeId
			,[BusinessUnitId] = @BusinessUnitId
			,[CompanyCode] = @CompanyCode
			,[SupervisorCode] = @SupervisorCode
			,[SupervisorNameEn] = @SupervisorNameEn
			,[SupervisorNameAr] = @SupervisorNameAr
			,[Phone] = @Phone
			,[PhoneAlternative] = @PhoneAlternative
			,[JoinDate] = @JoinDate
			,[UserId] = @UserId
			,[BranchId] = @BranchId
			,[IsActive] = @IsActive
			,[Color] = @Color
			,[DisplayOrder] = @DisplayOrder
			,[Icon] = @Icon
			,[CanEdit] = @CanEdit
			,[CanDelete] = @CanDelete
			,[Notes] = @Notes
			,[IsTerminated] = @IsTerminated
			,[TerminationDate] = @TerminationDate
			,[TerminationReasonId] = @TerminationReasonId
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[SupervisorId] = @SupervisorId
			SELECT 
			@SupervisorId = [SupervisorId]
			,@SupervisorTypeId = [SupervisorTypeId]
			,@BusinessUnitId = [BusinessUnitId]
			,@CompanyCode = [CompanyCode]
			,@SupervisorCode = [SupervisorCode]
			,@SupervisorNameEn = [SupervisorNameEn]
			,@SupervisorNameAr = [SupervisorNameAr]
			,@Phone = [Phone]
			,@PhoneAlternative = [PhoneAlternative]
			,@JoinDate = [JoinDate]
			,@UserId = [UserId]
			,@BranchId = [BranchId]
			,@IsActive = [IsActive]
			,@Color = [Color]
			,@DisplayOrder = [DisplayOrder]
			,@Icon = [Icon]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@Notes = [Notes]
			,@IsTerminated = [IsTerminated]
			,@TerminationDate = [TerminationDate]
			,@TerminationReasonId = [TerminationReasonId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Supervisor]
			WHERE 
			[SupervisorId] = @SupervisorId
			";

	}
}
#endregion
