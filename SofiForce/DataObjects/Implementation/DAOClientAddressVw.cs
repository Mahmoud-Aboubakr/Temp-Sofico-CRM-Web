/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientAddressVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _addressId;
		protected Int32? _clientId;
		protected bool? _isDefault;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected string _address;
		protected string _landmark;
		protected string _building;
		protected string _floor;
		protected string _property;
		protected string _email;
		protected string _phone;
		protected double? _lng;
		protected double? _lat;
		protected bool? _needValidation;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected string _clientCode;
		protected string _governerateNameAr;
		protected string _governerateNameEn;
		protected string _cityNameAr;
		protected string _cityNameEn;
		#endregion

		#region class methods
		public DAOClientAddressVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_AddressVw
		///</Summary>
		///<returns>
		///IList-DAOClientAddressVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientAddressVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_AddressVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_AddressVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientAddressVw> objList = new List<DAOClientAddressVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientAddressVw retObj = new DAOClientAddressVw();
						retObj._addressId					 = Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._isDefault					 = Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						retObj._cityNameAr					 = Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"];
						retObj._cityNameEn					 = Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_AddressVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_AddressVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_AddressVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_AddressVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "AddressId", true) == 0) lst.Add(Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "IsDefault", true) == 0) lst.Add(Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "Landmark", true) == 0) lst.Add(Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"]);
						if (string.Compare(projection.Member, "Building", true) == 0) lst.Add(Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"]);
						if (string.Compare(projection.Member, "Floor", true) == 0) lst.Add(Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"]);
						if (string.Compare(projection.Member, "Property", true) == 0) lst.Add(Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"]);
						if (string.Compare(projection.Member, "Email", true) == 0) lst.Add(Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "Lng", true) == 0) lst.Add(Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"]);
						if (string.Compare(projection.Member, "Lat", true) == 0) lst.Add(Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"]);
						if (string.Compare(projection.Member, "NeedValidation", true) == 0) lst.Add(Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "GovernerateNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"]);
						if (string.Compare(projection.Member, "GovernerateNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"]);
						if (string.Compare(projection.Member, "CityNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"]);
						if (string.Compare(projection.Member, "CityNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_AddressVw
		///</Summary>
		///<returns>
		///IList-DAOClientAddressVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientAddressVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_AddressVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_AddressVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientAddressVw> objList = new List<DAOClientAddressVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientAddressVw retObj = new DAOClientAddressVw();
						retObj._addressId					 = Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._isDefault					 = Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						retObj._cityNameAr					 = Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"];
						retObj._cityNameEn					 = Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_AddressVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_AddressVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? AddressId
		{
			get
			{
				return _addressId;
			}
			set
			{
				_addressId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public bool? IsDefault
		{
			get
			{
				return _isDefault;
			}
			set
			{
				_isDefault = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public string Landmark
		{
			get
			{
				return _landmark;
			}
			set
			{
				_landmark = value;
			}
		}

		public string Building
		{
			get
			{
				return _building;
			}
			set
			{
				_building = value;
			}
		}

		public string Floor
		{
			get
			{
				return _floor;
			}
			set
			{
				_floor = value;
			}
		}

		public string Property
		{
			get
			{
				return _property;
			}
			set
			{
				_property = value;
			}
		}

		public string Email
		{
			get
			{
				return _email;
			}
			set
			{
				_email = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public double? Lng
		{
			get
			{
				return _lng;
			}
			set
			{
				_lng = value;
			}
		}

		public double? Lat
		{
			get
			{
				return _lat;
			}
			set
			{
				_lat = value;
			}
		}

		public bool? NeedValidation
		{
			get
			{
				return _needValidation;
			}
			set
			{
				_needValidation = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string GovernerateNameAr
		{
			get
			{
				return _governerateNameAr;
			}
			set
			{
				_governerateNameAr = value;
			}
		}

		public string GovernerateNameEn
		{
			get
			{
				return _governerateNameEn;
			}
			set
			{
				_governerateNameEn = value;
			}
		}

		public string CityNameAr
		{
			get
			{
				return _cityNameAr;
			}
			set
			{
				_cityNameAr = value;
			}
		}

		public string CityNameEn
		{
			get
			{
				return _cityNameEn;
			}
			set
			{
				_cityNameEn = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_AddressVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lng]
			,[Lat]
			,[NeedValidation]
			,[ClientNameAr]
			,[ClientNameEn]
			,[ClientCode]
			,[GovernerateNameAr]
			,[GovernerateNameEn]
			,[CityNameAr]
			,[CityNameEn]
			FROM [dbo].[Client_AddressVw]
			";

		internal static string ctprClient_AddressVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_AddressVw]
			";

		internal static string ctprClient_AddressVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_AddressVw]
			##CRITERIA##
			";

		internal static string ctprClient_AddressVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lng]
			,[Lat]
			,[NeedValidation]
			,[ClientNameAr]
			,[ClientNameEn]
			,[ClientCode]
			,[GovernerateNameAr]
			,[GovernerateNameEn]
			,[CityNameAr]
			,[CityNameEn]
			FROM [dbo].[Client_AddressVw]
			##CRITERIA##
			";

		internal static string ctprClient_AddressVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_AddressVw]
			##CRITERIA##
			";

	}
}
#endregion
