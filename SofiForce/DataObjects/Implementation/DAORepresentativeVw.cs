/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAORepresentativeVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _representativeId;
		protected Int32? _branchId;
		protected Int32? _userId;
		protected Int32? _supervisorId;
		protected Int32? _kindId;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _kindNameEn;
		protected string _kindNameAr;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _icon;
		protected string _color;
		protected string _supervisorNameEn;
		protected string _supervisorNameAr;
		protected string _branchNameEn;
		protected string _branchNameAr;
		protected string _branchCode;
		protected DateTime? _joinDate;
		protected string _notes;
		protected string _phone;
		protected string _phoneAlternative;
		protected bool? _isTerminated;
		protected DateTime? _terminationDate;
		protected Int32? _terminationReasonId;
		protected string _companyCode;
		protected Int32? _businessUnitId;
		protected string _businessUnitCode;
		protected string _businessUnitNameEn;
		protected string _businessUnitNameAr;
		protected Int32? _supervisorUserId;
		#endregion

		#region class methods
		public DAORepresentativeVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table RepresentativeVw
		///</Summary>
		///<returns>
		///IList-DAORepresentativeVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAORepresentativeVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentativeVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RepresentativeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeVw> objList = new List<DAORepresentativeVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeVw retObj = new DAORepresentativeVw();
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._kindId					 = Convert.IsDBNull(row["KindId"]) ? (Int32?)null : (Int32?)row["KindId"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._kindNameEn					 = Convert.IsDBNull(row["KindNameEn"]) ? null : (string)row["KindNameEn"];
						retObj._kindNameAr					 = Convert.IsDBNull(row["KindNameAr"]) ? null : (string)row["KindNameAr"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._businessUnitCode					 = Convert.IsDBNull(row["BusinessUnitCode"]) ? null : (string)row["BusinessUnitCode"];
						retObj._businessUnitNameEn					 = Convert.IsDBNull(row["BusinessUnitNameEn"]) ? null : (string)row["BusinessUnitNameEn"];
						retObj._businessUnitNameAr					 = Convert.IsDBNull(row["BusinessUnitNameAr"]) ? null : (string)row["BusinessUnitNameAr"];
						retObj._supervisorUserId					 = Convert.IsDBNull(row["SupervisorUserId"]) ? (Int32?)null : (Int32?)row["SupervisorUserId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentativeVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiRepresentativeVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentativeVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RepresentativeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "SupervisorId", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"]);
						if (string.Compare(projection.Member, "KindId", true) == 0) lst.Add(Convert.IsDBNull(row["KindId"]) ? (Int32?)null : (Int32?)row["KindId"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "KindNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["KindNameEn"]) ? null : (string)row["KindNameEn"]);
						if (string.Compare(projection.Member, "KindNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["KindNameAr"]) ? null : (string)row["KindNameAr"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "SupervisorNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"]);
						if (string.Compare(projection.Member, "SupervisorNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "JoinDate", true) == 0) lst.Add(Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "PhoneAlternative", true) == 0) lst.Add(Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"]);
						if (string.Compare(projection.Member, "IsTerminated", true) == 0) lst.Add(Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"]);
						if (string.Compare(projection.Member, "TerminationDate", true) == 0) lst.Add(Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"]);
						if (string.Compare(projection.Member, "TerminationReasonId", true) == 0) lst.Add(Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"]);
						if (string.Compare(projection.Member, "CompanyCode", true) == 0) lst.Add(Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"]);
						if (string.Compare(projection.Member, "BusinessUnitId", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"]);
						if (string.Compare(projection.Member, "BusinessUnitCode", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitCode"]) ? null : (string)row["BusinessUnitCode"]);
						if (string.Compare(projection.Member, "BusinessUnitNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitNameEn"]) ? null : (string)row["BusinessUnitNameEn"]);
						if (string.Compare(projection.Member, "BusinessUnitNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitNameAr"]) ? null : (string)row["BusinessUnitNameAr"]);
						if (string.Compare(projection.Member, "SupervisorUserId", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorUserId"]) ? (Int32?)null : (Int32?)row["SupervisorUserId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api RepresentativeVw
		///</Summary>
		///<returns>
		///IList-DAORepresentativeVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAORepresentativeVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentativeVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RepresentativeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeVw> objList = new List<DAORepresentativeVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeVw retObj = new DAORepresentativeVw();
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._kindId					 = Convert.IsDBNull(row["KindId"]) ? (Int32?)null : (Int32?)row["KindId"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._kindNameEn					 = Convert.IsDBNull(row["KindNameEn"]) ? null : (string)row["KindNameEn"];
						retObj._kindNameAr					 = Convert.IsDBNull(row["KindNameAr"]) ? null : (string)row["KindNameAr"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._supervisorNameEn					 = Convert.IsDBNull(row["SupervisorNameEn"]) ? null : (string)row["SupervisorNameEn"];
						retObj._supervisorNameAr					 = Convert.IsDBNull(row["SupervisorNameAr"]) ? null : (string)row["SupervisorNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._joinDate					 = Convert.IsDBNull(row["JoinDate"]) ? (DateTime?)null : (DateTime?)row["JoinDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._terminationDate					 = Convert.IsDBNull(row["TerminationDate"]) ? (DateTime?)null : (DateTime?)row["TerminationDate"];
						retObj._terminationReasonId					 = Convert.IsDBNull(row["TerminationReasonId"]) ? (Int32?)null : (Int32?)row["TerminationReasonId"];
						retObj._companyCode					 = Convert.IsDBNull(row["CompanyCode"]) ? null : (string)row["CompanyCode"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._businessUnitCode					 = Convert.IsDBNull(row["BusinessUnitCode"]) ? null : (string)row["BusinessUnitCode"];
						retObj._businessUnitNameEn					 = Convert.IsDBNull(row["BusinessUnitNameEn"]) ? null : (string)row["BusinessUnitNameEn"];
						retObj._businessUnitNameAr					 = Convert.IsDBNull(row["BusinessUnitNameAr"]) ? null : (string)row["BusinessUnitNameAr"];
						retObj._supervisorUserId					 = Convert.IsDBNull(row["SupervisorUserId"]) ? (Int32?)null : (Int32?)row["SupervisorUserId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api RepresentativeVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentativeVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? SupervisorId
		{
			get
			{
				return _supervisorId;
			}
			set
			{
				_supervisorId = value;
			}
		}

		public Int32? KindId
		{
			get
			{
				return _kindId;
			}
			set
			{
				_kindId = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public string KindNameEn
		{
			get
			{
				return _kindNameEn;
			}
			set
			{
				_kindNameEn = value;
			}
		}

		public string KindNameAr
		{
			get
			{
				return _kindNameAr;
			}
			set
			{
				_kindNameAr = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public string SupervisorNameEn
		{
			get
			{
				return _supervisorNameEn;
			}
			set
			{
				_supervisorNameEn = value;
			}
		}

		public string SupervisorNameAr
		{
			get
			{
				return _supervisorNameAr;
			}
			set
			{
				_supervisorNameAr = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public DateTime? JoinDate
		{
			get
			{
				return _joinDate;
			}
			set
			{
				_joinDate = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string PhoneAlternative
		{
			get
			{
				return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
			}
		}

		public bool? IsTerminated
		{
			get
			{
				return _isTerminated;
			}
			set
			{
				_isTerminated = value;
			}
		}

		public DateTime? TerminationDate
		{
			get
			{
				return _terminationDate;
			}
			set
			{
				_terminationDate = value;
			}
		}

		public Int32? TerminationReasonId
		{
			get
			{
				return _terminationReasonId;
			}
			set
			{
				_terminationReasonId = value;
			}
		}

		public string CompanyCode
		{
			get
			{
				return _companyCode;
			}
			set
			{
				_companyCode = value;
			}
		}

		public Int32? BusinessUnitId
		{
			get
			{
				return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
			}
		}

		public string BusinessUnitCode
		{
			get
			{
				return _businessUnitCode;
			}
			set
			{
				_businessUnitCode = value;
			}
		}

		public string BusinessUnitNameEn
		{
			get
			{
				return _businessUnitNameEn;
			}
			set
			{
				_businessUnitNameEn = value;
			}
		}

		public string BusinessUnitNameAr
		{
			get
			{
				return _businessUnitNameAr;
			}
			set
			{
				_businessUnitNameAr = value;
			}
		}

		public Int32? SupervisorUserId
		{
			get
			{
				return _supervisorUserId;
			}
			set
			{
				_supervisorUserId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprRepresentativeVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[RepresentativeId]
			,[BranchId]
			,[UserId]
			,[SupervisorId]
			,[KindId]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[KindNameEn]
			,[KindNameAr]
			,[IsActive]
			,[DisplayOrder]
			,[CanEdit]
			,[CanDelete]
			,[Icon]
			,[Color]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[BranchNameEn]
			,[BranchNameAr]
			,[BranchCode]
			,[JoinDate]
			,[Notes]
			,[Phone]
			,[PhoneAlternative]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CompanyCode]
			,[BusinessUnitId]
			,[BusinessUnitCode]
			,[BusinessUnitNameEn]
			,[BusinessUnitNameAr]
			,[SupervisorUserId]
			FROM [dbo].[RepresentativeVw]
			";

		internal static string ctprRepresentativeVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[RepresentativeVw]
			";

		internal static string ctprRepresentativeVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[RepresentativeVw]
			##CRITERIA##
			";

		internal static string ctprRepresentativeVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[RepresentativeId]
			,[BranchId]
			,[UserId]
			,[SupervisorId]
			,[KindId]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[KindNameEn]
			,[KindNameAr]
			,[IsActive]
			,[DisplayOrder]
			,[CanEdit]
			,[CanDelete]
			,[Icon]
			,[Color]
			,[SupervisorNameEn]
			,[SupervisorNameAr]
			,[BranchNameEn]
			,[BranchNameAr]
			,[BranchCode]
			,[JoinDate]
			,[Notes]
			,[Phone]
			,[PhoneAlternative]
			,[IsTerminated]
			,[TerminationDate]
			,[TerminationReasonId]
			,[CompanyCode]
			,[BusinessUnitId]
			,[BusinessUnitCode]
			,[BusinessUnitNameEn]
			,[BusinessUnitNameAr]
			,[SupervisorUserId]
			FROM [dbo].[RepresentativeVw]
			##CRITERIA##
			";

		internal static string ctprRepresentativeVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[RepresentativeVw]
			##CRITERIA##
			";

	}
}
#endregion
