/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPurchaseOrderDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _detailId;
		protected Int32? _purchaseId;
		protected Int32? _itemId;
		protected Int32? _quanity;
		protected decimal? _purchasePrice;
		protected string _currency;
		protected decimal? _exchangeRate;
		protected decimal? _purchasePriceLocal;
		protected Int32? _unitId;
		protected decimal? _taxValue;
		protected decimal? _discountValue;
		protected string _batchNo;
		protected DateTime? _expireDate;
		protected Int32? _statusReceipt;
		protected Int32? _itemStoreId;
		protected Int64? _recId;
		#endregion

		#region class methods
		public DAOPurchaseOrderDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table PurchaseOrder_Detail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOPurchaseOrderDetail
		///</returns>
		///<parameters>
		///Int32? detailId
		///</parameters>
		public static DAOPurchaseOrderDetail SelectOne(Int32? detailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)detailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOPurchaseOrderDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPurchaseOrderDetail();
					retObj._detailId					 = Convert.IsDBNull(dt.Rows[0]["DetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DetailId"];
					retObj._purchaseId					 = Convert.IsDBNull(dt.Rows[0]["PurchaseId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PurchaseId"];
					retObj._itemId					 = Convert.IsDBNull(dt.Rows[0]["ItemId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemId"];
					retObj._quanity					 = Convert.IsDBNull(dt.Rows[0]["Quanity"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Quanity"];
					retObj._purchasePrice					 = Convert.IsDBNull(dt.Rows[0]["PurchasePrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["PurchasePrice"];
					retObj._currency					 = Convert.IsDBNull(dt.Rows[0]["Currency"]) ? null : (string)dt.Rows[0]["Currency"];
					retObj._exchangeRate					 = Convert.IsDBNull(dt.Rows[0]["ExchangeRate"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ExchangeRate"];
					retObj._purchasePriceLocal					 = Convert.IsDBNull(dt.Rows[0]["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["PurchasePriceLocal"];
					retObj._unitId					 = Convert.IsDBNull(dt.Rows[0]["UnitId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UnitId"];
					retObj._taxValue					 = Convert.IsDBNull(dt.Rows[0]["TaxValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["TaxValue"];
					retObj._discountValue					 = Convert.IsDBNull(dt.Rows[0]["DiscountValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["DiscountValue"];
					retObj._batchNo					 = Convert.IsDBNull(dt.Rows[0]["BatchNo"]) ? null : (string)dt.Rows[0]["BatchNo"];
					retObj._expireDate					 = Convert.IsDBNull(dt.Rows[0]["ExpireDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ExpireDate"];
					retObj._statusReceipt					 = Convert.IsDBNull(dt.Rows[0]["StatusReceipt"]) ? (Int32?)null : (Int32?)dt.Rows[0]["StatusReceipt"];
					retObj._itemStoreId					 = Convert.IsDBNull(dt.Rows[0]["ItemStoreId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemStoreId"];
					retObj._recId					 = Convert.IsDBNull(dt.Rows[0]["RecId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RecId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table PurchaseOrder_Detail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PurchaseOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrderDetail.
		///</returns>
		///<parameters>
		///Int32? purchaseId
		///</parameters>
		public static IList<DAOPurchaseOrderDetail> SelectAllByPurchaseId(Int32? purchaseId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByPurchaseId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)purchaseId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrderDetail> objList = new List<DAOPurchaseOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrderDetail retObj = new DAOPurchaseOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._quanity					 = Convert.IsDBNull(row["Quanity"]) ? (Int32?)null : (Int32?)row["Quanity"];
						retObj._purchasePrice					 = Convert.IsDBNull(row["PurchasePrice"]) ? (decimal?)null : (decimal?)row["PurchasePrice"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._purchasePriceLocal					 = Convert.IsDBNull(row["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)row["PurchasePriceLocal"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._discountValue					 = Convert.IsDBNull(row["DiscountValue"]) ? (decimal?)null : (decimal?)row["DiscountValue"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._statusReceipt					 = Convert.IsDBNull(row["StatusReceipt"]) ? (Int32?)null : (Int32?)row["StatusReceipt"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? purchaseId
		///</parameters>
		public static Int32 SelectAllByPurchaseIdCount(Int32? purchaseId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByPurchaseIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)purchaseId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PurchaseOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? purchaseId
		///</parameters>
		public static void DeleteAllByPurchaseId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? purchaseId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_DeleteAllByPurchaseId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)purchaseId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PurchaseOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrderDetail.
		///</returns>
		///<parameters>
		///Int32? itemId
		///</parameters>
		public static IList<DAOPurchaseOrderDetail> SelectAllByItemId(Int32? itemId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByItemId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrderDetail> objList = new List<DAOPurchaseOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrderDetail retObj = new DAOPurchaseOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._quanity					 = Convert.IsDBNull(row["Quanity"]) ? (Int32?)null : (Int32?)row["Quanity"];
						retObj._purchasePrice					 = Convert.IsDBNull(row["PurchasePrice"]) ? (decimal?)null : (decimal?)row["PurchasePrice"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._purchasePriceLocal					 = Convert.IsDBNull(row["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)row["PurchasePriceLocal"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._discountValue					 = Convert.IsDBNull(row["DiscountValue"]) ? (decimal?)null : (decimal?)row["DiscountValue"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._statusReceipt					 = Convert.IsDBNull(row["StatusReceipt"]) ? (Int32?)null : (Int32?)row["StatusReceipt"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? itemId
		///</parameters>
		public static Int32 SelectAllByItemIdCount(Int32? itemId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByItemIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PurchaseOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemId
		///</parameters>
		public static void DeleteAllByItemId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_DeleteAllByItemId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PurchaseOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrderDetail.
		///</returns>
		///<parameters>
		///Int32? unitId
		///</parameters>
		public static IList<DAOPurchaseOrderDetail> SelectAllByUnitId(Int32? unitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByUnitId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)unitId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrderDetail> objList = new List<DAOPurchaseOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrderDetail retObj = new DAOPurchaseOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._quanity					 = Convert.IsDBNull(row["Quanity"]) ? (Int32?)null : (Int32?)row["Quanity"];
						retObj._purchasePrice					 = Convert.IsDBNull(row["PurchasePrice"]) ? (decimal?)null : (decimal?)row["PurchasePrice"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._purchasePriceLocal					 = Convert.IsDBNull(row["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)row["PurchasePriceLocal"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._discountValue					 = Convert.IsDBNull(row["DiscountValue"]) ? (decimal?)null : (decimal?)row["DiscountValue"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._statusReceipt					 = Convert.IsDBNull(row["StatusReceipt"]) ? (Int32?)null : (Int32?)row["StatusReceipt"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? unitId
		///</parameters>
		public static Int32 SelectAllByUnitIdCount(Int32? unitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByUnitIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)unitId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PurchaseOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? unitId
		///</parameters>
		public static void DeleteAllByUnitId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? unitId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_DeleteAllByUnitId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)unitId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PurchaseOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrderDetail.
		///</returns>
		///<parameters>
		///Int32? itemStoreId
		///</parameters>
		public static IList<DAOPurchaseOrderDetail> SelectAllByItemStoreId(Int32? itemStoreId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByItemStoreId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemStoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemStoreId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrderDetail> objList = new List<DAOPurchaseOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrderDetail retObj = new DAOPurchaseOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._quanity					 = Convert.IsDBNull(row["Quanity"]) ? (Int32?)null : (Int32?)row["Quanity"];
						retObj._purchasePrice					 = Convert.IsDBNull(row["PurchasePrice"]) ? (decimal?)null : (decimal?)row["PurchasePrice"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._purchasePriceLocal					 = Convert.IsDBNull(row["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)row["PurchasePriceLocal"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._discountValue					 = Convert.IsDBNull(row["DiscountValue"]) ? (decimal?)null : (decimal?)row["DiscountValue"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._statusReceipt					 = Convert.IsDBNull(row["StatusReceipt"]) ? (Int32?)null : (Int32?)row["StatusReceipt"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? itemStoreId
		///</parameters>
		public static Int32 SelectAllByItemStoreIdCount(Int32? itemStoreId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllByItemStoreIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemStoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemStoreId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PurchaseOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemStoreId
		///</parameters>
		public static void DeleteAllByItemStoreId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemStoreId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_DeleteAllByItemStoreId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemStoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemStoreId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table PurchaseOrder_Detail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _detailId));
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_purchaseId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quanity", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_quanity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PurchasePrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_purchasePrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Currency", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_currency?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExchangeRate", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_exchangeRate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PurchasePriceLocal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_purchasePriceLocal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_unitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DiscountValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discountValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BatchNo", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_batchNo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExpireDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_expireDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StatusReceipt", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_statusReceipt?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemStoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemStoreId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DetailId"].Value;
				_purchaseId					 = Convert.IsDBNull(command.Parameters["@PurchaseId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PurchaseId"].Value;
				_itemId					 = Convert.IsDBNull(command.Parameters["@ItemId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemId"].Value;
				_quanity					 = Convert.IsDBNull(command.Parameters["@Quanity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Quanity"].Value;
				_purchasePrice					 = Convert.IsDBNull(command.Parameters["@PurchasePrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PurchasePrice"].Value;
				_currency					 = Convert.IsDBNull(command.Parameters["@Currency"].Value) ? null : (string)command.Parameters["@Currency"].Value;
				_exchangeRate					 = Convert.IsDBNull(command.Parameters["@ExchangeRate"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ExchangeRate"].Value;
				_purchasePriceLocal					 = Convert.IsDBNull(command.Parameters["@PurchasePriceLocal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PurchasePriceLocal"].Value;
				_unitId					 = Convert.IsDBNull(command.Parameters["@UnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UnitId"].Value;
				_taxValue					 = Convert.IsDBNull(command.Parameters["@TaxValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxValue"].Value;
				_discountValue					 = Convert.IsDBNull(command.Parameters["@DiscountValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DiscountValue"].Value;
				_batchNo					 = Convert.IsDBNull(command.Parameters["@BatchNo"].Value) ? null : (string)command.Parameters["@BatchNo"].Value;
				_expireDate					 = Convert.IsDBNull(command.Parameters["@ExpireDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ExpireDate"].Value;
				_statusReceipt					 = Convert.IsDBNull(command.Parameters["@StatusReceipt"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StatusReceipt"].Value;
				_itemStoreId					 = Convert.IsDBNull(command.Parameters["@ItemStoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemStoreId"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table PurchaseOrder_Detail
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrderDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPurchaseOrderDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrderDetail> objList = new List<DAOPurchaseOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrderDetail retObj = new DAOPurchaseOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._quanity					 = Convert.IsDBNull(row["Quanity"]) ? (Int32?)null : (Int32?)row["Quanity"];
						retObj._purchasePrice					 = Convert.IsDBNull(row["PurchasePrice"]) ? (decimal?)null : (decimal?)row["PurchasePrice"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._purchasePriceLocal					 = Convert.IsDBNull(row["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)row["PurchasePriceLocal"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._discountValue					 = Convert.IsDBNull(row["DiscountValue"]) ? (decimal?)null : (decimal?)row["DiscountValue"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._statusReceipt					 = Convert.IsDBNull(row["StatusReceipt"]) ? (Int32?)null : (Int32?)row["StatusReceipt"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPurchaseOrder_Detail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPurchaseOrder_Detail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"]);
						if (string.Compare(projection.Member, "PurchaseId", true) == 0) lst.Add(Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"]);
						if (string.Compare(projection.Member, "ItemId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"]);
						if (string.Compare(projection.Member, "Quanity", true) == 0) lst.Add(Convert.IsDBNull(row["Quanity"]) ? (Int32?)null : (Int32?)row["Quanity"]);
						if (string.Compare(projection.Member, "PurchasePrice", true) == 0) lst.Add(Convert.IsDBNull(row["PurchasePrice"]) ? (decimal?)null : (decimal?)row["PurchasePrice"]);
						if (string.Compare(projection.Member, "Currency", true) == 0) lst.Add(Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"]);
						if (string.Compare(projection.Member, "ExchangeRate", true) == 0) lst.Add(Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"]);
						if (string.Compare(projection.Member, "PurchasePriceLocal", true) == 0) lst.Add(Convert.IsDBNull(row["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)row["PurchasePriceLocal"]);
						if (string.Compare(projection.Member, "UnitId", true) == 0) lst.Add(Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"]);
						if (string.Compare(projection.Member, "TaxValue", true) == 0) lst.Add(Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"]);
						if (string.Compare(projection.Member, "DiscountValue", true) == 0) lst.Add(Convert.IsDBNull(row["DiscountValue"]) ? (decimal?)null : (decimal?)row["DiscountValue"]);
						if (string.Compare(projection.Member, "BatchNo", true) == 0) lst.Add(Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"]);
						if (string.Compare(projection.Member, "ExpireDate", true) == 0) lst.Add(Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"]);
						if (string.Compare(projection.Member, "StatusReceipt", true) == 0) lst.Add(Convert.IsDBNull(row["StatusReceipt"]) ? (Int32?)null : (Int32?)row["StatusReceipt"]);
						if (string.Compare(projection.Member, "ItemStoreId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"]);
						if (string.Compare(projection.Member, "RecId", true) == 0) lst.Add(Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api PurchaseOrder_Detail
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrderDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPurchaseOrderDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPurchaseOrder_Detail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrderDetail> objList = new List<DAOPurchaseOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrderDetail retObj = new DAOPurchaseOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._quanity					 = Convert.IsDBNull(row["Quanity"]) ? (Int32?)null : (Int32?)row["Quanity"];
						retObj._purchasePrice					 = Convert.IsDBNull(row["PurchasePrice"]) ? (decimal?)null : (decimal?)row["PurchasePrice"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._purchasePriceLocal					 = Convert.IsDBNull(row["PurchasePriceLocal"]) ? (decimal?)null : (decimal?)row["PurchasePriceLocal"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._discountValue					 = Convert.IsDBNull(row["DiscountValue"]) ? (decimal?)null : (decimal?)row["DiscountValue"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._statusReceipt					 = Convert.IsDBNull(row["StatusReceipt"]) ? (Int32?)null : (Int32?)row["StatusReceipt"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api PurchaseOrder_Detail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPurchaseOrder_Detail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table PurchaseOrder_Detail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_Detail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_purchaseId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quanity", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_quanity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PurchasePrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_purchasePrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Currency", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_currency?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExchangeRate", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_exchangeRate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PurchasePriceLocal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_purchasePriceLocal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_unitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DiscountValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discountValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BatchNo", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_batchNo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExpireDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_expireDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StatusReceipt", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_statusReceipt?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemStoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemStoreId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DetailId"].Value;
				_purchaseId					 = Convert.IsDBNull(command.Parameters["@PurchaseId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PurchaseId"].Value;
				_itemId					 = Convert.IsDBNull(command.Parameters["@ItemId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemId"].Value;
				_quanity					 = Convert.IsDBNull(command.Parameters["@Quanity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Quanity"].Value;
				_purchasePrice					 = Convert.IsDBNull(command.Parameters["@PurchasePrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PurchasePrice"].Value;
				_currency					 = Convert.IsDBNull(command.Parameters["@Currency"].Value) ? null : (string)command.Parameters["@Currency"].Value;
				_exchangeRate					 = Convert.IsDBNull(command.Parameters["@ExchangeRate"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ExchangeRate"].Value;
				_purchasePriceLocal					 = Convert.IsDBNull(command.Parameters["@PurchasePriceLocal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PurchasePriceLocal"].Value;
				_unitId					 = Convert.IsDBNull(command.Parameters["@UnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UnitId"].Value;
				_taxValue					 = Convert.IsDBNull(command.Parameters["@TaxValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxValue"].Value;
				_discountValue					 = Convert.IsDBNull(command.Parameters["@DiscountValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DiscountValue"].Value;
				_batchNo					 = Convert.IsDBNull(command.Parameters["@BatchNo"].Value) ? null : (string)command.Parameters["@BatchNo"].Value;
				_expireDate					 = Convert.IsDBNull(command.Parameters["@ExpireDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ExpireDate"].Value;
				_statusReceipt					 = Convert.IsDBNull(command.Parameters["@StatusReceipt"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StatusReceipt"].Value;
				_itemStoreId					 = Convert.IsDBNull(command.Parameters["@ItemStoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemStoreId"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int32? PurchaseId
		{
			get
			{
				return _purchaseId;
			}
			set
			{
				_purchaseId = value;
			}
		}

		public Int32? ItemId
		{
			get
			{
				return _itemId;
			}
			set
			{
				_itemId = value;
			}
		}

		public Int32? Quanity
		{
			get
			{
				return _quanity;
			}
			set
			{
				_quanity = value;
			}
		}

		public decimal? PurchasePrice
		{
			get
			{
				return _purchasePrice;
			}
			set
			{
				_purchasePrice = value;
			}
		}

		public string Currency
		{
			get
			{
				return _currency;
			}
			set
			{
				_currency = value;
			}
		}

		public decimal? ExchangeRate
		{
			get
			{
				return _exchangeRate;
			}
			set
			{
				_exchangeRate = value;
			}
		}

		public decimal? PurchasePriceLocal
		{
			get
			{
				return _purchasePriceLocal;
			}
			set
			{
				_purchasePriceLocal = value;
			}
		}

		public Int32? UnitId
		{
			get
			{
				return _unitId;
			}
			set
			{
				_unitId = value;
			}
		}

		public decimal? TaxValue
		{
			get
			{
				return _taxValue;
			}
			set
			{
				_taxValue = value;
			}
		}

		public decimal? DiscountValue
		{
			get
			{
				return _discountValue;
			}
			set
			{
				_discountValue = value;
			}
		}

		public string BatchNo
		{
			get
			{
				return _batchNo;
			}
			set
			{
				_batchNo = value;
			}
		}

		public DateTime? ExpireDate
		{
			get
			{
				return _expireDate;
			}
			set
			{
				_expireDate = value;
			}
		}

		public Int32? StatusReceipt
		{
			get
			{
				return _statusReceipt;
			}
			set
			{
				_statusReceipt = value;
			}
		}

		public Int32? ItemStoreId
		{
			get
			{
				return _itemStoreId;
			}
			set
			{
				_itemStoreId = value;
			}
		}

		public Int64? RecId
		{
			get
			{
				return _recId;
			}
			set
			{
				_recId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPurchaseOrder_Detail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprPurchaseOrder_Detail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByPurchaseId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[PurchaseId] = @PurchaseId OR ([PurchaseId] IS NULL AND @PurchaseId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByPurchaseIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[PurchaseId] = @PurchaseId OR ([PurchaseId] IS NULL AND @PurchaseId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_DeleteAllByPurchaseId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder_Detail]
			WHERE 
			[PurchaseId] = @PurchaseId OR ([PurchaseId] IS NULL AND @PurchaseId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByItemId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[ItemId] = @ItemId OR ([ItemId] IS NULL AND @ItemId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByItemIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[ItemId] = @ItemId OR ([ItemId] IS NULL AND @ItemId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_DeleteAllByItemId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder_Detail]
			WHERE 
			[ItemId] = @ItemId OR ([ItemId] IS NULL AND @ItemId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByUnitId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[UnitId] = @UnitId OR ([UnitId] IS NULL AND @UnitId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByUnitIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[UnitId] = @UnitId OR ([UnitId] IS NULL AND @UnitId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_DeleteAllByUnitId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder_Detail]
			WHERE 
			[UnitId] = @UnitId OR ([UnitId] IS NULL AND @UnitId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByItemStoreId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[ItemStoreId] = @ItemStoreId OR ([ItemStoreId] IS NULL AND @ItemStoreId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByItemStoreIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[ItemStoreId] = @ItemStoreId OR ([ItemStoreId] IS NULL AND @ItemStoreId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_DeleteAllByItemStoreId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder_Detail]
			WHERE 
			[ItemStoreId] = @ItemStoreId OR ([ItemStoreId] IS NULL AND @ItemStoreId IS NULL)
			";

		internal static string ctprPurchaseOrder_Detail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[PurchaseOrder_Detail]
			(
			[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			)
			VALUES
			(
			@PurchaseId
			,@ItemId
			,@Quanity
			,@PurchasePrice
			,@Currency
			,@ExchangeRate
			,@PurchasePriceLocal
			,@UnitId
			,@TaxValue
			,@DiscountValue
			,@BatchNo
			,@ExpireDate
			,@StatusReceipt
			,@ItemStoreId
			,@RecId
			)
			SELECT 
			@DetailId = [DetailId]
			,@PurchaseId = [PurchaseId]
			,@ItemId = [ItemId]
			,@Quanity = [Quanity]
			,@PurchasePrice = [PurchasePrice]
			,@Currency = [Currency]
			,@ExchangeRate = [ExchangeRate]
			,@PurchasePriceLocal = [PurchasePriceLocal]
			,@UnitId = [UnitId]
			,@TaxValue = [TaxValue]
			,@DiscountValue = [DiscountValue]
			,@BatchNo = [BatchNo]
			,@ExpireDate = [ExpireDate]
			,@StatusReceipt = [StatusReceipt]
			,@ItemStoreId = [ItemStoreId]
			,@RecId = [RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[DetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprPurchaseOrder_Detail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder_Detail]
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[PurchaseOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[PurchaseId]
			,[ItemId]
			,[Quanity]
			,[PurchasePrice]
			,[Currency]
			,[ExchangeRate]
			,[PurchasePriceLocal]
			,[UnitId]
			,[TaxValue]
			,[DiscountValue]
			,[BatchNo]
			,[ExpireDate]
			,[StatusReceipt]
			,[ItemStoreId]
			,[RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprPurchaseOrder_Detail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprPurchaseOrder_Detail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[PurchaseOrder_Detail]
			SET
			[PurchaseId] = @PurchaseId
			,[ItemId] = @ItemId
			,[Quanity] = @Quanity
			,[PurchasePrice] = @PurchasePrice
			,[Currency] = @Currency
			,[ExchangeRate] = @ExchangeRate
			,[PurchasePriceLocal] = @PurchasePriceLocal
			,[UnitId] = @UnitId
			,[TaxValue] = @TaxValue
			,[DiscountValue] = @DiscountValue
			,[BatchNo] = @BatchNo
			,[ExpireDate] = @ExpireDate
			,[StatusReceipt] = @StatusReceipt
			,[ItemStoreId] = @ItemStoreId
			,[RecId] = @RecId
			WHERE 
			[DetailId] = @DetailId
			SELECT 
			@DetailId = [DetailId]
			,@PurchaseId = [PurchaseId]
			,@ItemId = [ItemId]
			,@Quanity = [Quanity]
			,@PurchasePrice = [PurchasePrice]
			,@Currency = [Currency]
			,@ExchangeRate = [ExchangeRate]
			,@PurchasePriceLocal = [PurchasePriceLocal]
			,@UnitId = [UnitId]
			,@TaxValue = [TaxValue]
			,@DiscountValue = [DiscountValue]
			,@BatchNo = [BatchNo]
			,@ExpireDate = [ExpireDate]
			,@StatusReceipt = [StatusReceipt]
			,@ItemStoreId = [ItemStoreId]
			,@RecId = [RecId]
			FROM [dbo].[PurchaseOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

	}
}
#endregion
