/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrderVendorReportVW : zSofiForceConn_BaseData
	{
		#region member variables
		protected string _branchCode;
		protected string _branchName;
		protected string _govCode;
		protected string _govName;
		protected string _cityCode;
		protected string _cityName;
		protected string _vendorCode;
		protected string _vendorName;
		protected string _itemCode;
		protected string _itemName;
		protected string _clientCode;
		protected string _clientName;
		protected DateTime? _invoiceDate;
		protected string _invoiceCode;
		protected decimal? _lineValue;
		protected Int32? _sellingQTY;
		protected Int32? _sellingBounsQTY;
		protected Int32? _returnQTY;
		protected Int32? _returnBounsQTY;
		#endregion

		#region class methods
		public DAOSalesOrderVendorReportVW()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrderVendorReportVW
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderVendorReportVW.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrderVendorReportVW> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrderVendorReportVW_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrderVendorReportVW");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderVendorReportVW> objList = new List<DAOSalesOrderVendorReportVW>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderVendorReportVW retObj = new DAOSalesOrderVendorReportVW();
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchName					 = Convert.IsDBNull(row["BranchName"]) ? null : (string)row["BranchName"];
						retObj._govCode					 = Convert.IsDBNull(row["GovCode"]) ? null : (string)row["GovCode"];
						retObj._govName					 = Convert.IsDBNull(row["GovName"]) ? null : (string)row["GovName"];
						retObj._cityCode					 = Convert.IsDBNull(row["CityCode"]) ? null : (string)row["CityCode"];
						retObj._cityName					 = Convert.IsDBNull(row["CityName"]) ? null : (string)row["CityName"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._vendorName					 = Convert.IsDBNull(row["VendorName"]) ? null : (string)row["VendorName"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemName					 = Convert.IsDBNull(row["ItemName"]) ? null : (string)row["ItemName"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientName					 = Convert.IsDBNull(row["ClientName"]) ? null : (string)row["ClientName"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._lineValue					 = Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"];
						retObj._sellingQTY					 = Convert.IsDBNull(row["SellingQTY"]) ? (Int32?)null : (Int32?)row["SellingQTY"];
						retObj._sellingBounsQTY					 = Convert.IsDBNull(row["SellingBounsQTY"]) ? (Int32?)null : (Int32?)row["SellingBounsQTY"];
						retObj._returnQTY					 = Convert.IsDBNull(row["ReturnQTY"]) ? (Int32?)null : (Int32?)row["ReturnQTY"];
						retObj._returnBounsQTY					 = Convert.IsDBNull(row["ReturnBounsQTY"]) ? (Int32?)null : (Int32?)row["ReturnBounsQTY"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrderVendorReportVW_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrderVendorReportVW
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrderVendorReportVW_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrderVendorReportVW");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "BranchName", true) == 0) lst.Add(Convert.IsDBNull(row["BranchName"]) ? null : (string)row["BranchName"]);
						if (string.Compare(projection.Member, "GovCode", true) == 0) lst.Add(Convert.IsDBNull(row["GovCode"]) ? null : (string)row["GovCode"]);
						if (string.Compare(projection.Member, "GovName", true) == 0) lst.Add(Convert.IsDBNull(row["GovName"]) ? null : (string)row["GovName"]);
						if (string.Compare(projection.Member, "CityCode", true) == 0) lst.Add(Convert.IsDBNull(row["CityCode"]) ? null : (string)row["CityCode"]);
						if (string.Compare(projection.Member, "CityName", true) == 0) lst.Add(Convert.IsDBNull(row["CityName"]) ? null : (string)row["CityName"]);
						if (string.Compare(projection.Member, "VendorCode", true) == 0) lst.Add(Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"]);
						if (string.Compare(projection.Member, "VendorName", true) == 0) lst.Add(Convert.IsDBNull(row["VendorName"]) ? null : (string)row["VendorName"]);
						if (string.Compare(projection.Member, "ItemCode", true) == 0) lst.Add(Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"]);
						if (string.Compare(projection.Member, "ItemName", true) == 0) lst.Add(Convert.IsDBNull(row["ItemName"]) ? null : (string)row["ItemName"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientName", true) == 0) lst.Add(Convert.IsDBNull(row["ClientName"]) ? null : (string)row["ClientName"]);
						if (string.Compare(projection.Member, "InvoiceDate", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "LineValue", true) == 0) lst.Add(Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"]);
						if (string.Compare(projection.Member, "SellingQTY", true) == 0) lst.Add(Convert.IsDBNull(row["SellingQTY"]) ? (Int32?)null : (Int32?)row["SellingQTY"]);
						if (string.Compare(projection.Member, "SellingBounsQTY", true) == 0) lst.Add(Convert.IsDBNull(row["SellingBounsQTY"]) ? (Int32?)null : (Int32?)row["SellingBounsQTY"]);
						if (string.Compare(projection.Member, "ReturnQTY", true) == 0) lst.Add(Convert.IsDBNull(row["ReturnQTY"]) ? (Int32?)null : (Int32?)row["ReturnQTY"]);
						if (string.Compare(projection.Member, "ReturnBounsQTY", true) == 0) lst.Add(Convert.IsDBNull(row["ReturnBounsQTY"]) ? (Int32?)null : (Int32?)row["ReturnBounsQTY"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrderVendorReportVW
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderVendorReportVW.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrderVendorReportVW> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrderVendorReportVW_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrderVendorReportVW");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderVendorReportVW> objList = new List<DAOSalesOrderVendorReportVW>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderVendorReportVW retObj = new DAOSalesOrderVendorReportVW();
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchName					 = Convert.IsDBNull(row["BranchName"]) ? null : (string)row["BranchName"];
						retObj._govCode					 = Convert.IsDBNull(row["GovCode"]) ? null : (string)row["GovCode"];
						retObj._govName					 = Convert.IsDBNull(row["GovName"]) ? null : (string)row["GovName"];
						retObj._cityCode					 = Convert.IsDBNull(row["CityCode"]) ? null : (string)row["CityCode"];
						retObj._cityName					 = Convert.IsDBNull(row["CityName"]) ? null : (string)row["CityName"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._vendorName					 = Convert.IsDBNull(row["VendorName"]) ? null : (string)row["VendorName"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemName					 = Convert.IsDBNull(row["ItemName"]) ? null : (string)row["ItemName"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientName					 = Convert.IsDBNull(row["ClientName"]) ? null : (string)row["ClientName"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._lineValue					 = Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"];
						retObj._sellingQTY					 = Convert.IsDBNull(row["SellingQTY"]) ? (Int32?)null : (Int32?)row["SellingQTY"];
						retObj._sellingBounsQTY					 = Convert.IsDBNull(row["SellingBounsQTY"]) ? (Int32?)null : (Int32?)row["SellingBounsQTY"];
						retObj._returnQTY					 = Convert.IsDBNull(row["ReturnQTY"]) ? (Int32?)null : (Int32?)row["ReturnQTY"];
						retObj._returnBounsQTY					 = Convert.IsDBNull(row["ReturnBounsQTY"]) ? (Int32?)null : (Int32?)row["ReturnBounsQTY"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrderVendorReportVW
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrderVendorReportVW_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string BranchName
		{
			get
			{
				return _branchName;
			}
			set
			{
				_branchName = value;
			}
		}

		public string GovCode
		{
			get
			{
				return _govCode;
			}
			set
			{
				_govCode = value;
			}
		}

		public string GovName
		{
			get
			{
				return _govName;
			}
			set
			{
				_govName = value;
			}
		}

		public string CityCode
		{
			get
			{
				return _cityCode;
			}
			set
			{
				_cityCode = value;
			}
		}

		public string CityName
		{
			get
			{
				return _cityName;
			}
			set
			{
				_cityName = value;
			}
		}

		public string VendorCode
		{
			get
			{
				return _vendorCode;
			}
			set
			{
				_vendorCode = value;
			}
		}

		public string VendorName
		{
			get
			{
				return _vendorName;
			}
			set
			{
				_vendorName = value;
			}
		}

		public string ItemCode
		{
			get
			{
				return _itemCode;
			}
			set
			{
				_itemCode = value;
			}
		}

		public string ItemName
		{
			get
			{
				return _itemName;
			}
			set
			{
				_itemName = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientName
		{
			get
			{
				return _clientName;
			}
			set
			{
				_clientName = value;
			}
		}

		public DateTime? InvoiceDate
		{
			get
			{
				return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public decimal? LineValue
		{
			get
			{
				return _lineValue;
			}
			set
			{
				_lineValue = value;
			}
		}

		public Int32? SellingQTY
		{
			get
			{
				return _sellingQTY;
			}
			set
			{
				_sellingQTY = value;
			}
		}

		public Int32? SellingBounsQTY
		{
			get
			{
				return _sellingBounsQTY;
			}
			set
			{
				_sellingBounsQTY = value;
			}
		}

		public Int32? ReturnQTY
		{
			get
			{
				return _returnQTY;
			}
			set
			{
				_returnQTY = value;
			}
		}

		public Int32? ReturnBounsQTY
		{
			get
			{
				return _returnBounsQTY;
			}
			set
			{
				_returnBounsQTY = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrderVendorReportVW_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[BranchCode]
			,[BranchName]
			,[GovCode]
			,[GovName]
			,[CityCode]
			,[CityName]
			,[VendorCode]
			,[VendorName]
			,[ItemCode]
			,[ItemName]
			,[ClientCode]
			,[ClientName]
			,[InvoiceDate]
			,[InvoiceCode]
			,[LineValue]
			,[SellingQTY]
			,[SellingBounsQTY]
			,[ReturnQTY]
			,[ReturnBounsQTY]
			FROM [dbo].[SalesOrderVendorReportVW]
			";

		internal static string ctprSalesOrderVendorReportVW_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrderVendorReportVW]
			";

		internal static string ctprSalesOrderVendorReportVW_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrderVendorReportVW]
			##CRITERIA##
			";

		internal static string ctprSalesOrderVendorReportVW_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[BranchCode]
			,[BranchName]
			,[GovCode]
			,[GovName]
			,[CityCode]
			,[CityName]
			,[VendorCode]
			,[VendorName]
			,[ItemCode]
			,[ItemName]
			,[ClientCode]
			,[ClientName]
			,[InvoiceDate]
			,[InvoiceCode]
			,[LineValue]
			,[SellingQTY]
			,[SellingBounsQTY]
			,[ReturnQTY]
			,[ReturnBounsQTY]
			FROM [dbo].[SalesOrderVendorReportVW]
			##CRITERIA##
			";

		internal static string ctprSalesOrderVendorReportVW_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrderVendorReportVW]
			##CRITERIA##
			";

	}
}
#endregion
