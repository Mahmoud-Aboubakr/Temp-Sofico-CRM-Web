/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 4/28/2022 3:29:52 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientServeyDetailAnswer : zSofiForceConn_BaseData
	{
		#region member variables
		protected string _detail;
		protected Int32? _detailAnswerId;
		#endregion

		#region class methods
		public DAOClientServeyDetailAnswer()
		{
		}
		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_Servey_Detail_Answer
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Servey_Detail_Answer_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Detail", SqlDbType.NChar, 10, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_detail?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DetailAnswerId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_detailAnswerId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detail					 = Convert.IsDBNull(command.Parameters["@Detail"].Value) ? null : (string)command.Parameters["@Detail"].Value;
				_detailAnswerId					 = Convert.IsDBNull(command.Parameters["@DetailAnswerId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DetailAnswerId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_Servey_Detail_Answer
		///</Summary>
		///<returns>
		///IList-DAOClientServeyDetailAnswer.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientServeyDetailAnswer> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Servey_Detail_Answer_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Servey_Detail_Answer");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServeyDetailAnswer> objList = new List<DAOClientServeyDetailAnswer>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServeyDetailAnswer retObj = new DAOClientServeyDetailAnswer();
						retObj._detail					 = Convert.IsDBNull(row["Detail"]) ? null : (string)row["Detail"];
						retObj._detailAnswerId					 = Convert.IsDBNull(row["DetailAnswerId"]) ? (Int32?)null : (Int32?)row["DetailAnswerId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Servey_Detail_Answer_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_Servey_Detail_Answer
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Servey_Detail_Answer_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Servey_Detail_Answer");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "Detail", true) == 0) lst.Add(Convert.IsDBNull(row["Detail"]) ? null : (string)row["Detail"]);
						if (string.Compare(projection.Member, "DetailAnswerId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailAnswerId"]) ? (Int32?)null : (Int32?)row["DetailAnswerId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_Servey_Detail_Answer
		///</Summary>
		///<returns>
		///IList-DAOClientServeyDetailAnswer.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientServeyDetailAnswer> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Servey_Detail_Answer_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Servey_Detail_Answer");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServeyDetailAnswer> objList = new List<DAOClientServeyDetailAnswer>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServeyDetailAnswer retObj = new DAOClientServeyDetailAnswer();
						retObj._detail					 = Convert.IsDBNull(row["Detail"]) ? null : (string)row["Detail"];
						retObj._detailAnswerId					 = Convert.IsDBNull(row["DetailAnswerId"]) ? (Int32?)null : (Int32?)row["DetailAnswerId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_Servey_Detail_Answer
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Servey_Detail_Answer_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string Detail
		{
			get
			{
				return _detail;
			}
			set
			{
				_detail = value;
			}
		}

		public Int32? DetailAnswerId
		{
			get
			{
				return _detailAnswerId;
			}
			set
			{
				_detailAnswerId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_Servey_Detail_Answer_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_Servey_Detail_Answer]
			(
			[Detail]
			,[DetailAnswerId]
			)
			VALUES
			(
			@Detail
			,@DetailAnswerId
			)
			";

		internal static string ctprClient_Servey_Detail_Answer_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Detail]
			,[DetailAnswerId]
			FROM [dbo].[Client_Servey_Detail_Answer]
			";

		internal static string ctprClient_Servey_Detail_Answer_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Servey_Detail_Answer]
			";

		internal static string ctprClient_Servey_Detail_Answer_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_Servey_Detail_Answer]
			##CRITERIA##
			";

		internal static string ctprClient_Servey_Detail_Answer_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[Detail]
			,[DetailAnswerId]
			FROM [dbo].[Client_Servey_Detail_Answer]
			##CRITERIA##
			";

		internal static string ctprClient_Servey_Detail_Answer_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_Servey_Detail_Answer]
			##CRITERIA##
			";

	}
}
#endregion
