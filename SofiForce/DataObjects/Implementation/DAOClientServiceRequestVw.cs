/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientServiceRequestVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _requestId;
		protected string _requestCode;
		protected Int32? _branchId;
		protected Int32? _representativeId;
		protected Int32? _clientId;
		protected DateTime? _requestDate;
		protected DateTime? _requestTime;
		protected Int32? _requestTypeId;
		protected Int32? _requestTypeDetailId;
		protected string _phone;
		protected string _phoneAlternative;
		protected Int32? _priorityId;
		protected Int32? _requestStatusId;
		protected bool? _isClosed;
		protected DateTime? _closeDate;
		protected Int32? _duration;
		protected double? _latitude;
		protected double? _longitude;
		protected Int32? _departmentId;
		protected string _departmentNameEn;
		protected string _departmentNameAr;
		protected string _requestTypeNameEn;
		protected string _requestTypeNameAr;
		protected string _requestTypeDetailNameEn;
		protected string _requestTypeDetailNameAr;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected string _priorityNameAr;
		protected string _priorityColor;
		protected string _priorityNameEn;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected string _requestStatusNameEn;
		protected string _requestStatusNameAr;
		protected double? _distance;
		protected bool? _inZone;
		#endregion

		#region class methods
		public DAOClientServiceRequestVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_ServiceRequestVw
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequestVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientServiceRequestVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequestVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequestVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequestVw> objList = new List<DAOClientServiceRequestVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequestVw retObj = new DAOClientServiceRequestVw();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._departmentNameEn					 = Convert.IsDBNull(row["DepartmentNameEn"]) ? null : (string)row["DepartmentNameEn"];
						retObj._departmentNameAr					 = Convert.IsDBNull(row["DepartmentNameAr"]) ? null : (string)row["DepartmentNameAr"];
						retObj._requestTypeNameEn					 = Convert.IsDBNull(row["RequestTypeNameEn"]) ? null : (string)row["RequestTypeNameEn"];
						retObj._requestTypeNameAr					 = Convert.IsDBNull(row["RequestTypeNameAr"]) ? null : (string)row["RequestTypeNameAr"];
						retObj._requestTypeDetailNameEn					 = Convert.IsDBNull(row["RequestTypeDetailNameEn"]) ? null : (string)row["RequestTypeDetailNameEn"];
						retObj._requestTypeDetailNameAr					 = Convert.IsDBNull(row["RequestTypeDetailNameAr"]) ? null : (string)row["RequestTypeDetailNameAr"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._priorityNameAr					 = Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"];
						retObj._priorityColor					 = Convert.IsDBNull(row["PriorityColor"]) ? null : (string)row["PriorityColor"];
						retObj._priorityNameEn					 = Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._requestStatusNameEn					 = Convert.IsDBNull(row["RequestStatusNameEn"]) ? null : (string)row["RequestStatusNameEn"];
						retObj._requestStatusNameAr					 = Convert.IsDBNull(row["RequestStatusNameAr"]) ? null : (string)row["RequestStatusNameAr"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequestVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_ServiceRequestVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequestVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequestVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "RequestId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"]);
						if (string.Compare(projection.Member, "RequestCode", true) == 0) lst.Add(Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "RequestDate", true) == 0) lst.Add(Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"]);
						if (string.Compare(projection.Member, "RequestTime", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"]);
						if (string.Compare(projection.Member, "RequestTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"]);
						if (string.Compare(projection.Member, "RequestTypeDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "PhoneAlternative", true) == 0) lst.Add(Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"]);
						if (string.Compare(projection.Member, "PriorityId", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"]);
						if (string.Compare(projection.Member, "RequestStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"]);
						if (string.Compare(projection.Member, "IsClosed", true) == 0) lst.Add(Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"]);
						if (string.Compare(projection.Member, "CloseDate", true) == 0) lst.Add(Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"]);
						if (string.Compare(projection.Member, "Duration", true) == 0) lst.Add(Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "DepartmentId", true) == 0) lst.Add(Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"]);
						if (string.Compare(projection.Member, "DepartmentNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["DepartmentNameEn"]) ? null : (string)row["DepartmentNameEn"]);
						if (string.Compare(projection.Member, "DepartmentNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["DepartmentNameAr"]) ? null : (string)row["DepartmentNameAr"]);
						if (string.Compare(projection.Member, "RequestTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeNameEn"]) ? null : (string)row["RequestTypeNameEn"]);
						if (string.Compare(projection.Member, "RequestTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeNameAr"]) ? null : (string)row["RequestTypeNameAr"]);
						if (string.Compare(projection.Member, "RequestTypeDetailNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeDetailNameEn"]) ? null : (string)row["RequestTypeDetailNameEn"]);
						if (string.Compare(projection.Member, "RequestTypeDetailNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeDetailNameAr"]) ? null : (string)row["RequestTypeDetailNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "PriorityNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"]);
						if (string.Compare(projection.Member, "PriorityColor", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityColor"]) ? null : (string)row["PriorityColor"]);
						if (string.Compare(projection.Member, "PriorityNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "RequestStatusNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RequestStatusNameEn"]) ? null : (string)row["RequestStatusNameEn"]);
						if (string.Compare(projection.Member, "RequestStatusNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RequestStatusNameAr"]) ? null : (string)row["RequestStatusNameAr"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_ServiceRequestVw
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequestVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientServiceRequestVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequestVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequestVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequestVw> objList = new List<DAOClientServiceRequestVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequestVw retObj = new DAOClientServiceRequestVw();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._departmentNameEn					 = Convert.IsDBNull(row["DepartmentNameEn"]) ? null : (string)row["DepartmentNameEn"];
						retObj._departmentNameAr					 = Convert.IsDBNull(row["DepartmentNameAr"]) ? null : (string)row["DepartmentNameAr"];
						retObj._requestTypeNameEn					 = Convert.IsDBNull(row["RequestTypeNameEn"]) ? null : (string)row["RequestTypeNameEn"];
						retObj._requestTypeNameAr					 = Convert.IsDBNull(row["RequestTypeNameAr"]) ? null : (string)row["RequestTypeNameAr"];
						retObj._requestTypeDetailNameEn					 = Convert.IsDBNull(row["RequestTypeDetailNameEn"]) ? null : (string)row["RequestTypeDetailNameEn"];
						retObj._requestTypeDetailNameAr					 = Convert.IsDBNull(row["RequestTypeDetailNameAr"]) ? null : (string)row["RequestTypeDetailNameAr"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._priorityNameAr					 = Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"];
						retObj._priorityColor					 = Convert.IsDBNull(row["PriorityColor"]) ? null : (string)row["PriorityColor"];
						retObj._priorityNameEn					 = Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._requestStatusNameEn					 = Convert.IsDBNull(row["RequestStatusNameEn"]) ? null : (string)row["RequestStatusNameEn"];
						retObj._requestStatusNameAr					 = Convert.IsDBNull(row["RequestStatusNameAr"]) ? null : (string)row["RequestStatusNameAr"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_ServiceRequestVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequestVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? RequestId
		{
			get
			{
				return _requestId;
			}
			set
			{
				_requestId = value;
			}
		}

		public string RequestCode
		{
			get
			{
				return _requestCode;
			}
			set
			{
				_requestCode = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public DateTime? RequestDate
		{
			get
			{
				return _requestDate;
			}
			set
			{
				_requestDate = value;
			}
		}

		public DateTime? RequestTime
		{
			get
			{
				return _requestTime;
			}
			set
			{
				_requestTime = value;
			}
		}

		public Int32? RequestTypeId
		{
			get
			{
				return _requestTypeId;
			}
			set
			{
				_requestTypeId = value;
			}
		}

		public Int32? RequestTypeDetailId
		{
			get
			{
				return _requestTypeDetailId;
			}
			set
			{
				_requestTypeDetailId = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string PhoneAlternative
		{
			get
			{
				return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
			}
		}

		public Int32? PriorityId
		{
			get
			{
				return _priorityId;
			}
			set
			{
				_priorityId = value;
			}
		}

		public Int32? RequestStatusId
		{
			get
			{
				return _requestStatusId;
			}
			set
			{
				_requestStatusId = value;
			}
		}

		public bool? IsClosed
		{
			get
			{
				return _isClosed;
			}
			set
			{
				_isClosed = value;
			}
		}

		public DateTime? CloseDate
		{
			get
			{
				return _closeDate;
			}
			set
			{
				_closeDate = value;
			}
		}

		public Int32? Duration
		{
			get
			{
				return _duration;
			}
			set
			{
				_duration = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public Int32? DepartmentId
		{
			get
			{
				return _departmentId;
			}
			set
			{
				_departmentId = value;
			}
		}

		public string DepartmentNameEn
		{
			get
			{
				return _departmentNameEn;
			}
			set
			{
				_departmentNameEn = value;
			}
		}

		public string DepartmentNameAr
		{
			get
			{
				return _departmentNameAr;
			}
			set
			{
				_departmentNameAr = value;
			}
		}

		public string RequestTypeNameEn
		{
			get
			{
				return _requestTypeNameEn;
			}
			set
			{
				_requestTypeNameEn = value;
			}
		}

		public string RequestTypeNameAr
		{
			get
			{
				return _requestTypeNameAr;
			}
			set
			{
				_requestTypeNameAr = value;
			}
		}

		public string RequestTypeDetailNameEn
		{
			get
			{
				return _requestTypeDetailNameEn;
			}
			set
			{
				_requestTypeDetailNameEn = value;
			}
		}

		public string RequestTypeDetailNameAr
		{
			get
			{
				return _requestTypeDetailNameAr;
			}
			set
			{
				_requestTypeDetailNameAr = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string PriorityNameAr
		{
			get
			{
				return _priorityNameAr;
			}
			set
			{
				_priorityNameAr = value;
			}
		}

		public string PriorityColor
		{
			get
			{
				return _priorityColor;
			}
			set
			{
				_priorityColor = value;
			}
		}

		public string PriorityNameEn
		{
			get
			{
				return _priorityNameEn;
			}
			set
			{
				_priorityNameEn = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public string RequestStatusNameEn
		{
			get
			{
				return _requestStatusNameEn;
			}
			set
			{
				_requestStatusNameEn = value;
			}
		}

		public string RequestStatusNameAr
		{
			get
			{
				return _requestStatusNameAr;
			}
			set
			{
				_requestStatusNameAr = value;
			}
		}

		public double? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_ServiceRequestVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[DepartmentId]
			,[DepartmentNameEn]
			,[DepartmentNameAr]
			,[RequestTypeNameEn]
			,[RequestTypeNameAr]
			,[RequestTypeDetailNameEn]
			,[RequestTypeDetailNameAr]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[PriorityNameAr]
			,[PriorityColor]
			,[PriorityNameEn]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RequestStatusNameEn]
			,[RequestStatusNameAr]
			,[Distance]
			,[InZone]
			FROM [dbo].[Client_ServiceRequestVw]
			";

		internal static string ctprClient_ServiceRequestVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequestVw]
			";

		internal static string ctprClient_ServiceRequestVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_ServiceRequestVw]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequestVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[DepartmentId]
			,[DepartmentNameEn]
			,[DepartmentNameAr]
			,[RequestTypeNameEn]
			,[RequestTypeNameAr]
			,[RequestTypeDetailNameEn]
			,[RequestTypeDetailNameAr]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[PriorityNameAr]
			,[PriorityColor]
			,[PriorityNameEn]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RequestStatusNameEn]
			,[RequestStatusNameAr]
			,[Distance]
			,[InZone]
			FROM [dbo].[Client_ServiceRequestVw]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequestVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequestVw]
			##CRITERIA##
			";

	}
}
#endregion
