/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPurchaseOrder : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _purchaseId;
		protected string _purchaseCode;
		protected Int32? _branchId;
		protected Int32? _storeId;
		protected Int32? _vendorId;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		protected decimal? _invoiceAmount;
		protected string _currency;
		protected decimal? _exchangeRate;
		protected decimal? _invoiceAmountLocal;
		protected decimal? _sumTax;
		protected decimal? _sumExpense;
		protected decimal? _openValue;
		protected Int64? _recId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOPurchaseOrder()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table PurchaseOrder based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOPurchaseOrder
		///</returns>
		///<parameters>
		///Int32? purchaseId
		///</parameters>
		public static DAOPurchaseOrder SelectOne(Int32? purchaseId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)purchaseId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOPurchaseOrder retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPurchaseOrder();
					retObj._purchaseId					 = Convert.IsDBNull(dt.Rows[0]["PurchaseId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PurchaseId"];
					retObj._purchaseCode					 = Convert.IsDBNull(dt.Rows[0]["PurchaseCode"]) ? null : (string)dt.Rows[0]["PurchaseCode"];
					retObj._branchId					 = Convert.IsDBNull(dt.Rows[0]["BranchId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BranchId"];
					retObj._storeId					 = Convert.IsDBNull(dt.Rows[0]["StoreId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["StoreId"];
					retObj._vendorId					 = Convert.IsDBNull(dt.Rows[0]["VendorId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["VendorId"];
					retObj._invoiceCode					 = Convert.IsDBNull(dt.Rows[0]["InvoiceCode"]) ? null : (string)dt.Rows[0]["InvoiceCode"];
					retObj._invoiceDate					 = Convert.IsDBNull(dt.Rows[0]["InvoiceDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["InvoiceDate"];
					retObj._invoiceAmount					 = Convert.IsDBNull(dt.Rows[0]["InvoiceAmount"]) ? (decimal?)null : (decimal?)dt.Rows[0]["InvoiceAmount"];
					retObj._currency					 = Convert.IsDBNull(dt.Rows[0]["Currency"]) ? null : (string)dt.Rows[0]["Currency"];
					retObj._exchangeRate					 = Convert.IsDBNull(dt.Rows[0]["ExchangeRate"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ExchangeRate"];
					retObj._invoiceAmountLocal					 = Convert.IsDBNull(dt.Rows[0]["InvoiceAmountLocal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["InvoiceAmountLocal"];
					retObj._sumTax					 = Convert.IsDBNull(dt.Rows[0]["SumTax"]) ? (decimal?)null : (decimal?)dt.Rows[0]["SumTax"];
					retObj._sumExpense					 = Convert.IsDBNull(dt.Rows[0]["SumExpense"]) ? (decimal?)null : (decimal?)dt.Rows[0]["SumExpense"];
					retObj._openValue					 = Convert.IsDBNull(dt.Rows[0]["OpenValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["OpenValue"];
					retObj._recId					 = Convert.IsDBNull(dt.Rows[0]["RecId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RecId"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table PurchaseOrder based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_purchaseId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PurchaseOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrder.
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static IList<DAOPurchaseOrder> SelectAllByBranchId(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAllByBranchId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrder> objList = new List<DAOPurchaseOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrder retObj = new DAOPurchaseOrder();
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._purchaseCode					 = Convert.IsDBNull(row["PurchaseCode"]) ? null : (string)row["PurchaseCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceAmount					 = Convert.IsDBNull(row["InvoiceAmount"]) ? (decimal?)null : (decimal?)row["InvoiceAmount"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._invoiceAmountLocal					 = Convert.IsDBNull(row["InvoiceAmountLocal"]) ? (decimal?)null : (decimal?)row["InvoiceAmountLocal"];
						retObj._sumTax					 = Convert.IsDBNull(row["SumTax"]) ? (decimal?)null : (decimal?)row["SumTax"];
						retObj._sumExpense					 = Convert.IsDBNull(row["SumExpense"]) ? (decimal?)null : (decimal?)row["SumExpense"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static Int32 SelectAllByBranchIdCount(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAllByBranchIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PurchaseOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId
		///</parameters>
		public static void DeleteAllByBranchId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_DeleteAllByBranchId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PurchaseOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrder.
		///</returns>
		///<parameters>
		///Int32? storeId
		///</parameters>
		public static IList<DAOPurchaseOrder> SelectAllByStoreId(Int32? storeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAllByStoreId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrder> objList = new List<DAOPurchaseOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrder retObj = new DAOPurchaseOrder();
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._purchaseCode					 = Convert.IsDBNull(row["PurchaseCode"]) ? null : (string)row["PurchaseCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceAmount					 = Convert.IsDBNull(row["InvoiceAmount"]) ? (decimal?)null : (decimal?)row["InvoiceAmount"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._invoiceAmountLocal					 = Convert.IsDBNull(row["InvoiceAmountLocal"]) ? (decimal?)null : (decimal?)row["InvoiceAmountLocal"];
						retObj._sumTax					 = Convert.IsDBNull(row["SumTax"]) ? (decimal?)null : (decimal?)row["SumTax"];
						retObj._sumExpense					 = Convert.IsDBNull(row["SumExpense"]) ? (decimal?)null : (decimal?)row["SumExpense"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? storeId
		///</parameters>
		public static Int32 SelectAllByStoreIdCount(Int32? storeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAllByStoreIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PurchaseOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? storeId
		///</parameters>
		public static void DeleteAllByStoreId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? storeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_DeleteAllByStoreId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PurchaseOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrder.
		///</returns>
		///<parameters>
		///Int32? vendorId
		///</parameters>
		public static IList<DAOPurchaseOrder> SelectAllByVendorId(Int32? vendorId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAllByVendorId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)vendorId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrder> objList = new List<DAOPurchaseOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrder retObj = new DAOPurchaseOrder();
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._purchaseCode					 = Convert.IsDBNull(row["PurchaseCode"]) ? null : (string)row["PurchaseCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceAmount					 = Convert.IsDBNull(row["InvoiceAmount"]) ? (decimal?)null : (decimal?)row["InvoiceAmount"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._invoiceAmountLocal					 = Convert.IsDBNull(row["InvoiceAmountLocal"]) ? (decimal?)null : (decimal?)row["InvoiceAmountLocal"];
						retObj._sumTax					 = Convert.IsDBNull(row["SumTax"]) ? (decimal?)null : (decimal?)row["SumTax"];
						retObj._sumExpense					 = Convert.IsDBNull(row["SumExpense"]) ? (decimal?)null : (decimal?)row["SumExpense"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? vendorId
		///</parameters>
		public static Int32 SelectAllByVendorIdCount(Int32? vendorId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAllByVendorIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)vendorId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PurchaseOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? vendorId
		///</parameters>
		public static void DeleteAllByVendorId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? vendorId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_DeleteAllByVendorId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)vendorId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table PurchaseOrder
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _purchaseId));
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_purchaseCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_storeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_vendorId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceAmount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_invoiceAmount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Currency", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_currency?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExchangeRate", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_exchangeRate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceAmountLocal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_invoiceAmountLocal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SumTax", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_sumTax?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SumExpense", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_sumExpense?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OpenValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_openValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_purchaseId					 = Convert.IsDBNull(command.Parameters["@PurchaseId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PurchaseId"].Value;
				_purchaseCode					 = Convert.IsDBNull(command.Parameters["@PurchaseCode"].Value) ? null : (string)command.Parameters["@PurchaseCode"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_storeId					 = Convert.IsDBNull(command.Parameters["@StoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreId"].Value;
				_vendorId					 = Convert.IsDBNull(command.Parameters["@VendorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VendorId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;
				_invoiceAmount					 = Convert.IsDBNull(command.Parameters["@InvoiceAmount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@InvoiceAmount"].Value;
				_currency					 = Convert.IsDBNull(command.Parameters["@Currency"].Value) ? null : (string)command.Parameters["@Currency"].Value;
				_exchangeRate					 = Convert.IsDBNull(command.Parameters["@ExchangeRate"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ExchangeRate"].Value;
				_invoiceAmountLocal					 = Convert.IsDBNull(command.Parameters["@InvoiceAmountLocal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@InvoiceAmountLocal"].Value;
				_sumTax					 = Convert.IsDBNull(command.Parameters["@SumTax"].Value) ? (decimal?)null : (decimal?)command.Parameters["@SumTax"].Value;
				_sumExpense					 = Convert.IsDBNull(command.Parameters["@SumExpense"].Value) ? (decimal?)null : (decimal?)command.Parameters["@SumExpense"].Value;
				_openValue					 = Convert.IsDBNull(command.Parameters["@OpenValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@OpenValue"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table PurchaseOrder
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrder.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPurchaseOrder> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrder> objList = new List<DAOPurchaseOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrder retObj = new DAOPurchaseOrder();
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._purchaseCode					 = Convert.IsDBNull(row["PurchaseCode"]) ? null : (string)row["PurchaseCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceAmount					 = Convert.IsDBNull(row["InvoiceAmount"]) ? (decimal?)null : (decimal?)row["InvoiceAmount"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._invoiceAmountLocal					 = Convert.IsDBNull(row["InvoiceAmountLocal"]) ? (decimal?)null : (decimal?)row["InvoiceAmountLocal"];
						retObj._sumTax					 = Convert.IsDBNull(row["SumTax"]) ? (decimal?)null : (decimal?)row["SumTax"];
						retObj._sumExpense					 = Convert.IsDBNull(row["SumExpense"]) ? (decimal?)null : (decimal?)row["SumExpense"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPurchaseOrder
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPurchaseOrder_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "PurchaseId", true) == 0) lst.Add(Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"]);
						if (string.Compare(projection.Member, "PurchaseCode", true) == 0) lst.Add(Convert.IsDBNull(row["PurchaseCode"]) ? null : (string)row["PurchaseCode"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "StoreId", true) == 0) lst.Add(Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"]);
						if (string.Compare(projection.Member, "VendorId", true) == 0) lst.Add(Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "InvoiceDate", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"]);
						if (string.Compare(projection.Member, "InvoiceAmount", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceAmount"]) ? (decimal?)null : (decimal?)row["InvoiceAmount"]);
						if (string.Compare(projection.Member, "Currency", true) == 0) lst.Add(Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"]);
						if (string.Compare(projection.Member, "ExchangeRate", true) == 0) lst.Add(Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"]);
						if (string.Compare(projection.Member, "InvoiceAmountLocal", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceAmountLocal"]) ? (decimal?)null : (decimal?)row["InvoiceAmountLocal"]);
						if (string.Compare(projection.Member, "SumTax", true) == 0) lst.Add(Convert.IsDBNull(row["SumTax"]) ? (decimal?)null : (decimal?)row["SumTax"]);
						if (string.Compare(projection.Member, "SumExpense", true) == 0) lst.Add(Convert.IsDBNull(row["SumExpense"]) ? (decimal?)null : (decimal?)row["SumExpense"]);
						if (string.Compare(projection.Member, "OpenValue", true) == 0) lst.Add(Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"]);
						if (string.Compare(projection.Member, "RecId", true) == 0) lst.Add(Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api PurchaseOrder
		///</Summary>
		///<returns>
		///IList-DAOPurchaseOrder.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPurchaseOrder> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPurchaseOrder_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PurchaseOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPurchaseOrder> objList = new List<DAOPurchaseOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrder retObj = new DAOPurchaseOrder();
						retObj._purchaseId					 = Convert.IsDBNull(row["PurchaseId"]) ? (Int32?)null : (Int32?)row["PurchaseId"];
						retObj._purchaseCode					 = Convert.IsDBNull(row["PurchaseCode"]) ? null : (string)row["PurchaseCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceAmount					 = Convert.IsDBNull(row["InvoiceAmount"]) ? (decimal?)null : (decimal?)row["InvoiceAmount"];
						retObj._currency					 = Convert.IsDBNull(row["Currency"]) ? null : (string)row["Currency"];
						retObj._exchangeRate					 = Convert.IsDBNull(row["ExchangeRate"]) ? (decimal?)null : (decimal?)row["ExchangeRate"];
						retObj._invoiceAmountLocal					 = Convert.IsDBNull(row["InvoiceAmountLocal"]) ? (decimal?)null : (decimal?)row["InvoiceAmountLocal"];
						retObj._sumTax					 = Convert.IsDBNull(row["SumTax"]) ? (decimal?)null : (decimal?)row["SumTax"];
						retObj._sumExpense					 = Convert.IsDBNull(row["SumExpense"]) ? (decimal?)null : (decimal?)row["SumExpense"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api PurchaseOrder
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPurchaseOrder_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table PurchaseOrder based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPurchaseOrder_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_purchaseId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PurchaseCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_purchaseCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_storeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_vendorId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceAmount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_invoiceAmount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Currency", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_currency?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExchangeRate", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_exchangeRate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceAmountLocal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_invoiceAmountLocal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SumTax", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_sumTax?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SumExpense", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_sumExpense?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OpenValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_openValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_purchaseId					 = Convert.IsDBNull(command.Parameters["@PurchaseId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PurchaseId"].Value;
				_purchaseCode					 = Convert.IsDBNull(command.Parameters["@PurchaseCode"].Value) ? null : (string)command.Parameters["@PurchaseCode"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_storeId					 = Convert.IsDBNull(command.Parameters["@StoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreId"].Value;
				_vendorId					 = Convert.IsDBNull(command.Parameters["@VendorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VendorId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;
				_invoiceAmount					 = Convert.IsDBNull(command.Parameters["@InvoiceAmount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@InvoiceAmount"].Value;
				_currency					 = Convert.IsDBNull(command.Parameters["@Currency"].Value) ? null : (string)command.Parameters["@Currency"].Value;
				_exchangeRate					 = Convert.IsDBNull(command.Parameters["@ExchangeRate"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ExchangeRate"].Value;
				_invoiceAmountLocal					 = Convert.IsDBNull(command.Parameters["@InvoiceAmountLocal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@InvoiceAmountLocal"].Value;
				_sumTax					 = Convert.IsDBNull(command.Parameters["@SumTax"].Value) ? (decimal?)null : (decimal?)command.Parameters["@SumTax"].Value;
				_sumExpense					 = Convert.IsDBNull(command.Parameters["@SumExpense"].Value) ? (decimal?)null : (decimal?)command.Parameters["@SumExpense"].Value;
				_openValue					 = Convert.IsDBNull(command.Parameters["@OpenValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@OpenValue"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? PurchaseId
		{
			get
			{
				return _purchaseId;
			}
			set
			{
				_purchaseId = value;
			}
		}

		public string PurchaseCode
		{
			get
			{
				return _purchaseCode;
			}
			set
			{
				_purchaseCode = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? StoreId
		{
			get
			{
				return _storeId;
			}
			set
			{
				_storeId = value;
			}
		}

		public Int32? VendorId
		{
			get
			{
				return _vendorId;
			}
			set
			{
				_vendorId = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public DateTime? InvoiceDate
		{
			get
			{
				return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
			}
		}

		public decimal? InvoiceAmount
		{
			get
			{
				return _invoiceAmount;
			}
			set
			{
				_invoiceAmount = value;
			}
		}

		public string Currency
		{
			get
			{
				return _currency;
			}
			set
			{
				_currency = value;
			}
		}

		public decimal? ExchangeRate
		{
			get
			{
				return _exchangeRate;
			}
			set
			{
				_exchangeRate = value;
			}
		}

		public decimal? InvoiceAmountLocal
		{
			get
			{
				return _invoiceAmountLocal;
			}
			set
			{
				_invoiceAmountLocal = value;
			}
		}

		public decimal? SumTax
		{
			get
			{
				return _sumTax;
			}
			set
			{
				_sumTax = value;
			}
		}

		public decimal? SumExpense
		{
			get
			{
				return _sumExpense;
			}
			set
			{
				_sumExpense = value;
			}
		}

		public decimal? OpenValue
		{
			get
			{
				return _openValue;
			}
			set
			{
				_openValue = value;
			}
		}

		public Int64? RecId
		{
			get
			{
				return _recId;
			}
			set
			{
				_recId = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPurchaseOrder_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[PurchaseId]
			,[PurchaseCode]
			,[BranchId]
			,[StoreId]
			,[VendorId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceAmount]
			,[Currency]
			,[ExchangeRate]
			,[InvoiceAmountLocal]
			,[SumTax]
			,[SumExpense]
			,[OpenValue]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[PurchaseId] = @PurchaseId
			";

		internal static string ctprPurchaseOrder_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder]
			WHERE 
			[PurchaseId] = @PurchaseId
			";

		internal static string ctprPurchaseOrder_SelectAllByBranchId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PurchaseId]
			,[PurchaseCode]
			,[BranchId]
			,[StoreId]
			,[VendorId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceAmount]
			,[Currency]
			,[ExchangeRate]
			,[InvoiceAmountLocal]
			,[SumTax]
			,[SumExpense]
			,[OpenValue]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprPurchaseOrder_SelectAllByBranchIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprPurchaseOrder_DeleteAllByBranchId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprPurchaseOrder_SelectAllByStoreId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PurchaseId]
			,[PurchaseCode]
			,[BranchId]
			,[StoreId]
			,[VendorId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceAmount]
			,[Currency]
			,[ExchangeRate]
			,[InvoiceAmountLocal]
			,[SumTax]
			,[SumExpense]
			,[OpenValue]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[StoreId] = @StoreId OR ([StoreId] IS NULL AND @StoreId IS NULL)
			";

		internal static string ctprPurchaseOrder_SelectAllByStoreIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[StoreId] = @StoreId OR ([StoreId] IS NULL AND @StoreId IS NULL)
			";

		internal static string ctprPurchaseOrder_DeleteAllByStoreId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder]
			WHERE 
			[StoreId] = @StoreId OR ([StoreId] IS NULL AND @StoreId IS NULL)
			";

		internal static string ctprPurchaseOrder_SelectAllByVendorId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PurchaseId]
			,[PurchaseCode]
			,[BranchId]
			,[StoreId]
			,[VendorId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceAmount]
			,[Currency]
			,[ExchangeRate]
			,[InvoiceAmountLocal]
			,[SumTax]
			,[SumExpense]
			,[OpenValue]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[VendorId] = @VendorId OR ([VendorId] IS NULL AND @VendorId IS NULL)
			";

		internal static string ctprPurchaseOrder_SelectAllByVendorIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[VendorId] = @VendorId OR ([VendorId] IS NULL AND @VendorId IS NULL)
			";

		internal static string ctprPurchaseOrder_DeleteAllByVendorId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PurchaseOrder]
			WHERE 
			[VendorId] = @VendorId OR ([VendorId] IS NULL AND @VendorId IS NULL)
			";

		internal static string ctprPurchaseOrder_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[PurchaseOrder]
			(
			[PurchaseCode]
			,[BranchId]
			,[StoreId]
			,[VendorId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceAmount]
			,[Currency]
			,[ExchangeRate]
			,[InvoiceAmountLocal]
			,[SumTax]
			,[SumExpense]
			,[OpenValue]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@PurchaseCode
			,@BranchId
			,@StoreId
			,@VendorId
			,@InvoiceCode
			,@InvoiceDate
			,@InvoiceAmount
			,@Currency
			,@ExchangeRate
			,@InvoiceAmountLocal
			,@SumTax
			,@SumExpense
			,@OpenValue
			,@RecId
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@PurchaseId = [PurchaseId]
			,@PurchaseCode = [PurchaseCode]
			,@BranchId = [BranchId]
			,@StoreId = [StoreId]
			,@VendorId = [VendorId]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			,@InvoiceAmount = [InvoiceAmount]
			,@Currency = [Currency]
			,@ExchangeRate = [ExchangeRate]
			,@InvoiceAmountLocal = [InvoiceAmountLocal]
			,@SumTax = [SumTax]
			,@SumExpense = [SumExpense]
			,@OpenValue = [OpenValue]
			,@RecId = [RecId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[PurchaseId] = SCOPE_IDENTITY()
			";

		internal static string ctprPurchaseOrder_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[PurchaseId]
			,[PurchaseCode]
			,[BranchId]
			,[StoreId]
			,[VendorId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceAmount]
			,[Currency]
			,[ExchangeRate]
			,[InvoiceAmountLocal]
			,[SumTax]
			,[SumExpense]
			,[OpenValue]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PurchaseOrder]
			";

		internal static string ctprPurchaseOrder_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder]
			";

		internal static string ctprPurchaseOrder_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[PurchaseOrder]
			##CRITERIA##
			";

		internal static string ctprPurchaseOrder_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[PurchaseId]
			,[PurchaseCode]
			,[BranchId]
			,[StoreId]
			,[VendorId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceAmount]
			,[Currency]
			,[ExchangeRate]
			,[InvoiceAmountLocal]
			,[SumTax]
			,[SumExpense]
			,[OpenValue]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[PurchaseOrder]
			##CRITERIA##
			";

		internal static string ctprPurchaseOrder_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[PurchaseOrder]
			##CRITERIA##
			";

		internal static string ctprPurchaseOrder_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[PurchaseOrder]
			SET
			[PurchaseCode] = @PurchaseCode
			,[BranchId] = @BranchId
			,[StoreId] = @StoreId
			,[VendorId] = @VendorId
			,[InvoiceCode] = @InvoiceCode
			,[InvoiceDate] = @InvoiceDate
			,[InvoiceAmount] = @InvoiceAmount
			,[Currency] = @Currency
			,[ExchangeRate] = @ExchangeRate
			,[InvoiceAmountLocal] = @InvoiceAmountLocal
			,[SumTax] = @SumTax
			,[SumExpense] = @SumExpense
			,[OpenValue] = @OpenValue
			,[RecId] = @RecId
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[PurchaseId] = @PurchaseId
			SELECT 
			@PurchaseId = [PurchaseId]
			,@PurchaseCode = [PurchaseCode]
			,@BranchId = [BranchId]
			,@StoreId = [StoreId]
			,@VendorId = [VendorId]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			,@InvoiceAmount = [InvoiceAmount]
			,@Currency = [Currency]
			,@ExchangeRate = [ExchangeRate]
			,@InvoiceAmountLocal = [InvoiceAmountLocal]
			,@SumTax = [SumTax]
			,@SumExpense = [SumExpense]
			,@OpenValue = [OpenValue]
			,@RecId = [RecId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[PurchaseOrder]
			WHERE 
			[PurchaseId] = @PurchaseId
			";

	}
}
#endregion
