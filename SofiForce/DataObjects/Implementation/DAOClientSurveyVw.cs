/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientSurveyVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _clientTypeId;
		protected Int64? _clientServeyId;
		protected Int32? _surveyId;
		protected Int32? _serveyStatusId;
		protected Int32? _clientId;
		protected DateTime? _createDate;
		protected DateTime? _createTime;
		protected DateTime? _startDate;
		protected DateTime? _startTime;
		protected string _surveyNameEn;
		protected string _surveyNameAr;
		protected string _serveyStatusNameEn;
		protected string _serveyStatusNameAr;
		protected Int32? _serveyGroupId;
		protected string _serveyGroupNameEn;
		protected string _serveyGroupNameAr;
		protected Int32? _representativeId;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected bool? _isClosed;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _expr1;
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected Int32? _branchId;
		protected string _serveyStatusColor;
		protected double? _latitude;
		protected double? _longitude;
		protected bool? _inZone;
		protected double? _distance;
		#endregion

		#region class methods
		public DAOClientSurveyVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_SurveyVw
		///</Summary>
		///<returns>
		///IList-DAOClientSurveyVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientSurveyVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SurveyVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_SurveyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientSurveyVw> objList = new List<DAOClientSurveyVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientSurveyVw retObj = new DAOClientSurveyVw();
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientServeyId					 = Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"];
						retObj._surveyId					 = Convert.IsDBNull(row["SurveyId"]) ? (Int32?)null : (Int32?)row["SurveyId"];
						retObj._serveyStatusId					 = Convert.IsDBNull(row["ServeyStatusId"]) ? (Int32?)null : (Int32?)row["ServeyStatusId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._createTime					 = Convert.IsDBNull(row["CreateTime"]) ? (DateTime?)null : (DateTime?)row["CreateTime"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._startTime					 = Convert.IsDBNull(row["StartTime"]) ? (DateTime?)null : (DateTime?)row["StartTime"];
						retObj._surveyNameEn					 = Convert.IsDBNull(row["SurveyNameEn"]) ? null : (string)row["SurveyNameEn"];
						retObj._surveyNameAr					 = Convert.IsDBNull(row["SurveyNameAr"]) ? null : (string)row["SurveyNameAr"];
						retObj._serveyStatusNameEn					 = Convert.IsDBNull(row["ServeyStatusNameEn"]) ? null : (string)row["ServeyStatusNameEn"];
						retObj._serveyStatusNameAr					 = Convert.IsDBNull(row["ServeyStatusNameAr"]) ? null : (string)row["ServeyStatusNameAr"];
						retObj._serveyGroupId					 = Convert.IsDBNull(row["ServeyGroupId"]) ? (Int32?)null : (Int32?)row["ServeyGroupId"];
						retObj._serveyGroupNameEn					 = Convert.IsDBNull(row["ServeyGroupNameEn"]) ? null : (string)row["ServeyGroupNameEn"];
						retObj._serveyGroupNameAr					 = Convert.IsDBNull(row["ServeyGroupNameAr"]) ? null : (string)row["ServeyGroupNameAr"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._expr1					 = Convert.IsDBNull(row["Expr1"]) ? (Int32?)null : (Int32?)row["Expr1"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._serveyStatusColor					 = Convert.IsDBNull(row["ServeyStatusColor"]) ? null : (string)row["ServeyStatusColor"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_SurveyVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_SurveyVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_SurveyVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_SurveyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"]);
						if (string.Compare(projection.Member, "ClientServeyId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"]);
						if (string.Compare(projection.Member, "SurveyId", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyId"]) ? (Int32?)null : (Int32?)row["SurveyId"]);
						if (string.Compare(projection.Member, "ServeyStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyStatusId"]) ? (Int32?)null : (Int32?)row["ServeyStatusId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "CreateDate", true) == 0) lst.Add(Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"]);
						if (string.Compare(projection.Member, "CreateTime", true) == 0) lst.Add(Convert.IsDBNull(row["CreateTime"]) ? (DateTime?)null : (DateTime?)row["CreateTime"]);
						if (string.Compare(projection.Member, "StartDate", true) == 0) lst.Add(Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"]);
						if (string.Compare(projection.Member, "StartTime", true) == 0) lst.Add(Convert.IsDBNull(row["StartTime"]) ? (DateTime?)null : (DateTime?)row["StartTime"]);
						if (string.Compare(projection.Member, "SurveyNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyNameEn"]) ? null : (string)row["SurveyNameEn"]);
						if (string.Compare(projection.Member, "SurveyNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyNameAr"]) ? null : (string)row["SurveyNameAr"]);
						if (string.Compare(projection.Member, "ServeyStatusNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyStatusNameEn"]) ? null : (string)row["ServeyStatusNameEn"]);
						if (string.Compare(projection.Member, "ServeyStatusNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyStatusNameAr"]) ? null : (string)row["ServeyStatusNameAr"]);
						if (string.Compare(projection.Member, "ServeyGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyGroupId"]) ? (Int32?)null : (Int32?)row["ServeyGroupId"]);
						if (string.Compare(projection.Member, "ServeyGroupNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyGroupNameEn"]) ? null : (string)row["ServeyGroupNameEn"]);
						if (string.Compare(projection.Member, "ServeyGroupNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyGroupNameAr"]) ? null : (string)row["ServeyGroupNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "IsClosed", true) == 0) lst.Add(Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "Expr1", true) == 0) lst.Add(Convert.IsDBNull(row["Expr1"]) ? (Int32?)null : (Int32?)row["Expr1"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "ServeyStatusColor", true) == 0) lst.Add(Convert.IsDBNull(row["ServeyStatusColor"]) ? null : (string)row["ServeyStatusColor"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_SurveyVw
		///</Summary>
		///<returns>
		///IList-DAOClientSurveyVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientSurveyVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_SurveyVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_SurveyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientSurveyVw> objList = new List<DAOClientSurveyVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientSurveyVw retObj = new DAOClientSurveyVw();
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientServeyId					 = Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"];
						retObj._surveyId					 = Convert.IsDBNull(row["SurveyId"]) ? (Int32?)null : (Int32?)row["SurveyId"];
						retObj._serveyStatusId					 = Convert.IsDBNull(row["ServeyStatusId"]) ? (Int32?)null : (Int32?)row["ServeyStatusId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._createTime					 = Convert.IsDBNull(row["CreateTime"]) ? (DateTime?)null : (DateTime?)row["CreateTime"];
						retObj._startDate					 = Convert.IsDBNull(row["StartDate"]) ? (DateTime?)null : (DateTime?)row["StartDate"];
						retObj._startTime					 = Convert.IsDBNull(row["StartTime"]) ? (DateTime?)null : (DateTime?)row["StartTime"];
						retObj._surveyNameEn					 = Convert.IsDBNull(row["SurveyNameEn"]) ? null : (string)row["SurveyNameEn"];
						retObj._surveyNameAr					 = Convert.IsDBNull(row["SurveyNameAr"]) ? null : (string)row["SurveyNameAr"];
						retObj._serveyStatusNameEn					 = Convert.IsDBNull(row["ServeyStatusNameEn"]) ? null : (string)row["ServeyStatusNameEn"];
						retObj._serveyStatusNameAr					 = Convert.IsDBNull(row["ServeyStatusNameAr"]) ? null : (string)row["ServeyStatusNameAr"];
						retObj._serveyGroupId					 = Convert.IsDBNull(row["ServeyGroupId"]) ? (Int32?)null : (Int32?)row["ServeyGroupId"];
						retObj._serveyGroupNameEn					 = Convert.IsDBNull(row["ServeyGroupNameEn"]) ? null : (string)row["ServeyGroupNameEn"];
						retObj._serveyGroupNameAr					 = Convert.IsDBNull(row["ServeyGroupNameAr"]) ? null : (string)row["ServeyGroupNameAr"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._expr1					 = Convert.IsDBNull(row["Expr1"]) ? (Int32?)null : (Int32?)row["Expr1"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._serveyStatusColor					 = Convert.IsDBNull(row["ServeyStatusColor"]) ? null : (string)row["ServeyStatusColor"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_SurveyVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_SurveyVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ClientTypeId
		{
			get
			{
				return _clientTypeId;
			}
			set
			{
				_clientTypeId = value;
			}
		}

		public Int64? ClientServeyId
		{
			get
			{
				return _clientServeyId;
			}
			set
			{
				_clientServeyId = value;
			}
		}

		public Int32? SurveyId
		{
			get
			{
				return _surveyId;
			}
			set
			{
				_surveyId = value;
			}
		}

		public Int32? ServeyStatusId
		{
			get
			{
				return _serveyStatusId;
			}
			set
			{
				_serveyStatusId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public DateTime? CreateDate
		{
			get
			{
				return _createDate;
			}
			set
			{
				_createDate = value;
			}
		}

		public DateTime? CreateTime
		{
			get
			{
				return _createTime;
			}
			set
			{
				_createTime = value;
			}
		}

		public DateTime? StartDate
		{
			get
			{
				return _startDate;
			}
			set
			{
				_startDate = value;
			}
		}

		public DateTime? StartTime
		{
			get
			{
				return _startTime;
			}
			set
			{
				_startTime = value;
			}
		}

		public string SurveyNameEn
		{
			get
			{
				return _surveyNameEn;
			}
			set
			{
				_surveyNameEn = value;
			}
		}

		public string SurveyNameAr
		{
			get
			{
				return _surveyNameAr;
			}
			set
			{
				_surveyNameAr = value;
			}
		}

		public string ServeyStatusNameEn
		{
			get
			{
				return _serveyStatusNameEn;
			}
			set
			{
				_serveyStatusNameEn = value;
			}
		}

		public string ServeyStatusNameAr
		{
			get
			{
				return _serveyStatusNameAr;
			}
			set
			{
				_serveyStatusNameAr = value;
			}
		}

		public Int32? ServeyGroupId
		{
			get
			{
				return _serveyGroupId;
			}
			set
			{
				_serveyGroupId = value;
			}
		}

		public string ServeyGroupNameEn
		{
			get
			{
				return _serveyGroupNameEn;
			}
			set
			{
				_serveyGroupNameEn = value;
			}
		}

		public string ServeyGroupNameAr
		{
			get
			{
				return _serveyGroupNameAr;
			}
			set
			{
				_serveyGroupNameAr = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public bool? IsClosed
		{
			get
			{
				return _isClosed;
			}
			set
			{
				_isClosed = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int32? Expr1
		{
			get
			{
				return _expr1;
			}
			set
			{
				_expr1 = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public string ServeyStatusColor
		{
			get
			{
				return _serveyStatusColor;
			}
			set
			{
				_serveyStatusColor = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public double? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_SurveyVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientTypeId]
			,[ClientServeyId]
			,[SurveyId]
			,[ServeyStatusId]
			,[ClientId]
			,[CreateDate]
			,[CreateTime]
			,[StartDate]
			,[StartTime]
			,[SurveyNameEn]
			,[SurveyNameAr]
			,[ServeyStatusNameEn]
			,[ServeyStatusNameAr]
			,[ServeyGroupId]
			,[ServeyGroupNameEn]
			,[ServeyGroupNameAr]
			,[RepresentativeId]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[IsClosed]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[Expr1]
			,[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[BranchId]
			,[ServeyStatusColor]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			FROM [dbo].[Client_SurveyVw]
			";

		internal static string ctprClient_SurveyVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_SurveyVw]
			";

		internal static string ctprClient_SurveyVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_SurveyVw]
			##CRITERIA##
			";

		internal static string ctprClient_SurveyVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientTypeId]
			,[ClientServeyId]
			,[SurveyId]
			,[ServeyStatusId]
			,[ClientId]
			,[CreateDate]
			,[CreateTime]
			,[StartDate]
			,[StartTime]
			,[SurveyNameEn]
			,[SurveyNameAr]
			,[ServeyStatusNameEn]
			,[ServeyStatusNameAr]
			,[ServeyGroupId]
			,[ServeyGroupNameEn]
			,[ServeyGroupNameAr]
			,[RepresentativeId]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[IsClosed]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[Expr1]
			,[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[BranchId]
			,[ServeyStatusColor]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			FROM [dbo].[Client_SurveyVw]
			##CRITERIA##
			";

		internal static string ctprClient_SurveyVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_SurveyVw]
			##CRITERIA##
			";

	}
}
#endregion
