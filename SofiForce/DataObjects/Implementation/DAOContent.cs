/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOContent : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _contentId;
		protected string _contentCode;
		protected string _contentNameEn;
		protected string _contentNameAr;
		protected string _contentEn;
		protected string _contentAr;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOContent()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Content based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOContent
		///</returns>
		///<parameters>
		///Int32? contentId
		///</parameters>
		public static DAOContent SelectOne(Int32? contentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContent_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Content");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ContentId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)contentId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOContent retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOContent();
					retObj._contentId					 = Convert.IsDBNull(dt.Rows[0]["ContentId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ContentId"];
					retObj._contentCode					 = Convert.IsDBNull(dt.Rows[0]["ContentCode"]) ? null : (string)dt.Rows[0]["ContentCode"];
					retObj._contentNameEn					 = Convert.IsDBNull(dt.Rows[0]["ContentNameEn"]) ? null : (string)dt.Rows[0]["ContentNameEn"];
					retObj._contentNameAr					 = Convert.IsDBNull(dt.Rows[0]["ContentNameAr"]) ? null : (string)dt.Rows[0]["ContentNameAr"];
					retObj._contentEn					 = Convert.IsDBNull(dt.Rows[0]["ContentEn"]) ? null : (string)dt.Rows[0]["ContentEn"];
					retObj._contentAr					 = Convert.IsDBNull(dt.Rows[0]["ContentAr"]) ? null : (string)dt.Rows[0]["ContentAr"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Content based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContent_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ContentId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_contentId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Content
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContent_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ContentId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _contentId));
				command.Parameters.Add(CtSqlParameter.Get("@ContentCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_contentId					 = Convert.IsDBNull(command.Parameters["@ContentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ContentId"].Value;
				_contentCode					 = Convert.IsDBNull(command.Parameters["@ContentCode"].Value) ? null : (string)command.Parameters["@ContentCode"].Value;
				_contentNameEn					 = Convert.IsDBNull(command.Parameters["@ContentNameEn"].Value) ? null : (string)command.Parameters["@ContentNameEn"].Value;
				_contentNameAr					 = Convert.IsDBNull(command.Parameters["@ContentNameAr"].Value) ? null : (string)command.Parameters["@ContentNameAr"].Value;
				_contentEn					 = Convert.IsDBNull(command.Parameters["@ContentEn"].Value) ? null : (string)command.Parameters["@ContentEn"].Value;
				_contentAr					 = Convert.IsDBNull(command.Parameters["@ContentAr"].Value) ? null : (string)command.Parameters["@ContentAr"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Content
		///</Summary>
		///<returns>
		///IList-DAOContent.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOContent> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContent_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Content");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContent> objList = new List<DAOContent>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContent retObj = new DAOContent();
						retObj._contentId					 = Convert.IsDBNull(row["ContentId"]) ? (Int32?)null : (Int32?)row["ContentId"];
						retObj._contentCode					 = Convert.IsDBNull(row["ContentCode"]) ? null : (string)row["ContentCode"];
						retObj._contentNameEn					 = Convert.IsDBNull(row["ContentNameEn"]) ? null : (string)row["ContentNameEn"];
						retObj._contentNameAr					 = Convert.IsDBNull(row["ContentNameAr"]) ? null : (string)row["ContentNameAr"];
						retObj._contentEn					 = Convert.IsDBNull(row["ContentEn"]) ? null : (string)row["ContentEn"];
						retObj._contentAr					 = Convert.IsDBNull(row["ContentAr"]) ? null : (string)row["ContentAr"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContent_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiContent
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprContent_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Content");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ContentId", true) == 0) lst.Add(Convert.IsDBNull(row["ContentId"]) ? (Int32?)null : (Int32?)row["ContentId"]);
						if (string.Compare(projection.Member, "ContentCode", true) == 0) lst.Add(Convert.IsDBNull(row["ContentCode"]) ? null : (string)row["ContentCode"]);
						if (string.Compare(projection.Member, "ContentNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ContentNameEn"]) ? null : (string)row["ContentNameEn"]);
						if (string.Compare(projection.Member, "ContentNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ContentNameAr"]) ? null : (string)row["ContentNameAr"]);
						if (string.Compare(projection.Member, "ContentEn", true) == 0) lst.Add(Convert.IsDBNull(row["ContentEn"]) ? null : (string)row["ContentEn"]);
						if (string.Compare(projection.Member, "ContentAr", true) == 0) lst.Add(Convert.IsDBNull(row["ContentAr"]) ? null : (string)row["ContentAr"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Content
		///</Summary>
		///<returns>
		///IList-DAOContent.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOContent> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprContent_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Content");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOContent> objList = new List<DAOContent>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContent retObj = new DAOContent();
						retObj._contentId					 = Convert.IsDBNull(row["ContentId"]) ? (Int32?)null : (Int32?)row["ContentId"];
						retObj._contentCode					 = Convert.IsDBNull(row["ContentCode"]) ? null : (string)row["ContentCode"];
						retObj._contentNameEn					 = Convert.IsDBNull(row["ContentNameEn"]) ? null : (string)row["ContentNameEn"];
						retObj._contentNameAr					 = Convert.IsDBNull(row["ContentNameAr"]) ? null : (string)row["ContentNameAr"];
						retObj._contentEn					 = Convert.IsDBNull(row["ContentEn"]) ? null : (string)row["ContentEn"];
						retObj._contentAr					 = Convert.IsDBNull(row["ContentAr"]) ? null : (string)row["ContentAr"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Content
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprContent_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Content based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContent_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ContentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_contentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ContentAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_contentAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_contentId					 = Convert.IsDBNull(command.Parameters["@ContentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ContentId"].Value;
				_contentCode					 = Convert.IsDBNull(command.Parameters["@ContentCode"].Value) ? null : (string)command.Parameters["@ContentCode"].Value;
				_contentNameEn					 = Convert.IsDBNull(command.Parameters["@ContentNameEn"].Value) ? null : (string)command.Parameters["@ContentNameEn"].Value;
				_contentNameAr					 = Convert.IsDBNull(command.Parameters["@ContentNameAr"].Value) ? null : (string)command.Parameters["@ContentNameAr"].Value;
				_contentEn					 = Convert.IsDBNull(command.Parameters["@ContentEn"].Value) ? null : (string)command.Parameters["@ContentEn"].Value;
				_contentAr					 = Convert.IsDBNull(command.Parameters["@ContentAr"].Value) ? null : (string)command.Parameters["@ContentAr"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ContentId
		{
			get
			{
				return _contentId;
			}
			set
			{
				_contentId = value;
			}
		}

		public string ContentCode
		{
			get
			{
				return _contentCode;
			}
			set
			{
				_contentCode = value;
			}
		}

		public string ContentNameEn
		{
			get
			{
				return _contentNameEn;
			}
			set
			{
				_contentNameEn = value;
			}
		}

		public string ContentNameAr
		{
			get
			{
				return _contentNameAr;
			}
			set
			{
				_contentNameAr = value;
			}
		}

		public string ContentEn
		{
			get
			{
				return _contentEn;
			}
			set
			{
				_contentEn = value;
			}
		}

		public string ContentAr
		{
			get
			{
				return _contentAr;
			}
			set
			{
				_contentAr = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprContent_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ContentId]
			,[ContentCode]
			,[ContentNameEn]
			,[ContentNameAr]
			,[ContentEn]
			,[ContentAr]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Content]
			WHERE 
			[ContentId] = @ContentId
			";

		internal static string ctprContent_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Content]
			WHERE 
			[ContentId] = @ContentId
			";

		internal static string ctprContent_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Content]
			(
			[ContentCode]
			,[ContentNameEn]
			,[ContentNameAr]
			,[ContentEn]
			,[ContentAr]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@ContentCode
			,@ContentNameEn
			,@ContentNameAr
			,@ContentEn
			,@ContentAr
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@ContentId = [ContentId]
			,@ContentCode = [ContentCode]
			,@ContentNameEn = [ContentNameEn]
			,@ContentNameAr = [ContentNameAr]
			,@ContentEn = [ContentEn]
			,@ContentAr = [ContentAr]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Content]
			WHERE 
			[ContentId] = SCOPE_IDENTITY()
			";

		internal static string ctprContent_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ContentId]
			,[ContentCode]
			,[ContentNameEn]
			,[ContentNameAr]
			,[ContentEn]
			,[ContentAr]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Content]
			";

		internal static string ctprContent_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Content]
			";

		internal static string ctprContent_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Content]
			##CRITERIA##
			";

		internal static string ctprContent_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ContentId]
			,[ContentCode]
			,[ContentNameEn]
			,[ContentNameAr]
			,[ContentEn]
			,[ContentAr]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Content]
			##CRITERIA##
			";

		internal static string ctprContent_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Content]
			##CRITERIA##
			";

		internal static string ctprContent_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Content]
			SET
			[ContentCode] = @ContentCode
			,[ContentNameEn] = @ContentNameEn
			,[ContentNameAr] = @ContentNameAr
			,[ContentEn] = @ContentEn
			,[ContentAr] = @ContentAr
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[ContentId] = @ContentId
			SELECT 
			@ContentId = [ContentId]
			,@ContentCode = [ContentCode]
			,@ContentNameEn = [ContentNameEn]
			,@ContentNameAr = [ContentNameAr]
			,@ContentEn = [ContentEn]
			,@ContentAr = [ContentAr]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Content]
			WHERE 
			[ContentId] = @ContentId
			";

	}
}
#endregion
