/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClaim : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _claimId;
		protected string _claimCode;
		protected DateTime? _claimDate;
		protected Int32? _clientId;
		protected Int32? _branchId;
		protected decimal? _itemTotal;
		protected decimal? _discountTotal;
		protected decimal? _taxTotal;
		protected decimal? _cashDiscountTotal;
		protected decimal? _cashPaymentValue;
		protected decimal? _chequePaymentValue;
		protected decimal? _chequePayment1Value;
		protected DateTime? _chequePayment1Date;
		protected Int32? _chequePayment1Days;
		protected decimal? _chequePayment2Value;
		protected DateTime? _chequePayment2Date;
		protected Int32? _chequePayment2Days;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOClaim()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Claim based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClaim
		///</returns>
		///<parameters>
		///Int64? claimId
		///</parameters>
		public static DAOClaim SelectOne(Int64? claimId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)claimId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClaim retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClaim();
					retObj._claimId					 = Convert.IsDBNull(dt.Rows[0]["ClaimId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["ClaimId"];
					retObj._claimCode					 = Convert.IsDBNull(dt.Rows[0]["ClaimCode"]) ? null : (string)dt.Rows[0]["ClaimCode"];
					retObj._claimDate					 = Convert.IsDBNull(dt.Rows[0]["ClaimDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ClaimDate"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._branchId					 = Convert.IsDBNull(dt.Rows[0]["BranchId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BranchId"];
					retObj._itemTotal					 = Convert.IsDBNull(dt.Rows[0]["ItemTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ItemTotal"];
					retObj._discountTotal					 = Convert.IsDBNull(dt.Rows[0]["DiscountTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["DiscountTotal"];
					retObj._taxTotal					 = Convert.IsDBNull(dt.Rows[0]["TaxTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["TaxTotal"];
					retObj._cashDiscountTotal					 = Convert.IsDBNull(dt.Rows[0]["CashDiscountTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CashDiscountTotal"];
					retObj._cashPaymentValue					 = Convert.IsDBNull(dt.Rows[0]["CashPaymentValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CashPaymentValue"];
					retObj._chequePaymentValue					 = Convert.IsDBNull(dt.Rows[0]["ChequePaymentValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ChequePaymentValue"];
					retObj._chequePayment1Value					 = Convert.IsDBNull(dt.Rows[0]["ChequePayment1Value"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ChequePayment1Value"];
					retObj._chequePayment1Date					 = Convert.IsDBNull(dt.Rows[0]["ChequePayment1Date"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ChequePayment1Date"];
					retObj._chequePayment1Days					 = Convert.IsDBNull(dt.Rows[0]["ChequePayment1Days"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ChequePayment1Days"];
					retObj._chequePayment2Value					 = Convert.IsDBNull(dt.Rows[0]["ChequePayment2Value"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ChequePayment2Value"];
					retObj._chequePayment2Date					 = Convert.IsDBNull(dt.Rows[0]["ChequePayment2Date"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ChequePayment2Date"];
					retObj._chequePayment2Days					 = Convert.IsDBNull(dt.Rows[0]["ChequePayment2Days"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ChequePayment2Days"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Claim based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_claimId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Claim
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _claimId));
				command.Parameters.Add(CtSqlParameter.Get("@ClaimCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_claimCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClaimDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_claimDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_itemTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_cashDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashPaymentValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_cashPaymentValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePaymentValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_chequePaymentValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment1Value", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_chequePayment1Value?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment1Date", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_chequePayment1Date?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment1Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_chequePayment1Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment2Value", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_chequePayment2Value?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment2Date", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_chequePayment2Date?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment2Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_chequePayment2Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_claimId					 = Convert.IsDBNull(command.Parameters["@ClaimId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClaimId"].Value;
				_claimCode					 = Convert.IsDBNull(command.Parameters["@ClaimCode"].Value) ? null : (string)command.Parameters["@ClaimCode"].Value;
				_claimDate					 = Convert.IsDBNull(command.Parameters["@ClaimDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ClaimDate"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_itemTotal					 = Convert.IsDBNull(command.Parameters["@ItemTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ItemTotal"].Value;
				_discountTotal					 = Convert.IsDBNull(command.Parameters["@DiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DiscountTotal"].Value;
				_taxTotal					 = Convert.IsDBNull(command.Parameters["@TaxTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxTotal"].Value;
				_cashDiscountTotal					 = Convert.IsDBNull(command.Parameters["@CashDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CashDiscountTotal"].Value;
				_cashPaymentValue					 = Convert.IsDBNull(command.Parameters["@CashPaymentValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CashPaymentValue"].Value;
				_chequePaymentValue					 = Convert.IsDBNull(command.Parameters["@ChequePaymentValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ChequePaymentValue"].Value;
				_chequePayment1Value					 = Convert.IsDBNull(command.Parameters["@ChequePayment1Value"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ChequePayment1Value"].Value;
				_chequePayment1Date					 = Convert.IsDBNull(command.Parameters["@ChequePayment1Date"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ChequePayment1Date"].Value;
				_chequePayment1Days					 = Convert.IsDBNull(command.Parameters["@ChequePayment1Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ChequePayment1Days"].Value;
				_chequePayment2Value					 = Convert.IsDBNull(command.Parameters["@ChequePayment2Value"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ChequePayment2Value"].Value;
				_chequePayment2Date					 = Convert.IsDBNull(command.Parameters["@ChequePayment2Date"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ChequePayment2Date"].Value;
				_chequePayment2Days					 = Convert.IsDBNull(command.Parameters["@ChequePayment2Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ChequePayment2Days"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Claim
		///</Summary>
		///<returns>
		///IList-DAOClaim.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClaim> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClaim> objList = new List<DAOClaim>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClaim retObj = new DAOClaim();
						retObj._claimId					 = Convert.IsDBNull(row["ClaimId"]) ? (Int64?)null : (Int64?)row["ClaimId"];
						retObj._claimCode					 = Convert.IsDBNull(row["ClaimCode"]) ? null : (string)row["ClaimCode"];
						retObj._claimDate					 = Convert.IsDBNull(row["ClaimDate"]) ? (DateTime?)null : (DateTime?)row["ClaimDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._discountTotal					 = Convert.IsDBNull(row["DiscountTotal"]) ? (decimal?)null : (decimal?)row["DiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._cashPaymentValue					 = Convert.IsDBNull(row["CashPaymentValue"]) ? (decimal?)null : (decimal?)row["CashPaymentValue"];
						retObj._chequePaymentValue					 = Convert.IsDBNull(row["ChequePaymentValue"]) ? (decimal?)null : (decimal?)row["ChequePaymentValue"];
						retObj._chequePayment1Value					 = Convert.IsDBNull(row["ChequePayment1Value"]) ? (decimal?)null : (decimal?)row["ChequePayment1Value"];
						retObj._chequePayment1Date					 = Convert.IsDBNull(row["ChequePayment1Date"]) ? (DateTime?)null : (DateTime?)row["ChequePayment1Date"];
						retObj._chequePayment1Days					 = Convert.IsDBNull(row["ChequePayment1Days"]) ? (Int32?)null : (Int32?)row["ChequePayment1Days"];
						retObj._chequePayment2Value					 = Convert.IsDBNull(row["ChequePayment2Value"]) ? (decimal?)null : (decimal?)row["ChequePayment2Value"];
						retObj._chequePayment2Date					 = Convert.IsDBNull(row["ChequePayment2Date"]) ? (DateTime?)null : (DateTime?)row["ChequePayment2Date"];
						retObj._chequePayment2Days					 = Convert.IsDBNull(row["ChequePayment2Days"]) ? (Int32?)null : (Int32?)row["ChequePayment2Days"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClaim
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClaim_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClaimId", true) == 0) lst.Add(Convert.IsDBNull(row["ClaimId"]) ? (Int64?)null : (Int64?)row["ClaimId"]);
						if (string.Compare(projection.Member, "ClaimCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClaimCode"]) ? null : (string)row["ClaimCode"]);
						if (string.Compare(projection.Member, "ClaimDate", true) == 0) lst.Add(Convert.IsDBNull(row["ClaimDate"]) ? (DateTime?)null : (DateTime?)row["ClaimDate"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "ItemTotal", true) == 0) lst.Add(Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"]);
						if (string.Compare(projection.Member, "DiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["DiscountTotal"]) ? (decimal?)null : (decimal?)row["DiscountTotal"]);
						if (string.Compare(projection.Member, "TaxTotal", true) == 0) lst.Add(Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"]);
						if (string.Compare(projection.Member, "CashDiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"]);
						if (string.Compare(projection.Member, "CashPaymentValue", true) == 0) lst.Add(Convert.IsDBNull(row["CashPaymentValue"]) ? (decimal?)null : (decimal?)row["CashPaymentValue"]);
						if (string.Compare(projection.Member, "ChequePaymentValue", true) == 0) lst.Add(Convert.IsDBNull(row["ChequePaymentValue"]) ? (decimal?)null : (decimal?)row["ChequePaymentValue"]);
						if (string.Compare(projection.Member, "ChequePayment1Value", true) == 0) lst.Add(Convert.IsDBNull(row["ChequePayment1Value"]) ? (decimal?)null : (decimal?)row["ChequePayment1Value"]);
						if (string.Compare(projection.Member, "ChequePayment1Date", true) == 0) lst.Add(Convert.IsDBNull(row["ChequePayment1Date"]) ? (DateTime?)null : (DateTime?)row["ChequePayment1Date"]);
						if (string.Compare(projection.Member, "ChequePayment1Days", true) == 0) lst.Add(Convert.IsDBNull(row["ChequePayment1Days"]) ? (Int32?)null : (Int32?)row["ChequePayment1Days"]);
						if (string.Compare(projection.Member, "ChequePayment2Value", true) == 0) lst.Add(Convert.IsDBNull(row["ChequePayment2Value"]) ? (decimal?)null : (decimal?)row["ChequePayment2Value"]);
						if (string.Compare(projection.Member, "ChequePayment2Date", true) == 0) lst.Add(Convert.IsDBNull(row["ChequePayment2Date"]) ? (DateTime?)null : (DateTime?)row["ChequePayment2Date"]);
						if (string.Compare(projection.Member, "ChequePayment2Days", true) == 0) lst.Add(Convert.IsDBNull(row["ChequePayment2Days"]) ? (Int32?)null : (Int32?)row["ChequePayment2Days"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Claim
		///</Summary>
		///<returns>
		///IList-DAOClaim.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClaim> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClaim_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClaim> objList = new List<DAOClaim>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClaim retObj = new DAOClaim();
						retObj._claimId					 = Convert.IsDBNull(row["ClaimId"]) ? (Int64?)null : (Int64?)row["ClaimId"];
						retObj._claimCode					 = Convert.IsDBNull(row["ClaimCode"]) ? null : (string)row["ClaimCode"];
						retObj._claimDate					 = Convert.IsDBNull(row["ClaimDate"]) ? (DateTime?)null : (DateTime?)row["ClaimDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._discountTotal					 = Convert.IsDBNull(row["DiscountTotal"]) ? (decimal?)null : (decimal?)row["DiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._cashPaymentValue					 = Convert.IsDBNull(row["CashPaymentValue"]) ? (decimal?)null : (decimal?)row["CashPaymentValue"];
						retObj._chequePaymentValue					 = Convert.IsDBNull(row["ChequePaymentValue"]) ? (decimal?)null : (decimal?)row["ChequePaymentValue"];
						retObj._chequePayment1Value					 = Convert.IsDBNull(row["ChequePayment1Value"]) ? (decimal?)null : (decimal?)row["ChequePayment1Value"];
						retObj._chequePayment1Date					 = Convert.IsDBNull(row["ChequePayment1Date"]) ? (DateTime?)null : (DateTime?)row["ChequePayment1Date"];
						retObj._chequePayment1Days					 = Convert.IsDBNull(row["ChequePayment1Days"]) ? (Int32?)null : (Int32?)row["ChequePayment1Days"];
						retObj._chequePayment2Value					 = Convert.IsDBNull(row["ChequePayment2Value"]) ? (decimal?)null : (decimal?)row["ChequePayment2Value"];
						retObj._chequePayment2Date					 = Convert.IsDBNull(row["ChequePayment2Date"]) ? (DateTime?)null : (DateTime?)row["ChequePayment2Date"];
						retObj._chequePayment2Days					 = Convert.IsDBNull(row["ChequePayment2Days"]) ? (Int32?)null : (Int32?)row["ChequePayment2Days"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Claim
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClaim_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Claim based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_claimId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClaimCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_claimCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClaimDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_claimDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_itemTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_cashDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashPaymentValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_cashPaymentValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePaymentValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_chequePaymentValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment1Value", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_chequePayment1Value?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment1Date", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_chequePayment1Date?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment1Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_chequePayment1Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment2Value", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_chequePayment2Value?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment2Date", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_chequePayment2Date?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ChequePayment2Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_chequePayment2Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_claimId					 = Convert.IsDBNull(command.Parameters["@ClaimId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClaimId"].Value;
				_claimCode					 = Convert.IsDBNull(command.Parameters["@ClaimCode"].Value) ? null : (string)command.Parameters["@ClaimCode"].Value;
				_claimDate					 = Convert.IsDBNull(command.Parameters["@ClaimDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ClaimDate"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_itemTotal					 = Convert.IsDBNull(command.Parameters["@ItemTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ItemTotal"].Value;
				_discountTotal					 = Convert.IsDBNull(command.Parameters["@DiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DiscountTotal"].Value;
				_taxTotal					 = Convert.IsDBNull(command.Parameters["@TaxTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxTotal"].Value;
				_cashDiscountTotal					 = Convert.IsDBNull(command.Parameters["@CashDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CashDiscountTotal"].Value;
				_cashPaymentValue					 = Convert.IsDBNull(command.Parameters["@CashPaymentValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CashPaymentValue"].Value;
				_chequePaymentValue					 = Convert.IsDBNull(command.Parameters["@ChequePaymentValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ChequePaymentValue"].Value;
				_chequePayment1Value					 = Convert.IsDBNull(command.Parameters["@ChequePayment1Value"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ChequePayment1Value"].Value;
				_chequePayment1Date					 = Convert.IsDBNull(command.Parameters["@ChequePayment1Date"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ChequePayment1Date"].Value;
				_chequePayment1Days					 = Convert.IsDBNull(command.Parameters["@ChequePayment1Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ChequePayment1Days"].Value;
				_chequePayment2Value					 = Convert.IsDBNull(command.Parameters["@ChequePayment2Value"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ChequePayment2Value"].Value;
				_chequePayment2Date					 = Convert.IsDBNull(command.Parameters["@ChequePayment2Date"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ChequePayment2Date"].Value;
				_chequePayment2Days					 = Convert.IsDBNull(command.Parameters["@ChequePayment2Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ChequePayment2Days"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? ClaimId
		{
			get
			{
				return _claimId;
			}
			set
			{
				_claimId = value;
			}
		}

		public string ClaimCode
		{
			get
			{
				return _claimCode;
			}
			set
			{
				_claimCode = value;
			}
		}

		public DateTime? ClaimDate
		{
			get
			{
				return _claimDate;
			}
			set
			{
				_claimDate = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public decimal? ItemTotal
		{
			get
			{
				return _itemTotal;
			}
			set
			{
				_itemTotal = value;
			}
		}

		public decimal? DiscountTotal
		{
			get
			{
				return _discountTotal;
			}
			set
			{
				_discountTotal = value;
			}
		}

		public decimal? TaxTotal
		{
			get
			{
				return _taxTotal;
			}
			set
			{
				_taxTotal = value;
			}
		}

		public decimal? CashDiscountTotal
		{
			get
			{
				return _cashDiscountTotal;
			}
			set
			{
				_cashDiscountTotal = value;
			}
		}

		public decimal? CashPaymentValue
		{
			get
			{
				return _cashPaymentValue;
			}
			set
			{
				_cashPaymentValue = value;
			}
		}

		public decimal? ChequePaymentValue
		{
			get
			{
				return _chequePaymentValue;
			}
			set
			{
				_chequePaymentValue = value;
			}
		}

		public decimal? ChequePayment1Value
		{
			get
			{
				return _chequePayment1Value;
			}
			set
			{
				_chequePayment1Value = value;
			}
		}

		public DateTime? ChequePayment1Date
		{
			get
			{
				return _chequePayment1Date;
			}
			set
			{
				_chequePayment1Date = value;
			}
		}

		public Int32? ChequePayment1Days
		{
			get
			{
				return _chequePayment1Days;
			}
			set
			{
				_chequePayment1Days = value;
			}
		}

		public decimal? ChequePayment2Value
		{
			get
			{
				return _chequePayment2Value;
			}
			set
			{
				_chequePayment2Value = value;
			}
		}

		public DateTime? ChequePayment2Date
		{
			get
			{
				return _chequePayment2Date;
			}
			set
			{
				_chequePayment2Date = value;
			}
		}

		public Int32? ChequePayment2Days
		{
			get
			{
				return _chequePayment2Days;
			}
			set
			{
				_chequePayment2Days = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClaim_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ClaimId]
			,[ClaimCode]
			,[ClaimDate]
			,[ClientId]
			,[BranchId]
			,[ItemTotal]
			,[DiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CashPaymentValue]
			,[ChequePaymentValue]
			,[ChequePayment1Value]
			,[ChequePayment1Date]
			,[ChequePayment1Days]
			,[ChequePayment2Value]
			,[ChequePayment2Date]
			,[ChequePayment2Days]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Claim]
			WHERE 
			[ClaimId] = @ClaimId
			";

		internal static string ctprClaim_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Claim]
			WHERE 
			[ClaimId] = @ClaimId
			";

		internal static string ctprClaim_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Claim]
			(
			[ClaimCode]
			,[ClaimDate]
			,[ClientId]
			,[BranchId]
			,[ItemTotal]
			,[DiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CashPaymentValue]
			,[ChequePaymentValue]
			,[ChequePayment1Value]
			,[ChequePayment1Date]
			,[ChequePayment1Days]
			,[ChequePayment2Value]
			,[ChequePayment2Date]
			,[ChequePayment2Days]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@ClaimCode
			,@ClaimDate
			,@ClientId
			,@BranchId
			,@ItemTotal
			,@DiscountTotal
			,@TaxTotal
			,@CashDiscountTotal
			,@CashPaymentValue
			,@ChequePaymentValue
			,@ChequePayment1Value
			,@ChequePayment1Date
			,@ChequePayment1Days
			,@ChequePayment2Value
			,@ChequePayment2Date
			,@ChequePayment2Days
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@ClaimId = [ClaimId]
			,@ClaimCode = [ClaimCode]
			,@ClaimDate = [ClaimDate]
			,@ClientId = [ClientId]
			,@BranchId = [BranchId]
			,@ItemTotal = [ItemTotal]
			,@DiscountTotal = [DiscountTotal]
			,@TaxTotal = [TaxTotal]
			,@CashDiscountTotal = [CashDiscountTotal]
			,@CashPaymentValue = [CashPaymentValue]
			,@ChequePaymentValue = [ChequePaymentValue]
			,@ChequePayment1Value = [ChequePayment1Value]
			,@ChequePayment1Date = [ChequePayment1Date]
			,@ChequePayment1Days = [ChequePayment1Days]
			,@ChequePayment2Value = [ChequePayment2Value]
			,@ChequePayment2Date = [ChequePayment2Date]
			,@ChequePayment2Days = [ChequePayment2Days]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Claim]
			WHERE 
			[ClaimId] = SCOPE_IDENTITY()
			";

		internal static string ctprClaim_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClaimId]
			,[ClaimCode]
			,[ClaimDate]
			,[ClientId]
			,[BranchId]
			,[ItemTotal]
			,[DiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CashPaymentValue]
			,[ChequePaymentValue]
			,[ChequePayment1Value]
			,[ChequePayment1Date]
			,[ChequePayment1Days]
			,[ChequePayment2Value]
			,[ChequePayment2Date]
			,[ChequePayment2Days]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Claim]
			";

		internal static string ctprClaim_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Claim]
			";

		internal static string ctprClaim_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Claim]
			##CRITERIA##
			";

		internal static string ctprClaim_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClaimId]
			,[ClaimCode]
			,[ClaimDate]
			,[ClientId]
			,[BranchId]
			,[ItemTotal]
			,[DiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CashPaymentValue]
			,[ChequePaymentValue]
			,[ChequePayment1Value]
			,[ChequePayment1Date]
			,[ChequePayment1Days]
			,[ChequePayment2Value]
			,[ChequePayment2Date]
			,[ChequePayment2Days]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Claim]
			##CRITERIA##
			";

		internal static string ctprClaim_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Claim]
			##CRITERIA##
			";

		internal static string ctprClaim_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Claim]
			SET
			[ClaimCode] = @ClaimCode
			,[ClaimDate] = @ClaimDate
			,[ClientId] = @ClientId
			,[BranchId] = @BranchId
			,[ItemTotal] = @ItemTotal
			,[DiscountTotal] = @DiscountTotal
			,[TaxTotal] = @TaxTotal
			,[CashDiscountTotal] = @CashDiscountTotal
			,[CashPaymentValue] = @CashPaymentValue
			,[ChequePaymentValue] = @ChequePaymentValue
			,[ChequePayment1Value] = @ChequePayment1Value
			,[ChequePayment1Date] = @ChequePayment1Date
			,[ChequePayment1Days] = @ChequePayment1Days
			,[ChequePayment2Value] = @ChequePayment2Value
			,[ChequePayment2Date] = @ChequePayment2Date
			,[ChequePayment2Days] = @ChequePayment2Days
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[ClaimId] = @ClaimId
			SELECT 
			@ClaimId = [ClaimId]
			,@ClaimCode = [ClaimCode]
			,@ClaimDate = [ClaimDate]
			,@ClientId = [ClientId]
			,@BranchId = [BranchId]
			,@ItemTotal = [ItemTotal]
			,@DiscountTotal = [DiscountTotal]
			,@TaxTotal = [TaxTotal]
			,@CashDiscountTotal = [CashDiscountTotal]
			,@CashPaymentValue = [CashPaymentValue]
			,@ChequePaymentValue = [ChequePaymentValue]
			,@ChequePayment1Value = [ChequePayment1Value]
			,@ChequePayment1Date = [ChequePayment1Date]
			,@ChequePayment1Days = [ChequePayment1Days]
			,@ChequePayment2Value = [ChequePayment2Value]
			,@ChequePayment2Date = [ChequePayment2Date]
			,@ChequePayment2Days = [ChequePayment2Days]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Claim]
			WHERE 
			[ClaimId] = @ClaimId
			";

	}
}
#endregion
