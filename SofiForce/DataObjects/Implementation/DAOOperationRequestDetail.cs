/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOOperationRequestDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _detailId;
		protected Int32? _operationId;
		protected DateTime? _operationDate;
		protected Int32? _clientId;
		protected Int32? _clientTypeId;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _regionId;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected Int32? _locationLevelId;
		protected bool? _isChain;
		protected string _responsibleNameEn;
		protected string _responsibleNameAr;
		protected string _building;
		protected string _floor;
		protected string _property;
		protected string _address;
		protected string _landmark;
		protected string _phone;
		protected string _mobile;
		protected string _whatsApp;
		protected double? _latitude;
		protected double? _longitude;
		protected decimal? _accuracy;
		protected bool? _inZone;
		protected Int32? _operationStatusId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _taxCode;
		protected string _commercialCode;
		protected Int32? _operationRejectReasonId;
		#endregion

		#region class methods
		public DAOOperationRequestDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table OperationRequest_Detail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOOperationRequestDetail
		///</returns>
		///<parameters>
		///Int64? detailId
		///</parameters>
		public static DAOOperationRequestDetail SelectOne(Int64? detailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)detailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOOperationRequestDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOperationRequestDetail();
					retObj._detailId					 = Convert.IsDBNull(dt.Rows[0]["DetailId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["DetailId"];
					retObj._operationId					 = Convert.IsDBNull(dt.Rows[0]["OperationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OperationId"];
					retObj._operationDate					 = Convert.IsDBNull(dt.Rows[0]["OperationDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["OperationDate"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._clientTypeId					 = Convert.IsDBNull(dt.Rows[0]["ClientTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientTypeId"];
					retObj._clientNameAr					 = Convert.IsDBNull(dt.Rows[0]["ClientNameAr"]) ? null : (string)dt.Rows[0]["ClientNameAr"];
					retObj._clientNameEn					 = Convert.IsDBNull(dt.Rows[0]["ClientNameEn"]) ? null : (string)dt.Rows[0]["ClientNameEn"];
					retObj._regionId					 = Convert.IsDBNull(dt.Rows[0]["RegionId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RegionId"];
					retObj._governerateId					 = Convert.IsDBNull(dt.Rows[0]["GovernerateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["GovernerateId"];
					retObj._cityId					 = Convert.IsDBNull(dt.Rows[0]["CityId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CityId"];
					retObj._locationLevelId					 = Convert.IsDBNull(dt.Rows[0]["LocationLevelId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["LocationLevelId"];
					retObj._isChain					 = Convert.IsDBNull(dt.Rows[0]["IsChain"]) ? (bool?)null : (bool?)dt.Rows[0]["IsChain"];
					retObj._responsibleNameEn					 = Convert.IsDBNull(dt.Rows[0]["ResponsibleNameEn"]) ? null : (string)dt.Rows[0]["ResponsibleNameEn"];
					retObj._responsibleNameAr					 = Convert.IsDBNull(dt.Rows[0]["ResponsibleNameAr"]) ? null : (string)dt.Rows[0]["ResponsibleNameAr"];
					retObj._building					 = Convert.IsDBNull(dt.Rows[0]["Building"]) ? null : (string)dt.Rows[0]["Building"];
					retObj._floor					 = Convert.IsDBNull(dt.Rows[0]["Floor"]) ? null : (string)dt.Rows[0]["Floor"];
					retObj._property					 = Convert.IsDBNull(dt.Rows[0]["Property"]) ? null : (string)dt.Rows[0]["Property"];
					retObj._address					 = Convert.IsDBNull(dt.Rows[0]["Address"]) ? null : (string)dt.Rows[0]["Address"];
					retObj._landmark					 = Convert.IsDBNull(dt.Rows[0]["Landmark"]) ? null : (string)dt.Rows[0]["Landmark"];
					retObj._phone					 = Convert.IsDBNull(dt.Rows[0]["Phone"]) ? null : (string)dt.Rows[0]["Phone"];
					retObj._mobile					 = Convert.IsDBNull(dt.Rows[0]["Mobile"]) ? null : (string)dt.Rows[0]["Mobile"];
					retObj._whatsApp					 = Convert.IsDBNull(dt.Rows[0]["WhatsApp"]) ? null : (string)dt.Rows[0]["WhatsApp"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._accuracy					 = Convert.IsDBNull(dt.Rows[0]["Accuracy"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Accuracy"];
					retObj._inZone					 = Convert.IsDBNull(dt.Rows[0]["InZone"]) ? (bool?)null : (bool?)dt.Rows[0]["InZone"];
					retObj._operationStatusId					 = Convert.IsDBNull(dt.Rows[0]["OperationStatusId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OperationStatusId"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._taxCode					 = Convert.IsDBNull(dt.Rows[0]["TaxCode"]) ? null : (string)dt.Rows[0]["TaxCode"];
					retObj._commercialCode					 = Convert.IsDBNull(dt.Rows[0]["CommercialCode"]) ? null : (string)dt.Rows[0]["CommercialCode"];
					retObj._operationRejectReasonId					 = Convert.IsDBNull(dt.Rows[0]["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OperationRejectReasonId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table OperationRequest_Detail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? operationId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByOperationId(Int32? operationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByOperationId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? operationId
		///</parameters>
		public static Int32 SelectAllByOperationIdCount(Int32? operationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByOperationIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationId
		///</parameters>
		public static void DeleteAllByOperationId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByOperationId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? clientTypeId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByClientTypeId(Int32? clientTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByClientTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientTypeId
		///</parameters>
		public static Int32 SelectAllByClientTypeIdCount(Int32? clientTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByClientTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientTypeId
		///</parameters>
		public static void DeleteAllByClientTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByClientTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? regionId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByRegionId(Int32? regionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByRegionId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)regionId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? regionId
		///</parameters>
		public static Int32 SelectAllByRegionIdCount(Int32? regionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByRegionIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)regionId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? regionId
		///</parameters>
		public static void DeleteAllByRegionId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? regionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByRegionId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)regionId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByGovernerateId(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByGovernerateId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static Int32 SelectAllByGovernerateIdCount(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByGovernerateIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId
		///</parameters>
		public static void DeleteAllByGovernerateId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByGovernerateId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByCityId(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByCityId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static Int32 SelectAllByCityIdCount(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByCityIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId
		///</parameters>
		public static void DeleteAllByCityId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByCityId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? locationLevelId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByLocationLevelId(Int32? locationLevelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByLocationLevelId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)locationLevelId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? locationLevelId
		///</parameters>
		public static Int32 SelectAllByLocationLevelIdCount(Int32? locationLevelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByLocationLevelIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)locationLevelId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? locationLevelId
		///</parameters>
		public static void DeleteAllByLocationLevelId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? locationLevelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByLocationLevelId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)locationLevelId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? operationStatusId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByOperationStatusId(Int32? operationStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByOperationStatusId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? operationStatusId
		///</parameters>
		public static Int32 SelectAllByOperationStatusIdCount(Int32? operationStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByOperationStatusIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationStatusId
		///</parameters>
		public static void DeleteAllByOperationStatusId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByOperationStatusId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationStatusId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OperationRequest_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///Int32? operationRejectReasonId
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByOperationRejectReasonId(Int32? operationRejectReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByOperationRejectReasonId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationRejectReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationRejectReasonId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? operationRejectReasonId
		///</parameters>
		public static Int32 SelectAllByOperationRejectReasonIdCount(Int32? operationRejectReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllByOperationRejectReasonIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationRejectReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationRejectReasonId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OperationRequest_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationRejectReasonId
		///</parameters>
		public static void DeleteAllByOperationRejectReasonId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? operationRejectReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_DeleteAllByOperationRejectReasonId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OperationRejectReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)operationRejectReasonId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table OperationRequest_Detail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _detailId));
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_operationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_regionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_locationLevelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsChain", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isChain?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Building", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_building?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Floor", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_floor?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Property", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_property?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Landmark", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_landmark?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Mobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WhatsApp", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_whatsApp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Accuracy", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_accuracy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_taxCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CommercialCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_commercialCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationRejectReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationRejectReasonId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_operationId					 = Convert.IsDBNull(command.Parameters["@OperationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationId"].Value;
				_operationDate					 = Convert.IsDBNull(command.Parameters["@OperationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@OperationDate"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_clientTypeId					 = Convert.IsDBNull(command.Parameters["@ClientTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientTypeId"].Value;
				_clientNameAr					 = Convert.IsDBNull(command.Parameters["@ClientNameAr"].Value) ? null : (string)command.Parameters["@ClientNameAr"].Value;
				_clientNameEn					 = Convert.IsDBNull(command.Parameters["@ClientNameEn"].Value) ? null : (string)command.Parameters["@ClientNameEn"].Value;
				_regionId					 = Convert.IsDBNull(command.Parameters["@RegionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegionId"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_locationLevelId					 = Convert.IsDBNull(command.Parameters["@LocationLevelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@LocationLevelId"].Value;
				_isChain					 = Convert.IsDBNull(command.Parameters["@IsChain"].Value) ? (bool?)null : (bool?)command.Parameters["@IsChain"].Value;
				_responsibleNameEn					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameEn"].Value) ? null : (string)command.Parameters["@ResponsibleNameEn"].Value;
				_responsibleNameAr					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameAr"].Value) ? null : (string)command.Parameters["@ResponsibleNameAr"].Value;
				_building					 = Convert.IsDBNull(command.Parameters["@Building"].Value) ? null : (string)command.Parameters["@Building"].Value;
				_floor					 = Convert.IsDBNull(command.Parameters["@Floor"].Value) ? null : (string)command.Parameters["@Floor"].Value;
				_property					 = Convert.IsDBNull(command.Parameters["@Property"].Value) ? null : (string)command.Parameters["@Property"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_landmark					 = Convert.IsDBNull(command.Parameters["@Landmark"].Value) ? null : (string)command.Parameters["@Landmark"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_mobile					 = Convert.IsDBNull(command.Parameters["@Mobile"].Value) ? null : (string)command.Parameters["@Mobile"].Value;
				_whatsApp					 = Convert.IsDBNull(command.Parameters["@WhatsApp"].Value) ? null : (string)command.Parameters["@WhatsApp"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_accuracy					 = Convert.IsDBNull(command.Parameters["@Accuracy"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Accuracy"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_operationStatusId					 = Convert.IsDBNull(command.Parameters["@OperationStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationStatusId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_taxCode					 = Convert.IsDBNull(command.Parameters["@TaxCode"].Value) ? null : (string)command.Parameters["@TaxCode"].Value;
				_commercialCode					 = Convert.IsDBNull(command.Parameters["@CommercialCode"].Value) ? null : (string)command.Parameters["@CommercialCode"].Value;
				_operationRejectReasonId					 = Convert.IsDBNull(command.Parameters["@OperationRejectReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationRejectReasonId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table OperationRequest_Detail
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiOperationRequest_Detail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_Detail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"]);
						if (string.Compare(projection.Member, "OperationId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"]);
						if (string.Compare(projection.Member, "OperationDate", true) == 0) lst.Add(Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "ClientTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "RegionId", true) == 0) lst.Add(Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "LocationLevelId", true) == 0) lst.Add(Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"]);
						if (string.Compare(projection.Member, "IsChain", true) == 0) lst.Add(Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"]);
						if (string.Compare(projection.Member, "ResponsibleNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"]);
						if (string.Compare(projection.Member, "ResponsibleNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"]);
						if (string.Compare(projection.Member, "Building", true) == 0) lst.Add(Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"]);
						if (string.Compare(projection.Member, "Floor", true) == 0) lst.Add(Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"]);
						if (string.Compare(projection.Member, "Property", true) == 0) lst.Add(Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "Landmark", true) == 0) lst.Add(Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "Mobile", true) == 0) lst.Add(Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"]);
						if (string.Compare(projection.Member, "WhatsApp", true) == 0) lst.Add(Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "Accuracy", true) == 0) lst.Add(Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "OperationStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "TaxCode", true) == 0) lst.Add(Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"]);
						if (string.Compare(projection.Member, "CommercialCode", true) == 0) lst.Add(Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"]);
						if (string.Compare(projection.Member, "OperationRejectReasonId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api OperationRequest_Detail
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOOperationRequestDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_Detail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetail> objList = new List<DAOOperationRequestDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetail retObj = new DAOOperationRequestDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api OperationRequest_Detail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_Detail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table OperationRequest_Detail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_Detail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_operationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_clientNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_regionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LocationLevelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_locationLevelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsChain", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isChain?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ResponsibleNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_responsibleNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Building", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_building?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Floor", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_floor?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Property", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_property?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Landmark", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_landmark?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Mobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WhatsApp", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_whatsApp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Accuracy", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_accuracy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_taxCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CommercialCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_commercialCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OperationRejectReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_operationRejectReasonId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_operationId					 = Convert.IsDBNull(command.Parameters["@OperationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationId"].Value;
				_operationDate					 = Convert.IsDBNull(command.Parameters["@OperationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@OperationDate"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_clientTypeId					 = Convert.IsDBNull(command.Parameters["@ClientTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientTypeId"].Value;
				_clientNameAr					 = Convert.IsDBNull(command.Parameters["@ClientNameAr"].Value) ? null : (string)command.Parameters["@ClientNameAr"].Value;
				_clientNameEn					 = Convert.IsDBNull(command.Parameters["@ClientNameEn"].Value) ? null : (string)command.Parameters["@ClientNameEn"].Value;
				_regionId					 = Convert.IsDBNull(command.Parameters["@RegionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegionId"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_locationLevelId					 = Convert.IsDBNull(command.Parameters["@LocationLevelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@LocationLevelId"].Value;
				_isChain					 = Convert.IsDBNull(command.Parameters["@IsChain"].Value) ? (bool?)null : (bool?)command.Parameters["@IsChain"].Value;
				_responsibleNameEn					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameEn"].Value) ? null : (string)command.Parameters["@ResponsibleNameEn"].Value;
				_responsibleNameAr					 = Convert.IsDBNull(command.Parameters["@ResponsibleNameAr"].Value) ? null : (string)command.Parameters["@ResponsibleNameAr"].Value;
				_building					 = Convert.IsDBNull(command.Parameters["@Building"].Value) ? null : (string)command.Parameters["@Building"].Value;
				_floor					 = Convert.IsDBNull(command.Parameters["@Floor"].Value) ? null : (string)command.Parameters["@Floor"].Value;
				_property					 = Convert.IsDBNull(command.Parameters["@Property"].Value) ? null : (string)command.Parameters["@Property"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_landmark					 = Convert.IsDBNull(command.Parameters["@Landmark"].Value) ? null : (string)command.Parameters["@Landmark"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_mobile					 = Convert.IsDBNull(command.Parameters["@Mobile"].Value) ? null : (string)command.Parameters["@Mobile"].Value;
				_whatsApp					 = Convert.IsDBNull(command.Parameters["@WhatsApp"].Value) ? null : (string)command.Parameters["@WhatsApp"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_accuracy					 = Convert.IsDBNull(command.Parameters["@Accuracy"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Accuracy"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_operationStatusId					 = Convert.IsDBNull(command.Parameters["@OperationStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationStatusId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_taxCode					 = Convert.IsDBNull(command.Parameters["@TaxCode"].Value) ? null : (string)command.Parameters["@TaxCode"].Value;
				_commercialCode					 = Convert.IsDBNull(command.Parameters["@CommercialCode"].Value) ? null : (string)command.Parameters["@CommercialCode"].Value;
				_operationRejectReasonId					 = Convert.IsDBNull(command.Parameters["@OperationRejectReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OperationRejectReasonId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int32? OperationId
		{
			get
			{
				return _operationId;
			}
			set
			{
				_operationId = value;
			}
		}

		public DateTime? OperationDate
		{
			get
			{
				return _operationDate;
			}
			set
			{
				_operationDate = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? ClientTypeId
		{
			get
			{
				return _clientTypeId;
			}
			set
			{
				_clientTypeId = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int32? RegionId
		{
			get
			{
				return _regionId;
			}
			set
			{
				_regionId = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public Int32? LocationLevelId
		{
			get
			{
				return _locationLevelId;
			}
			set
			{
				_locationLevelId = value;
			}
		}

		public bool? IsChain
		{
			get
			{
				return _isChain;
			}
			set
			{
				_isChain = value;
			}
		}

		public string ResponsibleNameEn
		{
			get
			{
				return _responsibleNameEn;
			}
			set
			{
				_responsibleNameEn = value;
			}
		}

		public string ResponsibleNameAr
		{
			get
			{
				return _responsibleNameAr;
			}
			set
			{
				_responsibleNameAr = value;
			}
		}

		public string Building
		{
			get
			{
				return _building;
			}
			set
			{
				_building = value;
			}
		}

		public string Floor
		{
			get
			{
				return _floor;
			}
			set
			{
				_floor = value;
			}
		}

		public string Property
		{
			get
			{
				return _property;
			}
			set
			{
				_property = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public string Landmark
		{
			get
			{
				return _landmark;
			}
			set
			{
				_landmark = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string Mobile
		{
			get
			{
				return _mobile;
			}
			set
			{
				_mobile = value;
			}
		}

		public string WhatsApp
		{
			get
			{
				return _whatsApp;
			}
			set
			{
				_whatsApp = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public decimal? Accuracy
		{
			get
			{
				return _accuracy;
			}
			set
			{
				_accuracy = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public Int32? OperationStatusId
		{
			get
			{
				return _operationStatusId;
			}
			set
			{
				_operationStatusId = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public string TaxCode
		{
			get
			{
				return _taxCode;
			}
			set
			{
				_taxCode = value;
			}
		}

		public string CommercialCode
		{
			get
			{
				return _commercialCode;
			}
			set
			{
				_commercialCode = value;
			}
		}

		public Int32? OperationRejectReasonId
		{
			get
			{
				return _operationRejectReasonId;
			}
			set
			{
				_operationRejectReasonId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprOperationRequest_Detail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprOperationRequest_Detail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprOperationRequest_Detail_SelectAllByOperationId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationId] = @OperationId OR ([OperationId] IS NULL AND @OperationId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByOperationIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationId] = @OperationId OR ([OperationId] IS NULL AND @OperationId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByOperationId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationId] = @OperationId OR ([OperationId] IS NULL AND @OperationId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByClientTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[ClientTypeId] = @ClientTypeId OR ([ClientTypeId] IS NULL AND @ClientTypeId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByClientTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[ClientTypeId] = @ClientTypeId OR ([ClientTypeId] IS NULL AND @ClientTypeId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByClientTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[ClientTypeId] = @ClientTypeId OR ([ClientTypeId] IS NULL AND @ClientTypeId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByRegionId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[RegionId] = @RegionId OR ([RegionId] IS NULL AND @RegionId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByRegionIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[RegionId] = @RegionId OR ([RegionId] IS NULL AND @RegionId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByRegionId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[RegionId] = @RegionId OR ([RegionId] IS NULL AND @RegionId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByGovernerateId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByGovernerateIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByGovernerateId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByCityId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByCityIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByCityId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByLocationLevelId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[LocationLevelId] = @LocationLevelId OR ([LocationLevelId] IS NULL AND @LocationLevelId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByLocationLevelIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[LocationLevelId] = @LocationLevelId OR ([LocationLevelId] IS NULL AND @LocationLevelId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByLocationLevelId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[LocationLevelId] = @LocationLevelId OR ([LocationLevelId] IS NULL AND @LocationLevelId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByOperationStatusId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationStatusId] = @OperationStatusId OR ([OperationStatusId] IS NULL AND @OperationStatusId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByOperationStatusIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationStatusId] = @OperationStatusId OR ([OperationStatusId] IS NULL AND @OperationStatusId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByOperationStatusId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationStatusId] = @OperationStatusId OR ([OperationStatusId] IS NULL AND @OperationStatusId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByOperationRejectReasonId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationRejectReasonId] = @OperationRejectReasonId OR ([OperationRejectReasonId] IS NULL AND @OperationRejectReasonId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_SelectAllByOperationRejectReasonIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationRejectReasonId] = @OperationRejectReasonId OR ([OperationRejectReasonId] IS NULL AND @OperationRejectReasonId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_DeleteAllByOperationRejectReasonId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OperationRequest_Detail]
			WHERE 
			[OperationRejectReasonId] = @OperationRejectReasonId OR ([OperationRejectReasonId] IS NULL AND @OperationRejectReasonId IS NULL)
			";

		internal static string ctprOperationRequest_Detail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[OperationRequest_Detail]
			(
			[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			)
			VALUES
			(
			@OperationId
			,@OperationDate
			,@ClientId
			,@ClientTypeId
			,@ClientNameAr
			,@ClientNameEn
			,@RegionId
			,@GovernerateId
			,@CityId
			,@LocationLevelId
			,@IsChain
			,@ResponsibleNameEn
			,@ResponsibleNameAr
			,@Building
			,@Floor
			,@Property
			,@Address
			,@Landmark
			,@Phone
			,@Mobile
			,@WhatsApp
			,@Latitude
			,@Longitude
			,@Accuracy
			,@InZone
			,@OperationStatusId
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@TaxCode
			,@CommercialCode
			,@OperationRejectReasonId
			)
			SELECT 
			@DetailId = [DetailId]
			,@OperationId = [OperationId]
			,@OperationDate = [OperationDate]
			,@ClientId = [ClientId]
			,@ClientTypeId = [ClientTypeId]
			,@ClientNameAr = [ClientNameAr]
			,@ClientNameEn = [ClientNameEn]
			,@RegionId = [RegionId]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@LocationLevelId = [LocationLevelId]
			,@IsChain = [IsChain]
			,@ResponsibleNameEn = [ResponsibleNameEn]
			,@ResponsibleNameAr = [ResponsibleNameAr]
			,@Building = [Building]
			,@Floor = [Floor]
			,@Property = [Property]
			,@Address = [Address]
			,@Landmark = [Landmark]
			,@Phone = [Phone]
			,@Mobile = [Mobile]
			,@WhatsApp = [WhatsApp]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@Accuracy = [Accuracy]
			,@InZone = [InZone]
			,@OperationStatusId = [OperationStatusId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@TaxCode = [TaxCode]
			,@CommercialCode = [CommercialCode]
			,@OperationRejectReasonId = [OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[DetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprOperationRequest_Detail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			";

		internal static string ctprOperationRequest_Detail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			";

		internal static string ctprOperationRequest_Detail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[OperationRequest_Detail]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_Detail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[OperationId]
			,[OperationDate]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[ResponsibleNameEn]
			,[ResponsibleNameAr]
			,[Building]
			,[Floor]
			,[Property]
			,[Address]
			,[Landmark]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[Accuracy]
			,[InZone]
			,[OperationStatusId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_Detail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_Detail]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_Detail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[OperationRequest_Detail]
			SET
			[OperationId] = @OperationId
			,[OperationDate] = @OperationDate
			,[ClientId] = @ClientId
			,[ClientTypeId] = @ClientTypeId
			,[ClientNameAr] = @ClientNameAr
			,[ClientNameEn] = @ClientNameEn
			,[RegionId] = @RegionId
			,[GovernerateId] = @GovernerateId
			,[CityId] = @CityId
			,[LocationLevelId] = @LocationLevelId
			,[IsChain] = @IsChain
			,[ResponsibleNameEn] = @ResponsibleNameEn
			,[ResponsibleNameAr] = @ResponsibleNameAr
			,[Building] = @Building
			,[Floor] = @Floor
			,[Property] = @Property
			,[Address] = @Address
			,[Landmark] = @Landmark
			,[Phone] = @Phone
			,[Mobile] = @Mobile
			,[WhatsApp] = @WhatsApp
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[Accuracy] = @Accuracy
			,[InZone] = @InZone
			,[OperationStatusId] = @OperationStatusId
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[TaxCode] = @TaxCode
			,[CommercialCode] = @CommercialCode
			,[OperationRejectReasonId] = @OperationRejectReasonId
			WHERE 
			[DetailId] = @DetailId
			SELECT 
			@DetailId = [DetailId]
			,@OperationId = [OperationId]
			,@OperationDate = [OperationDate]
			,@ClientId = [ClientId]
			,@ClientTypeId = [ClientTypeId]
			,@ClientNameAr = [ClientNameAr]
			,@ClientNameEn = [ClientNameEn]
			,@RegionId = [RegionId]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@LocationLevelId = [LocationLevelId]
			,@IsChain = [IsChain]
			,@ResponsibleNameEn = [ResponsibleNameEn]
			,@ResponsibleNameAr = [ResponsibleNameAr]
			,@Building = [Building]
			,@Floor = [Floor]
			,@Property = [Property]
			,@Address = [Address]
			,@Landmark = [Landmark]
			,@Phone = [Phone]
			,@Mobile = [Mobile]
			,@WhatsApp = [WhatsApp]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@Accuracy = [Accuracy]
			,@InZone = [InZone]
			,@OperationStatusId = [OperationStatusId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@TaxCode = [TaxCode]
			,@CommercialCode = [CommercialCode]
			,@OperationRejectReasonId = [OperationRejectReasonId]
			FROM [dbo].[OperationRequest_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

	}
}
#endregion
