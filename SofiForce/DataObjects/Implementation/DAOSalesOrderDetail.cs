/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrderDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _detailId;
		protected Int64? _salesId;
		protected Int32? _itemId;
		protected decimal? _publicPrice;
		protected decimal? _clientPrice;
		protected Int32? _quantity;
		protected decimal? _lineValue;
		protected decimal? _discount;
		protected decimal? _customDiscount;
		protected decimal? _taxValue;
		protected bool? _isBouns;
		protected string _promotionCode;
		protected Int32? _itemStoreId;
		protected string _batch;
		protected DateTime? _expiration;
		protected Int64? _recId;
		protected Int32? _unitId;
		protected Int32? _promotionId;
		protected Int32? _returnReasonId;
		protected Int32? _returnQuantity;
		protected Int32? _totalReturn;
		#endregion

		#region class methods
		public DAOSalesOrderDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table SalesOrder_Detail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSalesOrderDetail
		///</returns>
		///<parameters>
		///Int64? detailId
		///</parameters>
		public static DAOSalesOrderDetail SelectOne(Int64? detailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)detailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSalesOrderDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSalesOrderDetail();
					retObj._detailId					 = Convert.IsDBNull(dt.Rows[0]["DetailId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["DetailId"];
					retObj._salesId					 = Convert.IsDBNull(dt.Rows[0]["SalesId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesId"];
					retObj._itemId					 = Convert.IsDBNull(dt.Rows[0]["ItemId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemId"];
					retObj._publicPrice					 = Convert.IsDBNull(dt.Rows[0]["PublicPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["PublicPrice"];
					retObj._clientPrice					 = Convert.IsDBNull(dt.Rows[0]["ClientPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ClientPrice"];
					retObj._quantity					 = Convert.IsDBNull(dt.Rows[0]["Quantity"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Quantity"];
					retObj._lineValue					 = Convert.IsDBNull(dt.Rows[0]["LineValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["LineValue"];
					retObj._discount					 = Convert.IsDBNull(dt.Rows[0]["Discount"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Discount"];
					retObj._customDiscount					 = Convert.IsDBNull(dt.Rows[0]["CustomDiscount"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CustomDiscount"];
					retObj._taxValue					 = Convert.IsDBNull(dt.Rows[0]["TaxValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["TaxValue"];
					retObj._isBouns					 = Convert.IsDBNull(dt.Rows[0]["IsBouns"]) ? (bool?)null : (bool?)dt.Rows[0]["IsBouns"];
					retObj._promotionCode					 = Convert.IsDBNull(dt.Rows[0]["PromotionCode"]) ? null : (string)dt.Rows[0]["PromotionCode"];
					retObj._itemStoreId					 = Convert.IsDBNull(dt.Rows[0]["ItemStoreId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemStoreId"];
					retObj._batch					 = Convert.IsDBNull(dt.Rows[0]["Batch"]) ? null : (string)dt.Rows[0]["Batch"];
					retObj._expiration					 = Convert.IsDBNull(dt.Rows[0]["Expiration"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["Expiration"];
					retObj._recId					 = Convert.IsDBNull(dt.Rows[0]["RecId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RecId"];
					retObj._unitId					 = Convert.IsDBNull(dt.Rows[0]["UnitId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UnitId"];
					retObj._promotionId					 = Convert.IsDBNull(dt.Rows[0]["PromotionId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PromotionId"];
					retObj._returnReasonId					 = Convert.IsDBNull(dt.Rows[0]["ReturnReasonId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ReturnReasonId"];
					retObj._returnQuantity					 = Convert.IsDBNull(dt.Rows[0]["ReturnQuantity"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ReturnQuantity"];
					retObj._totalReturn					 = Convert.IsDBNull(dt.Rows[0]["TotalReturn"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TotalReturn"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table SalesOrder_Detail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDetail.
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static IList<DAOSalesOrderDetail> SelectAllBySalesId(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAllBySalesId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDetail> objList = new List<DAOSalesOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDetail retObj = new DAOSalesOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._lineValue					 = Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._customDiscount					 = Convert.IsDBNull(row["CustomDiscount"]) ? (decimal?)null : (decimal?)row["CustomDiscount"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._isBouns					 = Convert.IsDBNull(row["IsBouns"]) ? (bool?)null : (bool?)row["IsBouns"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._batch					 = Convert.IsDBNull(row["Batch"]) ? null : (string)row["Batch"];
						retObj._expiration					 = Convert.IsDBNull(row["Expiration"]) ? (DateTime?)null : (DateTime?)row["Expiration"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._returnReasonId					 = Convert.IsDBNull(row["ReturnReasonId"]) ? (Int32?)null : (Int32?)row["ReturnReasonId"];
						retObj._returnQuantity					 = Convert.IsDBNull(row["ReturnQuantity"]) ? (Int32?)null : (Int32?)row["ReturnQuantity"];
						retObj._totalReturn					 = Convert.IsDBNull(row["TotalReturn"]) ? (Int32?)null : (Int32?)row["TotalReturn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static Int32 SelectAllBySalesIdCount(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAllBySalesIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId
		///</parameters>
		public static void DeleteAllBySalesId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_DeleteAllBySalesId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDetail.
		///</returns>
		///<parameters>
		///Int32? itemId
		///</parameters>
		public static IList<DAOSalesOrderDetail> SelectAllByItemId(Int32? itemId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAllByItemId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDetail> objList = new List<DAOSalesOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDetail retObj = new DAOSalesOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._lineValue					 = Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._customDiscount					 = Convert.IsDBNull(row["CustomDiscount"]) ? (decimal?)null : (decimal?)row["CustomDiscount"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._isBouns					 = Convert.IsDBNull(row["IsBouns"]) ? (bool?)null : (bool?)row["IsBouns"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._batch					 = Convert.IsDBNull(row["Batch"]) ? null : (string)row["Batch"];
						retObj._expiration					 = Convert.IsDBNull(row["Expiration"]) ? (DateTime?)null : (DateTime?)row["Expiration"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._returnReasonId					 = Convert.IsDBNull(row["ReturnReasonId"]) ? (Int32?)null : (Int32?)row["ReturnReasonId"];
						retObj._returnQuantity					 = Convert.IsDBNull(row["ReturnQuantity"]) ? (Int32?)null : (Int32?)row["ReturnQuantity"];
						retObj._totalReturn					 = Convert.IsDBNull(row["TotalReturn"]) ? (Int32?)null : (Int32?)row["TotalReturn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? itemId
		///</parameters>
		public static Int32 SelectAllByItemIdCount(Int32? itemId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAllByItemIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemId
		///</parameters>
		public static void DeleteAllByItemId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_DeleteAllByItemId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDetail.
		///</returns>
		///<parameters>
		///Int32? promotionId
		///</parameters>
		public static IList<DAOSalesOrderDetail> SelectAllByPromotionId(Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAllByPromotionId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDetail> objList = new List<DAOSalesOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDetail retObj = new DAOSalesOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._lineValue					 = Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._customDiscount					 = Convert.IsDBNull(row["CustomDiscount"]) ? (decimal?)null : (decimal?)row["CustomDiscount"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._isBouns					 = Convert.IsDBNull(row["IsBouns"]) ? (bool?)null : (bool?)row["IsBouns"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._batch					 = Convert.IsDBNull(row["Batch"]) ? null : (string)row["Batch"];
						retObj._expiration					 = Convert.IsDBNull(row["Expiration"]) ? (DateTime?)null : (DateTime?)row["Expiration"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._returnReasonId					 = Convert.IsDBNull(row["ReturnReasonId"]) ? (Int32?)null : (Int32?)row["ReturnReasonId"];
						retObj._returnQuantity					 = Convert.IsDBNull(row["ReturnQuantity"]) ? (Int32?)null : (Int32?)row["ReturnQuantity"];
						retObj._totalReturn					 = Convert.IsDBNull(row["TotalReturn"]) ? (Int32?)null : (Int32?)row["TotalReturn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? promotionId
		///</parameters>
		public static Int32 SelectAllByPromotionIdCount(Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAllByPromotionIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionId
		///</parameters>
		public static void DeleteAllByPromotionId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_DeleteAllByPromotionId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table SalesOrder_Detail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _detailId));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PublicPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_publicPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_clientPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quantity", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_quantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LineValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_lineValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_customDiscount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsBouns", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isBouns?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_promotionCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemStoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemStoreId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Batch", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_batch?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Expiration", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_expiration?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_unitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReturnReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_returnReasonId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReturnQuantity", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_returnQuantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TotalReturn", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_totalReturn?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_itemId					 = Convert.IsDBNull(command.Parameters["@ItemId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemId"].Value;
				_publicPrice					 = Convert.IsDBNull(command.Parameters["@PublicPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PublicPrice"].Value;
				_clientPrice					 = Convert.IsDBNull(command.Parameters["@ClientPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ClientPrice"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["@Quantity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Quantity"].Value;
				_lineValue					 = Convert.IsDBNull(command.Parameters["@LineValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@LineValue"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["@Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Discount"].Value;
				_customDiscount					 = Convert.IsDBNull(command.Parameters["@CustomDiscount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CustomDiscount"].Value;
				_taxValue					 = Convert.IsDBNull(command.Parameters["@TaxValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxValue"].Value;
				_isBouns					 = Convert.IsDBNull(command.Parameters["@IsBouns"].Value) ? (bool?)null : (bool?)command.Parameters["@IsBouns"].Value;
				_promotionCode					 = Convert.IsDBNull(command.Parameters["@PromotionCode"].Value) ? null : (string)command.Parameters["@PromotionCode"].Value;
				_itemStoreId					 = Convert.IsDBNull(command.Parameters["@ItemStoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemStoreId"].Value;
				_batch					 = Convert.IsDBNull(command.Parameters["@Batch"].Value) ? null : (string)command.Parameters["@Batch"].Value;
				_expiration					 = Convert.IsDBNull(command.Parameters["@Expiration"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@Expiration"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;
				_unitId					 = Convert.IsDBNull(command.Parameters["@UnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UnitId"].Value;
				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_returnReasonId					 = Convert.IsDBNull(command.Parameters["@ReturnReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReturnReasonId"].Value;
				_returnQuantity					 = Convert.IsDBNull(command.Parameters["@ReturnQuantity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReturnQuantity"].Value;
				_totalReturn					 = Convert.IsDBNull(command.Parameters["@TotalReturn"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TotalReturn"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrder_Detail
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrderDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDetail> objList = new List<DAOSalesOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDetail retObj = new DAOSalesOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._lineValue					 = Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._customDiscount					 = Convert.IsDBNull(row["CustomDiscount"]) ? (decimal?)null : (decimal?)row["CustomDiscount"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._isBouns					 = Convert.IsDBNull(row["IsBouns"]) ? (bool?)null : (bool?)row["IsBouns"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._batch					 = Convert.IsDBNull(row["Batch"]) ? null : (string)row["Batch"];
						retObj._expiration					 = Convert.IsDBNull(row["Expiration"]) ? (DateTime?)null : (DateTime?)row["Expiration"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._returnReasonId					 = Convert.IsDBNull(row["ReturnReasonId"]) ? (Int32?)null : (Int32?)row["ReturnReasonId"];
						retObj._returnQuantity					 = Convert.IsDBNull(row["ReturnQuantity"]) ? (Int32?)null : (Int32?)row["ReturnQuantity"];
						retObj._totalReturn					 = Convert.IsDBNull(row["TotalReturn"]) ? (Int32?)null : (Int32?)row["TotalReturn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrder_Detail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Detail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "ItemId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"]);
						if (string.Compare(projection.Member, "PublicPrice", true) == 0) lst.Add(Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"]);
						if (string.Compare(projection.Member, "ClientPrice", true) == 0) lst.Add(Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"]);
						if (string.Compare(projection.Member, "Quantity", true) == 0) lst.Add(Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"]);
						if (string.Compare(projection.Member, "LineValue", true) == 0) lst.Add(Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"]);
						if (string.Compare(projection.Member, "Discount", true) == 0) lst.Add(Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"]);
						if (string.Compare(projection.Member, "CustomDiscount", true) == 0) lst.Add(Convert.IsDBNull(row["CustomDiscount"]) ? (decimal?)null : (decimal?)row["CustomDiscount"]);
						if (string.Compare(projection.Member, "TaxValue", true) == 0) lst.Add(Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"]);
						if (string.Compare(projection.Member, "IsBouns", true) == 0) lst.Add(Convert.IsDBNull(row["IsBouns"]) ? (bool?)null : (bool?)row["IsBouns"]);
						if (string.Compare(projection.Member, "PromotionCode", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"]);
						if (string.Compare(projection.Member, "ItemStoreId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"]);
						if (string.Compare(projection.Member, "Batch", true) == 0) lst.Add(Convert.IsDBNull(row["Batch"]) ? null : (string)row["Batch"]);
						if (string.Compare(projection.Member, "Expiration", true) == 0) lst.Add(Convert.IsDBNull(row["Expiration"]) ? (DateTime?)null : (DateTime?)row["Expiration"]);
						if (string.Compare(projection.Member, "RecId", true) == 0) lst.Add(Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"]);
						if (string.Compare(projection.Member, "UnitId", true) == 0) lst.Add(Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"]);
						if (string.Compare(projection.Member, "PromotionId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"]);
						if (string.Compare(projection.Member, "ReturnReasonId", true) == 0) lst.Add(Convert.IsDBNull(row["ReturnReasonId"]) ? (Int32?)null : (Int32?)row["ReturnReasonId"]);
						if (string.Compare(projection.Member, "ReturnQuantity", true) == 0) lst.Add(Convert.IsDBNull(row["ReturnQuantity"]) ? (Int32?)null : (Int32?)row["ReturnQuantity"]);
						if (string.Compare(projection.Member, "TotalReturn", true) == 0) lst.Add(Convert.IsDBNull(row["TotalReturn"]) ? (Int32?)null : (Int32?)row["TotalReturn"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Detail
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrderDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Detail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDetail> objList = new List<DAOSalesOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDetail retObj = new DAOSalesOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._lineValue					 = Convert.IsDBNull(row["LineValue"]) ? (decimal?)null : (decimal?)row["LineValue"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._customDiscount					 = Convert.IsDBNull(row["CustomDiscount"]) ? (decimal?)null : (decimal?)row["CustomDiscount"];
						retObj._taxValue					 = Convert.IsDBNull(row["TaxValue"]) ? (decimal?)null : (decimal?)row["TaxValue"];
						retObj._isBouns					 = Convert.IsDBNull(row["IsBouns"]) ? (bool?)null : (bool?)row["IsBouns"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._itemStoreId					 = Convert.IsDBNull(row["ItemStoreId"]) ? (Int32?)null : (Int32?)row["ItemStoreId"];
						retObj._batch					 = Convert.IsDBNull(row["Batch"]) ? null : (string)row["Batch"];
						retObj._expiration					 = Convert.IsDBNull(row["Expiration"]) ? (DateTime?)null : (DateTime?)row["Expiration"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._returnReasonId					 = Convert.IsDBNull(row["ReturnReasonId"]) ? (Int32?)null : (Int32?)row["ReturnReasonId"];
						retObj._returnQuantity					 = Convert.IsDBNull(row["ReturnQuantity"]) ? (Int32?)null : (Int32?)row["ReturnQuantity"];
						retObj._totalReturn					 = Convert.IsDBNull(row["TotalReturn"]) ? (Int32?)null : (Int32?)row["TotalReturn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Detail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Detail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table SalesOrder_Detail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Detail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PublicPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_publicPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_clientPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quantity", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_quantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LineValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_lineValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_customDiscount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsBouns", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isBouns?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_promotionCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemStoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemStoreId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Batch", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_batch?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Expiration", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_expiration?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_unitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReturnReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_returnReasonId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReturnQuantity", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_returnQuantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TotalReturn", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_totalReturn?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_itemId					 = Convert.IsDBNull(command.Parameters["@ItemId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemId"].Value;
				_publicPrice					 = Convert.IsDBNull(command.Parameters["@PublicPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PublicPrice"].Value;
				_clientPrice					 = Convert.IsDBNull(command.Parameters["@ClientPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ClientPrice"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["@Quantity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Quantity"].Value;
				_lineValue					 = Convert.IsDBNull(command.Parameters["@LineValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@LineValue"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["@Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Discount"].Value;
				_customDiscount					 = Convert.IsDBNull(command.Parameters["@CustomDiscount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CustomDiscount"].Value;
				_taxValue					 = Convert.IsDBNull(command.Parameters["@TaxValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxValue"].Value;
				_isBouns					 = Convert.IsDBNull(command.Parameters["@IsBouns"].Value) ? (bool?)null : (bool?)command.Parameters["@IsBouns"].Value;
				_promotionCode					 = Convert.IsDBNull(command.Parameters["@PromotionCode"].Value) ? null : (string)command.Parameters["@PromotionCode"].Value;
				_itemStoreId					 = Convert.IsDBNull(command.Parameters["@ItemStoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemStoreId"].Value;
				_batch					 = Convert.IsDBNull(command.Parameters["@Batch"].Value) ? null : (string)command.Parameters["@Batch"].Value;
				_expiration					 = Convert.IsDBNull(command.Parameters["@Expiration"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@Expiration"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;
				_unitId					 = Convert.IsDBNull(command.Parameters["@UnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UnitId"].Value;
				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_returnReasonId					 = Convert.IsDBNull(command.Parameters["@ReturnReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReturnReasonId"].Value;
				_returnQuantity					 = Convert.IsDBNull(command.Parameters["@ReturnQuantity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReturnQuantity"].Value;
				_totalReturn					 = Convert.IsDBNull(command.Parameters["@TotalReturn"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TotalReturn"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public Int32? ItemId
		{
			get
			{
				return _itemId;
			}
			set
			{
				_itemId = value;
			}
		}

		public decimal? PublicPrice
		{
			get
			{
				return _publicPrice;
			}
			set
			{
				_publicPrice = value;
			}
		}

		public decimal? ClientPrice
		{
			get
			{
				return _clientPrice;
			}
			set
			{
				_clientPrice = value;
			}
		}

		public Int32? Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity = value;
			}
		}

		public decimal? LineValue
		{
			get
			{
				return _lineValue;
			}
			set
			{
				_lineValue = value;
			}
		}

		public decimal? Discount
		{
			get
			{
				return _discount;
			}
			set
			{
				_discount = value;
			}
		}

		public decimal? CustomDiscount
		{
			get
			{
				return _customDiscount;
			}
			set
			{
				_customDiscount = value;
			}
		}

		public decimal? TaxValue
		{
			get
			{
				return _taxValue;
			}
			set
			{
				_taxValue = value;
			}
		}

		public bool? IsBouns
		{
			get
			{
				return _isBouns;
			}
			set
			{
				_isBouns = value;
			}
		}

		public string PromotionCode
		{
			get
			{
				return _promotionCode;
			}
			set
			{
				_promotionCode = value;
			}
		}

		public Int32? ItemStoreId
		{
			get
			{
				return _itemStoreId;
			}
			set
			{
				_itemStoreId = value;
			}
		}

		public string Batch
		{
			get
			{
				return _batch;
			}
			set
			{
				_batch = value;
			}
		}

		public DateTime? Expiration
		{
			get
			{
				return _expiration;
			}
			set
			{
				_expiration = value;
			}
		}

		public Int64? RecId
		{
			get
			{
				return _recId;
			}
			set
			{
				_recId = value;
			}
		}

		public Int32? UnitId
		{
			get
			{
				return _unitId;
			}
			set
			{
				_unitId = value;
			}
		}

		public Int32? PromotionId
		{
			get
			{
				return _promotionId;
			}
			set
			{
				_promotionId = value;
			}
		}

		public Int32? ReturnReasonId
		{
			get
			{
				return _returnReasonId;
			}
			set
			{
				_returnReasonId = value;
			}
		}

		public Int32? ReturnQuantity
		{
			get
			{
				return _returnQuantity;
			}
			set
			{
				_returnQuantity = value;
			}
		}

		public Int32? TotalReturn
		{
			get
			{
				return _totalReturn;
			}
			set
			{
				_totalReturn = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrder_Detail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SalesId]
			,[ItemId]
			,[PublicPrice]
			,[ClientPrice]
			,[Quantity]
			,[LineValue]
			,[Discount]
			,[CustomDiscount]
			,[TaxValue]
			,[IsBouns]
			,[PromotionCode]
			,[ItemStoreId]
			,[Batch]
			,[Expiration]
			,[RecId]
			,[UnitId]
			,[PromotionId]
			,[ReturnReasonId]
			,[ReturnQuantity]
			,[TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprSalesOrder_Detail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprSalesOrder_Detail_SelectAllBySalesId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SalesId]
			,[ItemId]
			,[PublicPrice]
			,[ClientPrice]
			,[Quantity]
			,[LineValue]
			,[Discount]
			,[CustomDiscount]
			,[TaxValue]
			,[IsBouns]
			,[PromotionCode]
			,[ItemStoreId]
			,[Batch]
			,[Expiration]
			,[RecId]
			,[UnitId]
			,[PromotionId]
			,[ReturnReasonId]
			,[ReturnQuantity]
			,[TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_SelectAllBySalesIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_DeleteAllBySalesId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Detail]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_SelectAllByItemId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SalesId]
			,[ItemId]
			,[PublicPrice]
			,[ClientPrice]
			,[Quantity]
			,[LineValue]
			,[Discount]
			,[CustomDiscount]
			,[TaxValue]
			,[IsBouns]
			,[PromotionCode]
			,[ItemStoreId]
			,[Batch]
			,[Expiration]
			,[RecId]
			,[UnitId]
			,[PromotionId]
			,[ReturnReasonId]
			,[ReturnQuantity]
			,[TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[ItemId] = @ItemId OR ([ItemId] IS NULL AND @ItemId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_SelectAllByItemIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[ItemId] = @ItemId OR ([ItemId] IS NULL AND @ItemId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_DeleteAllByItemId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Detail]
			WHERE 
			[ItemId] = @ItemId OR ([ItemId] IS NULL AND @ItemId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_SelectAllByPromotionId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SalesId]
			,[ItemId]
			,[PublicPrice]
			,[ClientPrice]
			,[Quantity]
			,[LineValue]
			,[Discount]
			,[CustomDiscount]
			,[TaxValue]
			,[IsBouns]
			,[PromotionCode]
			,[ItemStoreId]
			,[Batch]
			,[Expiration]
			,[RecId]
			,[UnitId]
			,[PromotionId]
			,[ReturnReasonId]
			,[ReturnQuantity]
			,[TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_SelectAllByPromotionIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_DeleteAllByPromotionId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Detail]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprSalesOrder_Detail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[SalesOrder_Detail]
			(
			[SalesId]
			,[ItemId]
			,[PublicPrice]
			,[ClientPrice]
			,[Quantity]
			,[LineValue]
			,[Discount]
			,[CustomDiscount]
			,[TaxValue]
			,[IsBouns]
			,[PromotionCode]
			,[ItemStoreId]
			,[Batch]
			,[Expiration]
			,[RecId]
			,[UnitId]
			,[PromotionId]
			,[ReturnReasonId]
			,[ReturnQuantity]
			,[TotalReturn]
			)
			VALUES
			(
			@SalesId
			,@ItemId
			,@PublicPrice
			,@ClientPrice
			,@Quantity
			,@LineValue
			,@Discount
			,@CustomDiscount
			,@TaxValue
			,@IsBouns
			,@PromotionCode
			,@ItemStoreId
			,@Batch
			,@Expiration
			,@RecId
			,@UnitId
			,@PromotionId
			,@ReturnReasonId
			,@ReturnQuantity
			,@TotalReturn
			)
			SELECT 
			@DetailId = [DetailId]
			,@SalesId = [SalesId]
			,@ItemId = [ItemId]
			,@PublicPrice = [PublicPrice]
			,@ClientPrice = [ClientPrice]
			,@Quantity = [Quantity]
			,@LineValue = [LineValue]
			,@Discount = [Discount]
			,@CustomDiscount = [CustomDiscount]
			,@TaxValue = [TaxValue]
			,@IsBouns = [IsBouns]
			,@PromotionCode = [PromotionCode]
			,@ItemStoreId = [ItemStoreId]
			,@Batch = [Batch]
			,@Expiration = [Expiration]
			,@RecId = [RecId]
			,@UnitId = [UnitId]
			,@PromotionId = [PromotionId]
			,@ReturnReasonId = [ReturnReasonId]
			,@ReturnQuantity = [ReturnQuantity]
			,@TotalReturn = [TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[DetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprSalesOrder_Detail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[SalesId]
			,[ItemId]
			,[PublicPrice]
			,[ClientPrice]
			,[Quantity]
			,[LineValue]
			,[Discount]
			,[CustomDiscount]
			,[TaxValue]
			,[IsBouns]
			,[PromotionCode]
			,[ItemStoreId]
			,[Batch]
			,[Expiration]
			,[RecId]
			,[UnitId]
			,[PromotionId]
			,[ReturnReasonId]
			,[ReturnQuantity]
			,[TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			";

		internal static string ctprSalesOrder_Detail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Detail]
			";

		internal static string ctprSalesOrder_Detail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Detail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[SalesId]
			,[ItemId]
			,[PublicPrice]
			,[ClientPrice]
			,[Quantity]
			,[LineValue]
			,[Discount]
			,[CustomDiscount]
			,[TaxValue]
			,[IsBouns]
			,[PromotionCode]
			,[ItemStoreId]
			,[Batch]
			,[Expiration]
			,[RecId]
			,[UnitId]
			,[PromotionId]
			,[ReturnReasonId]
			,[ReturnQuantity]
			,[TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Detail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Detail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[SalesOrder_Detail]
			SET
			[SalesId] = @SalesId
			,[ItemId] = @ItemId
			,[PublicPrice] = @PublicPrice
			,[ClientPrice] = @ClientPrice
			,[Quantity] = @Quantity
			,[LineValue] = @LineValue
			,[Discount] = @Discount
			,[CustomDiscount] = @CustomDiscount
			,[TaxValue] = @TaxValue
			,[IsBouns] = @IsBouns
			,[PromotionCode] = @PromotionCode
			,[ItemStoreId] = @ItemStoreId
			,[Batch] = @Batch
			,[Expiration] = @Expiration
			,[RecId] = @RecId
			,[UnitId] = @UnitId
			,[PromotionId] = @PromotionId
			,[ReturnReasonId] = @ReturnReasonId
			,[ReturnQuantity] = @ReturnQuantity
			,[TotalReturn] = @TotalReturn
			WHERE 
			[DetailId] = @DetailId
			SELECT 
			@DetailId = [DetailId]
			,@SalesId = [SalesId]
			,@ItemId = [ItemId]
			,@PublicPrice = [PublicPrice]
			,@ClientPrice = [ClientPrice]
			,@Quantity = [Quantity]
			,@LineValue = [LineValue]
			,@Discount = [Discount]
			,@CustomDiscount = [CustomDiscount]
			,@TaxValue = [TaxValue]
			,@IsBouns = [IsBouns]
			,@PromotionCode = [PromotionCode]
			,@ItemStoreId = [ItemStoreId]
			,@Batch = [Batch]
			,@Expiration = [Expiration]
			,@RecId = [RecId]
			,@UnitId = [UnitId]
			,@PromotionId = [PromotionId]
			,@ReturnReasonId = [ReturnReasonId]
			,@ReturnQuantity = [ReturnQuantity]
			,@TotalReturn = [TotalReturn]
			FROM [dbo].[SalesOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

	}
}
#endregion
