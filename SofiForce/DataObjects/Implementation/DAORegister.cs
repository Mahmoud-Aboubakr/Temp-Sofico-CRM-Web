/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAORegister : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _registerId;
		protected Int32? _registerType;
		protected string _registerName;
		protected string _phone;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected double? _lat;
		protected double? _lng;
		protected string _address;
		protected Int32? _visitDay;
		protected string _fromTime;
		protected string _toTime;
		protected Int32? _registerStatusId;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAORegister()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Register based on the primary key(s)
		///</Summary>
		///<returns>
		///DAORegister
		///</returns>
		///<parameters>
		///Int64? registerId
		///</parameters>
		public static DAORegister SelectOne(Int64? registerId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Register");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegisterId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)registerId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAORegister retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAORegister();
					retObj._registerId					 = Convert.IsDBNull(dt.Rows[0]["RegisterId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RegisterId"];
					retObj._registerType					 = Convert.IsDBNull(dt.Rows[0]["RegisterType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RegisterType"];
					retObj._registerName					 = Convert.IsDBNull(dt.Rows[0]["RegisterName"]) ? null : (string)dt.Rows[0]["RegisterName"];
					retObj._phone					 = Convert.IsDBNull(dt.Rows[0]["Phone"]) ? null : (string)dt.Rows[0]["Phone"];
					retObj._governerateId					 = Convert.IsDBNull(dt.Rows[0]["GovernerateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["GovernerateId"];
					retObj._cityId					 = Convert.IsDBNull(dt.Rows[0]["CityId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CityId"];
					retObj._lat					 = Convert.IsDBNull(dt.Rows[0]["Lat"]) ? (double?)null : (double?)dt.Rows[0]["Lat"];
					retObj._lng					 = Convert.IsDBNull(dt.Rows[0]["Lng"]) ? (double?)null : (double?)dt.Rows[0]["Lng"];
					retObj._address					 = Convert.IsDBNull(dt.Rows[0]["Address"]) ? null : (string)dt.Rows[0]["Address"];
					retObj._visitDay					 = Convert.IsDBNull(dt.Rows[0]["VisitDay"]) ? (Int32?)null : (Int32?)dt.Rows[0]["VisitDay"];
					retObj._fromTime					 = Convert.IsDBNull(dt.Rows[0]["FromTime"]) ? null : (string)dt.Rows[0]["FromTime"];
					retObj._toTime					 = Convert.IsDBNull(dt.Rows[0]["ToTime"]) ? null : (string)dt.Rows[0]["ToTime"];
					retObj._registerStatusId					 = Convert.IsDBNull(dt.Rows[0]["RegisterStatusId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RegisterStatusId"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Register based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegisterId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_registerId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Register based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAORegister.
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static IList<DAORegister> SelectAllByGovernerateId(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAllByGovernerateId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Register");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORegister> objList = new List<DAORegister>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORegister retObj = new DAORegister();
						retObj._registerId					 = Convert.IsDBNull(row["RegisterId"]) ? (Int64?)null : (Int64?)row["RegisterId"];
						retObj._registerType					 = Convert.IsDBNull(row["RegisterType"]) ? (Int32?)null : (Int32?)row["RegisterType"];
						retObj._registerName					 = Convert.IsDBNull(row["RegisterName"]) ? null : (string)row["RegisterName"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._visitDay					 = Convert.IsDBNull(row["VisitDay"]) ? (Int32?)null : (Int32?)row["VisitDay"];
						retObj._fromTime					 = Convert.IsDBNull(row["FromTime"]) ? null : (string)row["FromTime"];
						retObj._toTime					 = Convert.IsDBNull(row["ToTime"]) ? null : (string)row["ToTime"];
						retObj._registerStatusId					 = Convert.IsDBNull(row["RegisterStatusId"]) ? (Int32?)null : (Int32?)row["RegisterStatusId"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static Int32 SelectAllByGovernerateIdCount(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAllByGovernerateIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Register with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId
		///</parameters>
		public static void DeleteAllByGovernerateId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_DeleteAllByGovernerateId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Register based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAORegister.
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static IList<DAORegister> SelectAllByCityId(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAllByCityId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Register");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORegister> objList = new List<DAORegister>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORegister retObj = new DAORegister();
						retObj._registerId					 = Convert.IsDBNull(row["RegisterId"]) ? (Int64?)null : (Int64?)row["RegisterId"];
						retObj._registerType					 = Convert.IsDBNull(row["RegisterType"]) ? (Int32?)null : (Int32?)row["RegisterType"];
						retObj._registerName					 = Convert.IsDBNull(row["RegisterName"]) ? null : (string)row["RegisterName"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._visitDay					 = Convert.IsDBNull(row["VisitDay"]) ? (Int32?)null : (Int32?)row["VisitDay"];
						retObj._fromTime					 = Convert.IsDBNull(row["FromTime"]) ? null : (string)row["FromTime"];
						retObj._toTime					 = Convert.IsDBNull(row["ToTime"]) ? null : (string)row["ToTime"];
						retObj._registerStatusId					 = Convert.IsDBNull(row["RegisterStatusId"]) ? (Int32?)null : (Int32?)row["RegisterStatusId"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static Int32 SelectAllByCityIdCount(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAllByCityIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Register with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId
		///</parameters>
		public static void DeleteAllByCityId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_DeleteAllByCityId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Register based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAORegister.
		///</returns>
		///<parameters>
		///Int32? registerStatusId
		///</parameters>
		public static IList<DAORegister> SelectAllByRegisterStatusId(Int32? registerStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAllByRegisterStatusId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Register");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegisterStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)registerStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORegister> objList = new List<DAORegister>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORegister retObj = new DAORegister();
						retObj._registerId					 = Convert.IsDBNull(row["RegisterId"]) ? (Int64?)null : (Int64?)row["RegisterId"];
						retObj._registerType					 = Convert.IsDBNull(row["RegisterType"]) ? (Int32?)null : (Int32?)row["RegisterType"];
						retObj._registerName					 = Convert.IsDBNull(row["RegisterName"]) ? null : (string)row["RegisterName"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._visitDay					 = Convert.IsDBNull(row["VisitDay"]) ? (Int32?)null : (Int32?)row["VisitDay"];
						retObj._fromTime					 = Convert.IsDBNull(row["FromTime"]) ? null : (string)row["FromTime"];
						retObj._toTime					 = Convert.IsDBNull(row["ToTime"]) ? null : (string)row["ToTime"];
						retObj._registerStatusId					 = Convert.IsDBNull(row["RegisterStatusId"]) ? (Int32?)null : (Int32?)row["RegisterStatusId"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? registerStatusId
		///</parameters>
		public static Int32 SelectAllByRegisterStatusIdCount(Int32? registerStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAllByRegisterStatusIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegisterStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)registerStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Register with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? registerStatusId
		///</parameters>
		public static void DeleteAllByRegisterStatusId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? registerStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_DeleteAllByRegisterStatusId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegisterStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)registerStatusId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Register
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegisterId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _registerId));
				command.Parameters.Add(CtSqlParameter.Get("@RegisterType", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_registerType?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegisterName", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_registerName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lat", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lat?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lng", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lng?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NChar, 10, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VisitDay", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_visitDay?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FromTime", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fromTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ToTime", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_toTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegisterStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_registerStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_registerId					 = Convert.IsDBNull(command.Parameters["@RegisterId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RegisterId"].Value;
				_registerType					 = Convert.IsDBNull(command.Parameters["@RegisterType"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegisterType"].Value;
				_registerName					 = Convert.IsDBNull(command.Parameters["@RegisterName"].Value) ? null : (string)command.Parameters["@RegisterName"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_lat					 = Convert.IsDBNull(command.Parameters["@Lat"].Value) ? (double?)null : (double?)command.Parameters["@Lat"].Value;
				_lng					 = Convert.IsDBNull(command.Parameters["@Lng"].Value) ? (double?)null : (double?)command.Parameters["@Lng"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_visitDay					 = Convert.IsDBNull(command.Parameters["@VisitDay"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VisitDay"].Value;
				_fromTime					 = Convert.IsDBNull(command.Parameters["@FromTime"].Value) ? null : (string)command.Parameters["@FromTime"].Value;
				_toTime					 = Convert.IsDBNull(command.Parameters["@ToTime"].Value) ? null : (string)command.Parameters["@ToTime"].Value;
				_registerStatusId					 = Convert.IsDBNull(command.Parameters["@RegisterStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegisterStatusId"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Register
		///</Summary>
		///<returns>
		///IList-DAORegister.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAORegister> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Register");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORegister> objList = new List<DAORegister>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORegister retObj = new DAORegister();
						retObj._registerId					 = Convert.IsDBNull(row["RegisterId"]) ? (Int64?)null : (Int64?)row["RegisterId"];
						retObj._registerType					 = Convert.IsDBNull(row["RegisterType"]) ? (Int32?)null : (Int32?)row["RegisterType"];
						retObj._registerName					 = Convert.IsDBNull(row["RegisterName"]) ? null : (string)row["RegisterName"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._visitDay					 = Convert.IsDBNull(row["VisitDay"]) ? (Int32?)null : (Int32?)row["VisitDay"];
						retObj._fromTime					 = Convert.IsDBNull(row["FromTime"]) ? null : (string)row["FromTime"];
						retObj._toTime					 = Convert.IsDBNull(row["ToTime"]) ? null : (string)row["ToTime"];
						retObj._registerStatusId					 = Convert.IsDBNull(row["RegisterStatusId"]) ? (Int32?)null : (Int32?)row["RegisterStatusId"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiRegister
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRegister_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Register");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "RegisterId", true) == 0) lst.Add(Convert.IsDBNull(row["RegisterId"]) ? (Int64?)null : (Int64?)row["RegisterId"]);
						if (string.Compare(projection.Member, "RegisterType", true) == 0) lst.Add(Convert.IsDBNull(row["RegisterType"]) ? (Int32?)null : (Int32?)row["RegisterType"]);
						if (string.Compare(projection.Member, "RegisterName", true) == 0) lst.Add(Convert.IsDBNull(row["RegisterName"]) ? null : (string)row["RegisterName"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "Lat", true) == 0) lst.Add(Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"]);
						if (string.Compare(projection.Member, "Lng", true) == 0) lst.Add(Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "VisitDay", true) == 0) lst.Add(Convert.IsDBNull(row["VisitDay"]) ? (Int32?)null : (Int32?)row["VisitDay"]);
						if (string.Compare(projection.Member, "FromTime", true) == 0) lst.Add(Convert.IsDBNull(row["FromTime"]) ? null : (string)row["FromTime"]);
						if (string.Compare(projection.Member, "ToTime", true) == 0) lst.Add(Convert.IsDBNull(row["ToTime"]) ? null : (string)row["ToTime"]);
						if (string.Compare(projection.Member, "RegisterStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["RegisterStatusId"]) ? (Int32?)null : (Int32?)row["RegisterStatusId"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Register
		///</Summary>
		///<returns>
		///IList-DAORegister.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAORegister> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRegister_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Register");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORegister> objList = new List<DAORegister>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORegister retObj = new DAORegister();
						retObj._registerId					 = Convert.IsDBNull(row["RegisterId"]) ? (Int64?)null : (Int64?)row["RegisterId"];
						retObj._registerType					 = Convert.IsDBNull(row["RegisterType"]) ? (Int32?)null : (Int32?)row["RegisterType"];
						retObj._registerName					 = Convert.IsDBNull(row["RegisterName"]) ? null : (string)row["RegisterName"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._visitDay					 = Convert.IsDBNull(row["VisitDay"]) ? (Int32?)null : (Int32?)row["VisitDay"];
						retObj._fromTime					 = Convert.IsDBNull(row["FromTime"]) ? null : (string)row["FromTime"];
						retObj._toTime					 = Convert.IsDBNull(row["ToTime"]) ? null : (string)row["ToTime"];
						retObj._registerStatusId					 = Convert.IsDBNull(row["RegisterStatusId"]) ? (Int32?)null : (Int32?)row["RegisterStatusId"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Register
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRegister_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Register based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRegister_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegisterId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_registerId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegisterType", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_registerType?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegisterName", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_registerName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lat", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lat?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lng", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lng?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NChar, 10, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VisitDay", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_visitDay?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FromTime", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fromTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ToTime", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_toTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegisterStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_registerStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_registerId					 = Convert.IsDBNull(command.Parameters["@RegisterId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RegisterId"].Value;
				_registerType					 = Convert.IsDBNull(command.Parameters["@RegisterType"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegisterType"].Value;
				_registerName					 = Convert.IsDBNull(command.Parameters["@RegisterName"].Value) ? null : (string)command.Parameters["@RegisterName"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_lat					 = Convert.IsDBNull(command.Parameters["@Lat"].Value) ? (double?)null : (double?)command.Parameters["@Lat"].Value;
				_lng					 = Convert.IsDBNull(command.Parameters["@Lng"].Value) ? (double?)null : (double?)command.Parameters["@Lng"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_visitDay					 = Convert.IsDBNull(command.Parameters["@VisitDay"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VisitDay"].Value;
				_fromTime					 = Convert.IsDBNull(command.Parameters["@FromTime"].Value) ? null : (string)command.Parameters["@FromTime"].Value;
				_toTime					 = Convert.IsDBNull(command.Parameters["@ToTime"].Value) ? null : (string)command.Parameters["@ToTime"].Value;
				_registerStatusId					 = Convert.IsDBNull(command.Parameters["@RegisterStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegisterStatusId"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? RegisterId
		{
			get
			{
				return _registerId;
			}
			set
			{
				_registerId = value;
			}
		}

		public Int32? RegisterType
		{
			get
			{
				return _registerType;
			}
			set
			{
				_registerType = value;
			}
		}

		public string RegisterName
		{
			get
			{
				return _registerName;
			}
			set
			{
				_registerName = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public double? Lat
		{
			get
			{
				return _lat;
			}
			set
			{
				_lat = value;
			}
		}

		public double? Lng
		{
			get
			{
				return _lng;
			}
			set
			{
				_lng = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public Int32? VisitDay
		{
			get
			{
				return _visitDay;
			}
			set
			{
				_visitDay = value;
			}
		}

		public string FromTime
		{
			get
			{
				return _fromTime;
			}
			set
			{
				_fromTime = value;
			}
		}

		public string ToTime
		{
			get
			{
				return _toTime;
			}
			set
			{
				_toTime = value;
			}
		}

		public Int32? RegisterStatusId
		{
			get
			{
				return _registerStatusId;
			}
			set
			{
				_registerStatusId = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprRegister_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[RegisterId]
			,[RegisterType]
			,[RegisterName]
			,[Phone]
			,[GovernerateId]
			,[CityId]
			,[Lat]
			,[Lng]
			,[Address]
			,[VisitDay]
			,[FromTime]
			,[ToTime]
			,[RegisterStatusId]
			,[EBy]
			,[EDate]
			FROM [dbo].[Register]
			WHERE 
			[RegisterId] = @RegisterId
			";

		internal static string ctprRegister_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Register]
			WHERE 
			[RegisterId] = @RegisterId
			";

		internal static string ctprRegister_SelectAllByGovernerateId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RegisterId]
			,[RegisterType]
			,[RegisterName]
			,[Phone]
			,[GovernerateId]
			,[CityId]
			,[Lat]
			,[Lng]
			,[Address]
			,[VisitDay]
			,[FromTime]
			,[ToTime]
			,[RegisterStatusId]
			,[EBy]
			,[EDate]
			FROM [dbo].[Register]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprRegister_SelectAllByGovernerateIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Register]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprRegister_DeleteAllByGovernerateId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Register]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprRegister_SelectAllByCityId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RegisterId]
			,[RegisterType]
			,[RegisterName]
			,[Phone]
			,[GovernerateId]
			,[CityId]
			,[Lat]
			,[Lng]
			,[Address]
			,[VisitDay]
			,[FromTime]
			,[ToTime]
			,[RegisterStatusId]
			,[EBy]
			,[EDate]
			FROM [dbo].[Register]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprRegister_SelectAllByCityIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Register]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprRegister_DeleteAllByCityId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Register]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprRegister_SelectAllByRegisterStatusId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RegisterId]
			,[RegisterType]
			,[RegisterName]
			,[Phone]
			,[GovernerateId]
			,[CityId]
			,[Lat]
			,[Lng]
			,[Address]
			,[VisitDay]
			,[FromTime]
			,[ToTime]
			,[RegisterStatusId]
			,[EBy]
			,[EDate]
			FROM [dbo].[Register]
			WHERE 
			[RegisterStatusId] = @RegisterStatusId OR ([RegisterStatusId] IS NULL AND @RegisterStatusId IS NULL)
			";

		internal static string ctprRegister_SelectAllByRegisterStatusIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Register]
			WHERE 
			[RegisterStatusId] = @RegisterStatusId OR ([RegisterStatusId] IS NULL AND @RegisterStatusId IS NULL)
			";

		internal static string ctprRegister_DeleteAllByRegisterStatusId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Register]
			WHERE 
			[RegisterStatusId] = @RegisterStatusId OR ([RegisterStatusId] IS NULL AND @RegisterStatusId IS NULL)
			";

		internal static string ctprRegister_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Register]
			(
			[RegisterType]
			,[RegisterName]
			,[Phone]
			,[GovernerateId]
			,[CityId]
			,[Lat]
			,[Lng]
			,[Address]
			,[VisitDay]
			,[FromTime]
			,[ToTime]
			,[RegisterStatusId]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@RegisterType
			,@RegisterName
			,@Phone
			,@GovernerateId
			,@CityId
			,@Lat
			,@Lng
			,@Address
			,@VisitDay
			,@FromTime
			,@ToTime
			,@RegisterStatusId
			,@EBy
			,@EDate
			)
			SELECT 
			@RegisterId = [RegisterId]
			,@RegisterType = [RegisterType]
			,@RegisterName = [RegisterName]
			,@Phone = [Phone]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@Lat = [Lat]
			,@Lng = [Lng]
			,@Address = [Address]
			,@VisitDay = [VisitDay]
			,@FromTime = [FromTime]
			,@ToTime = [ToTime]
			,@RegisterStatusId = [RegisterStatusId]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Register]
			WHERE 
			[RegisterId] = SCOPE_IDENTITY()
			";

		internal static string ctprRegister_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[RegisterId]
			,[RegisterType]
			,[RegisterName]
			,[Phone]
			,[GovernerateId]
			,[CityId]
			,[Lat]
			,[Lng]
			,[Address]
			,[VisitDay]
			,[FromTime]
			,[ToTime]
			,[RegisterStatusId]
			,[EBy]
			,[EDate]
			FROM [dbo].[Register]
			";

		internal static string ctprRegister_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Register]
			";

		internal static string ctprRegister_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Register]
			##CRITERIA##
			";

		internal static string ctprRegister_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[RegisterId]
			,[RegisterType]
			,[RegisterName]
			,[Phone]
			,[GovernerateId]
			,[CityId]
			,[Lat]
			,[Lng]
			,[Address]
			,[VisitDay]
			,[FromTime]
			,[ToTime]
			,[RegisterStatusId]
			,[EBy]
			,[EDate]
			FROM [dbo].[Register]
			##CRITERIA##
			";

		internal static string ctprRegister_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Register]
			##CRITERIA##
			";

		internal static string ctprRegister_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Register]
			SET
			[RegisterType] = @RegisterType
			,[RegisterName] = @RegisterName
			,[Phone] = @Phone
			,[GovernerateId] = @GovernerateId
			,[CityId] = @CityId
			,[Lat] = @Lat
			,[Lng] = @Lng
			,[Address] = @Address
			,[VisitDay] = @VisitDay
			,[FromTime] = @FromTime
			,[ToTime] = @ToTime
			,[RegisterStatusId] = @RegisterStatusId
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[RegisterId] = @RegisterId
			SELECT 
			@RegisterId = [RegisterId]
			,@RegisterType = [RegisterType]
			,@RegisterName = [RegisterName]
			,@Phone = [Phone]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@Lat = [Lat]
			,@Lng = [Lng]
			,@Address = [Address]
			,@VisitDay = [VisitDay]
			,@FromTime = [FromTime]
			,@ToTime = [ToTime]
			,@RegisterStatusId = [RegisterStatusId]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Register]
			WHERE 
			[RegisterId] = @RegisterId
			";

	}
}
#endregion
