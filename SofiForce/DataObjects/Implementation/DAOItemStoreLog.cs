/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOItemStoreLog : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _logId;
		protected DateTime? _logDate;
		protected Int32? _itemId;
		protected Int32? _branchId;
		protected Int32? _storeId;
		protected Int32? _quantity;
		protected Int32? _onHand;
		protected DateTime? _expireDate;
		protected string _batchNo;
		protected bool? _isActive;
		#endregion

		#region class methods
		public DAOItemStoreLog()
		{
		}
		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Item_Store_Log
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_Store_Log_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LogId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _logId));
				command.Parameters.Add(CtSqlParameter.Get("@LogDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_logDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_storeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quantity", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_quantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OnHand", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_onHand?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExpireDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_expireDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BatchNo", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_batchNo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_logId					 = Convert.IsDBNull(command.Parameters["@LogId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@LogId"].Value;
				_logDate					 = Convert.IsDBNull(command.Parameters["@LogDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@LogDate"].Value;
				_itemId					 = Convert.IsDBNull(command.Parameters["@ItemId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_storeId					 = Convert.IsDBNull(command.Parameters["@StoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreId"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["@Quantity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Quantity"].Value;
				_onHand					 = Convert.IsDBNull(command.Parameters["@OnHand"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OnHand"].Value;
				_expireDate					 = Convert.IsDBNull(command.Parameters["@ExpireDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ExpireDate"].Value;
				_batchNo					 = Convert.IsDBNull(command.Parameters["@BatchNo"].Value) ? null : (string)command.Parameters["@BatchNo"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Item_Store_Log
		///</Summary>
		///<returns>
		///IList-DAOItemStoreLog.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOItemStoreLog> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_Store_Log_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item_Store_Log");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItemStoreLog> objList = new List<DAOItemStoreLog>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItemStoreLog retObj = new DAOItemStoreLog();
						retObj._logId					 = Convert.IsDBNull(row["LogId"]) ? (Int32?)null : (Int32?)row["LogId"];
						retObj._logDate					 = Convert.IsDBNull(row["LogDate"]) ? (DateTime?)null : (DateTime?)row["LogDate"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._onHand					 = Convert.IsDBNull(row["OnHand"]) ? (Int32?)null : (Int32?)row["OnHand"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_Store_Log_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiItem_Store_Log
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_Store_Log_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item_Store_Log");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "LogId", true) == 0) lst.Add(Convert.IsDBNull(row["LogId"]) ? (Int32?)null : (Int32?)row["LogId"]);
						if (string.Compare(projection.Member, "LogDate", true) == 0) lst.Add(Convert.IsDBNull(row["LogDate"]) ? (DateTime?)null : (DateTime?)row["LogDate"]);
						if (string.Compare(projection.Member, "ItemId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "StoreId", true) == 0) lst.Add(Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"]);
						if (string.Compare(projection.Member, "Quantity", true) == 0) lst.Add(Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"]);
						if (string.Compare(projection.Member, "OnHand", true) == 0) lst.Add(Convert.IsDBNull(row["OnHand"]) ? (Int32?)null : (Int32?)row["OnHand"]);
						if (string.Compare(projection.Member, "ExpireDate", true) == 0) lst.Add(Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"]);
						if (string.Compare(projection.Member, "BatchNo", true) == 0) lst.Add(Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Item_Store_Log
		///</Summary>
		///<returns>
		///IList-DAOItemStoreLog.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOItemStoreLog> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_Store_Log_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item_Store_Log");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItemStoreLog> objList = new List<DAOItemStoreLog>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItemStoreLog retObj = new DAOItemStoreLog();
						retObj._logId					 = Convert.IsDBNull(row["LogId"]) ? (Int32?)null : (Int32?)row["LogId"];
						retObj._logDate					 = Convert.IsDBNull(row["LogDate"]) ? (DateTime?)null : (DateTime?)row["LogDate"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._onHand					 = Convert.IsDBNull(row["OnHand"]) ? (Int32?)null : (Int32?)row["OnHand"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._batchNo					 = Convert.IsDBNull(row["BatchNo"]) ? null : (string)row["BatchNo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Item_Store_Log
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_Store_Log_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? LogId
		{
			get
			{
				return _logId;
			}
			set
			{
				_logId = value;
			}
		}

		public DateTime? LogDate
		{
			get
			{
				return _logDate;
			}
			set
			{
				_logDate = value;
			}
		}

		public Int32? ItemId
		{
			get
			{
				return _itemId;
			}
			set
			{
				_itemId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? StoreId
		{
			get
			{
				return _storeId;
			}
			set
			{
				_storeId = value;
			}
		}

		public Int32? Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity = value;
			}
		}

		public Int32? OnHand
		{
			get
			{
				return _onHand;
			}
			set
			{
				_onHand = value;
			}
		}

		public DateTime? ExpireDate
		{
			get
			{
				return _expireDate;
			}
			set
			{
				_expireDate = value;
			}
		}

		public string BatchNo
		{
			get
			{
				return _batchNo;
			}
			set
			{
				_batchNo = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprItem_Store_Log_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Item_Store_Log]
			(
			[LogDate]
			,[ItemId]
			,[BranchId]
			,[StoreId]
			,[Quantity]
			,[OnHand]
			,[ExpireDate]
			,[BatchNo]
			,[IsActive]
			)
			VALUES
			(
			@LogDate
			,@ItemId
			,@BranchId
			,@StoreId
			,@Quantity
			,@OnHand
			,@ExpireDate
			,@BatchNo
			,@IsActive
			)
			SELECT 
			@LogId = [LogId]
			,@LogDate = [LogDate]
			,@ItemId = [ItemId]
			,@BranchId = [BranchId]
			,@StoreId = [StoreId]
			,@Quantity = [Quantity]
			,@OnHand = [OnHand]
			,@ExpireDate = [ExpireDate]
			,@BatchNo = [BatchNo]
			,@IsActive = [IsActive]
			FROM [dbo].[Item_Store_Log]
			WHERE 
			[LogId] = SCOPE_IDENTITY()
			";

		internal static string ctprItem_Store_Log_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[LogId]
			,[LogDate]
			,[ItemId]
			,[BranchId]
			,[StoreId]
			,[Quantity]
			,[OnHand]
			,[ExpireDate]
			,[BatchNo]
			,[IsActive]
			FROM [dbo].[Item_Store_Log]
			";

		internal static string ctprItem_Store_Log_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Item_Store_Log]
			";

		internal static string ctprItem_Store_Log_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Item_Store_Log]
			##CRITERIA##
			";

		internal static string ctprItem_Store_Log_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[LogId]
			,[LogDate]
			,[ItemId]
			,[BranchId]
			,[StoreId]
			,[Quantity]
			,[OnHand]
			,[ExpireDate]
			,[BatchNo]
			,[IsActive]
			FROM [dbo].[Item_Store_Log]
			##CRITERIA##
			";

		internal static string ctprItem_Store_Log_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Item_Store_Log]
			##CRITERIA##
			";

	}
}
#endregion
