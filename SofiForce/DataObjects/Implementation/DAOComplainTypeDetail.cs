/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOComplainTypeDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _complainTypeDetailId;
		protected Int32? _complainTypeId;
		protected string _complainTypeDetailCode;
		protected string _complainTypeDetailNameAr;
		protected string _complainTypeDetailNameEn;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOComplainTypeDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table ComplainTypeDetail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOComplainTypeDetail
		///</returns>
		///<parameters>
		///Int32? complainTypeDetailId
		///</parameters>
		public static DAOComplainTypeDetail SelectOne(Int32? complainTypeDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComplainTypeDetail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)complainTypeDetailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOComplainTypeDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOComplainTypeDetail();
					retObj._complainTypeDetailId					 = Convert.IsDBNull(dt.Rows[0]["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ComplainTypeDetailId"];
					retObj._complainTypeId					 = Convert.IsDBNull(dt.Rows[0]["ComplainTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ComplainTypeId"];
					retObj._complainTypeDetailCode					 = Convert.IsDBNull(dt.Rows[0]["ComplainTypeDetailCode"]) ? null : (string)dt.Rows[0]["ComplainTypeDetailCode"];
					retObj._complainTypeDetailNameAr					 = Convert.IsDBNull(dt.Rows[0]["ComplainTypeDetailNameAr"]) ? null : (string)dt.Rows[0]["ComplainTypeDetailNameAr"];
					retObj._complainTypeDetailNameEn					 = Convert.IsDBNull(dt.Rows[0]["ComplainTypeDetailNameEn"]) ? null : (string)dt.Rows[0]["ComplainTypeDetailNameEn"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._canEdit					 = Convert.IsDBNull(dt.Rows[0]["CanEdit"]) ? (bool?)null : (bool?)dt.Rows[0]["CanEdit"];
					retObj._canDelete					 = Convert.IsDBNull(dt.Rows[0]["CanDelete"]) ? (bool?)null : (bool?)dt.Rows[0]["CanDelete"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["Color"]) ? null : (string)dt.Rows[0]["Color"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["Icon"]) ? null : (string)dt.Rows[0]["Icon"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table ComplainTypeDetail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table ComplainTypeDetail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOComplainTypeDetail.
		///</returns>
		///<parameters>
		///Int32? complainTypeId
		///</parameters>
		public static IList<DAOComplainTypeDetail> SelectAllByComplainTypeId(Int32? complainTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_SelectAllByComplainTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComplainTypeDetail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)complainTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOComplainTypeDetail> objList = new List<DAOComplainTypeDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOComplainTypeDetail retObj = new DAOComplainTypeDetail();
						retObj._complainTypeDetailId					 = Convert.IsDBNull(row["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)row["ComplainTypeDetailId"];
						retObj._complainTypeId					 = Convert.IsDBNull(row["ComplainTypeId"]) ? (Int32?)null : (Int32?)row["ComplainTypeId"];
						retObj._complainTypeDetailCode					 = Convert.IsDBNull(row["ComplainTypeDetailCode"]) ? null : (string)row["ComplainTypeDetailCode"];
						retObj._complainTypeDetailNameAr					 = Convert.IsDBNull(row["ComplainTypeDetailNameAr"]) ? null : (string)row["ComplainTypeDetailNameAr"];
						retObj._complainTypeDetailNameEn					 = Convert.IsDBNull(row["ComplainTypeDetailNameEn"]) ? null : (string)row["ComplainTypeDetailNameEn"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? complainTypeId
		///</parameters>
		public static Int32 SelectAllByComplainTypeIdCount(Int32? complainTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_SelectAllByComplainTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)complainTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table ComplainTypeDetail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? complainTypeId
		///</parameters>
		public static void DeleteAllByComplainTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? complainTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_DeleteAllByComplainTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)complainTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table ComplainTypeDetail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _complainTypeDetailId));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_complainTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_complainTypeDetailId					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComplainTypeDetailId"].Value;
				_complainTypeId					 = Convert.IsDBNull(command.Parameters["@ComplainTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComplainTypeId"].Value;
				_complainTypeDetailCode					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailCode"].Value) ? null : (string)command.Parameters["@ComplainTypeDetailCode"].Value;
				_complainTypeDetailNameAr					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailNameAr"].Value) ? null : (string)command.Parameters["@ComplainTypeDetailNameAr"].Value;
				_complainTypeDetailNameEn					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailNameEn"].Value) ? null : (string)command.Parameters["@ComplainTypeDetailNameEn"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table ComplainTypeDetail
		///</Summary>
		///<returns>
		///IList-DAOComplainTypeDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOComplainTypeDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComplainTypeDetail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOComplainTypeDetail> objList = new List<DAOComplainTypeDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOComplainTypeDetail retObj = new DAOComplainTypeDetail();
						retObj._complainTypeDetailId					 = Convert.IsDBNull(row["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)row["ComplainTypeDetailId"];
						retObj._complainTypeId					 = Convert.IsDBNull(row["ComplainTypeId"]) ? (Int32?)null : (Int32?)row["ComplainTypeId"];
						retObj._complainTypeDetailCode					 = Convert.IsDBNull(row["ComplainTypeDetailCode"]) ? null : (string)row["ComplainTypeDetailCode"];
						retObj._complainTypeDetailNameAr					 = Convert.IsDBNull(row["ComplainTypeDetailNameAr"]) ? null : (string)row["ComplainTypeDetailNameAr"];
						retObj._complainTypeDetailNameEn					 = Convert.IsDBNull(row["ComplainTypeDetailNameEn"]) ? null : (string)row["ComplainTypeDetailNameEn"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiComplainTypeDetail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprComplainTypeDetail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComplainTypeDetail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ComplainTypeDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)row["ComplainTypeDetailId"]);
						if (string.Compare(projection.Member, "ComplainTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeId"]) ? (Int32?)null : (Int32?)row["ComplainTypeId"]);
						if (string.Compare(projection.Member, "ComplainTypeDetailCode", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeDetailCode"]) ? null : (string)row["ComplainTypeDetailCode"]);
						if (string.Compare(projection.Member, "ComplainTypeDetailNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeDetailNameAr"]) ? null : (string)row["ComplainTypeDetailNameAr"]);
						if (string.Compare(projection.Member, "ComplainTypeDetailNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeDetailNameEn"]) ? null : (string)row["ComplainTypeDetailNameEn"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api ComplainTypeDetail
		///</Summary>
		///<returns>
		///IList-DAOComplainTypeDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOComplainTypeDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprComplainTypeDetail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComplainTypeDetail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOComplainTypeDetail> objList = new List<DAOComplainTypeDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOComplainTypeDetail retObj = new DAOComplainTypeDetail();
						retObj._complainTypeDetailId					 = Convert.IsDBNull(row["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)row["ComplainTypeDetailId"];
						retObj._complainTypeId					 = Convert.IsDBNull(row["ComplainTypeId"]) ? (Int32?)null : (Int32?)row["ComplainTypeId"];
						retObj._complainTypeDetailCode					 = Convert.IsDBNull(row["ComplainTypeDetailCode"]) ? null : (string)row["ComplainTypeDetailCode"];
						retObj._complainTypeDetailNameAr					 = Convert.IsDBNull(row["ComplainTypeDetailNameAr"]) ? null : (string)row["ComplainTypeDetailNameAr"];
						retObj._complainTypeDetailNameEn					 = Convert.IsDBNull(row["ComplainTypeDetailNameEn"]) ? null : (string)row["ComplainTypeDetailNameEn"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api ComplainTypeDetail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprComplainTypeDetail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table ComplainTypeDetail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComplainTypeDetail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_complainTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ComplainTypeDetailNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_complainTypeDetailNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_complainTypeDetailId					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComplainTypeDetailId"].Value;
				_complainTypeId					 = Convert.IsDBNull(command.Parameters["@ComplainTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ComplainTypeId"].Value;
				_complainTypeDetailCode					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailCode"].Value) ? null : (string)command.Parameters["@ComplainTypeDetailCode"].Value;
				_complainTypeDetailNameAr					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailNameAr"].Value) ? null : (string)command.Parameters["@ComplainTypeDetailNameAr"].Value;
				_complainTypeDetailNameEn					 = Convert.IsDBNull(command.Parameters["@ComplainTypeDetailNameEn"].Value) ? null : (string)command.Parameters["@ComplainTypeDetailNameEn"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ComplainTypeDetailId
		{
			get
			{
				return _complainTypeDetailId;
			}
			set
			{
				_complainTypeDetailId = value;
			}
		}

		public Int32? ComplainTypeId
		{
			get
			{
				return _complainTypeId;
			}
			set
			{
				_complainTypeId = value;
			}
		}

		public string ComplainTypeDetailCode
		{
			get
			{
				return _complainTypeDetailCode;
			}
			set
			{
				_complainTypeDetailCode = value;
			}
		}

		public string ComplainTypeDetailNameAr
		{
			get
			{
				return _complainTypeDetailNameAr;
			}
			set
			{
				_complainTypeDetailNameAr = value;
			}
		}

		public string ComplainTypeDetailNameEn
		{
			get
			{
				return _complainTypeDetailNameEn;
			}
			set
			{
				_complainTypeDetailNameEn = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprComplainTypeDetail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ComplainTypeDetailId]
			,[ComplainTypeId]
			,[ComplainTypeDetailCode]
			,[ComplainTypeDetailNameAr]
			,[ComplainTypeDetailNameEn]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[ComplainTypeDetail]
			WHERE 
			[ComplainTypeDetailId] = @ComplainTypeDetailId
			";

		internal static string ctprComplainTypeDetail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[ComplainTypeDetail]
			WHERE 
			[ComplainTypeDetailId] = @ComplainTypeDetailId
			";

		internal static string ctprComplainTypeDetail_SelectAllByComplainTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ComplainTypeDetailId]
			,[ComplainTypeId]
			,[ComplainTypeDetailCode]
			,[ComplainTypeDetailNameAr]
			,[ComplainTypeDetailNameEn]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[ComplainTypeDetail]
			WHERE 
			[ComplainTypeId] = @ComplainTypeId OR ([ComplainTypeId] IS NULL AND @ComplainTypeId IS NULL)
			";

		internal static string ctprComplainTypeDetail_SelectAllByComplainTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[ComplainTypeDetail]
			WHERE 
			[ComplainTypeId] = @ComplainTypeId OR ([ComplainTypeId] IS NULL AND @ComplainTypeId IS NULL)
			";

		internal static string ctprComplainTypeDetail_DeleteAllByComplainTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[ComplainTypeDetail]
			WHERE 
			[ComplainTypeId] = @ComplainTypeId OR ([ComplainTypeId] IS NULL AND @ComplainTypeId IS NULL)
			";

		internal static string ctprComplainTypeDetail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[ComplainTypeDetail]
			(
			[ComplainTypeId]
			,[ComplainTypeDetailCode]
			,[ComplainTypeDetailNameAr]
			,[ComplainTypeDetailNameEn]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@ComplainTypeId
			,@ComplainTypeDetailCode
			,@ComplainTypeDetailNameAr
			,@ComplainTypeDetailNameEn
			,@IsActive
			,@CanEdit
			,@CanDelete
			,@DisplayOrder
			,@Color
			,@Icon
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@ComplainTypeDetailId = [ComplainTypeDetailId]
			,@ComplainTypeId = [ComplainTypeId]
			,@ComplainTypeDetailCode = [ComplainTypeDetailCode]
			,@ComplainTypeDetailNameAr = [ComplainTypeDetailNameAr]
			,@ComplainTypeDetailNameEn = [ComplainTypeDetailNameEn]
			,@IsActive = [IsActive]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@DisplayOrder = [DisplayOrder]
			,@Color = [Color]
			,@Icon = [Icon]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[ComplainTypeDetail]
			WHERE 
			[ComplainTypeDetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprComplainTypeDetail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ComplainTypeDetailId]
			,[ComplainTypeId]
			,[ComplainTypeDetailCode]
			,[ComplainTypeDetailNameAr]
			,[ComplainTypeDetailNameEn]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[ComplainTypeDetail]
			";

		internal static string ctprComplainTypeDetail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[ComplainTypeDetail]
			";

		internal static string ctprComplainTypeDetail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[ComplainTypeDetail]
			##CRITERIA##
			";

		internal static string ctprComplainTypeDetail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ComplainTypeDetailId]
			,[ComplainTypeId]
			,[ComplainTypeDetailCode]
			,[ComplainTypeDetailNameAr]
			,[ComplainTypeDetailNameEn]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[ComplainTypeDetail]
			##CRITERIA##
			";

		internal static string ctprComplainTypeDetail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[ComplainTypeDetail]
			##CRITERIA##
			";

		internal static string ctprComplainTypeDetail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[ComplainTypeDetail]
			SET
			[ComplainTypeId] = @ComplainTypeId
			,[ComplainTypeDetailCode] = @ComplainTypeDetailCode
			,[ComplainTypeDetailNameAr] = @ComplainTypeDetailNameAr
			,[ComplainTypeDetailNameEn] = @ComplainTypeDetailNameEn
			,[IsActive] = @IsActive
			,[CanEdit] = @CanEdit
			,[CanDelete] = @CanDelete
			,[DisplayOrder] = @DisplayOrder
			,[Color] = @Color
			,[Icon] = @Icon
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[ComplainTypeDetailId] = @ComplainTypeDetailId
			SELECT 
			@ComplainTypeDetailId = [ComplainTypeDetailId]
			,@ComplainTypeId = [ComplainTypeId]
			,@ComplainTypeDetailCode = [ComplainTypeDetailCode]
			,@ComplainTypeDetailNameAr = [ComplainTypeDetailNameAr]
			,@ComplainTypeDetailNameEn = [ComplainTypeDetailNameEn]
			,@IsActive = [IsActive]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@DisplayOrder = [DisplayOrder]
			,@Color = [Color]
			,@Icon = [Icon]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[ComplainTypeDetail]
			WHERE 
			[ComplainTypeDetailId] = @ComplainTypeDetailId
			";

	}
}
#endregion
