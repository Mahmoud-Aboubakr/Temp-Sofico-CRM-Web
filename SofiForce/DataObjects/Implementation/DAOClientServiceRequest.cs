/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientServiceRequest : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _requestId;
		protected string _requestCode;
		protected Int32? _branchId;
		protected Int32? _representativeId;
		protected Int32? _clientId;
		protected DateTime? _requestDate;
		protected DateTime? _requestTime;
		protected Int32? _requestTypeId;
		protected Int32? _requestTypeDetailId;
		protected string _phone;
		protected string _phoneAlternative;
		protected Int32? _priorityId;
		protected Int32? _requestStatusId;
		protected bool? _isClosed;
		protected DateTime? _closeDate;
		protected Int32? _duration;
		protected double? _latitude;
		protected double? _longitude;
		protected bool? _inZone;
		protected double? _distance;
		protected string _notes;
		protected Int32? _departmentId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _replay;
		protected string _requestTitle;
		#endregion

		#region class methods
		public DAOClientServiceRequest()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_ServiceRequest based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientServiceRequest
		///</returns>
		///<parameters>
		///Int64? requestId
		///</parameters>
		public static DAOClientServiceRequest SelectOne(Int64? requestId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)requestId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientServiceRequest retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientServiceRequest();
					retObj._requestId					 = Convert.IsDBNull(dt.Rows[0]["RequestId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RequestId"];
					retObj._requestCode					 = Convert.IsDBNull(dt.Rows[0]["RequestCode"]) ? null : (string)dt.Rows[0]["RequestCode"];
					retObj._branchId					 = Convert.IsDBNull(dt.Rows[0]["BranchId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BranchId"];
					retObj._representativeId					 = Convert.IsDBNull(dt.Rows[0]["RepresentativeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RepresentativeId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._requestDate					 = Convert.IsDBNull(dt.Rows[0]["RequestDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["RequestDate"];
					retObj._requestTime					 = Convert.IsDBNull(dt.Rows[0]["RequestTime"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["RequestTime"];
					retObj._requestTypeId					 = Convert.IsDBNull(dt.Rows[0]["RequestTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RequestTypeId"];
					retObj._requestTypeDetailId					 = Convert.IsDBNull(dt.Rows[0]["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RequestTypeDetailId"];
					retObj._phone					 = Convert.IsDBNull(dt.Rows[0]["Phone"]) ? null : (string)dt.Rows[0]["Phone"];
					retObj._phoneAlternative					 = Convert.IsDBNull(dt.Rows[0]["PhoneAlternative"]) ? null : (string)dt.Rows[0]["PhoneAlternative"];
					retObj._priorityId					 = Convert.IsDBNull(dt.Rows[0]["PriorityId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PriorityId"];
					retObj._requestStatusId					 = Convert.IsDBNull(dt.Rows[0]["RequestStatusId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RequestStatusId"];
					retObj._isClosed					 = Convert.IsDBNull(dt.Rows[0]["IsClosed"]) ? (bool?)null : (bool?)dt.Rows[0]["IsClosed"];
					retObj._closeDate					 = Convert.IsDBNull(dt.Rows[0]["CloseDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CloseDate"];
					retObj._duration					 = Convert.IsDBNull(dt.Rows[0]["Duration"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Duration"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._inZone					 = Convert.IsDBNull(dt.Rows[0]["InZone"]) ? (bool?)null : (bool?)dt.Rows[0]["InZone"];
					retObj._distance					 = Convert.IsDBNull(dt.Rows[0]["Distance"]) ? (double?)null : (double?)dt.Rows[0]["Distance"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
					retObj._departmentId					 = Convert.IsDBNull(dt.Rows[0]["DepartmentId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DepartmentId"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._replay					 = Convert.IsDBNull(dt.Rows[0]["Replay"]) ? null : (string)dt.Rows[0]["Replay"];
					retObj._requestTitle					 = Convert.IsDBNull(dt.Rows[0]["RequestTitle"]) ? null : (string)dt.Rows[0]["RequestTitle"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_ServiceRequest based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_requestId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByBranchId(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByBranchId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static Int32 SelectAllByBranchIdCount(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByBranchIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId
		///</parameters>
		public static void DeleteAllByBranchId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByBranchId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByRepresentativeId(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static Int32 SelectAllByRepresentativeIdCount(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRepresentativeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId
		///</parameters>
		public static void DeleteAllByRepresentativeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? requestTypeId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByRequestTypeId(Int32? requestTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRequestTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? requestTypeId
		///</parameters>
		public static Int32 SelectAllByRequestTypeIdCount(Int32? requestTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRequestTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestTypeId
		///</parameters>
		public static void DeleteAllByRequestTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByRequestTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? requestTypeDetailId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByRequestTypeDetailId(Int32? requestTypeDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRequestTypeDetailId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeDetailId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestTypeDetailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? requestTypeDetailId
		///</parameters>
		public static Int32 SelectAllByRequestTypeDetailIdCount(Int32? requestTypeDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRequestTypeDetailIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeDetailId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestTypeDetailId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestTypeDetailId
		///</parameters>
		public static void DeleteAllByRequestTypeDetailId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestTypeDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByRequestTypeDetailId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeDetailId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestTypeDetailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? priorityId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByPriorityId(Int32? priorityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByPriorityId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? priorityId
		///</parameters>
		public static Int32 SelectAllByPriorityIdCount(Int32? priorityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByPriorityIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? priorityId
		///</parameters>
		public static void DeleteAllByPriorityId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? priorityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByPriorityId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? requestStatusId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByRequestStatusId(Int32? requestStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRequestStatusId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? requestStatusId
		///</parameters>
		public static Int32 SelectAllByRequestStatusIdCount(Int32? requestStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByRequestStatusIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestStatusId
		///</parameters>
		public static void DeleteAllByRequestStatusId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByRequestStatusId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestStatusId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///Int32? departmentId
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByDepartmentId(Int32? departmentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByDepartmentId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DepartmentId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)departmentId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? departmentId
		///</parameters>
		public static Int32 SelectAllByDepartmentIdCount(Int32? departmentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllByDepartmentIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DepartmentId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)departmentId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? departmentId
		///</parameters>
		public static void DeleteAllByDepartmentId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? departmentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_DeleteAllByDepartmentId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DepartmentId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)departmentId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_ServiceRequest
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _requestId));
				command.Parameters.Add(CtSqlParameter.Get("@RequestCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeDetailId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestTypeDetailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneAlternative", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phoneAlternative?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priorityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsClosed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isClosed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CloseDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_closeDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Duration", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_duration?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DepartmentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_departmentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Replay", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_replay?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTitle", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestTitle?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_requestId					 = Convert.IsDBNull(command.Parameters["@RequestId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RequestId"].Value;
				_requestCode					 = Convert.IsDBNull(command.Parameters["@RequestCode"].Value) ? null : (string)command.Parameters["@RequestCode"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_requestDate					 = Convert.IsDBNull(command.Parameters["@RequestDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@RequestDate"].Value;
				_requestTime					 = Convert.IsDBNull(command.Parameters["@RequestTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@RequestTime"].Value;
				_requestTypeId					 = Convert.IsDBNull(command.Parameters["@RequestTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestTypeId"].Value;
				_requestTypeDetailId					 = Convert.IsDBNull(command.Parameters["@RequestTypeDetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestTypeDetailId"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_phoneAlternative					 = Convert.IsDBNull(command.Parameters["@PhoneAlternative"].Value) ? null : (string)command.Parameters["@PhoneAlternative"].Value;
				_priorityId					 = Convert.IsDBNull(command.Parameters["@PriorityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PriorityId"].Value;
				_requestStatusId					 = Convert.IsDBNull(command.Parameters["@RequestStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestStatusId"].Value;
				_isClosed					 = Convert.IsDBNull(command.Parameters["@IsClosed"].Value) ? (bool?)null : (bool?)command.Parameters["@IsClosed"].Value;
				_closeDate					 = Convert.IsDBNull(command.Parameters["@CloseDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CloseDate"].Value;
				_duration					 = Convert.IsDBNull(command.Parameters["@Duration"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Duration"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (double?)null : (double?)command.Parameters["@Distance"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_departmentId					 = Convert.IsDBNull(command.Parameters["@DepartmentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DepartmentId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_replay					 = Convert.IsDBNull(command.Parameters["@Replay"].Value) ? null : (string)command.Parameters["@Replay"].Value;
				_requestTitle					 = Convert.IsDBNull(command.Parameters["@RequestTitle"].Value) ? null : (string)command.Parameters["@RequestTitle"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_ServiceRequest
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_ServiceRequest
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequest_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "RequestId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"]);
						if (string.Compare(projection.Member, "RequestCode", true) == 0) lst.Add(Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "RequestDate", true) == 0) lst.Add(Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"]);
						if (string.Compare(projection.Member, "RequestTime", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"]);
						if (string.Compare(projection.Member, "RequestTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"]);
						if (string.Compare(projection.Member, "RequestTypeDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "PhoneAlternative", true) == 0) lst.Add(Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"]);
						if (string.Compare(projection.Member, "PriorityId", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"]);
						if (string.Compare(projection.Member, "RequestStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"]);
						if (string.Compare(projection.Member, "IsClosed", true) == 0) lst.Add(Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"]);
						if (string.Compare(projection.Member, "CloseDate", true) == 0) lst.Add(Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"]);
						if (string.Compare(projection.Member, "Duration", true) == 0) lst.Add(Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "DepartmentId", true) == 0) lst.Add(Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "Replay", true) == 0) lst.Add(Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"]);
						if (string.Compare(projection.Member, "RequestTitle", true) == 0) lst.Add(Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_ServiceRequest
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequest.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientServiceRequest> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequest_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequest> objList = new List<DAOClientServiceRequest>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequest retObj = new DAOClientServiceRequest();
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestCode					 = Convert.IsDBNull(row["RequestCode"]) ? null : (string)row["RequestCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._requestDate					 = Convert.IsDBNull(row["RequestDate"]) ? (DateTime?)null : (DateTime?)row["RequestDate"];
						retObj._requestTime					 = Convert.IsDBNull(row["RequestTime"]) ? (DateTime?)null : (DateTime?)row["RequestTime"];
						retObj._requestTypeId					 = Convert.IsDBNull(row["RequestTypeId"]) ? (Int32?)null : (Int32?)row["RequestTypeId"];
						retObj._requestTypeDetailId					 = Convert.IsDBNull(row["RequestTypeDetailId"]) ? (Int32?)null : (Int32?)row["RequestTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._replay					 = Convert.IsDBNull(row["Replay"]) ? null : (string)row["Replay"];
						retObj._requestTitle					 = Convert.IsDBNull(row["RequestTitle"]) ? null : (string)row["RequestTitle"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_ServiceRequest
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequest_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_ServiceRequest based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_requestId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTypeDetailId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestTypeDetailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneAlternative", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phoneAlternative?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priorityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsClosed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isClosed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CloseDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_closeDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Duration", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_duration?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DepartmentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_departmentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Replay", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_replay?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestTitle", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requestTitle?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_requestId					 = Convert.IsDBNull(command.Parameters["@RequestId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RequestId"].Value;
				_requestCode					 = Convert.IsDBNull(command.Parameters["@RequestCode"].Value) ? null : (string)command.Parameters["@RequestCode"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_requestDate					 = Convert.IsDBNull(command.Parameters["@RequestDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@RequestDate"].Value;
				_requestTime					 = Convert.IsDBNull(command.Parameters["@RequestTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@RequestTime"].Value;
				_requestTypeId					 = Convert.IsDBNull(command.Parameters["@RequestTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestTypeId"].Value;
				_requestTypeDetailId					 = Convert.IsDBNull(command.Parameters["@RequestTypeDetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestTypeDetailId"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_phoneAlternative					 = Convert.IsDBNull(command.Parameters["@PhoneAlternative"].Value) ? null : (string)command.Parameters["@PhoneAlternative"].Value;
				_priorityId					 = Convert.IsDBNull(command.Parameters["@PriorityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PriorityId"].Value;
				_requestStatusId					 = Convert.IsDBNull(command.Parameters["@RequestStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestStatusId"].Value;
				_isClosed					 = Convert.IsDBNull(command.Parameters["@IsClosed"].Value) ? (bool?)null : (bool?)command.Parameters["@IsClosed"].Value;
				_closeDate					 = Convert.IsDBNull(command.Parameters["@CloseDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CloseDate"].Value;
				_duration					 = Convert.IsDBNull(command.Parameters["@Duration"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Duration"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (double?)null : (double?)command.Parameters["@Distance"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_departmentId					 = Convert.IsDBNull(command.Parameters["@DepartmentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DepartmentId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_replay					 = Convert.IsDBNull(command.Parameters["@Replay"].Value) ? null : (string)command.Parameters["@Replay"].Value;
				_requestTitle					 = Convert.IsDBNull(command.Parameters["@RequestTitle"].Value) ? null : (string)command.Parameters["@RequestTitle"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? RequestId
		{
			get
			{
				return _requestId;
			}
			set
			{
				_requestId = value;
			}
		}

		public string RequestCode
		{
			get
			{
				return _requestCode;
			}
			set
			{
				_requestCode = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public DateTime? RequestDate
		{
			get
			{
				return _requestDate;
			}
			set
			{
				_requestDate = value;
			}
		}

		public DateTime? RequestTime
		{
			get
			{
				return _requestTime;
			}
			set
			{
				_requestTime = value;
			}
		}

		public Int32? RequestTypeId
		{
			get
			{
				return _requestTypeId;
			}
			set
			{
				_requestTypeId = value;
			}
		}

		public Int32? RequestTypeDetailId
		{
			get
			{
				return _requestTypeDetailId;
			}
			set
			{
				_requestTypeDetailId = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string PhoneAlternative
		{
			get
			{
				return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
			}
		}

		public Int32? PriorityId
		{
			get
			{
				return _priorityId;
			}
			set
			{
				_priorityId = value;
			}
		}

		public Int32? RequestStatusId
		{
			get
			{
				return _requestStatusId;
			}
			set
			{
				_requestStatusId = value;
			}
		}

		public bool? IsClosed
		{
			get
			{
				return _isClosed;
			}
			set
			{
				_isClosed = value;
			}
		}

		public DateTime? CloseDate
		{
			get
			{
				return _closeDate;
			}
			set
			{
				_closeDate = value;
			}
		}

		public Int32? Duration
		{
			get
			{
				return _duration;
			}
			set
			{
				_duration = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public double? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? DepartmentId
		{
			get
			{
				return _departmentId;
			}
			set
			{
				_departmentId = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public string Replay
		{
			get
			{
				return _replay;
			}
			set
			{
				_replay = value;
			}
		}

		public string RequestTitle
		{
			get
			{
				return _requestTitle;
			}
			set
			{
				_requestTitle = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_ServiceRequest_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestId] = @RequestId
			";

		internal static string ctprClient_ServiceRequest_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestId] = @RequestId
			";

		internal static string ctprClient_ServiceRequest_SelectAllByBranchId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByBranchIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByBranchId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRepresentativeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRepresentativeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByRepresentativeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRequestTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestTypeId] = @RequestTypeId OR ([RequestTypeId] IS NULL AND @RequestTypeId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRequestTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestTypeId] = @RequestTypeId OR ([RequestTypeId] IS NULL AND @RequestTypeId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByRequestTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestTypeId] = @RequestTypeId OR ([RequestTypeId] IS NULL AND @RequestTypeId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRequestTypeDetailId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestTypeDetailId] = @RequestTypeDetailId OR ([RequestTypeDetailId] IS NULL AND @RequestTypeDetailId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRequestTypeDetailIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestTypeDetailId] = @RequestTypeDetailId OR ([RequestTypeDetailId] IS NULL AND @RequestTypeDetailId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByRequestTypeDetailId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestTypeDetailId] = @RequestTypeDetailId OR ([RequestTypeDetailId] IS NULL AND @RequestTypeDetailId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByPriorityId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[PriorityId] = @PriorityId OR ([PriorityId] IS NULL AND @PriorityId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByPriorityIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[PriorityId] = @PriorityId OR ([PriorityId] IS NULL AND @PriorityId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByPriorityId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[PriorityId] = @PriorityId OR ([PriorityId] IS NULL AND @PriorityId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRequestStatusId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestStatusId] = @RequestStatusId OR ([RequestStatusId] IS NULL AND @RequestStatusId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByRequestStatusIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestStatusId] = @RequestStatusId OR ([RequestStatusId] IS NULL AND @RequestStatusId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByRequestStatusId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestStatusId] = @RequestStatusId OR ([RequestStatusId] IS NULL AND @RequestStatusId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByDepartmentId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[DepartmentId] = @DepartmentId OR ([DepartmentId] IS NULL AND @DepartmentId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_SelectAllByDepartmentIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[DepartmentId] = @DepartmentId OR ([DepartmentId] IS NULL AND @DepartmentId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_DeleteAllByDepartmentId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest]
			WHERE 
			[DepartmentId] = @DepartmentId OR ([DepartmentId] IS NULL AND @DepartmentId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_ServiceRequest]
			(
			[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			)
			VALUES
			(
			@RequestCode
			,@BranchId
			,@RepresentativeId
			,@ClientId
			,@RequestDate
			,@RequestTime
			,@RequestTypeId
			,@RequestTypeDetailId
			,@Phone
			,@PhoneAlternative
			,@PriorityId
			,@RequestStatusId
			,@IsClosed
			,@CloseDate
			,@Duration
			,@Latitude
			,@Longitude
			,@InZone
			,@Distance
			,@Notes
			,@DepartmentId
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@Replay
			,@RequestTitle
			)
			SELECT 
			@RequestId = [RequestId]
			,@RequestCode = [RequestCode]
			,@BranchId = [BranchId]
			,@RepresentativeId = [RepresentativeId]
			,@ClientId = [ClientId]
			,@RequestDate = [RequestDate]
			,@RequestTime = [RequestTime]
			,@RequestTypeId = [RequestTypeId]
			,@RequestTypeDetailId = [RequestTypeDetailId]
			,@Phone = [Phone]
			,@PhoneAlternative = [PhoneAlternative]
			,@PriorityId = [PriorityId]
			,@RequestStatusId = [RequestStatusId]
			,@IsClosed = [IsClosed]
			,@CloseDate = [CloseDate]
			,@Duration = [Duration]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@InZone = [InZone]
			,@Distance = [Distance]
			,@Notes = [Notes]
			,@DepartmentId = [DepartmentId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@Replay = [Replay]
			,@RequestTitle = [RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_ServiceRequest_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			";

		internal static string ctprClient_ServiceRequest_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			";

		internal static string ctprClient_ServiceRequest_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_ServiceRequest]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequest_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[RequestId]
			,[RequestCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[RequestDate]
			,[RequestTime]
			,[RequestTypeId]
			,[RequestTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[RequestStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Latitude]
			,[Longitude]
			,[InZone]
			,[Distance]
			,[Notes]
			,[DepartmentId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[Replay]
			,[RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequest_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequest_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_ServiceRequest]
			SET
			[RequestCode] = @RequestCode
			,[BranchId] = @BranchId
			,[RepresentativeId] = @RepresentativeId
			,[ClientId] = @ClientId
			,[RequestDate] = @RequestDate
			,[RequestTime] = @RequestTime
			,[RequestTypeId] = @RequestTypeId
			,[RequestTypeDetailId] = @RequestTypeDetailId
			,[Phone] = @Phone
			,[PhoneAlternative] = @PhoneAlternative
			,[PriorityId] = @PriorityId
			,[RequestStatusId] = @RequestStatusId
			,[IsClosed] = @IsClosed
			,[CloseDate] = @CloseDate
			,[Duration] = @Duration
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[InZone] = @InZone
			,[Distance] = @Distance
			,[Notes] = @Notes
			,[DepartmentId] = @DepartmentId
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[Replay] = @Replay
			,[RequestTitle] = @RequestTitle
			WHERE 
			[RequestId] = @RequestId
			SELECT 
			@RequestId = [RequestId]
			,@RequestCode = [RequestCode]
			,@BranchId = [BranchId]
			,@RepresentativeId = [RepresentativeId]
			,@ClientId = [ClientId]
			,@RequestDate = [RequestDate]
			,@RequestTime = [RequestTime]
			,@RequestTypeId = [RequestTypeId]
			,@RequestTypeDetailId = [RequestTypeDetailId]
			,@Phone = [Phone]
			,@PhoneAlternative = [PhoneAlternative]
			,@PriorityId = [PriorityId]
			,@RequestStatusId = [RequestStatusId]
			,@IsClosed = [IsClosed]
			,@CloseDate = [CloseDate]
			,@Duration = [Duration]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@InZone = [InZone]
			,@Distance = [Distance]
			,@Notes = [Notes]
			,@DepartmentId = [DepartmentId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@Replay = [Replay]
			,@RequestTitle = [RequestTitle]
			FROM [dbo].[Client_ServiceRequest]
			WHERE 
			[RequestId] = @RequestId
			";

	}
}
#endregion
