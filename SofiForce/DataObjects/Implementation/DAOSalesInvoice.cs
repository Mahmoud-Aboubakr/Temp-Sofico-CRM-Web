/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesInvoice : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _invoiceId;
		protected string _invoiceCode;
		protected string _salesCode;
		protected Int32? _invoiceTypeId;
		protected Int32? _invoiceSourceId;
		protected Int32? _clientId;
		#endregion

		#region class methods
		public DAOSalesInvoice()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table SalesInvoice based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSalesInvoice
		///</returns>
		///<parameters>
		///Int32? invoiceId
		///</parameters>
		public static DAOSalesInvoice SelectOne(Int32? invoiceId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesInvoice_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesInvoice");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)invoiceId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSalesInvoice retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSalesInvoice();
					retObj._invoiceId					 = Convert.IsDBNull(dt.Rows[0]["InvoiceId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InvoiceId"];
					retObj._invoiceCode					 = Convert.IsDBNull(dt.Rows[0]["InvoiceCode"]) ? null : (string)dt.Rows[0]["InvoiceCode"];
					retObj._salesCode					 = Convert.IsDBNull(dt.Rows[0]["SalesCode"]) ? null : (string)dt.Rows[0]["SalesCode"];
					retObj._invoiceTypeId					 = Convert.IsDBNull(dt.Rows[0]["InvoiceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InvoiceTypeId"];
					retObj._invoiceSourceId					 = Convert.IsDBNull(dt.Rows[0]["InvoiceSourceId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InvoiceSourceId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table SalesInvoice based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesInvoice_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table SalesInvoice
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesInvoice_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceSourceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceSourceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_invoiceId					 = Convert.IsDBNull(command.Parameters["@InvoiceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_salesCode					 = Convert.IsDBNull(command.Parameters["@SalesCode"].Value) ? null : (string)command.Parameters["@SalesCode"].Value;
				_invoiceTypeId					 = Convert.IsDBNull(command.Parameters["@InvoiceTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceTypeId"].Value;
				_invoiceSourceId					 = Convert.IsDBNull(command.Parameters["@InvoiceSourceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceSourceId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesInvoice
		///</Summary>
		///<returns>
		///IList-DAOSalesInvoice.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesInvoice> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesInvoice_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesInvoice");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesInvoice> objList = new List<DAOSalesInvoice>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesInvoice retObj = new DAOSalesInvoice();
						retObj._invoiceId					 = Convert.IsDBNull(row["InvoiceId"]) ? (Int32?)null : (Int32?)row["InvoiceId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._invoiceTypeId					 = Convert.IsDBNull(row["InvoiceTypeId"]) ? (Int32?)null : (Int32?)row["InvoiceTypeId"];
						retObj._invoiceSourceId					 = Convert.IsDBNull(row["InvoiceSourceId"]) ? (Int32?)null : (Int32?)row["InvoiceSourceId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesInvoice_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesInvoice
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesInvoice_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesInvoice");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "InvoiceId", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceId"]) ? (Int32?)null : (Int32?)row["InvoiceId"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "SalesCode", true) == 0) lst.Add(Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"]);
						if (string.Compare(projection.Member, "InvoiceTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceTypeId"]) ? (Int32?)null : (Int32?)row["InvoiceTypeId"]);
						if (string.Compare(projection.Member, "InvoiceSourceId", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceSourceId"]) ? (Int32?)null : (Int32?)row["InvoiceSourceId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesInvoice
		///</Summary>
		///<returns>
		///IList-DAOSalesInvoice.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesInvoice> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesInvoice_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesInvoice");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesInvoice> objList = new List<DAOSalesInvoice>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesInvoice retObj = new DAOSalesInvoice();
						retObj._invoiceId					 = Convert.IsDBNull(row["InvoiceId"]) ? (Int32?)null : (Int32?)row["InvoiceId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._invoiceTypeId					 = Convert.IsDBNull(row["InvoiceTypeId"]) ? (Int32?)null : (Int32?)row["InvoiceTypeId"];
						retObj._invoiceSourceId					 = Convert.IsDBNull(row["InvoiceSourceId"]) ? (Int32?)null : (Int32?)row["InvoiceSourceId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesInvoice
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesInvoice_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table SalesInvoice based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesInvoice_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceSourceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceSourceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_invoiceId					 = Convert.IsDBNull(command.Parameters["@InvoiceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_salesCode					 = Convert.IsDBNull(command.Parameters["@SalesCode"].Value) ? null : (string)command.Parameters["@SalesCode"].Value;
				_invoiceTypeId					 = Convert.IsDBNull(command.Parameters["@InvoiceTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceTypeId"].Value;
				_invoiceSourceId					 = Convert.IsDBNull(command.Parameters["@InvoiceSourceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceSourceId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? InvoiceId
		{
			get
			{
				return _invoiceId;
			}
			set
			{
				_invoiceId = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public string SalesCode
		{
			get
			{
				return _salesCode;
			}
			set
			{
				_salesCode = value;
			}
		}

		public Int32? InvoiceTypeId
		{
			get
			{
				return _invoiceTypeId;
			}
			set
			{
				_invoiceTypeId = value;
			}
		}

		public Int32? InvoiceSourceId
		{
			get
			{
				return _invoiceSourceId;
			}
			set
			{
				_invoiceSourceId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesInvoice_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[InvoiceId]
			,[InvoiceCode]
			,[SalesCode]
			,[InvoiceTypeId]
			,[InvoiceSourceId]
			,[ClientId]
			FROM [dbo].[SalesInvoice]
			WHERE 
			[InvoiceId] = @InvoiceId
			";

		internal static string ctprSalesInvoice_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[SalesInvoice]
			WHERE 
			[InvoiceId] = @InvoiceId
			";

		internal static string ctprSalesInvoice_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[SalesInvoice]
			(
			[InvoiceId]
			,[InvoiceCode]
			,[SalesCode]
			,[InvoiceTypeId]
			,[InvoiceSourceId]
			,[ClientId]
			)
			VALUES
			(
			@InvoiceId
			,@InvoiceCode
			,@SalesCode
			,@InvoiceTypeId
			,@InvoiceSourceId
			,@ClientId
			)
			SELECT 
			@InvoiceId = [InvoiceId]
			,@InvoiceCode = [InvoiceCode]
			,@SalesCode = [SalesCode]
			,@InvoiceTypeId = [InvoiceTypeId]
			,@InvoiceSourceId = [InvoiceSourceId]
			,@ClientId = [ClientId]
			FROM [dbo].[SalesInvoice]
			WHERE 
			[InvoiceId] = @InvoiceId
			";

		internal static string ctprSalesInvoice_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[InvoiceId]
			,[InvoiceCode]
			,[SalesCode]
			,[InvoiceTypeId]
			,[InvoiceSourceId]
			,[ClientId]
			FROM [dbo].[SalesInvoice]
			";

		internal static string ctprSalesInvoice_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesInvoice]
			";

		internal static string ctprSalesInvoice_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesInvoice]
			##CRITERIA##
			";

		internal static string ctprSalesInvoice_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[InvoiceId]
			,[InvoiceCode]
			,[SalesCode]
			,[InvoiceTypeId]
			,[InvoiceSourceId]
			,[ClientId]
			FROM [dbo].[SalesInvoice]
			##CRITERIA##
			";

		internal static string ctprSalesInvoice_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesInvoice]
			##CRITERIA##
			";

		internal static string ctprSalesInvoice_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[SalesInvoice]
			SET
			[InvoiceCode] = @InvoiceCode
			,[SalesCode] = @SalesCode
			,[InvoiceTypeId] = @InvoiceTypeId
			,[InvoiceSourceId] = @InvoiceSourceId
			,[ClientId] = @ClientId
			WHERE 
			[InvoiceId] = @InvoiceId
			SELECT 
			@InvoiceId = [InvoiceId]
			,@InvoiceCode = [InvoiceCode]
			,@SalesCode = [SalesCode]
			,@InvoiceTypeId = [InvoiceTypeId]
			,@InvoiceSourceId = [InvoiceSourceId]
			,@ClientId = [ClientId]
			FROM [dbo].[SalesInvoice]
			WHERE 
			[InvoiceId] = @InvoiceId
			";

	}
}
#endregion
