/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAORepresentativeJourneyVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _journeyId;
		protected Int32? _representativeId;
		protected string _kindNameEn;
		protected string _kindNameAr;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _representativeCode;
		protected Int32? _represtitiveUserId;
		protected Int32? _supervisorId;
		protected string _routeCode;
		protected string _routeNameEn;
		protected string _routeNameAr;
		protected Int32? _routeId;
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected Int32? _branchId;
		protected Int32? _kindId;
		protected string _phone;
		protected bool? _isTerminated;
		protected bool? _isActive;
		protected Int32? _routeTypeId;
		protected string _routeTypeNameAr;
		protected string _routeTypeNameEn;
		protected string _routeTypeCode;
		#endregion

		#region class methods
		public DAORepresentativeJourneyVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Representative_JourneyVw
		///</Summary>
		///<returns>
		///IList-DAORepresentativeJourneyVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAORepresentativeJourneyVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_JourneyVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_JourneyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeJourneyVw> objList = new List<DAORepresentativeJourneyVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeJourneyVw retObj = new DAORepresentativeJourneyVw();
						retObj._journeyId					 = Convert.IsDBNull(row["JourneyId"]) ? (Int64?)null : (Int64?)row["JourneyId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._kindNameEn					 = Convert.IsDBNull(row["KindNameEn"]) ? null : (string)row["KindNameEn"];
						retObj._kindNameAr					 = Convert.IsDBNull(row["KindNameAr"]) ? null : (string)row["KindNameAr"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._represtitiveUserId					 = Convert.IsDBNull(row["ReprestitiveUserId"]) ? (Int32?)null : (Int32?)row["ReprestitiveUserId"];
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._routeCode					 = Convert.IsDBNull(row["RouteCode"]) ? null : (string)row["RouteCode"];
						retObj._routeNameEn					 = Convert.IsDBNull(row["RouteNameEn"]) ? null : (string)row["RouteNameEn"];
						retObj._routeNameAr					 = Convert.IsDBNull(row["RouteNameAr"]) ? null : (string)row["RouteNameAr"];
						retObj._routeId					 = Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._kindId					 = Convert.IsDBNull(row["KindId"]) ? (Int32?)null : (Int32?)row["KindId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._routeTypeId					 = Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"];
						retObj._routeTypeNameAr					 = Convert.IsDBNull(row["RouteTypeNameAr"]) ? null : (string)row["RouteTypeNameAr"];
						retObj._routeTypeNameEn					 = Convert.IsDBNull(row["RouteTypeNameEn"]) ? null : (string)row["RouteTypeNameEn"];
						retObj._routeTypeCode					 = Convert.IsDBNull(row["RouteTypeCode"]) ? null : (string)row["RouteTypeCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRepresentative_JourneyVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiRepresentative_JourneyVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentative_JourneyVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_JourneyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "JourneyId", true) == 0) lst.Add(Convert.IsDBNull(row["JourneyId"]) ? (Int64?)null : (Int64?)row["JourneyId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "KindNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["KindNameEn"]) ? null : (string)row["KindNameEn"]);
						if (string.Compare(projection.Member, "KindNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["KindNameAr"]) ? null : (string)row["KindNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "ReprestitiveUserId", true) == 0) lst.Add(Convert.IsDBNull(row["ReprestitiveUserId"]) ? (Int32?)null : (Int32?)row["ReprestitiveUserId"]);
						if (string.Compare(projection.Member, "SupervisorId", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"]);
						if (string.Compare(projection.Member, "RouteCode", true) == 0) lst.Add(Convert.IsDBNull(row["RouteCode"]) ? null : (string)row["RouteCode"]);
						if (string.Compare(projection.Member, "RouteNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RouteNameEn"]) ? null : (string)row["RouteNameEn"]);
						if (string.Compare(projection.Member, "RouteNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RouteNameAr"]) ? null : (string)row["RouteNameAr"]);
						if (string.Compare(projection.Member, "RouteId", true) == 0) lst.Add(Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "KindId", true) == 0) lst.Add(Convert.IsDBNull(row["KindId"]) ? (Int32?)null : (Int32?)row["KindId"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "IsTerminated", true) == 0) lst.Add(Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "RouteTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"]);
						if (string.Compare(projection.Member, "RouteTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RouteTypeNameAr"]) ? null : (string)row["RouteTypeNameAr"]);
						if (string.Compare(projection.Member, "RouteTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RouteTypeNameEn"]) ? null : (string)row["RouteTypeNameEn"]);
						if (string.Compare(projection.Member, "RouteTypeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RouteTypeCode"]) ? null : (string)row["RouteTypeCode"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Representative_JourneyVw
		///</Summary>
		///<returns>
		///IList-DAORepresentativeJourneyVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAORepresentativeJourneyVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentative_JourneyVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Representative_JourneyVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAORepresentativeJourneyVw> objList = new List<DAORepresentativeJourneyVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORepresentativeJourneyVw retObj = new DAORepresentativeJourneyVw();
						retObj._journeyId					 = Convert.IsDBNull(row["JourneyId"]) ? (Int64?)null : (Int64?)row["JourneyId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._kindNameEn					 = Convert.IsDBNull(row["KindNameEn"]) ? null : (string)row["KindNameEn"];
						retObj._kindNameAr					 = Convert.IsDBNull(row["KindNameAr"]) ? null : (string)row["KindNameAr"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._represtitiveUserId					 = Convert.IsDBNull(row["ReprestitiveUserId"]) ? (Int32?)null : (Int32?)row["ReprestitiveUserId"];
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._routeCode					 = Convert.IsDBNull(row["RouteCode"]) ? null : (string)row["RouteCode"];
						retObj._routeNameEn					 = Convert.IsDBNull(row["RouteNameEn"]) ? null : (string)row["RouteNameEn"];
						retObj._routeNameAr					 = Convert.IsDBNull(row["RouteNameAr"]) ? null : (string)row["RouteNameAr"];
						retObj._routeId					 = Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._kindId					 = Convert.IsDBNull(row["KindId"]) ? (Int32?)null : (Int32?)row["KindId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._isTerminated					 = Convert.IsDBNull(row["IsTerminated"]) ? (bool?)null : (bool?)row["IsTerminated"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._routeTypeId					 = Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"];
						retObj._routeTypeNameAr					 = Convert.IsDBNull(row["RouteTypeNameAr"]) ? null : (string)row["RouteTypeNameAr"];
						retObj._routeTypeNameEn					 = Convert.IsDBNull(row["RouteTypeNameEn"]) ? null : (string)row["RouteTypeNameEn"];
						retObj._routeTypeCode					 = Convert.IsDBNull(row["RouteTypeCode"]) ? null : (string)row["RouteTypeCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Representative_JourneyVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRepresentative_JourneyVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? JourneyId
		{
			get
			{
				return _journeyId;
			}
			set
			{
				_journeyId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public string KindNameEn
		{
			get
			{
				return _kindNameEn;
			}
			set
			{
				_kindNameEn = value;
			}
		}

		public string KindNameAr
		{
			get
			{
				return _kindNameAr;
			}
			set
			{
				_kindNameAr = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public Int32? ReprestitiveUserId
		{
			get
			{
				return _represtitiveUserId;
			}
			set
			{
				_represtitiveUserId = value;
			}
		}

		public Int32? SupervisorId
		{
			get
			{
				return _supervisorId;
			}
			set
			{
				_supervisorId = value;
			}
		}

		public string RouteCode
		{
			get
			{
				return _routeCode;
			}
			set
			{
				_routeCode = value;
			}
		}

		public string RouteNameEn
		{
			get
			{
				return _routeNameEn;
			}
			set
			{
				_routeNameEn = value;
			}
		}

		public string RouteNameAr
		{
			get
			{
				return _routeNameAr;
			}
			set
			{
				_routeNameAr = value;
			}
		}

		public Int32? RouteId
		{
			get
			{
				return _routeId;
			}
			set
			{
				_routeId = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? KindId
		{
			get
			{
				return _kindId;
			}
			set
			{
				_kindId = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public bool? IsTerminated
		{
			get
			{
				return _isTerminated;
			}
			set
			{
				_isTerminated = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? RouteTypeId
		{
			get
			{
				return _routeTypeId;
			}
			set
			{
				_routeTypeId = value;
			}
		}

		public string RouteTypeNameAr
		{
			get
			{
				return _routeTypeNameAr;
			}
			set
			{
				_routeTypeNameAr = value;
			}
		}

		public string RouteTypeNameEn
		{
			get
			{
				return _routeTypeNameEn;
			}
			set
			{
				_routeTypeNameEn = value;
			}
		}

		public string RouteTypeCode
		{
			get
			{
				return _routeTypeCode;
			}
			set
			{
				_routeTypeCode = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprRepresentative_JourneyVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[JourneyId]
			,[RepresentativeId]
			,[KindNameEn]
			,[KindNameAr]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[RepresentativeCode]
			,[ReprestitiveUserId]
			,[SupervisorId]
			,[RouteCode]
			,[RouteNameEn]
			,[RouteNameAr]
			,[RouteId]
			,[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[BranchId]
			,[KindId]
			,[Phone]
			,[IsTerminated]
			,[IsActive]
			,[RouteTypeId]
			,[RouteTypeNameAr]
			,[RouteTypeNameEn]
			,[RouteTypeCode]
			FROM [dbo].[Representative_JourneyVw]
			";

		internal static string ctprRepresentative_JourneyVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Representative_JourneyVw]
			";

		internal static string ctprRepresentative_JourneyVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Representative_JourneyVw]
			##CRITERIA##
			";

		internal static string ctprRepresentative_JourneyVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[JourneyId]
			,[RepresentativeId]
			,[KindNameEn]
			,[KindNameAr]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[RepresentativeCode]
			,[ReprestitiveUserId]
			,[SupervisorId]
			,[RouteCode]
			,[RouteNameEn]
			,[RouteNameAr]
			,[RouteId]
			,[BranchCode]
			,[BranchNameAr]
			,[BranchNameEn]
			,[BranchId]
			,[KindId]
			,[Phone]
			,[IsTerminated]
			,[IsActive]
			,[RouteTypeId]
			,[RouteTypeNameAr]
			,[RouteTypeNameEn]
			,[RouteTypeCode]
			FROM [dbo].[Representative_JourneyVw]
			##CRITERIA##
			";

		internal static string ctprRepresentative_JourneyVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Representative_JourneyVw]
			##CRITERIA##
			";

	}
}
#endregion
