/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrderDispatch : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _dispatchId;
		protected Int64? _salesId;
		protected string _dispatchCode;
		protected DateTime? _dispatchDate;
		protected DateTime? _dispatchTime;
		protected DateTime? _shiftDate;
		protected Int32? _distributorId;
		protected Int32? _carId;
		protected Int32? _driverId;
		protected bool? _inZone;
		protected decimal? _distance;
		protected double? _latitude;
		protected double? _longitude;
		protected Int32? _feedbackId;
		protected string _notes;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected Int32? _rejectReasonId;
		protected string _rejectReasonNotes;
		#endregion

		#region class methods
		public DAOSalesOrderDispatch()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table SalesOrder_Dispatch based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSalesOrderDispatch
		///</returns>
		///<parameters>
		///Int64? dispatchId
		///</parameters>
		public static DAOSalesOrderDispatch SelectOne(Int64? dispatchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Dispatch");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DispatchId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)dispatchId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSalesOrderDispatch retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSalesOrderDispatch();
					retObj._dispatchId					 = Convert.IsDBNull(dt.Rows[0]["DispatchId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["DispatchId"];
					retObj._salesId					 = Convert.IsDBNull(dt.Rows[0]["SalesId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesId"];
					retObj._dispatchCode					 = Convert.IsDBNull(dt.Rows[0]["DispatchCode"]) ? null : (string)dt.Rows[0]["DispatchCode"];
					retObj._dispatchDate					 = Convert.IsDBNull(dt.Rows[0]["DispatchDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["DispatchDate"];
					retObj._dispatchTime					 = Convert.IsDBNull(dt.Rows[0]["DispatchTime"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["DispatchTime"];
					retObj._shiftDate					 = Convert.IsDBNull(dt.Rows[0]["ShiftDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ShiftDate"];
					retObj._distributorId					 = Convert.IsDBNull(dt.Rows[0]["DistributorId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DistributorId"];
					retObj._carId					 = Convert.IsDBNull(dt.Rows[0]["CarId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CarId"];
					retObj._driverId					 = Convert.IsDBNull(dt.Rows[0]["DriverId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DriverId"];
					retObj._inZone					 = Convert.IsDBNull(dt.Rows[0]["InZone"]) ? (bool?)null : (bool?)dt.Rows[0]["InZone"];
					retObj._distance					 = Convert.IsDBNull(dt.Rows[0]["Distance"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Distance"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._feedbackId					 = Convert.IsDBNull(dt.Rows[0]["FeedbackId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FeedbackId"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["notes"]) ? null : (string)dt.Rows[0]["notes"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._rejectReasonId					 = Convert.IsDBNull(dt.Rows[0]["RejectReasonId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RejectReasonId"];
					retObj._rejectReasonNotes					 = Convert.IsDBNull(dt.Rows[0]["RejectReasonNotes"]) ? null : (string)dt.Rows[0]["RejectReasonNotes"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table SalesOrder_Dispatch based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DispatchId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_dispatchId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Dispatch based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDispatch.
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static IList<DAOSalesOrderDispatch> SelectAllBySalesId(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAllBySalesId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Dispatch");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDispatch> objList = new List<DAOSalesOrderDispatch>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDispatch retObj = new DAOSalesOrderDispatch();
						retObj._dispatchId					 = Convert.IsDBNull(row["DispatchId"]) ? (Int64?)null : (Int64?)row["DispatchId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._dispatchCode					 = Convert.IsDBNull(row["DispatchCode"]) ? null : (string)row["DispatchCode"];
						retObj._dispatchDate					 = Convert.IsDBNull(row["DispatchDate"]) ? (DateTime?)null : (DateTime?)row["DispatchDate"];
						retObj._dispatchTime					 = Convert.IsDBNull(row["DispatchTime"]) ? (DateTime?)null : (DateTime?)row["DispatchTime"];
						retObj._shiftDate					 = Convert.IsDBNull(row["ShiftDate"]) ? (DateTime?)null : (DateTime?)row["ShiftDate"];
						retObj._distributorId					 = Convert.IsDBNull(row["DistributorId"]) ? (Int32?)null : (Int32?)row["DistributorId"];
						retObj._carId					 = Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"];
						retObj._driverId					 = Convert.IsDBNull(row["DriverId"]) ? (Int32?)null : (Int32?)row["DriverId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._feedbackId					 = Convert.IsDBNull(row["FeedbackId"]) ? (Int32?)null : (Int32?)row["FeedbackId"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._rejectReasonId					 = Convert.IsDBNull(row["RejectReasonId"]) ? (Int32?)null : (Int32?)row["RejectReasonId"];
						retObj._rejectReasonNotes					 = Convert.IsDBNull(row["RejectReasonNotes"]) ? null : (string)row["RejectReasonNotes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static Int32 SelectAllBySalesIdCount(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAllBySalesIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Dispatch with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId
		///</parameters>
		public static void DeleteAllBySalesId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_DeleteAllBySalesId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Dispatch based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDispatch.
		///</returns>
		///<parameters>
		///Int32? carId
		///</parameters>
		public static IList<DAOSalesOrderDispatch> SelectAllByCarId(Int32? carId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAllByCarId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Dispatch");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CarId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)carId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDispatch> objList = new List<DAOSalesOrderDispatch>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDispatch retObj = new DAOSalesOrderDispatch();
						retObj._dispatchId					 = Convert.IsDBNull(row["DispatchId"]) ? (Int64?)null : (Int64?)row["DispatchId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._dispatchCode					 = Convert.IsDBNull(row["DispatchCode"]) ? null : (string)row["DispatchCode"];
						retObj._dispatchDate					 = Convert.IsDBNull(row["DispatchDate"]) ? (DateTime?)null : (DateTime?)row["DispatchDate"];
						retObj._dispatchTime					 = Convert.IsDBNull(row["DispatchTime"]) ? (DateTime?)null : (DateTime?)row["DispatchTime"];
						retObj._shiftDate					 = Convert.IsDBNull(row["ShiftDate"]) ? (DateTime?)null : (DateTime?)row["ShiftDate"];
						retObj._distributorId					 = Convert.IsDBNull(row["DistributorId"]) ? (Int32?)null : (Int32?)row["DistributorId"];
						retObj._carId					 = Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"];
						retObj._driverId					 = Convert.IsDBNull(row["DriverId"]) ? (Int32?)null : (Int32?)row["DriverId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._feedbackId					 = Convert.IsDBNull(row["FeedbackId"]) ? (Int32?)null : (Int32?)row["FeedbackId"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._rejectReasonId					 = Convert.IsDBNull(row["RejectReasonId"]) ? (Int32?)null : (Int32?)row["RejectReasonId"];
						retObj._rejectReasonNotes					 = Convert.IsDBNull(row["RejectReasonNotes"]) ? null : (string)row["RejectReasonNotes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? carId
		///</parameters>
		public static Int32 SelectAllByCarIdCount(Int32? carId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAllByCarIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CarId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)carId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Dispatch with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? carId
		///</parameters>
		public static void DeleteAllByCarId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? carId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_DeleteAllByCarId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CarId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)carId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Dispatch based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDispatch.
		///</returns>
		///<parameters>
		///Int32? rejectReasonId
		///</parameters>
		public static IList<DAOSalesOrderDispatch> SelectAllByRejectReasonId(Int32? rejectReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAllByRejectReasonId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Dispatch");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RejectReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)rejectReasonId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDispatch> objList = new List<DAOSalesOrderDispatch>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDispatch retObj = new DAOSalesOrderDispatch();
						retObj._dispatchId					 = Convert.IsDBNull(row["DispatchId"]) ? (Int64?)null : (Int64?)row["DispatchId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._dispatchCode					 = Convert.IsDBNull(row["DispatchCode"]) ? null : (string)row["DispatchCode"];
						retObj._dispatchDate					 = Convert.IsDBNull(row["DispatchDate"]) ? (DateTime?)null : (DateTime?)row["DispatchDate"];
						retObj._dispatchTime					 = Convert.IsDBNull(row["DispatchTime"]) ? (DateTime?)null : (DateTime?)row["DispatchTime"];
						retObj._shiftDate					 = Convert.IsDBNull(row["ShiftDate"]) ? (DateTime?)null : (DateTime?)row["ShiftDate"];
						retObj._distributorId					 = Convert.IsDBNull(row["DistributorId"]) ? (Int32?)null : (Int32?)row["DistributorId"];
						retObj._carId					 = Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"];
						retObj._driverId					 = Convert.IsDBNull(row["DriverId"]) ? (Int32?)null : (Int32?)row["DriverId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._feedbackId					 = Convert.IsDBNull(row["FeedbackId"]) ? (Int32?)null : (Int32?)row["FeedbackId"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._rejectReasonId					 = Convert.IsDBNull(row["RejectReasonId"]) ? (Int32?)null : (Int32?)row["RejectReasonId"];
						retObj._rejectReasonNotes					 = Convert.IsDBNull(row["RejectReasonNotes"]) ? null : (string)row["RejectReasonNotes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? rejectReasonId
		///</parameters>
		public static Int32 SelectAllByRejectReasonIdCount(Int32? rejectReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAllByRejectReasonIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RejectReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)rejectReasonId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Dispatch with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? rejectReasonId
		///</parameters>
		public static void DeleteAllByRejectReasonId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? rejectReasonId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_DeleteAllByRejectReasonId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RejectReasonId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)rejectReasonId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table SalesOrder_Dispatch
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DispatchId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _dispatchId));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DispatchCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dispatchCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DispatchDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dispatchDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DispatchTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dispatchTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShiftDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shiftDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DistributorId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_distributorId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CarId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_carId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DriverId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_driverId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeedbackId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_feedbackId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@notes", SqlDbType.NVarChar, 1000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RejectReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_rejectReasonId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RejectReasonNotes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_rejectReasonNotes?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_dispatchId					 = Convert.IsDBNull(command.Parameters["@DispatchId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DispatchId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_dispatchCode					 = Convert.IsDBNull(command.Parameters["@DispatchCode"].Value) ? null : (string)command.Parameters["@DispatchCode"].Value;
				_dispatchDate					 = Convert.IsDBNull(command.Parameters["@DispatchDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@DispatchDate"].Value;
				_dispatchTime					 = Convert.IsDBNull(command.Parameters["@DispatchTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@DispatchTime"].Value;
				_shiftDate					 = Convert.IsDBNull(command.Parameters["@ShiftDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ShiftDate"].Value;
				_distributorId					 = Convert.IsDBNull(command.Parameters["@DistributorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DistributorId"].Value;
				_carId					 = Convert.IsDBNull(command.Parameters["@CarId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CarId"].Value;
				_driverId					 = Convert.IsDBNull(command.Parameters["@DriverId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DriverId"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Distance"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_feedbackId					 = Convert.IsDBNull(command.Parameters["@FeedbackId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FeedbackId"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@notes"].Value) ? null : (string)command.Parameters["@notes"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_rejectReasonId					 = Convert.IsDBNull(command.Parameters["@RejectReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RejectReasonId"].Value;
				_rejectReasonNotes					 = Convert.IsDBNull(command.Parameters["@RejectReasonNotes"].Value) ? null : (string)command.Parameters["@RejectReasonNotes"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrder_Dispatch
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDispatch.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrderDispatch> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Dispatch");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDispatch> objList = new List<DAOSalesOrderDispatch>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDispatch retObj = new DAOSalesOrderDispatch();
						retObj._dispatchId					 = Convert.IsDBNull(row["DispatchId"]) ? (Int64?)null : (Int64?)row["DispatchId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._dispatchCode					 = Convert.IsDBNull(row["DispatchCode"]) ? null : (string)row["DispatchCode"];
						retObj._dispatchDate					 = Convert.IsDBNull(row["DispatchDate"]) ? (DateTime?)null : (DateTime?)row["DispatchDate"];
						retObj._dispatchTime					 = Convert.IsDBNull(row["DispatchTime"]) ? (DateTime?)null : (DateTime?)row["DispatchTime"];
						retObj._shiftDate					 = Convert.IsDBNull(row["ShiftDate"]) ? (DateTime?)null : (DateTime?)row["ShiftDate"];
						retObj._distributorId					 = Convert.IsDBNull(row["DistributorId"]) ? (Int32?)null : (Int32?)row["DistributorId"];
						retObj._carId					 = Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"];
						retObj._driverId					 = Convert.IsDBNull(row["DriverId"]) ? (Int32?)null : (Int32?)row["DriverId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._feedbackId					 = Convert.IsDBNull(row["FeedbackId"]) ? (Int32?)null : (Int32?)row["FeedbackId"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._rejectReasonId					 = Convert.IsDBNull(row["RejectReasonId"]) ? (Int32?)null : (Int32?)row["RejectReasonId"];
						retObj._rejectReasonNotes					 = Convert.IsDBNull(row["RejectReasonNotes"]) ? null : (string)row["RejectReasonNotes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrder_Dispatch
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Dispatch_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Dispatch");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DispatchId", true) == 0) lst.Add(Convert.IsDBNull(row["DispatchId"]) ? (Int64?)null : (Int64?)row["DispatchId"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "DispatchCode", true) == 0) lst.Add(Convert.IsDBNull(row["DispatchCode"]) ? null : (string)row["DispatchCode"]);
						if (string.Compare(projection.Member, "DispatchDate", true) == 0) lst.Add(Convert.IsDBNull(row["DispatchDate"]) ? (DateTime?)null : (DateTime?)row["DispatchDate"]);
						if (string.Compare(projection.Member, "DispatchTime", true) == 0) lst.Add(Convert.IsDBNull(row["DispatchTime"]) ? (DateTime?)null : (DateTime?)row["DispatchTime"]);
						if (string.Compare(projection.Member, "ShiftDate", true) == 0) lst.Add(Convert.IsDBNull(row["ShiftDate"]) ? (DateTime?)null : (DateTime?)row["ShiftDate"]);
						if (string.Compare(projection.Member, "DistributorId", true) == 0) lst.Add(Convert.IsDBNull(row["DistributorId"]) ? (Int32?)null : (Int32?)row["DistributorId"]);
						if (string.Compare(projection.Member, "CarId", true) == 0) lst.Add(Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"]);
						if (string.Compare(projection.Member, "DriverId", true) == 0) lst.Add(Convert.IsDBNull(row["DriverId"]) ? (Int32?)null : (Int32?)row["DriverId"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "FeedbackId", true) == 0) lst.Add(Convert.IsDBNull(row["FeedbackId"]) ? (Int32?)null : (Int32?)row["FeedbackId"]);
						if (string.Compare(projection.Member, "notes", true) == 0) lst.Add(Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "RejectReasonId", true) == 0) lst.Add(Convert.IsDBNull(row["RejectReasonId"]) ? (Int32?)null : (Int32?)row["RejectReasonId"]);
						if (string.Compare(projection.Member, "RejectReasonNotes", true) == 0) lst.Add(Convert.IsDBNull(row["RejectReasonNotes"]) ? null : (string)row["RejectReasonNotes"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Dispatch
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderDispatch.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrderDispatch> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Dispatch_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Dispatch");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderDispatch> objList = new List<DAOSalesOrderDispatch>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderDispatch retObj = new DAOSalesOrderDispatch();
						retObj._dispatchId					 = Convert.IsDBNull(row["DispatchId"]) ? (Int64?)null : (Int64?)row["DispatchId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._dispatchCode					 = Convert.IsDBNull(row["DispatchCode"]) ? null : (string)row["DispatchCode"];
						retObj._dispatchDate					 = Convert.IsDBNull(row["DispatchDate"]) ? (DateTime?)null : (DateTime?)row["DispatchDate"];
						retObj._dispatchTime					 = Convert.IsDBNull(row["DispatchTime"]) ? (DateTime?)null : (DateTime?)row["DispatchTime"];
						retObj._shiftDate					 = Convert.IsDBNull(row["ShiftDate"]) ? (DateTime?)null : (DateTime?)row["ShiftDate"];
						retObj._distributorId					 = Convert.IsDBNull(row["DistributorId"]) ? (Int32?)null : (Int32?)row["DistributorId"];
						retObj._carId					 = Convert.IsDBNull(row["CarId"]) ? (Int32?)null : (Int32?)row["CarId"];
						retObj._driverId					 = Convert.IsDBNull(row["DriverId"]) ? (Int32?)null : (Int32?)row["DriverId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._feedbackId					 = Convert.IsDBNull(row["FeedbackId"]) ? (Int32?)null : (Int32?)row["FeedbackId"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._rejectReasonId					 = Convert.IsDBNull(row["RejectReasonId"]) ? (Int32?)null : (Int32?)row["RejectReasonId"];
						retObj._rejectReasonNotes					 = Convert.IsDBNull(row["RejectReasonNotes"]) ? null : (string)row["RejectReasonNotes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Dispatch
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Dispatch_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table SalesOrder_Dispatch based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Dispatch_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DispatchId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_dispatchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DispatchCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dispatchCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DispatchDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dispatchDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DispatchTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dispatchTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShiftDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shiftDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DistributorId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_distributorId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CarId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_carId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DriverId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_driverId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeedbackId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_feedbackId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@notes", SqlDbType.NVarChar, 1000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RejectReasonId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_rejectReasonId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RejectReasonNotes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_rejectReasonNotes?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_dispatchId					 = Convert.IsDBNull(command.Parameters["@DispatchId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DispatchId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_dispatchCode					 = Convert.IsDBNull(command.Parameters["@DispatchCode"].Value) ? null : (string)command.Parameters["@DispatchCode"].Value;
				_dispatchDate					 = Convert.IsDBNull(command.Parameters["@DispatchDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@DispatchDate"].Value;
				_dispatchTime					 = Convert.IsDBNull(command.Parameters["@DispatchTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@DispatchTime"].Value;
				_shiftDate					 = Convert.IsDBNull(command.Parameters["@ShiftDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ShiftDate"].Value;
				_distributorId					 = Convert.IsDBNull(command.Parameters["@DistributorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DistributorId"].Value;
				_carId					 = Convert.IsDBNull(command.Parameters["@CarId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CarId"].Value;
				_driverId					 = Convert.IsDBNull(command.Parameters["@DriverId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DriverId"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Distance"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_feedbackId					 = Convert.IsDBNull(command.Parameters["@FeedbackId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FeedbackId"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@notes"].Value) ? null : (string)command.Parameters["@notes"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_rejectReasonId					 = Convert.IsDBNull(command.Parameters["@RejectReasonId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RejectReasonId"].Value;
				_rejectReasonNotes					 = Convert.IsDBNull(command.Parameters["@RejectReasonNotes"].Value) ? null : (string)command.Parameters["@RejectReasonNotes"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DispatchId
		{
			get
			{
				return _dispatchId;
			}
			set
			{
				_dispatchId = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public string DispatchCode
		{
			get
			{
				return _dispatchCode;
			}
			set
			{
				_dispatchCode = value;
			}
		}

		public DateTime? DispatchDate
		{
			get
			{
				return _dispatchDate;
			}
			set
			{
				_dispatchDate = value;
			}
		}

		public DateTime? DispatchTime
		{
			get
			{
				return _dispatchTime;
			}
			set
			{
				_dispatchTime = value;
			}
		}

		public DateTime? ShiftDate
		{
			get
			{
				return _shiftDate;
			}
			set
			{
				_shiftDate = value;
			}
		}

		public Int32? DistributorId
		{
			get
			{
				return _distributorId;
			}
			set
			{
				_distributorId = value;
			}
		}

		public Int32? CarId
		{
			get
			{
				return _carId;
			}
			set
			{
				_carId = value;
			}
		}

		public Int32? DriverId
		{
			get
			{
				return _driverId;
			}
			set
			{
				_driverId = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public decimal? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public Int32? FeedbackId
		{
			get
			{
				return _feedbackId;
			}
			set
			{
				_feedbackId = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public Int32? RejectReasonId
		{
			get
			{
				return _rejectReasonId;
			}
			set
			{
				_rejectReasonId = value;
			}
		}

		public string RejectReasonNotes
		{
			get
			{
				return _rejectReasonNotes;
			}
			set
			{
				_rejectReasonNotes = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrder_Dispatch_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DispatchId]
			,[SalesId]
			,[DispatchCode]
			,[DispatchDate]
			,[DispatchTime]
			,[ShiftDate]
			,[DistributorId]
			,[CarId]
			,[DriverId]
			,[InZone]
			,[Distance]
			,[Latitude]
			,[Longitude]
			,[FeedbackId]
			,[notes]
			,[EBy]
			,[EDate]
			,[RejectReasonId]
			,[RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[DispatchId] = @DispatchId
			";

		internal static string ctprSalesOrder_Dispatch_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Dispatch]
			WHERE 
			[DispatchId] = @DispatchId
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllBySalesId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DispatchId]
			,[SalesId]
			,[DispatchCode]
			,[DispatchDate]
			,[DispatchTime]
			,[ShiftDate]
			,[DistributorId]
			,[CarId]
			,[DriverId]
			,[InZone]
			,[Distance]
			,[Latitude]
			,[Longitude]
			,[FeedbackId]
			,[notes]
			,[EBy]
			,[EDate]
			,[RejectReasonId]
			,[RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllBySalesIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_DeleteAllBySalesId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Dispatch]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllByCarId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DispatchId]
			,[SalesId]
			,[DispatchCode]
			,[DispatchDate]
			,[DispatchTime]
			,[ShiftDate]
			,[DistributorId]
			,[CarId]
			,[DriverId]
			,[InZone]
			,[Distance]
			,[Latitude]
			,[Longitude]
			,[FeedbackId]
			,[notes]
			,[EBy]
			,[EDate]
			,[RejectReasonId]
			,[RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[CarId] = @CarId OR ([CarId] IS NULL AND @CarId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllByCarIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[CarId] = @CarId OR ([CarId] IS NULL AND @CarId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_DeleteAllByCarId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Dispatch]
			WHERE 
			[CarId] = @CarId OR ([CarId] IS NULL AND @CarId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllByRejectReasonId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DispatchId]
			,[SalesId]
			,[DispatchCode]
			,[DispatchDate]
			,[DispatchTime]
			,[ShiftDate]
			,[DistributorId]
			,[CarId]
			,[DriverId]
			,[InZone]
			,[Distance]
			,[Latitude]
			,[Longitude]
			,[FeedbackId]
			,[notes]
			,[EBy]
			,[EDate]
			,[RejectReasonId]
			,[RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[RejectReasonId] = @RejectReasonId OR ([RejectReasonId] IS NULL AND @RejectReasonId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllByRejectReasonIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[RejectReasonId] = @RejectReasonId OR ([RejectReasonId] IS NULL AND @RejectReasonId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_DeleteAllByRejectReasonId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Dispatch]
			WHERE 
			[RejectReasonId] = @RejectReasonId OR ([RejectReasonId] IS NULL AND @RejectReasonId IS NULL)
			";

		internal static string ctprSalesOrder_Dispatch_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[SalesOrder_Dispatch]
			(
			[SalesId]
			,[DispatchCode]
			,[DispatchDate]
			,[DispatchTime]
			,[ShiftDate]
			,[DistributorId]
			,[CarId]
			,[DriverId]
			,[InZone]
			,[Distance]
			,[Latitude]
			,[Longitude]
			,[FeedbackId]
			,[notes]
			,[EBy]
			,[EDate]
			,[RejectReasonId]
			,[RejectReasonNotes]
			)
			VALUES
			(
			@SalesId
			,@DispatchCode
			,@DispatchDate
			,@DispatchTime
			,@ShiftDate
			,@DistributorId
			,@CarId
			,@DriverId
			,@InZone
			,@Distance
			,@Latitude
			,@Longitude
			,@FeedbackId
			,@notes
			,@EBy
			,@EDate
			,@RejectReasonId
			,@RejectReasonNotes
			)
			SELECT 
			@DispatchId = [DispatchId]
			,@SalesId = [SalesId]
			,@DispatchCode = [DispatchCode]
			,@DispatchDate = [DispatchDate]
			,@DispatchTime = [DispatchTime]
			,@ShiftDate = [ShiftDate]
			,@DistributorId = [DistributorId]
			,@CarId = [CarId]
			,@DriverId = [DriverId]
			,@InZone = [InZone]
			,@Distance = [Distance]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@FeedbackId = [FeedbackId]
			,@notes = [notes]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@RejectReasonId = [RejectReasonId]
			,@RejectReasonNotes = [RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[DispatchId] = SCOPE_IDENTITY()
			";

		internal static string ctprSalesOrder_Dispatch_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DispatchId]
			,[SalesId]
			,[DispatchCode]
			,[DispatchDate]
			,[DispatchTime]
			,[ShiftDate]
			,[DistributorId]
			,[CarId]
			,[DriverId]
			,[InZone]
			,[Distance]
			,[Latitude]
			,[Longitude]
			,[FeedbackId]
			,[notes]
			,[EBy]
			,[EDate]
			,[RejectReasonId]
			,[RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Dispatch]
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrder_Dispatch]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DispatchId]
			,[SalesId]
			,[DispatchCode]
			,[DispatchDate]
			,[DispatchTime]
			,[ShiftDate]
			,[DistributorId]
			,[CarId]
			,[DriverId]
			,[InZone]
			,[Distance]
			,[Latitude]
			,[Longitude]
			,[FeedbackId]
			,[notes]
			,[EBy]
			,[EDate]
			,[RejectReasonId]
			,[RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Dispatch_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Dispatch]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Dispatch_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[SalesOrder_Dispatch]
			SET
			[SalesId] = @SalesId
			,[DispatchCode] = @DispatchCode
			,[DispatchDate] = @DispatchDate
			,[DispatchTime] = @DispatchTime
			,[ShiftDate] = @ShiftDate
			,[DistributorId] = @DistributorId
			,[CarId] = @CarId
			,[DriverId] = @DriverId
			,[InZone] = @InZone
			,[Distance] = @Distance
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[FeedbackId] = @FeedbackId
			,[notes] = @notes
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[RejectReasonId] = @RejectReasonId
			,[RejectReasonNotes] = @RejectReasonNotes
			WHERE 
			[DispatchId] = @DispatchId
			SELECT 
			@DispatchId = [DispatchId]
			,@SalesId = [SalesId]
			,@DispatchCode = [DispatchCode]
			,@DispatchDate = [DispatchDate]
			,@DispatchTime = [DispatchTime]
			,@ShiftDate = [ShiftDate]
			,@DistributorId = [DistributorId]
			,@CarId = [CarId]
			,@DriverId = [DriverId]
			,@InZone = [InZone]
			,@Distance = [Distance]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@FeedbackId = [FeedbackId]
			,@notes = [notes]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@RejectReasonId = [RejectReasonId]
			,@RejectReasonNotes = [RejectReasonNotes]
			FROM [dbo].[SalesOrder_Dispatch]
			WHERE 
			[DispatchId] = @DispatchId
			";

	}
}
#endregion
