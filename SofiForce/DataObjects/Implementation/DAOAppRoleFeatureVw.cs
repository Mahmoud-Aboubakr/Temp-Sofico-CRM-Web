/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppRoleFeatureVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _appRoleId;
		protected Int32? _featueId;
		protected Int32? _appRoleFeatueId;
		protected string _featueCode;
		protected string _featueNameEn;
		protected string _featueNameAr;
		protected string _featuePath;
		protected Int32? _applicationId;
		#endregion

		#region class methods
		public DAOAppRoleFeatureVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppRole_FeatureVw
		///</Summary>
		///<returns>
		///IList-DAOAppRoleFeatureVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppRoleFeatureVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_FeatureVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppRole_FeatureVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppRoleFeatureVw> objList = new List<DAOAppRoleFeatureVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppRoleFeatureVw retObj = new DAOAppRoleFeatureVw();
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._featueId					 = Convert.IsDBNull(row["FeatueId"]) ? (Int32?)null : (Int32?)row["FeatueId"];
						retObj._appRoleFeatueId					 = Convert.IsDBNull(row["AppRoleFeatueId"]) ? (Int32?)null : (Int32?)row["AppRoleFeatueId"];
						retObj._featueCode					 = Convert.IsDBNull(row["FeatueCode"]) ? null : (string)row["FeatueCode"];
						retObj._featueNameEn					 = Convert.IsDBNull(row["FeatueNameEn"]) ? null : (string)row["FeatueNameEn"];
						retObj._featueNameAr					 = Convert.IsDBNull(row["FeatueNameAr"]) ? null : (string)row["FeatueNameAr"];
						retObj._featuePath					 = Convert.IsDBNull(row["FeatuePath"]) ? null : (string)row["FeatuePath"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_FeatureVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppRole_FeatureVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppRole_FeatureVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppRole_FeatureVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "AppRoleId", true) == 0) lst.Add(Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"]);
						if (string.Compare(projection.Member, "FeatueId", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueId"]) ? (Int32?)null : (Int32?)row["FeatueId"]);
						if (string.Compare(projection.Member, "AppRoleFeatueId", true) == 0) lst.Add(Convert.IsDBNull(row["AppRoleFeatueId"]) ? (Int32?)null : (Int32?)row["AppRoleFeatueId"]);
						if (string.Compare(projection.Member, "FeatueCode", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueCode"]) ? null : (string)row["FeatueCode"]);
						if (string.Compare(projection.Member, "FeatueNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueNameEn"]) ? null : (string)row["FeatueNameEn"]);
						if (string.Compare(projection.Member, "FeatueNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueNameAr"]) ? null : (string)row["FeatueNameAr"]);
						if (string.Compare(projection.Member, "FeatuePath", true) == 0) lst.Add(Convert.IsDBNull(row["FeatuePath"]) ? null : (string)row["FeatuePath"]);
						if (string.Compare(projection.Member, "ApplicationId", true) == 0) lst.Add(Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppRole_FeatureVw
		///</Summary>
		///<returns>
		///IList-DAOAppRoleFeatureVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppRoleFeatureVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppRole_FeatureVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppRole_FeatureVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppRoleFeatureVw> objList = new List<DAOAppRoleFeatureVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppRoleFeatureVw retObj = new DAOAppRoleFeatureVw();
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._featueId					 = Convert.IsDBNull(row["FeatueId"]) ? (Int32?)null : (Int32?)row["FeatueId"];
						retObj._appRoleFeatueId					 = Convert.IsDBNull(row["AppRoleFeatueId"]) ? (Int32?)null : (Int32?)row["AppRoleFeatueId"];
						retObj._featueCode					 = Convert.IsDBNull(row["FeatueCode"]) ? null : (string)row["FeatueCode"];
						retObj._featueNameEn					 = Convert.IsDBNull(row["FeatueNameEn"]) ? null : (string)row["FeatueNameEn"];
						retObj._featueNameAr					 = Convert.IsDBNull(row["FeatueNameAr"]) ? null : (string)row["FeatueNameAr"];
						retObj._featuePath					 = Convert.IsDBNull(row["FeatuePath"]) ? null : (string)row["FeatuePath"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppRole_FeatureVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppRole_FeatureVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? AppRoleId
		{
			get
			{
				return _appRoleId;
			}
			set
			{
				_appRoleId = value;
			}
		}

		public Int32? FeatueId
		{
			get
			{
				return _featueId;
			}
			set
			{
				_featueId = value;
			}
		}

		public Int32? AppRoleFeatueId
		{
			get
			{
				return _appRoleFeatueId;
			}
			set
			{
				_appRoleFeatueId = value;
			}
		}

		public string FeatueCode
		{
			get
			{
				return _featueCode;
			}
			set
			{
				_featueCode = value;
			}
		}

		public string FeatueNameEn
		{
			get
			{
				return _featueNameEn;
			}
			set
			{
				_featueNameEn = value;
			}
		}

		public string FeatueNameAr
		{
			get
			{
				return _featueNameAr;
			}
			set
			{
				_featueNameAr = value;
			}
		}

		public string FeatuePath
		{
			get
			{
				return _featuePath;
			}
			set
			{
				_featuePath = value;
			}
		}

		public Int32? ApplicationId
		{
			get
			{
				return _applicationId;
			}
			set
			{
				_applicationId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppRole_FeatureVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[AppRoleId]
			,[FeatueId]
			,[AppRoleFeatueId]
			,[FeatueCode]
			,[FeatueNameEn]
			,[FeatueNameAr]
			,[FeatuePath]
			,[ApplicationId]
			FROM [dbo].[AppRole_FeatureVw]
			";

		internal static string ctprAppRole_FeatureVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppRole_FeatureVw]
			";

		internal static string ctprAppRole_FeatureVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppRole_FeatureVw]
			##CRITERIA##
			";

		internal static string ctprAppRole_FeatureVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[AppRoleId]
			,[FeatueId]
			,[AppRoleFeatueId]
			,[FeatueCode]
			,[FeatueNameEn]
			,[FeatueNameAr]
			,[FeatuePath]
			,[ApplicationId]
			FROM [dbo].[AppRole_FeatureVw]
			##CRITERIA##
			";

		internal static string ctprAppRole_FeatureVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppRole_FeatureVw]
			##CRITERIA##
			";

	}
}
#endregion
