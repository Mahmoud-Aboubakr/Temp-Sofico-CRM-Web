/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppRole : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _appRoleId;
		protected string _appRoleCode;
		protected string _appRoleNameEn;
		protected string _appRoleNameAr;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected bool? _fullAccess;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOAppRole()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table AppRole based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAppRole
		///</returns>
		///<parameters>
		///Int32? appRoleId
		///</parameters>
		public static DAOAppRole SelectOne(Int32? appRoleId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppRole");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)appRoleId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOAppRole retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAppRole();
					retObj._appRoleId					 = Convert.IsDBNull(dt.Rows[0]["AppRoleId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AppRoleId"];
					retObj._appRoleCode					 = Convert.IsDBNull(dt.Rows[0]["AppRoleCode"]) ? null : (string)dt.Rows[0]["AppRoleCode"];
					retObj._appRoleNameEn					 = Convert.IsDBNull(dt.Rows[0]["AppRoleNameEn"]) ? null : (string)dt.Rows[0]["AppRoleNameEn"];
					retObj._appRoleNameAr					 = Convert.IsDBNull(dt.Rows[0]["AppRoleNameAr"]) ? null : (string)dt.Rows[0]["AppRoleNameAr"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["icon"]) ? null : (string)dt.Rows[0]["icon"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["color"]) ? null : (string)dt.Rows[0]["color"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._canEdit					 = Convert.IsDBNull(dt.Rows[0]["CanEdit"]) ? (bool?)null : (bool?)dt.Rows[0]["CanEdit"];
					retObj._canDelete					 = Convert.IsDBNull(dt.Rows[0]["CanDelete"]) ? (bool?)null : (bool?)dt.Rows[0]["CanDelete"];
					retObj._fullAccess					 = Convert.IsDBNull(dt.Rows[0]["FullAccess"]) ? (bool?)null : (bool?)dt.Rows[0]["FullAccess"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table AppRole based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_appRoleId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table AppRole
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _appRoleId));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appRoleCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appRoleNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appRoleNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FullAccess", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fullAccess?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_appRoleId					 = Convert.IsDBNull(command.Parameters["@AppRoleId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AppRoleId"].Value;
				_appRoleCode					 = Convert.IsDBNull(command.Parameters["@AppRoleCode"].Value) ? null : (string)command.Parameters["@AppRoleCode"].Value;
				_appRoleNameEn					 = Convert.IsDBNull(command.Parameters["@AppRoleNameEn"].Value) ? null : (string)command.Parameters["@AppRoleNameEn"].Value;
				_appRoleNameAr					 = Convert.IsDBNull(command.Parameters["@AppRoleNameAr"].Value) ? null : (string)command.Parameters["@AppRoleNameAr"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@icon"].Value) ? null : (string)command.Parameters["@icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@color"].Value) ? null : (string)command.Parameters["@color"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_fullAccess					 = Convert.IsDBNull(command.Parameters["@FullAccess"].Value) ? (bool?)null : (bool?)command.Parameters["@FullAccess"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppRole
		///</Summary>
		///<returns>
		///IList-DAOAppRole.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppRole> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppRole");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppRole> objList = new List<DAOAppRole>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppRole retObj = new DAOAppRole();
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._appRoleCode					 = Convert.IsDBNull(row["AppRoleCode"]) ? null : (string)row["AppRoleCode"];
						retObj._appRoleNameEn					 = Convert.IsDBNull(row["AppRoleNameEn"]) ? null : (string)row["AppRoleNameEn"];
						retObj._appRoleNameAr					 = Convert.IsDBNull(row["AppRoleNameAr"]) ? null : (string)row["AppRoleNameAr"];
						retObj._icon					 = Convert.IsDBNull(row["icon"]) ? null : (string)row["icon"];
						retObj._color					 = Convert.IsDBNull(row["color"]) ? null : (string)row["color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._fullAccess					 = Convert.IsDBNull(row["FullAccess"]) ? (bool?)null : (bool?)row["FullAccess"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppRole
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppRole_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppRole");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "AppRoleId", true) == 0) lst.Add(Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"]);
						if (string.Compare(projection.Member, "AppRoleCode", true) == 0) lst.Add(Convert.IsDBNull(row["AppRoleCode"]) ? null : (string)row["AppRoleCode"]);
						if (string.Compare(projection.Member, "AppRoleNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["AppRoleNameEn"]) ? null : (string)row["AppRoleNameEn"]);
						if (string.Compare(projection.Member, "AppRoleNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["AppRoleNameAr"]) ? null : (string)row["AppRoleNameAr"]);
						if (string.Compare(projection.Member, "icon", true) == 0) lst.Add(Convert.IsDBNull(row["icon"]) ? null : (string)row["icon"]);
						if (string.Compare(projection.Member, "color", true) == 0) lst.Add(Convert.IsDBNull(row["color"]) ? null : (string)row["color"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "FullAccess", true) == 0) lst.Add(Convert.IsDBNull(row["FullAccess"]) ? (bool?)null : (bool?)row["FullAccess"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppRole
		///</Summary>
		///<returns>
		///IList-DAOAppRole.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppRole> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppRole_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppRole");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppRole> objList = new List<DAOAppRole>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppRole retObj = new DAOAppRole();
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._appRoleCode					 = Convert.IsDBNull(row["AppRoleCode"]) ? null : (string)row["AppRoleCode"];
						retObj._appRoleNameEn					 = Convert.IsDBNull(row["AppRoleNameEn"]) ? null : (string)row["AppRoleNameEn"];
						retObj._appRoleNameAr					 = Convert.IsDBNull(row["AppRoleNameAr"]) ? null : (string)row["AppRoleNameAr"];
						retObj._icon					 = Convert.IsDBNull(row["icon"]) ? null : (string)row["icon"];
						retObj._color					 = Convert.IsDBNull(row["color"]) ? null : (string)row["color"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._fullAccess					 = Convert.IsDBNull(row["FullAccess"]) ? (bool?)null : (bool?)row["FullAccess"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppRole
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppRole_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table AppRole based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppRole_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_appRoleId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appRoleCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appRoleNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_appRoleNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FullAccess", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fullAccess?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_appRoleId					 = Convert.IsDBNull(command.Parameters["@AppRoleId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AppRoleId"].Value;
				_appRoleCode					 = Convert.IsDBNull(command.Parameters["@AppRoleCode"].Value) ? null : (string)command.Parameters["@AppRoleCode"].Value;
				_appRoleNameEn					 = Convert.IsDBNull(command.Parameters["@AppRoleNameEn"].Value) ? null : (string)command.Parameters["@AppRoleNameEn"].Value;
				_appRoleNameAr					 = Convert.IsDBNull(command.Parameters["@AppRoleNameAr"].Value) ? null : (string)command.Parameters["@AppRoleNameAr"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@icon"].Value) ? null : (string)command.Parameters["@icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@color"].Value) ? null : (string)command.Parameters["@color"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_fullAccess					 = Convert.IsDBNull(command.Parameters["@FullAccess"].Value) ? (bool?)null : (bool?)command.Parameters["@FullAccess"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? AppRoleId
		{
			get
			{
				return _appRoleId;
			}
			set
			{
				_appRoleId = value;
			}
		}

		public string AppRoleCode
		{
			get
			{
				return _appRoleCode;
			}
			set
			{
				_appRoleCode = value;
			}
		}

		public string AppRoleNameEn
		{
			get
			{
				return _appRoleNameEn;
			}
			set
			{
				_appRoleNameEn = value;
			}
		}

		public string AppRoleNameAr
		{
			get
			{
				return _appRoleNameAr;
			}
			set
			{
				_appRoleNameAr = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public bool? FullAccess
		{
			get
			{
				return _fullAccess;
			}
			set
			{
				_fullAccess = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppRole_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[AppRoleId]
			,[AppRoleCode]
			,[AppRoleNameEn]
			,[AppRoleNameAr]
			,[icon]
			,[color]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[FullAccess]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[AppRole]
			WHERE 
			[AppRoleId] = @AppRoleId
			";

		internal static string ctprAppRole_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[AppRole]
			WHERE 
			[AppRoleId] = @AppRoleId
			";

		internal static string ctprAppRole_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[AppRole]
			(
			[AppRoleCode]
			,[AppRoleNameEn]
			,[AppRoleNameAr]
			,[icon]
			,[color]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[FullAccess]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@AppRoleCode
			,@AppRoleNameEn
			,@AppRoleNameAr
			,@icon
			,@color
			,@DisplayOrder
			,@IsActive
			,@CanEdit
			,@CanDelete
			,@FullAccess
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@AppRoleId = [AppRoleId]
			,@AppRoleCode = [AppRoleCode]
			,@AppRoleNameEn = [AppRoleNameEn]
			,@AppRoleNameAr = [AppRoleNameAr]
			,@icon = [icon]
			,@color = [color]
			,@DisplayOrder = [DisplayOrder]
			,@IsActive = [IsActive]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@FullAccess = [FullAccess]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[AppRole]
			WHERE 
			[AppRoleId] = SCOPE_IDENTITY()
			";

		internal static string ctprAppRole_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[AppRoleId]
			,[AppRoleCode]
			,[AppRoleNameEn]
			,[AppRoleNameAr]
			,[icon]
			,[color]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[FullAccess]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[AppRole]
			";

		internal static string ctprAppRole_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppRole]
			";

		internal static string ctprAppRole_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppRole]
			##CRITERIA##
			";

		internal static string ctprAppRole_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[AppRoleId]
			,[AppRoleCode]
			,[AppRoleNameEn]
			,[AppRoleNameAr]
			,[icon]
			,[color]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[FullAccess]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[AppRole]
			##CRITERIA##
			";

		internal static string ctprAppRole_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppRole]
			##CRITERIA##
			";

		internal static string ctprAppRole_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[AppRole]
			SET
			[AppRoleCode] = @AppRoleCode
			,[AppRoleNameEn] = @AppRoleNameEn
			,[AppRoleNameAr] = @AppRoleNameAr
			,[icon] = @icon
			,[color] = @color
			,[DisplayOrder] = @DisplayOrder
			,[IsActive] = @IsActive
			,[CanEdit] = @CanEdit
			,[CanDelete] = @CanDelete
			,[FullAccess] = @FullAccess
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[AppRoleId] = @AppRoleId
			SELECT 
			@AppRoleId = [AppRoleId]
			,@AppRoleCode = [AppRoleCode]
			,@AppRoleNameEn = [AppRoleNameEn]
			,@AppRoleNameAr = [AppRoleNameAr]
			,@icon = [icon]
			,@color = [color]
			,@DisplayOrder = [DisplayOrder]
			,@IsActive = [IsActive]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@FullAccess = [FullAccess]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[AppRole]
			WHERE 
			[AppRoleId] = @AppRoleId
			";

	}
}
#endregion
