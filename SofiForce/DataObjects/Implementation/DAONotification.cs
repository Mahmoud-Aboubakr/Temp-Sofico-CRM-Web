/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAONotification : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _notificationId;
		protected DateTime? _notificationDate;
		protected DateTime? _scheduleTime;
		protected DateTime? _notificationDateTime;
		protected Int32? _priorityId;
		protected string _message;
		protected Int32? _notificationTypeId;
		protected Int32? _userGroupId;
		protected Int32? _userId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAONotification()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Notification based on the primary key(s)
		///</Summary>
		///<returns>
		///DAONotification
		///</returns>
		///<parameters>
		///Int32? notificationId
		///</parameters>
		public static DAONotification SelectOne(Int32? notificationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)notificationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAONotification retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAONotification();
					retObj._notificationId					 = Convert.IsDBNull(dt.Rows[0]["NotificationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["NotificationId"];
					retObj._notificationDate					 = Convert.IsDBNull(dt.Rows[0]["NotificationDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["NotificationDate"];
					retObj._scheduleTime					 = Convert.IsDBNull(dt.Rows[0]["ScheduleTime"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ScheduleTime"];
					retObj._notificationDateTime					 = Convert.IsDBNull(dt.Rows[0]["NotificationDateTime"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["NotificationDateTime"];
					retObj._priorityId					 = Convert.IsDBNull(dt.Rows[0]["PriorityId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PriorityId"];
					retObj._message					 = Convert.IsDBNull(dt.Rows[0]["Message"]) ? null : (string)dt.Rows[0]["Message"];
					retObj._notificationTypeId					 = Convert.IsDBNull(dt.Rows[0]["NotificationTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["NotificationTypeId"];
					retObj._userGroupId					 = Convert.IsDBNull(dt.Rows[0]["UserGroupId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserGroupId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Notification based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_notificationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Notification based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAONotification.
		///</returns>
		///<parameters>
		///Int32? priorityId
		///</parameters>
		public static IList<DAONotification> SelectAllByPriorityId(Int32? priorityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAllByPriorityId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAONotification> objList = new List<DAONotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAONotification retObj = new DAONotification();
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._scheduleTime					 = Convert.IsDBNull(row["ScheduleTime"]) ? (DateTime?)null : (DateTime?)row["ScheduleTime"];
						retObj._notificationDateTime					 = Convert.IsDBNull(row["NotificationDateTime"]) ? (DateTime?)null : (DateTime?)row["NotificationDateTime"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._notificationTypeId					 = Convert.IsDBNull(row["NotificationTypeId"]) ? (Int32?)null : (Int32?)row["NotificationTypeId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? priorityId
		///</parameters>
		public static Int32 SelectAllByPriorityIdCount(Int32? priorityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAllByPriorityIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Notification with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? priorityId
		///</parameters>
		public static void DeleteAllByPriorityId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? priorityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_DeleteAllByPriorityId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Notification based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAONotification.
		///</returns>
		///<parameters>
		///Int32? notificationTypeId
		///</parameters>
		public static IList<DAONotification> SelectAllByNotificationTypeId(Int32? notificationTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAllByNotificationTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)notificationTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAONotification> objList = new List<DAONotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAONotification retObj = new DAONotification();
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._scheduleTime					 = Convert.IsDBNull(row["ScheduleTime"]) ? (DateTime?)null : (DateTime?)row["ScheduleTime"];
						retObj._notificationDateTime					 = Convert.IsDBNull(row["NotificationDateTime"]) ? (DateTime?)null : (DateTime?)row["NotificationDateTime"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._notificationTypeId					 = Convert.IsDBNull(row["NotificationTypeId"]) ? (Int32?)null : (Int32?)row["NotificationTypeId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? notificationTypeId
		///</parameters>
		public static Int32 SelectAllByNotificationTypeIdCount(Int32? notificationTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAllByNotificationTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)notificationTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Notification with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? notificationTypeId
		///</parameters>
		public static void DeleteAllByNotificationTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? notificationTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_DeleteAllByNotificationTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)notificationTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Notification based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAONotification.
		///</returns>
		///<parameters>
		///Int32? userGroupId
		///</parameters>
		public static IList<DAONotification> SelectAllByUserGroupId(Int32? userGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAllByUserGroupId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAONotification> objList = new List<DAONotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAONotification retObj = new DAONotification();
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._scheduleTime					 = Convert.IsDBNull(row["ScheduleTime"]) ? (DateTime?)null : (DateTime?)row["ScheduleTime"];
						retObj._notificationDateTime					 = Convert.IsDBNull(row["NotificationDateTime"]) ? (DateTime?)null : (DateTime?)row["NotificationDateTime"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._notificationTypeId					 = Convert.IsDBNull(row["NotificationTypeId"]) ? (Int32?)null : (Int32?)row["NotificationTypeId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? userGroupId
		///</parameters>
		public static Int32 SelectAllByUserGroupIdCount(Int32? userGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAllByUserGroupIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Notification with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userGroupId
		///</parameters>
		public static void DeleteAllByUserGroupId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_DeleteAllByUserGroupId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userGroupId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Notification
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _notificationId));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ScheduleTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_scheduleTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDateTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDateTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priorityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_notificationTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_notificationId					 = Convert.IsDBNull(command.Parameters["@NotificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@NotificationId"].Value;
				_notificationDate					 = Convert.IsDBNull(command.Parameters["@NotificationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@NotificationDate"].Value;
				_scheduleTime					 = Convert.IsDBNull(command.Parameters["@ScheduleTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ScheduleTime"].Value;
				_notificationDateTime					 = Convert.IsDBNull(command.Parameters["@NotificationDateTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@NotificationDateTime"].Value;
				_priorityId					 = Convert.IsDBNull(command.Parameters["@PriorityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PriorityId"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;
				_notificationTypeId					 = Convert.IsDBNull(command.Parameters["@NotificationTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@NotificationTypeId"].Value;
				_userGroupId					 = Convert.IsDBNull(command.Parameters["@UserGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserGroupId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Notification
		///</Summary>
		///<returns>
		///IList-DAONotification.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAONotification> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAONotification> objList = new List<DAONotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAONotification retObj = new DAONotification();
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._scheduleTime					 = Convert.IsDBNull(row["ScheduleTime"]) ? (DateTime?)null : (DateTime?)row["ScheduleTime"];
						retObj._notificationDateTime					 = Convert.IsDBNull(row["NotificationDateTime"]) ? (DateTime?)null : (DateTime?)row["NotificationDateTime"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._notificationTypeId					 = Convert.IsDBNull(row["NotificationTypeId"]) ? (Int32?)null : (Int32?)row["NotificationTypeId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiNotification
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprNotification_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "NotificationId", true) == 0) lst.Add(Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"]);
						if (string.Compare(projection.Member, "NotificationDate", true) == 0) lst.Add(Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"]);
						if (string.Compare(projection.Member, "ScheduleTime", true) == 0) lst.Add(Convert.IsDBNull(row["ScheduleTime"]) ? (DateTime?)null : (DateTime?)row["ScheduleTime"]);
						if (string.Compare(projection.Member, "NotificationDateTime", true) == 0) lst.Add(Convert.IsDBNull(row["NotificationDateTime"]) ? (DateTime?)null : (DateTime?)row["NotificationDateTime"]);
						if (string.Compare(projection.Member, "PriorityId", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"]);
						if (string.Compare(projection.Member, "Message", true) == 0) lst.Add(Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"]);
						if (string.Compare(projection.Member, "NotificationTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["NotificationTypeId"]) ? (Int32?)null : (Int32?)row["NotificationTypeId"]);
						if (string.Compare(projection.Member, "UserGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Notification
		///</Summary>
		///<returns>
		///IList-DAONotification.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAONotification> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprNotification_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Notification");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAONotification> objList = new List<DAONotification>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAONotification retObj = new DAONotification();
						retObj._notificationId					 = Convert.IsDBNull(row["NotificationId"]) ? (Int32?)null : (Int32?)row["NotificationId"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._scheduleTime					 = Convert.IsDBNull(row["ScheduleTime"]) ? (DateTime?)null : (DateTime?)row["ScheduleTime"];
						retObj._notificationDateTime					 = Convert.IsDBNull(row["NotificationDateTime"]) ? (DateTime?)null : (DateTime?)row["NotificationDateTime"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._notificationTypeId					 = Convert.IsDBNull(row["NotificationTypeId"]) ? (Int32?)null : (Int32?)row["NotificationTypeId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Notification
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprNotification_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Notification based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprNotification_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@NotificationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_notificationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ScheduleTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_scheduleTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDateTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDateTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PriorityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priorityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_notificationTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_notificationId					 = Convert.IsDBNull(command.Parameters["@NotificationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@NotificationId"].Value;
				_notificationDate					 = Convert.IsDBNull(command.Parameters["@NotificationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@NotificationDate"].Value;
				_scheduleTime					 = Convert.IsDBNull(command.Parameters["@ScheduleTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ScheduleTime"].Value;
				_notificationDateTime					 = Convert.IsDBNull(command.Parameters["@NotificationDateTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@NotificationDateTime"].Value;
				_priorityId					 = Convert.IsDBNull(command.Parameters["@PriorityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PriorityId"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;
				_notificationTypeId					 = Convert.IsDBNull(command.Parameters["@NotificationTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@NotificationTypeId"].Value;
				_userGroupId					 = Convert.IsDBNull(command.Parameters["@UserGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserGroupId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? NotificationId
		{
			get
			{
				return _notificationId;
			}
			set
			{
				_notificationId = value;
			}
		}

		public DateTime? NotificationDate
		{
			get
			{
				return _notificationDate;
			}
			set
			{
				_notificationDate = value;
			}
		}

		public DateTime? ScheduleTime
		{
			get
			{
				return _scheduleTime;
			}
			set
			{
				_scheduleTime = value;
			}
		}

		public DateTime? NotificationDateTime
		{
			get
			{
				return _notificationDateTime;
			}
			set
			{
				_notificationDateTime = value;
			}
		}

		public Int32? PriorityId
		{
			get
			{
				return _priorityId;
			}
			set
			{
				_priorityId = value;
			}
		}

		public string Message
		{
			get
			{
				return _message;
			}
			set
			{
				_message = value;
			}
		}

		public Int32? NotificationTypeId
		{
			get
			{
				return _notificationTypeId;
			}
			set
			{
				_notificationTypeId = value;
			}
		}

		public Int32? UserGroupId
		{
			get
			{
				return _userGroupId;
			}
			set
			{
				_userGroupId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprNotification_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[NotificationId]
			,[NotificationDate]
			,[ScheduleTime]
			,[NotificationDateTime]
			,[PriorityId]
			,[Message]
			,[NotificationTypeId]
			,[UserGroupId]
			,[UserId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Notification]
			WHERE 
			[NotificationId] = @NotificationId
			";

		internal static string ctprNotification_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Notification]
			WHERE 
			[NotificationId] = @NotificationId
			";

		internal static string ctprNotification_SelectAllByPriorityId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[NotificationId]
			,[NotificationDate]
			,[ScheduleTime]
			,[NotificationDateTime]
			,[PriorityId]
			,[Message]
			,[NotificationTypeId]
			,[UserGroupId]
			,[UserId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Notification]
			WHERE 
			[PriorityId] = @PriorityId OR ([PriorityId] IS NULL AND @PriorityId IS NULL)
			";

		internal static string ctprNotification_SelectAllByPriorityIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Notification]
			WHERE 
			[PriorityId] = @PriorityId OR ([PriorityId] IS NULL AND @PriorityId IS NULL)
			";

		internal static string ctprNotification_DeleteAllByPriorityId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Notification]
			WHERE 
			[PriorityId] = @PriorityId OR ([PriorityId] IS NULL AND @PriorityId IS NULL)
			";

		internal static string ctprNotification_SelectAllByNotificationTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[NotificationId]
			,[NotificationDate]
			,[ScheduleTime]
			,[NotificationDateTime]
			,[PriorityId]
			,[Message]
			,[NotificationTypeId]
			,[UserGroupId]
			,[UserId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Notification]
			WHERE 
			[NotificationTypeId] = @NotificationTypeId OR ([NotificationTypeId] IS NULL AND @NotificationTypeId IS NULL)
			";

		internal static string ctprNotification_SelectAllByNotificationTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Notification]
			WHERE 
			[NotificationTypeId] = @NotificationTypeId OR ([NotificationTypeId] IS NULL AND @NotificationTypeId IS NULL)
			";

		internal static string ctprNotification_DeleteAllByNotificationTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Notification]
			WHERE 
			[NotificationTypeId] = @NotificationTypeId OR ([NotificationTypeId] IS NULL AND @NotificationTypeId IS NULL)
			";

		internal static string ctprNotification_SelectAllByUserGroupId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[NotificationId]
			,[NotificationDate]
			,[ScheduleTime]
			,[NotificationDateTime]
			,[PriorityId]
			,[Message]
			,[NotificationTypeId]
			,[UserGroupId]
			,[UserId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Notification]
			WHERE 
			[UserGroupId] = @UserGroupId OR ([UserGroupId] IS NULL AND @UserGroupId IS NULL)
			";

		internal static string ctprNotification_SelectAllByUserGroupIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Notification]
			WHERE 
			[UserGroupId] = @UserGroupId OR ([UserGroupId] IS NULL AND @UserGroupId IS NULL)
			";

		internal static string ctprNotification_DeleteAllByUserGroupId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Notification]
			WHERE 
			[UserGroupId] = @UserGroupId OR ([UserGroupId] IS NULL AND @UserGroupId IS NULL)
			";

		internal static string ctprNotification_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Notification]
			(
			[NotificationDate]
			,[ScheduleTime]
			,[NotificationDateTime]
			,[PriorityId]
			,[Message]
			,[NotificationTypeId]
			,[UserGroupId]
			,[UserId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@NotificationDate
			,@ScheduleTime
			,@NotificationDateTime
			,@PriorityId
			,@Message
			,@NotificationTypeId
			,@UserGroupId
			,@UserId
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@NotificationId = [NotificationId]
			,@NotificationDate = [NotificationDate]
			,@ScheduleTime = [ScheduleTime]
			,@NotificationDateTime = [NotificationDateTime]
			,@PriorityId = [PriorityId]
			,@Message = [Message]
			,@NotificationTypeId = [NotificationTypeId]
			,@UserGroupId = [UserGroupId]
			,@UserId = [UserId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Notification]
			WHERE 
			[NotificationId] = SCOPE_IDENTITY()
			";

		internal static string ctprNotification_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[NotificationId]
			,[NotificationDate]
			,[ScheduleTime]
			,[NotificationDateTime]
			,[PriorityId]
			,[Message]
			,[NotificationTypeId]
			,[UserGroupId]
			,[UserId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Notification]
			";

		internal static string ctprNotification_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Notification]
			";

		internal static string ctprNotification_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Notification]
			##CRITERIA##
			";

		internal static string ctprNotification_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[NotificationId]
			,[NotificationDate]
			,[ScheduleTime]
			,[NotificationDateTime]
			,[PriorityId]
			,[Message]
			,[NotificationTypeId]
			,[UserGroupId]
			,[UserId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Notification]
			##CRITERIA##
			";

		internal static string ctprNotification_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Notification]
			##CRITERIA##
			";

		internal static string ctprNotification_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Notification]
			SET
			[NotificationDate] = @NotificationDate
			,[ScheduleTime] = @ScheduleTime
			,[NotificationDateTime] = @NotificationDateTime
			,[PriorityId] = @PriorityId
			,[Message] = @Message
			,[NotificationTypeId] = @NotificationTypeId
			,[UserGroupId] = @UserGroupId
			,[UserId] = @UserId
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[NotificationId] = @NotificationId
			SELECT 
			@NotificationId = [NotificationId]
			,@NotificationDate = [NotificationDate]
			,@ScheduleTime = [ScheduleTime]
			,@NotificationDateTime = [NotificationDateTime]
			,@PriorityId = [PriorityId]
			,@Message = [Message]
			,@NotificationTypeId = [NotificationTypeId]
			,@UserGroupId = [UserGroupId]
			,@UserId = [UserId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Notification]
			WHERE 
			[NotificationId] = @NotificationId
			";

	}
}
#endregion
