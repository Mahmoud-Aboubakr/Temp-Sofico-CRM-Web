/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/19/2022 5:43:30 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientVisitPlan : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _visitPlanId;
		protected Int32? _clientId;
		protected Int32? _day1;
		protected Int32? _day2;
		protected Int32? _day3;
		protected Int32? _day4;
		protected Int32? _day5;
		protected Int32? _day6;
		protected Int32? _day7;
		#endregion

		#region class methods
		public DAOClientVisitPlan()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_VisitPlan based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientVisitPlan
		///</returns>
		///<parameters>
		///Int32? visitPlanId
		///</parameters>
		public static DAOClientVisitPlan SelectOne(Int32? visitPlanId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_VisitPlan");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VisitPlanId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)visitPlanId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientVisitPlan retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientVisitPlan();
					retObj._visitPlanId					 = Convert.IsDBNull(dt.Rows[0]["VisitPlanId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["VisitPlanId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._day1					 = Convert.IsDBNull(dt.Rows[0]["Day1"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Day1"];
					retObj._day2					 = Convert.IsDBNull(dt.Rows[0]["Day2"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Day2"];
					retObj._day3					 = Convert.IsDBNull(dt.Rows[0]["Day3"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Day3"];
					retObj._day4					 = Convert.IsDBNull(dt.Rows[0]["Day4"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Day4"];
					retObj._day5					 = Convert.IsDBNull(dt.Rows[0]["Day5"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Day5"];
					retObj._day6					 = Convert.IsDBNull(dt.Rows[0]["Day6"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Day6"];
					retObj._day7					 = Convert.IsDBNull(dt.Rows[0]["Day7"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Day7"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_VisitPlan based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VisitPlanId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_visitPlanId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_VisitPlan based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientVisitPlan.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOClientVisitPlan> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_VisitPlan");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientVisitPlan> objList = new List<DAOClientVisitPlan>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientVisitPlan retObj = new DAOClientVisitPlan();
						retObj._visitPlanId					 = Convert.IsDBNull(row["VisitPlanId"]) ? (Int32?)null : (Int32?)row["VisitPlanId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (Int32?)null : (Int32?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (Int32?)null : (Int32?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (Int32?)null : (Int32?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (Int32?)null : (Int32?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (Int32?)null : (Int32?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (Int32?)null : (Int32?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (Int32?)null : (Int32?)row["Day7"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_VisitPlan with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_VisitPlan
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VisitPlanId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _visitPlanId));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day3", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day3?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day4", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day4?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day5", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day5?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day6", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day6?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day7", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day7?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_visitPlanId					 = Convert.IsDBNull(command.Parameters["@VisitPlanId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VisitPlanId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_day1					 = Convert.IsDBNull(command.Parameters["@Day1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day1"].Value;
				_day2					 = Convert.IsDBNull(command.Parameters["@Day2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day2"].Value;
				_day3					 = Convert.IsDBNull(command.Parameters["@Day3"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day3"].Value;
				_day4					 = Convert.IsDBNull(command.Parameters["@Day4"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day4"].Value;
				_day5					 = Convert.IsDBNull(command.Parameters["@Day5"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day5"].Value;
				_day6					 = Convert.IsDBNull(command.Parameters["@Day6"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day6"].Value;
				_day7					 = Convert.IsDBNull(command.Parameters["@Day7"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day7"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_VisitPlan
		///</Summary>
		///<returns>
		///IList-DAOClientVisitPlan.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientVisitPlan> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_VisitPlan");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientVisitPlan> objList = new List<DAOClientVisitPlan>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientVisitPlan retObj = new DAOClientVisitPlan();
						retObj._visitPlanId					 = Convert.IsDBNull(row["VisitPlanId"]) ? (Int32?)null : (Int32?)row["VisitPlanId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (Int32?)null : (Int32?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (Int32?)null : (Int32?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (Int32?)null : (Int32?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (Int32?)null : (Int32?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (Int32?)null : (Int32?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (Int32?)null : (Int32?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (Int32?)null : (Int32?)row["Day7"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_VisitPlan
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_VisitPlan_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_VisitPlan");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "VisitPlanId", true) == 0) lst.Add(Convert.IsDBNull(row["VisitPlanId"]) ? (Int32?)null : (Int32?)row["VisitPlanId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "Day1", true) == 0) lst.Add(Convert.IsDBNull(row["Day1"]) ? (Int32?)null : (Int32?)row["Day1"]);
						if (string.Compare(projection.Member, "Day2", true) == 0) lst.Add(Convert.IsDBNull(row["Day2"]) ? (Int32?)null : (Int32?)row["Day2"]);
						if (string.Compare(projection.Member, "Day3", true) == 0) lst.Add(Convert.IsDBNull(row["Day3"]) ? (Int32?)null : (Int32?)row["Day3"]);
						if (string.Compare(projection.Member, "Day4", true) == 0) lst.Add(Convert.IsDBNull(row["Day4"]) ? (Int32?)null : (Int32?)row["Day4"]);
						if (string.Compare(projection.Member, "Day5", true) == 0) lst.Add(Convert.IsDBNull(row["Day5"]) ? (Int32?)null : (Int32?)row["Day5"]);
						if (string.Compare(projection.Member, "Day6", true) == 0) lst.Add(Convert.IsDBNull(row["Day6"]) ? (Int32?)null : (Int32?)row["Day6"]);
						if (string.Compare(projection.Member, "Day7", true) == 0) lst.Add(Convert.IsDBNull(row["Day7"]) ? (Int32?)null : (Int32?)row["Day7"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_VisitPlan
		///</Summary>
		///<returns>
		///IList-DAOClientVisitPlan.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientVisitPlan> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_VisitPlan_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_VisitPlan");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientVisitPlan> objList = new List<DAOClientVisitPlan>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientVisitPlan retObj = new DAOClientVisitPlan();
						retObj._visitPlanId					 = Convert.IsDBNull(row["VisitPlanId"]) ? (Int32?)null : (Int32?)row["VisitPlanId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (Int32?)null : (Int32?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (Int32?)null : (Int32?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (Int32?)null : (Int32?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (Int32?)null : (Int32?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (Int32?)null : (Int32?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (Int32?)null : (Int32?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (Int32?)null : (Int32?)row["Day7"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_VisitPlan
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_VisitPlan_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_VisitPlan based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_VisitPlan_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VisitPlanId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_visitPlanId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day3", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day3?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day4", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day4?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day5", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day5?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day6", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day6?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day7", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_day7?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_visitPlanId					 = Convert.IsDBNull(command.Parameters["@VisitPlanId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VisitPlanId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_day1					 = Convert.IsDBNull(command.Parameters["@Day1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day1"].Value;
				_day2					 = Convert.IsDBNull(command.Parameters["@Day2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day2"].Value;
				_day3					 = Convert.IsDBNull(command.Parameters["@Day3"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day3"].Value;
				_day4					 = Convert.IsDBNull(command.Parameters["@Day4"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day4"].Value;
				_day5					 = Convert.IsDBNull(command.Parameters["@Day5"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day5"].Value;
				_day6					 = Convert.IsDBNull(command.Parameters["@Day6"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day6"].Value;
				_day7					 = Convert.IsDBNull(command.Parameters["@Day7"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Day7"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? VisitPlanId
		{
			get
			{
				return _visitPlanId;
			}
			set
			{
				_visitPlanId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? Day1
		{
			get
			{
				return _day1;
			}
			set
			{
				_day1 = value;
			}
		}

		public Int32? Day2
		{
			get
			{
				return _day2;
			}
			set
			{
				_day2 = value;
			}
		}

		public Int32? Day3
		{
			get
			{
				return _day3;
			}
			set
			{
				_day3 = value;
			}
		}

		public Int32? Day4
		{
			get
			{
				return _day4;
			}
			set
			{
				_day4 = value;
			}
		}

		public Int32? Day5
		{
			get
			{
				return _day5;
			}
			set
			{
				_day5 = value;
			}
		}

		public Int32? Day6
		{
			get
			{
				return _day6;
			}
			set
			{
				_day6 = value;
			}
		}

		public Int32? Day7
		{
			get
			{
				return _day7;
			}
			set
			{
				_day7 = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_VisitPlan_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[VisitPlanId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			FROM [dbo].[Client_VisitPlan]
			WHERE 
			[VisitPlanId] = @VisitPlanId
			";

		internal static string ctprClient_VisitPlan_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_VisitPlan]
			WHERE 
			[VisitPlanId] = @VisitPlanId
			";

		internal static string ctprClient_VisitPlan_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[VisitPlanId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			FROM [dbo].[Client_VisitPlan]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_VisitPlan_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_VisitPlan]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_VisitPlan_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_VisitPlan]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_VisitPlan_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_VisitPlan]
			(
			[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			)
			VALUES
			(
			@ClientId
			,@Day1
			,@Day2
			,@Day3
			,@Day4
			,@Day5
			,@Day6
			,@Day7
			)
			SELECT 
			@VisitPlanId = [VisitPlanId]
			,@ClientId = [ClientId]
			,@Day1 = [Day1]
			,@Day2 = [Day2]
			,@Day3 = [Day3]
			,@Day4 = [Day4]
			,@Day5 = [Day5]
			,@Day6 = [Day6]
			,@Day7 = [Day7]
			FROM [dbo].[Client_VisitPlan]
			WHERE 
			[VisitPlanId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_VisitPlan_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[VisitPlanId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			FROM [dbo].[Client_VisitPlan]
			";

		internal static string ctprClient_VisitPlan_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_VisitPlan]
			";

		internal static string ctprClient_VisitPlan_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_VisitPlan]
			##CRITERIA##
			";

		internal static string ctprClient_VisitPlan_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[VisitPlanId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			FROM [dbo].[Client_VisitPlan]
			##CRITERIA##
			";

		internal static string ctprClient_VisitPlan_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_VisitPlan]
			##CRITERIA##
			";

		internal static string ctprClient_VisitPlan_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_VisitPlan]
			SET
			[ClientId] = @ClientId
			,[Day1] = @Day1
			,[Day2] = @Day2
			,[Day3] = @Day3
			,[Day4] = @Day4
			,[Day5] = @Day5
			,[Day6] = @Day6
			,[Day7] = @Day7
			WHERE 
			[VisitPlanId] = @VisitPlanId
			SELECT 
			@VisitPlanId = [VisitPlanId]
			,@ClientId = [ClientId]
			,@Day1 = [Day1]
			,@Day2 = [Day2]
			,@Day3 = [Day3]
			,@Day4 = [Day4]
			,@Day5 = [Day5]
			,@Day6 = [Day6]
			,@Day7 = [Day7]
			FROM [dbo].[Client_VisitPlan]
			WHERE 
			[VisitPlanId] = @VisitPlanId
			";

	}
}
#endregion
