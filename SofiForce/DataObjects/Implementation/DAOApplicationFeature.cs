/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOApplicationFeature : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _featueId;
		protected Int32? _applicationId;
		protected string _featueCode;
		protected string _featueNameEn;
		protected string _featueNameAr;
		protected string _featuePath;
		protected string _icon;
		protected string _color;
		protected Int32? _displyOrder;
		protected bool? _isActive;
		protected bool? _isNew;
		protected bool? _isUpdated;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOApplicationFeature()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Application_Feature based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOApplicationFeature
		///</returns>
		///<parameters>
		///Int32? featueId
		///</parameters>
		public static DAOApplicationFeature SelectOne(Int32? featueId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Feature");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@FeatueId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)featueId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOApplicationFeature retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOApplicationFeature();
					retObj._featueId					 = Convert.IsDBNull(dt.Rows[0]["FeatueId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FeatueId"];
					retObj._applicationId					 = Convert.IsDBNull(dt.Rows[0]["ApplicationId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ApplicationId"];
					retObj._featueCode					 = Convert.IsDBNull(dt.Rows[0]["FeatueCode"]) ? null : (string)dt.Rows[0]["FeatueCode"];
					retObj._featueNameEn					 = Convert.IsDBNull(dt.Rows[0]["FeatueNameEn"]) ? null : (string)dt.Rows[0]["FeatueNameEn"];
					retObj._featueNameAr					 = Convert.IsDBNull(dt.Rows[0]["FeatueNameAr"]) ? null : (string)dt.Rows[0]["FeatueNameAr"];
					retObj._featuePath					 = Convert.IsDBNull(dt.Rows[0]["FeatuePath"]) ? null : (string)dt.Rows[0]["FeatuePath"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["Icon"]) ? null : (string)dt.Rows[0]["Icon"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["Color"]) ? null : (string)dt.Rows[0]["Color"];
					retObj._displyOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplyOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplyOrder"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._isNew					 = Convert.IsDBNull(dt.Rows[0]["IsNew"]) ? (bool?)null : (bool?)dt.Rows[0]["IsNew"];
					retObj._isUpdated					 = Convert.IsDBNull(dt.Rows[0]["IsUpdated"]) ? (bool?)null : (bool?)dt.Rows[0]["IsUpdated"];
					retObj._canEdit					 = Convert.IsDBNull(dt.Rows[0]["CanEdit"]) ? (bool?)null : (bool?)dt.Rows[0]["CanEdit"];
					retObj._canDelete					 = Convert.IsDBNull(dt.Rows[0]["CanDelete"]) ? (bool?)null : (bool?)dt.Rows[0]["CanDelete"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Application_Feature based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@FeatueId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_featueId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Application_Feature based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOApplicationFeature.
		///</returns>
		///<parameters>
		///Int32? applicationId
		///</parameters>
		public static IList<DAOApplicationFeature> SelectAllByApplicationId(Int32? applicationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_SelectAllByApplicationId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Feature");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)applicationId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOApplicationFeature> objList = new List<DAOApplicationFeature>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOApplicationFeature retObj = new DAOApplicationFeature();
						retObj._featueId					 = Convert.IsDBNull(row["FeatueId"]) ? (Int32?)null : (Int32?)row["FeatueId"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						retObj._featueCode					 = Convert.IsDBNull(row["FeatueCode"]) ? null : (string)row["FeatueCode"];
						retObj._featueNameEn					 = Convert.IsDBNull(row["FeatueNameEn"]) ? null : (string)row["FeatueNameEn"];
						retObj._featueNameAr					 = Convert.IsDBNull(row["FeatueNameAr"]) ? null : (string)row["FeatueNameAr"];
						retObj._featuePath					 = Convert.IsDBNull(row["FeatuePath"]) ? null : (string)row["FeatuePath"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displyOrder					 = Convert.IsDBNull(row["DisplyOrder"]) ? (Int32?)null : (Int32?)row["DisplyOrder"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._isUpdated					 = Convert.IsDBNull(row["IsUpdated"]) ? (bool?)null : (bool?)row["IsUpdated"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? applicationId
		///</parameters>
		public static Int32 SelectAllByApplicationIdCount(Int32? applicationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_SelectAllByApplicationIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)applicationId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Application_Feature with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? applicationId
		///</parameters>
		public static void DeleteAllByApplicationId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? applicationId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_DeleteAllByApplicationId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)applicationId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Application_Feature
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@FeatueId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _featueId));
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_applicationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatueCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featueCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatueNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featueNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatueNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featueNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatuePath", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featuePath?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplyOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displyOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNew", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNew?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsUpdated", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isUpdated?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_featueId					 = Convert.IsDBNull(command.Parameters["@FeatueId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FeatueId"].Value;
				_applicationId					 = Convert.IsDBNull(command.Parameters["@ApplicationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ApplicationId"].Value;
				_featueCode					 = Convert.IsDBNull(command.Parameters["@FeatueCode"].Value) ? null : (string)command.Parameters["@FeatueCode"].Value;
				_featueNameEn					 = Convert.IsDBNull(command.Parameters["@FeatueNameEn"].Value) ? null : (string)command.Parameters["@FeatueNameEn"].Value;
				_featueNameAr					 = Convert.IsDBNull(command.Parameters["@FeatueNameAr"].Value) ? null : (string)command.Parameters["@FeatueNameAr"].Value;
				_featuePath					 = Convert.IsDBNull(command.Parameters["@FeatuePath"].Value) ? null : (string)command.Parameters["@FeatuePath"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_displyOrder					 = Convert.IsDBNull(command.Parameters["@DisplyOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplyOrder"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_isNew					 = Convert.IsDBNull(command.Parameters["@IsNew"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNew"].Value;
				_isUpdated					 = Convert.IsDBNull(command.Parameters["@IsUpdated"].Value) ? (bool?)null : (bool?)command.Parameters["@IsUpdated"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Application_Feature
		///</Summary>
		///<returns>
		///IList-DAOApplicationFeature.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOApplicationFeature> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Feature");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOApplicationFeature> objList = new List<DAOApplicationFeature>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOApplicationFeature retObj = new DAOApplicationFeature();
						retObj._featueId					 = Convert.IsDBNull(row["FeatueId"]) ? (Int32?)null : (Int32?)row["FeatueId"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						retObj._featueCode					 = Convert.IsDBNull(row["FeatueCode"]) ? null : (string)row["FeatueCode"];
						retObj._featueNameEn					 = Convert.IsDBNull(row["FeatueNameEn"]) ? null : (string)row["FeatueNameEn"];
						retObj._featueNameAr					 = Convert.IsDBNull(row["FeatueNameAr"]) ? null : (string)row["FeatueNameAr"];
						retObj._featuePath					 = Convert.IsDBNull(row["FeatuePath"]) ? null : (string)row["FeatuePath"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displyOrder					 = Convert.IsDBNull(row["DisplyOrder"]) ? (Int32?)null : (Int32?)row["DisplyOrder"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._isUpdated					 = Convert.IsDBNull(row["IsUpdated"]) ? (bool?)null : (bool?)row["IsUpdated"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiApplication_Feature
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprApplication_Feature_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Feature");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "FeatueId", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueId"]) ? (Int32?)null : (Int32?)row["FeatueId"]);
						if (string.Compare(projection.Member, "ApplicationId", true) == 0) lst.Add(Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"]);
						if (string.Compare(projection.Member, "FeatueCode", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueCode"]) ? null : (string)row["FeatueCode"]);
						if (string.Compare(projection.Member, "FeatueNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueNameEn"]) ? null : (string)row["FeatueNameEn"]);
						if (string.Compare(projection.Member, "FeatueNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["FeatueNameAr"]) ? null : (string)row["FeatueNameAr"]);
						if (string.Compare(projection.Member, "FeatuePath", true) == 0) lst.Add(Convert.IsDBNull(row["FeatuePath"]) ? null : (string)row["FeatuePath"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "DisplyOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplyOrder"]) ? (Int32?)null : (Int32?)row["DisplyOrder"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "IsNew", true) == 0) lst.Add(Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"]);
						if (string.Compare(projection.Member, "IsUpdated", true) == 0) lst.Add(Convert.IsDBNull(row["IsUpdated"]) ? (bool?)null : (bool?)row["IsUpdated"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Application_Feature
		///</Summary>
		///<returns>
		///IList-DAOApplicationFeature.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOApplicationFeature> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprApplication_Feature_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Application_Feature");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOApplicationFeature> objList = new List<DAOApplicationFeature>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOApplicationFeature retObj = new DAOApplicationFeature();
						retObj._featueId					 = Convert.IsDBNull(row["FeatueId"]) ? (Int32?)null : (Int32?)row["FeatueId"];
						retObj._applicationId					 = Convert.IsDBNull(row["ApplicationId"]) ? (Int32?)null : (Int32?)row["ApplicationId"];
						retObj._featueCode					 = Convert.IsDBNull(row["FeatueCode"]) ? null : (string)row["FeatueCode"];
						retObj._featueNameEn					 = Convert.IsDBNull(row["FeatueNameEn"]) ? null : (string)row["FeatueNameEn"];
						retObj._featueNameAr					 = Convert.IsDBNull(row["FeatueNameAr"]) ? null : (string)row["FeatueNameAr"];
						retObj._featuePath					 = Convert.IsDBNull(row["FeatuePath"]) ? null : (string)row["FeatuePath"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._displyOrder					 = Convert.IsDBNull(row["DisplyOrder"]) ? (Int32?)null : (Int32?)row["DisplyOrder"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._isUpdated					 = Convert.IsDBNull(row["IsUpdated"]) ? (bool?)null : (bool?)row["IsUpdated"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Application_Feature
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprApplication_Feature_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Application_Feature based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprApplication_Feature_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@FeatueId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_featueId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ApplicationId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_applicationId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatueCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featueCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatueNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featueNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatueNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featueNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FeatuePath", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_featuePath?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplyOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displyOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNew", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNew?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsUpdated", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isUpdated?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_featueId					 = Convert.IsDBNull(command.Parameters["@FeatueId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FeatueId"].Value;
				_applicationId					 = Convert.IsDBNull(command.Parameters["@ApplicationId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ApplicationId"].Value;
				_featueCode					 = Convert.IsDBNull(command.Parameters["@FeatueCode"].Value) ? null : (string)command.Parameters["@FeatueCode"].Value;
				_featueNameEn					 = Convert.IsDBNull(command.Parameters["@FeatueNameEn"].Value) ? null : (string)command.Parameters["@FeatueNameEn"].Value;
				_featueNameAr					 = Convert.IsDBNull(command.Parameters["@FeatueNameAr"].Value) ? null : (string)command.Parameters["@FeatueNameAr"].Value;
				_featuePath					 = Convert.IsDBNull(command.Parameters["@FeatuePath"].Value) ? null : (string)command.Parameters["@FeatuePath"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_displyOrder					 = Convert.IsDBNull(command.Parameters["@DisplyOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplyOrder"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_isNew					 = Convert.IsDBNull(command.Parameters["@IsNew"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNew"].Value;
				_isUpdated					 = Convert.IsDBNull(command.Parameters["@IsUpdated"].Value) ? (bool?)null : (bool?)command.Parameters["@IsUpdated"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? FeatueId
		{
			get
			{
				return _featueId;
			}
			set
			{
				_featueId = value;
			}
		}

		public Int32? ApplicationId
		{
			get
			{
				return _applicationId;
			}
			set
			{
				_applicationId = value;
			}
		}

		public string FeatueCode
		{
			get
			{
				return _featueCode;
			}
			set
			{
				_featueCode = value;
			}
		}

		public string FeatueNameEn
		{
			get
			{
				return _featueNameEn;
			}
			set
			{
				_featueNameEn = value;
			}
		}

		public string FeatueNameAr
		{
			get
			{
				return _featueNameAr;
			}
			set
			{
				_featueNameAr = value;
			}
		}

		public string FeatuePath
		{
			get
			{
				return _featuePath;
			}
			set
			{
				_featuePath = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public Int32? DisplyOrder
		{
			get
			{
				return _displyOrder;
			}
			set
			{
				_displyOrder = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public bool? IsNew
		{
			get
			{
				return _isNew;
			}
			set
			{
				_isNew = value;
			}
		}

		public bool? IsUpdated
		{
			get
			{
				return _isUpdated;
			}
			set
			{
				_isUpdated = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprApplication_Feature_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[FeatueId]
			,[ApplicationId]
			,[FeatueCode]
			,[FeatueNameEn]
			,[FeatueNameAr]
			,[FeatuePath]
			,[Icon]
			,[Color]
			,[DisplyOrder]
			,[IsActive]
			,[IsNew]
			,[IsUpdated]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Application_Feature]
			WHERE 
			[FeatueId] = @FeatueId
			";

		internal static string ctprApplication_Feature_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Application_Feature]
			WHERE 
			[FeatueId] = @FeatueId
			";

		internal static string ctprApplication_Feature_SelectAllByApplicationId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[FeatueId]
			,[ApplicationId]
			,[FeatueCode]
			,[FeatueNameEn]
			,[FeatueNameAr]
			,[FeatuePath]
			,[Icon]
			,[Color]
			,[DisplyOrder]
			,[IsActive]
			,[IsNew]
			,[IsUpdated]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Application_Feature]
			WHERE 
			[ApplicationId] = @ApplicationId OR ([ApplicationId] IS NULL AND @ApplicationId IS NULL)
			";

		internal static string ctprApplication_Feature_SelectAllByApplicationIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Application_Feature]
			WHERE 
			[ApplicationId] = @ApplicationId OR ([ApplicationId] IS NULL AND @ApplicationId IS NULL)
			";

		internal static string ctprApplication_Feature_DeleteAllByApplicationId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Application_Feature]
			WHERE 
			[ApplicationId] = @ApplicationId OR ([ApplicationId] IS NULL AND @ApplicationId IS NULL)
			";

		internal static string ctprApplication_Feature_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Application_Feature]
			(
			[ApplicationId]
			,[FeatueCode]
			,[FeatueNameEn]
			,[FeatueNameAr]
			,[FeatuePath]
			,[Icon]
			,[Color]
			,[DisplyOrder]
			,[IsActive]
			,[IsNew]
			,[IsUpdated]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@ApplicationId
			,@FeatueCode
			,@FeatueNameEn
			,@FeatueNameAr
			,@FeatuePath
			,@Icon
			,@Color
			,@DisplyOrder
			,@IsActive
			,@IsNew
			,@IsUpdated
			,@CanEdit
			,@CanDelete
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@FeatueId = [FeatueId]
			,@ApplicationId = [ApplicationId]
			,@FeatueCode = [FeatueCode]
			,@FeatueNameEn = [FeatueNameEn]
			,@FeatueNameAr = [FeatueNameAr]
			,@FeatuePath = [FeatuePath]
			,@Icon = [Icon]
			,@Color = [Color]
			,@DisplyOrder = [DisplyOrder]
			,@IsActive = [IsActive]
			,@IsNew = [IsNew]
			,@IsUpdated = [IsUpdated]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Application_Feature]
			WHERE 
			[FeatueId] = SCOPE_IDENTITY()
			";

		internal static string ctprApplication_Feature_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[FeatueId]
			,[ApplicationId]
			,[FeatueCode]
			,[FeatueNameEn]
			,[FeatueNameAr]
			,[FeatuePath]
			,[Icon]
			,[Color]
			,[DisplyOrder]
			,[IsActive]
			,[IsNew]
			,[IsUpdated]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Application_Feature]
			";

		internal static string ctprApplication_Feature_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Application_Feature]
			";

		internal static string ctprApplication_Feature_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Application_Feature]
			##CRITERIA##
			";

		internal static string ctprApplication_Feature_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[FeatueId]
			,[ApplicationId]
			,[FeatueCode]
			,[FeatueNameEn]
			,[FeatueNameAr]
			,[FeatuePath]
			,[Icon]
			,[Color]
			,[DisplyOrder]
			,[IsActive]
			,[IsNew]
			,[IsUpdated]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Application_Feature]
			##CRITERIA##
			";

		internal static string ctprApplication_Feature_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Application_Feature]
			##CRITERIA##
			";

		internal static string ctprApplication_Feature_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Application_Feature]
			SET
			[ApplicationId] = @ApplicationId
			,[FeatueCode] = @FeatueCode
			,[FeatueNameEn] = @FeatueNameEn
			,[FeatueNameAr] = @FeatueNameAr
			,[FeatuePath] = @FeatuePath
			,[Icon] = @Icon
			,[Color] = @Color
			,[DisplyOrder] = @DisplyOrder
			,[IsActive] = @IsActive
			,[IsNew] = @IsNew
			,[IsUpdated] = @IsUpdated
			,[CanEdit] = @CanEdit
			,[CanDelete] = @CanDelete
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[FeatueId] = @FeatueId
			SELECT 
			@FeatueId = [FeatueId]
			,@ApplicationId = [ApplicationId]
			,@FeatueCode = [FeatueCode]
			,@FeatueNameEn = [FeatueNameEn]
			,@FeatueNameAr = [FeatueNameAr]
			,@FeatuePath = [FeatuePath]
			,@Icon = [Icon]
			,@Color = [Color]
			,@DisplyOrder = [DisplyOrder]
			,@IsActive = [IsActive]
			,@IsNew = [IsNew]
			,@IsUpdated = [IsUpdated]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Application_Feature]
			WHERE 
			[FeatueId] = @FeatueId
			";

	}
}
#endregion
