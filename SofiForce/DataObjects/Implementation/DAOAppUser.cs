/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppUser : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _userId;
		protected Int32? _appRoleId;
		protected Int32? _userGroupId;
		protected string _realName;
		protected string _userName;
		protected string _password;
		protected bool? _isOnline;
		protected bool? _isLocked;
		protected bool? _mustChangeData;
		protected DateTime? _lastLogin;
		protected bool? _mustChangePassword;
		protected bool? _emailVerified;
		protected string _firebaseId;
		protected string _signalrId;
		protected Int32? _failedCount;
		protected string _defaultRoute;
		protected string _phone;
		protected string _whatsApp;
		protected string _zoomId;
		protected string _linkedIn;
		protected string _userBio;
		protected double? _latitude;
		protected double? _longitude;
		protected string _address;
		protected string _email;
		protected string _fax;
		protected string _internal;
		protected string _jobTitle;
		protected string _avatar;
		protected string _mobile;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _primaryMobile;
		protected bool? _mobileVerified;
		protected string _verificationCode;
		#endregion

		#region class methods
		public DAOAppUser()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table AppUser based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAppUser
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static DAOAppUser SelectOne(Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOAppUser retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAppUser();
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._appRoleId					 = Convert.IsDBNull(dt.Rows[0]["AppRoleId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AppRoleId"];
					retObj._userGroupId					 = Convert.IsDBNull(dt.Rows[0]["UserGroupId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserGroupId"];
					retObj._realName					 = Convert.IsDBNull(dt.Rows[0]["RealName"]) ? null : (string)dt.Rows[0]["RealName"];
					retObj._userName					 = Convert.IsDBNull(dt.Rows[0]["UserName"]) ? null : (string)dt.Rows[0]["UserName"];
					retObj._password					 = Convert.IsDBNull(dt.Rows[0]["Password"]) ? null : (string)dt.Rows[0]["Password"];
					retObj._isOnline					 = Convert.IsDBNull(dt.Rows[0]["isOnline"]) ? (bool?)null : (bool?)dt.Rows[0]["isOnline"];
					retObj._isLocked					 = Convert.IsDBNull(dt.Rows[0]["IsLocked"]) ? (bool?)null : (bool?)dt.Rows[0]["IsLocked"];
					retObj._mustChangeData					 = Convert.IsDBNull(dt.Rows[0]["MustChangeData"]) ? (bool?)null : (bool?)dt.Rows[0]["MustChangeData"];
					retObj._lastLogin					 = Convert.IsDBNull(dt.Rows[0]["LastLogin"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["LastLogin"];
					retObj._mustChangePassword					 = Convert.IsDBNull(dt.Rows[0]["MustChangePassword"]) ? (bool?)null : (bool?)dt.Rows[0]["MustChangePassword"];
					retObj._emailVerified					 = Convert.IsDBNull(dt.Rows[0]["EmailVerified"]) ? (bool?)null : (bool?)dt.Rows[0]["EmailVerified"];
					retObj._firebaseId					 = Convert.IsDBNull(dt.Rows[0]["FirebaseId"]) ? null : (string)dt.Rows[0]["FirebaseId"];
					retObj._signalrId					 = Convert.IsDBNull(dt.Rows[0]["SignalrId"]) ? null : (string)dt.Rows[0]["SignalrId"];
					retObj._failedCount					 = Convert.IsDBNull(dt.Rows[0]["FailedCount"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FailedCount"];
					retObj._defaultRoute					 = Convert.IsDBNull(dt.Rows[0]["DefaultRoute"]) ? null : (string)dt.Rows[0]["DefaultRoute"];
					retObj._phone					 = Convert.IsDBNull(dt.Rows[0]["Phone"]) ? null : (string)dt.Rows[0]["Phone"];
					retObj._whatsApp					 = Convert.IsDBNull(dt.Rows[0]["WhatsApp"]) ? null : (string)dt.Rows[0]["WhatsApp"];
					retObj._zoomId					 = Convert.IsDBNull(dt.Rows[0]["ZoomId"]) ? null : (string)dt.Rows[0]["ZoomId"];
					retObj._linkedIn					 = Convert.IsDBNull(dt.Rows[0]["LinkedIn"]) ? null : (string)dt.Rows[0]["LinkedIn"];
					retObj._userBio					 = Convert.IsDBNull(dt.Rows[0]["UserBio"]) ? null : (string)dt.Rows[0]["UserBio"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._address					 = Convert.IsDBNull(dt.Rows[0]["Address"]) ? null : (string)dt.Rows[0]["Address"];
					retObj._email					 = Convert.IsDBNull(dt.Rows[0]["Email"]) ? null : (string)dt.Rows[0]["Email"];
					retObj._fax					 = Convert.IsDBNull(dt.Rows[0]["Fax"]) ? null : (string)dt.Rows[0]["Fax"];
					retObj._internal					 = Convert.IsDBNull(dt.Rows[0]["Internal"]) ? null : (string)dt.Rows[0]["Internal"];
					retObj._jobTitle					 = Convert.IsDBNull(dt.Rows[0]["JobTitle"]) ? null : (string)dt.Rows[0]["JobTitle"];
					retObj._avatar					 = Convert.IsDBNull(dt.Rows[0]["Avatar"]) ? null : (string)dt.Rows[0]["Avatar"];
					retObj._mobile					 = Convert.IsDBNull(dt.Rows[0]["Mobile"]) ? null : (string)dt.Rows[0]["Mobile"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._primaryMobile					 = Convert.IsDBNull(dt.Rows[0]["PrimaryMobile"]) ? null : (string)dt.Rows[0]["PrimaryMobile"];
					retObj._mobileVerified					 = Convert.IsDBNull(dt.Rows[0]["MobileVerified"]) ? (bool?)null : (bool?)dt.Rows[0]["MobileVerified"];
					retObj._verificationCode					 = Convert.IsDBNull(dt.Rows[0]["VerificationCode"]) ? null : (string)dt.Rows[0]["VerificationCode"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table AppUser based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUser.
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static IList<DAOAppUser> SelectAllByUserId(Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAllByUserId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUser> objList = new List<DAOAppUser>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUser retObj = new DAOAppUser();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._realName					 = Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"];
						retObj._userName					 = Convert.IsDBNull(row["UserName"]) ? null : (string)row["UserName"];
						retObj._password					 = Convert.IsDBNull(row["Password"]) ? null : (string)row["Password"];
						retObj._isOnline					 = Convert.IsDBNull(row["isOnline"]) ? (bool?)null : (bool?)row["isOnline"];
						retObj._isLocked					 = Convert.IsDBNull(row["IsLocked"]) ? (bool?)null : (bool?)row["IsLocked"];
						retObj._mustChangeData					 = Convert.IsDBNull(row["MustChangeData"]) ? (bool?)null : (bool?)row["MustChangeData"];
						retObj._lastLogin					 = Convert.IsDBNull(row["LastLogin"]) ? (DateTime?)null : (DateTime?)row["LastLogin"];
						retObj._mustChangePassword					 = Convert.IsDBNull(row["MustChangePassword"]) ? (bool?)null : (bool?)row["MustChangePassword"];
						retObj._emailVerified					 = Convert.IsDBNull(row["EmailVerified"]) ? (bool?)null : (bool?)row["EmailVerified"];
						retObj._firebaseId					 = Convert.IsDBNull(row["FirebaseId"]) ? null : (string)row["FirebaseId"];
						retObj._signalrId					 = Convert.IsDBNull(row["SignalrId"]) ? null : (string)row["SignalrId"];
						retObj._failedCount					 = Convert.IsDBNull(row["FailedCount"]) ? (Int32?)null : (Int32?)row["FailedCount"];
						retObj._defaultRoute					 = Convert.IsDBNull(row["DefaultRoute"]) ? null : (string)row["DefaultRoute"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._zoomId					 = Convert.IsDBNull(row["ZoomId"]) ? null : (string)row["ZoomId"];
						retObj._linkedIn					 = Convert.IsDBNull(row["LinkedIn"]) ? null : (string)row["LinkedIn"];
						retObj._userBio					 = Convert.IsDBNull(row["UserBio"]) ? null : (string)row["UserBio"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._fax					 = Convert.IsDBNull(row["Fax"]) ? null : (string)row["Fax"];
						retObj._internal					 = Convert.IsDBNull(row["Internal"]) ? null : (string)row["Internal"];
						retObj._jobTitle					 = Convert.IsDBNull(row["JobTitle"]) ? null : (string)row["JobTitle"];
						retObj._avatar					 = Convert.IsDBNull(row["Avatar"]) ? null : (string)row["Avatar"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._primaryMobile					 = Convert.IsDBNull(row["PrimaryMobile"]) ? null : (string)row["PrimaryMobile"];
						retObj._mobileVerified					 = Convert.IsDBNull(row["MobileVerified"]) ? (bool?)null : (bool?)row["MobileVerified"];
						retObj._verificationCode					 = Convert.IsDBNull(row["VerificationCode"]) ? null : (string)row["VerificationCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static Int32 SelectAllByUserIdCount(Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAllByUserIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userId
		///</parameters>
		public static void DeleteAllByUserId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_DeleteAllByUserId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUser.
		///</returns>
		///<parameters>
		///Int32? appRoleId
		///</parameters>
		public static IList<DAOAppUser> SelectAllByAppRoleId(Int32? appRoleId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAllByAppRoleId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)appRoleId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUser> objList = new List<DAOAppUser>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUser retObj = new DAOAppUser();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._realName					 = Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"];
						retObj._userName					 = Convert.IsDBNull(row["UserName"]) ? null : (string)row["UserName"];
						retObj._password					 = Convert.IsDBNull(row["Password"]) ? null : (string)row["Password"];
						retObj._isOnline					 = Convert.IsDBNull(row["isOnline"]) ? (bool?)null : (bool?)row["isOnline"];
						retObj._isLocked					 = Convert.IsDBNull(row["IsLocked"]) ? (bool?)null : (bool?)row["IsLocked"];
						retObj._mustChangeData					 = Convert.IsDBNull(row["MustChangeData"]) ? (bool?)null : (bool?)row["MustChangeData"];
						retObj._lastLogin					 = Convert.IsDBNull(row["LastLogin"]) ? (DateTime?)null : (DateTime?)row["LastLogin"];
						retObj._mustChangePassword					 = Convert.IsDBNull(row["MustChangePassword"]) ? (bool?)null : (bool?)row["MustChangePassword"];
						retObj._emailVerified					 = Convert.IsDBNull(row["EmailVerified"]) ? (bool?)null : (bool?)row["EmailVerified"];
						retObj._firebaseId					 = Convert.IsDBNull(row["FirebaseId"]) ? null : (string)row["FirebaseId"];
						retObj._signalrId					 = Convert.IsDBNull(row["SignalrId"]) ? null : (string)row["SignalrId"];
						retObj._failedCount					 = Convert.IsDBNull(row["FailedCount"]) ? (Int32?)null : (Int32?)row["FailedCount"];
						retObj._defaultRoute					 = Convert.IsDBNull(row["DefaultRoute"]) ? null : (string)row["DefaultRoute"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._zoomId					 = Convert.IsDBNull(row["ZoomId"]) ? null : (string)row["ZoomId"];
						retObj._linkedIn					 = Convert.IsDBNull(row["LinkedIn"]) ? null : (string)row["LinkedIn"];
						retObj._userBio					 = Convert.IsDBNull(row["UserBio"]) ? null : (string)row["UserBio"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._fax					 = Convert.IsDBNull(row["Fax"]) ? null : (string)row["Fax"];
						retObj._internal					 = Convert.IsDBNull(row["Internal"]) ? null : (string)row["Internal"];
						retObj._jobTitle					 = Convert.IsDBNull(row["JobTitle"]) ? null : (string)row["JobTitle"];
						retObj._avatar					 = Convert.IsDBNull(row["Avatar"]) ? null : (string)row["Avatar"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._primaryMobile					 = Convert.IsDBNull(row["PrimaryMobile"]) ? null : (string)row["PrimaryMobile"];
						retObj._mobileVerified					 = Convert.IsDBNull(row["MobileVerified"]) ? (bool?)null : (bool?)row["MobileVerified"];
						retObj._verificationCode					 = Convert.IsDBNull(row["VerificationCode"]) ? null : (string)row["VerificationCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? appRoleId
		///</parameters>
		public static Int32 SelectAllByAppRoleIdCount(Int32? appRoleId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAllByAppRoleIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)appRoleId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? appRoleId
		///</parameters>
		public static void DeleteAllByAppRoleId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? appRoleId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_DeleteAllByAppRoleId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)appRoleId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUser.
		///</returns>
		///<parameters>
		///Int32? userGroupId
		///</parameters>
		public static IList<DAOAppUser> SelectAllByUserGroupId(Int32? userGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAllByUserGroupId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUser> objList = new List<DAOAppUser>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUser retObj = new DAOAppUser();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._realName					 = Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"];
						retObj._userName					 = Convert.IsDBNull(row["UserName"]) ? null : (string)row["UserName"];
						retObj._password					 = Convert.IsDBNull(row["Password"]) ? null : (string)row["Password"];
						retObj._isOnline					 = Convert.IsDBNull(row["isOnline"]) ? (bool?)null : (bool?)row["isOnline"];
						retObj._isLocked					 = Convert.IsDBNull(row["IsLocked"]) ? (bool?)null : (bool?)row["IsLocked"];
						retObj._mustChangeData					 = Convert.IsDBNull(row["MustChangeData"]) ? (bool?)null : (bool?)row["MustChangeData"];
						retObj._lastLogin					 = Convert.IsDBNull(row["LastLogin"]) ? (DateTime?)null : (DateTime?)row["LastLogin"];
						retObj._mustChangePassword					 = Convert.IsDBNull(row["MustChangePassword"]) ? (bool?)null : (bool?)row["MustChangePassword"];
						retObj._emailVerified					 = Convert.IsDBNull(row["EmailVerified"]) ? (bool?)null : (bool?)row["EmailVerified"];
						retObj._firebaseId					 = Convert.IsDBNull(row["FirebaseId"]) ? null : (string)row["FirebaseId"];
						retObj._signalrId					 = Convert.IsDBNull(row["SignalrId"]) ? null : (string)row["SignalrId"];
						retObj._failedCount					 = Convert.IsDBNull(row["FailedCount"]) ? (Int32?)null : (Int32?)row["FailedCount"];
						retObj._defaultRoute					 = Convert.IsDBNull(row["DefaultRoute"]) ? null : (string)row["DefaultRoute"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._zoomId					 = Convert.IsDBNull(row["ZoomId"]) ? null : (string)row["ZoomId"];
						retObj._linkedIn					 = Convert.IsDBNull(row["LinkedIn"]) ? null : (string)row["LinkedIn"];
						retObj._userBio					 = Convert.IsDBNull(row["UserBio"]) ? null : (string)row["UserBio"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._fax					 = Convert.IsDBNull(row["Fax"]) ? null : (string)row["Fax"];
						retObj._internal					 = Convert.IsDBNull(row["Internal"]) ? null : (string)row["Internal"];
						retObj._jobTitle					 = Convert.IsDBNull(row["JobTitle"]) ? null : (string)row["JobTitle"];
						retObj._avatar					 = Convert.IsDBNull(row["Avatar"]) ? null : (string)row["Avatar"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._primaryMobile					 = Convert.IsDBNull(row["PrimaryMobile"]) ? null : (string)row["PrimaryMobile"];
						retObj._mobileVerified					 = Convert.IsDBNull(row["MobileVerified"]) ? (bool?)null : (bool?)row["MobileVerified"];
						retObj._verificationCode					 = Convert.IsDBNull(row["VerificationCode"]) ? null : (string)row["VerificationCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? userGroupId
		///</parameters>
		public static Int32 SelectAllByUserGroupIdCount(Int32? userGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAllByUserGroupIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userGroupId
		///</parameters>
		public static void DeleteAllByUserGroupId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? userGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_DeleteAllByUserGroupId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)userGroupId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table AppUser
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _userId));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_appRoleId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RealName", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_realName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserName", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_userName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Password", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_password?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@isOnline", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isOnline?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsLocked", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isLocked?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MustChangeData", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mustChangeData?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LastLogin", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lastLogin?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MustChangePassword", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mustChangePassword?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmailVerified", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_emailVerified?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FirebaseId", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_firebaseId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SignalrId", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_signalrId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FailedCount", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_failedCount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DefaultRoute", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_defaultRoute?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WhatsApp", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_whatsApp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ZoomId", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_zoomId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LinkedIn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_linkedIn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserBio", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_userBio?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Email", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_email?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Fax", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fax?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Internal", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_internal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@JobTitle", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_jobTitle?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Avatar", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_avatar?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Mobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PrimaryMobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_primaryMobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MobileVerified", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobileVerified?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VerificationCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_verificationCode?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_appRoleId					 = Convert.IsDBNull(command.Parameters["@AppRoleId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AppRoleId"].Value;
				_userGroupId					 = Convert.IsDBNull(command.Parameters["@UserGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserGroupId"].Value;
				_realName					 = Convert.IsDBNull(command.Parameters["@RealName"].Value) ? null : (string)command.Parameters["@RealName"].Value;
				_userName					 = Convert.IsDBNull(command.Parameters["@UserName"].Value) ? null : (string)command.Parameters["@UserName"].Value;
				_password					 = Convert.IsDBNull(command.Parameters["@Password"].Value) ? null : (string)command.Parameters["@Password"].Value;
				_isOnline					 = Convert.IsDBNull(command.Parameters["@isOnline"].Value) ? (bool?)null : (bool?)command.Parameters["@isOnline"].Value;
				_isLocked					 = Convert.IsDBNull(command.Parameters["@IsLocked"].Value) ? (bool?)null : (bool?)command.Parameters["@IsLocked"].Value;
				_mustChangeData					 = Convert.IsDBNull(command.Parameters["@MustChangeData"].Value) ? (bool?)null : (bool?)command.Parameters["@MustChangeData"].Value;
				_lastLogin					 = Convert.IsDBNull(command.Parameters["@LastLogin"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@LastLogin"].Value;
				_mustChangePassword					 = Convert.IsDBNull(command.Parameters["@MustChangePassword"].Value) ? (bool?)null : (bool?)command.Parameters["@MustChangePassword"].Value;
				_emailVerified					 = Convert.IsDBNull(command.Parameters["@EmailVerified"].Value) ? (bool?)null : (bool?)command.Parameters["@EmailVerified"].Value;
				_firebaseId					 = Convert.IsDBNull(command.Parameters["@FirebaseId"].Value) ? null : (string)command.Parameters["@FirebaseId"].Value;
				_signalrId					 = Convert.IsDBNull(command.Parameters["@SignalrId"].Value) ? null : (string)command.Parameters["@SignalrId"].Value;
				_failedCount					 = Convert.IsDBNull(command.Parameters["@FailedCount"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FailedCount"].Value;
				_defaultRoute					 = Convert.IsDBNull(command.Parameters["@DefaultRoute"].Value) ? null : (string)command.Parameters["@DefaultRoute"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_whatsApp					 = Convert.IsDBNull(command.Parameters["@WhatsApp"].Value) ? null : (string)command.Parameters["@WhatsApp"].Value;
				_zoomId					 = Convert.IsDBNull(command.Parameters["@ZoomId"].Value) ? null : (string)command.Parameters["@ZoomId"].Value;
				_linkedIn					 = Convert.IsDBNull(command.Parameters["@LinkedIn"].Value) ? null : (string)command.Parameters["@LinkedIn"].Value;
				_userBio					 = Convert.IsDBNull(command.Parameters["@UserBio"].Value) ? null : (string)command.Parameters["@UserBio"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_email					 = Convert.IsDBNull(command.Parameters["@Email"].Value) ? null : (string)command.Parameters["@Email"].Value;
				_fax					 = Convert.IsDBNull(command.Parameters["@Fax"].Value) ? null : (string)command.Parameters["@Fax"].Value;
				_internal					 = Convert.IsDBNull(command.Parameters["@Internal"].Value) ? null : (string)command.Parameters["@Internal"].Value;
				_jobTitle					 = Convert.IsDBNull(command.Parameters["@JobTitle"].Value) ? null : (string)command.Parameters["@JobTitle"].Value;
				_avatar					 = Convert.IsDBNull(command.Parameters["@Avatar"].Value) ? null : (string)command.Parameters["@Avatar"].Value;
				_mobile					 = Convert.IsDBNull(command.Parameters["@Mobile"].Value) ? null : (string)command.Parameters["@Mobile"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_primaryMobile					 = Convert.IsDBNull(command.Parameters["@PrimaryMobile"].Value) ? null : (string)command.Parameters["@PrimaryMobile"].Value;
				_mobileVerified					 = Convert.IsDBNull(command.Parameters["@MobileVerified"].Value) ? (bool?)null : (bool?)command.Parameters["@MobileVerified"].Value;
				_verificationCode					 = Convert.IsDBNull(command.Parameters["@VerificationCode"].Value) ? null : (string)command.Parameters["@VerificationCode"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppUser
		///</Summary>
		///<returns>
		///IList-DAOAppUser.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppUser> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUser> objList = new List<DAOAppUser>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUser retObj = new DAOAppUser();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._realName					 = Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"];
						retObj._userName					 = Convert.IsDBNull(row["UserName"]) ? null : (string)row["UserName"];
						retObj._password					 = Convert.IsDBNull(row["Password"]) ? null : (string)row["Password"];
						retObj._isOnline					 = Convert.IsDBNull(row["isOnline"]) ? (bool?)null : (bool?)row["isOnline"];
						retObj._isLocked					 = Convert.IsDBNull(row["IsLocked"]) ? (bool?)null : (bool?)row["IsLocked"];
						retObj._mustChangeData					 = Convert.IsDBNull(row["MustChangeData"]) ? (bool?)null : (bool?)row["MustChangeData"];
						retObj._lastLogin					 = Convert.IsDBNull(row["LastLogin"]) ? (DateTime?)null : (DateTime?)row["LastLogin"];
						retObj._mustChangePassword					 = Convert.IsDBNull(row["MustChangePassword"]) ? (bool?)null : (bool?)row["MustChangePassword"];
						retObj._emailVerified					 = Convert.IsDBNull(row["EmailVerified"]) ? (bool?)null : (bool?)row["EmailVerified"];
						retObj._firebaseId					 = Convert.IsDBNull(row["FirebaseId"]) ? null : (string)row["FirebaseId"];
						retObj._signalrId					 = Convert.IsDBNull(row["SignalrId"]) ? null : (string)row["SignalrId"];
						retObj._failedCount					 = Convert.IsDBNull(row["FailedCount"]) ? (Int32?)null : (Int32?)row["FailedCount"];
						retObj._defaultRoute					 = Convert.IsDBNull(row["DefaultRoute"]) ? null : (string)row["DefaultRoute"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._zoomId					 = Convert.IsDBNull(row["ZoomId"]) ? null : (string)row["ZoomId"];
						retObj._linkedIn					 = Convert.IsDBNull(row["LinkedIn"]) ? null : (string)row["LinkedIn"];
						retObj._userBio					 = Convert.IsDBNull(row["UserBio"]) ? null : (string)row["UserBio"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._fax					 = Convert.IsDBNull(row["Fax"]) ? null : (string)row["Fax"];
						retObj._internal					 = Convert.IsDBNull(row["Internal"]) ? null : (string)row["Internal"];
						retObj._jobTitle					 = Convert.IsDBNull(row["JobTitle"]) ? null : (string)row["JobTitle"];
						retObj._avatar					 = Convert.IsDBNull(row["Avatar"]) ? null : (string)row["Avatar"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._primaryMobile					 = Convert.IsDBNull(row["PrimaryMobile"]) ? null : (string)row["PrimaryMobile"];
						retObj._mobileVerified					 = Convert.IsDBNull(row["MobileVerified"]) ? (bool?)null : (bool?)row["MobileVerified"];
						retObj._verificationCode					 = Convert.IsDBNull(row["VerificationCode"]) ? null : (string)row["VerificationCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppUser
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "AppRoleId", true) == 0) lst.Add(Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"]);
						if (string.Compare(projection.Member, "UserGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"]);
						if (string.Compare(projection.Member, "RealName", true) == 0) lst.Add(Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"]);
						if (string.Compare(projection.Member, "UserName", true) == 0) lst.Add(Convert.IsDBNull(row["UserName"]) ? null : (string)row["UserName"]);
						if (string.Compare(projection.Member, "Password", true) == 0) lst.Add(Convert.IsDBNull(row["Password"]) ? null : (string)row["Password"]);
						if (string.Compare(projection.Member, "isOnline", true) == 0) lst.Add(Convert.IsDBNull(row["isOnline"]) ? (bool?)null : (bool?)row["isOnline"]);
						if (string.Compare(projection.Member, "IsLocked", true) == 0) lst.Add(Convert.IsDBNull(row["IsLocked"]) ? (bool?)null : (bool?)row["IsLocked"]);
						if (string.Compare(projection.Member, "MustChangeData", true) == 0) lst.Add(Convert.IsDBNull(row["MustChangeData"]) ? (bool?)null : (bool?)row["MustChangeData"]);
						if (string.Compare(projection.Member, "LastLogin", true) == 0) lst.Add(Convert.IsDBNull(row["LastLogin"]) ? (DateTime?)null : (DateTime?)row["LastLogin"]);
						if (string.Compare(projection.Member, "MustChangePassword", true) == 0) lst.Add(Convert.IsDBNull(row["MustChangePassword"]) ? (bool?)null : (bool?)row["MustChangePassword"]);
						if (string.Compare(projection.Member, "EmailVerified", true) == 0) lst.Add(Convert.IsDBNull(row["EmailVerified"]) ? (bool?)null : (bool?)row["EmailVerified"]);
						if (string.Compare(projection.Member, "FirebaseId", true) == 0) lst.Add(Convert.IsDBNull(row["FirebaseId"]) ? null : (string)row["FirebaseId"]);
						if (string.Compare(projection.Member, "SignalrId", true) == 0) lst.Add(Convert.IsDBNull(row["SignalrId"]) ? null : (string)row["SignalrId"]);
						if (string.Compare(projection.Member, "FailedCount", true) == 0) lst.Add(Convert.IsDBNull(row["FailedCount"]) ? (Int32?)null : (Int32?)row["FailedCount"]);
						if (string.Compare(projection.Member, "DefaultRoute", true) == 0) lst.Add(Convert.IsDBNull(row["DefaultRoute"]) ? null : (string)row["DefaultRoute"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "WhatsApp", true) == 0) lst.Add(Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"]);
						if (string.Compare(projection.Member, "ZoomId", true) == 0) lst.Add(Convert.IsDBNull(row["ZoomId"]) ? null : (string)row["ZoomId"]);
						if (string.Compare(projection.Member, "LinkedIn", true) == 0) lst.Add(Convert.IsDBNull(row["LinkedIn"]) ? null : (string)row["LinkedIn"]);
						if (string.Compare(projection.Member, "UserBio", true) == 0) lst.Add(Convert.IsDBNull(row["UserBio"]) ? null : (string)row["UserBio"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "Email", true) == 0) lst.Add(Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"]);
						if (string.Compare(projection.Member, "Fax", true) == 0) lst.Add(Convert.IsDBNull(row["Fax"]) ? null : (string)row["Fax"]);
						if (string.Compare(projection.Member, "Internal", true) == 0) lst.Add(Convert.IsDBNull(row["Internal"]) ? null : (string)row["Internal"]);
						if (string.Compare(projection.Member, "JobTitle", true) == 0) lst.Add(Convert.IsDBNull(row["JobTitle"]) ? null : (string)row["JobTitle"]);
						if (string.Compare(projection.Member, "Avatar", true) == 0) lst.Add(Convert.IsDBNull(row["Avatar"]) ? null : (string)row["Avatar"]);
						if (string.Compare(projection.Member, "Mobile", true) == 0) lst.Add(Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "PrimaryMobile", true) == 0) lst.Add(Convert.IsDBNull(row["PrimaryMobile"]) ? null : (string)row["PrimaryMobile"]);
						if (string.Compare(projection.Member, "MobileVerified", true) == 0) lst.Add(Convert.IsDBNull(row["MobileVerified"]) ? (bool?)null : (bool?)row["MobileVerified"]);
						if (string.Compare(projection.Member, "VerificationCode", true) == 0) lst.Add(Convert.IsDBNull(row["VerificationCode"]) ? null : (string)row["VerificationCode"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppUser
		///</Summary>
		///<returns>
		///IList-DAOAppUser.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppUser> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUser> objList = new List<DAOAppUser>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUser retObj = new DAOAppUser();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._appRoleId					 = Convert.IsDBNull(row["AppRoleId"]) ? (Int32?)null : (Int32?)row["AppRoleId"];
						retObj._userGroupId					 = Convert.IsDBNull(row["UserGroupId"]) ? (Int32?)null : (Int32?)row["UserGroupId"];
						retObj._realName					 = Convert.IsDBNull(row["RealName"]) ? null : (string)row["RealName"];
						retObj._userName					 = Convert.IsDBNull(row["UserName"]) ? null : (string)row["UserName"];
						retObj._password					 = Convert.IsDBNull(row["Password"]) ? null : (string)row["Password"];
						retObj._isOnline					 = Convert.IsDBNull(row["isOnline"]) ? (bool?)null : (bool?)row["isOnline"];
						retObj._isLocked					 = Convert.IsDBNull(row["IsLocked"]) ? (bool?)null : (bool?)row["IsLocked"];
						retObj._mustChangeData					 = Convert.IsDBNull(row["MustChangeData"]) ? (bool?)null : (bool?)row["MustChangeData"];
						retObj._lastLogin					 = Convert.IsDBNull(row["LastLogin"]) ? (DateTime?)null : (DateTime?)row["LastLogin"];
						retObj._mustChangePassword					 = Convert.IsDBNull(row["MustChangePassword"]) ? (bool?)null : (bool?)row["MustChangePassword"];
						retObj._emailVerified					 = Convert.IsDBNull(row["EmailVerified"]) ? (bool?)null : (bool?)row["EmailVerified"];
						retObj._firebaseId					 = Convert.IsDBNull(row["FirebaseId"]) ? null : (string)row["FirebaseId"];
						retObj._signalrId					 = Convert.IsDBNull(row["SignalrId"]) ? null : (string)row["SignalrId"];
						retObj._failedCount					 = Convert.IsDBNull(row["FailedCount"]) ? (Int32?)null : (Int32?)row["FailedCount"];
						retObj._defaultRoute					 = Convert.IsDBNull(row["DefaultRoute"]) ? null : (string)row["DefaultRoute"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._zoomId					 = Convert.IsDBNull(row["ZoomId"]) ? null : (string)row["ZoomId"];
						retObj._linkedIn					 = Convert.IsDBNull(row["LinkedIn"]) ? null : (string)row["LinkedIn"];
						retObj._userBio					 = Convert.IsDBNull(row["UserBio"]) ? null : (string)row["UserBio"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._fax					 = Convert.IsDBNull(row["Fax"]) ? null : (string)row["Fax"];
						retObj._internal					 = Convert.IsDBNull(row["Internal"]) ? null : (string)row["Internal"];
						retObj._jobTitle					 = Convert.IsDBNull(row["JobTitle"]) ? null : (string)row["JobTitle"];
						retObj._avatar					 = Convert.IsDBNull(row["Avatar"]) ? null : (string)row["Avatar"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._primaryMobile					 = Convert.IsDBNull(row["PrimaryMobile"]) ? null : (string)row["PrimaryMobile"];
						retObj._mobileVerified					 = Convert.IsDBNull(row["MobileVerified"]) ? (bool?)null : (bool?)row["MobileVerified"];
						retObj._verificationCode					 = Convert.IsDBNull(row["VerificationCode"]) ? null : (string)row["VerificationCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppUser
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table AppUser based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AppRoleId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_appRoleId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RealName", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_realName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserName", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_userName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Password", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_password?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@isOnline", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isOnline?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsLocked", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isLocked?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MustChangeData", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mustChangeData?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LastLogin", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lastLogin?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MustChangePassword", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mustChangePassword?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmailVerified", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_emailVerified?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FirebaseId", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_firebaseId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SignalrId", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_signalrId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FailedCount", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_failedCount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DefaultRoute", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_defaultRoute?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WhatsApp", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_whatsApp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ZoomId", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_zoomId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LinkedIn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_linkedIn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserBio", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_userBio?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Email", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_email?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Fax", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fax?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Internal", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_internal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@JobTitle", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_jobTitle?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Avatar", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_avatar?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Mobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PrimaryMobile", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_primaryMobile?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MobileVerified", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_mobileVerified?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VerificationCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_verificationCode?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_appRoleId					 = Convert.IsDBNull(command.Parameters["@AppRoleId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AppRoleId"].Value;
				_userGroupId					 = Convert.IsDBNull(command.Parameters["@UserGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserGroupId"].Value;
				_realName					 = Convert.IsDBNull(command.Parameters["@RealName"].Value) ? null : (string)command.Parameters["@RealName"].Value;
				_userName					 = Convert.IsDBNull(command.Parameters["@UserName"].Value) ? null : (string)command.Parameters["@UserName"].Value;
				_password					 = Convert.IsDBNull(command.Parameters["@Password"].Value) ? null : (string)command.Parameters["@Password"].Value;
				_isOnline					 = Convert.IsDBNull(command.Parameters["@isOnline"].Value) ? (bool?)null : (bool?)command.Parameters["@isOnline"].Value;
				_isLocked					 = Convert.IsDBNull(command.Parameters["@IsLocked"].Value) ? (bool?)null : (bool?)command.Parameters["@IsLocked"].Value;
				_mustChangeData					 = Convert.IsDBNull(command.Parameters["@MustChangeData"].Value) ? (bool?)null : (bool?)command.Parameters["@MustChangeData"].Value;
				_lastLogin					 = Convert.IsDBNull(command.Parameters["@LastLogin"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@LastLogin"].Value;
				_mustChangePassword					 = Convert.IsDBNull(command.Parameters["@MustChangePassword"].Value) ? (bool?)null : (bool?)command.Parameters["@MustChangePassword"].Value;
				_emailVerified					 = Convert.IsDBNull(command.Parameters["@EmailVerified"].Value) ? (bool?)null : (bool?)command.Parameters["@EmailVerified"].Value;
				_firebaseId					 = Convert.IsDBNull(command.Parameters["@FirebaseId"].Value) ? null : (string)command.Parameters["@FirebaseId"].Value;
				_signalrId					 = Convert.IsDBNull(command.Parameters["@SignalrId"].Value) ? null : (string)command.Parameters["@SignalrId"].Value;
				_failedCount					 = Convert.IsDBNull(command.Parameters["@FailedCount"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FailedCount"].Value;
				_defaultRoute					 = Convert.IsDBNull(command.Parameters["@DefaultRoute"].Value) ? null : (string)command.Parameters["@DefaultRoute"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_whatsApp					 = Convert.IsDBNull(command.Parameters["@WhatsApp"].Value) ? null : (string)command.Parameters["@WhatsApp"].Value;
				_zoomId					 = Convert.IsDBNull(command.Parameters["@ZoomId"].Value) ? null : (string)command.Parameters["@ZoomId"].Value;
				_linkedIn					 = Convert.IsDBNull(command.Parameters["@LinkedIn"].Value) ? null : (string)command.Parameters["@LinkedIn"].Value;
				_userBio					 = Convert.IsDBNull(command.Parameters["@UserBio"].Value) ? null : (string)command.Parameters["@UserBio"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_email					 = Convert.IsDBNull(command.Parameters["@Email"].Value) ? null : (string)command.Parameters["@Email"].Value;
				_fax					 = Convert.IsDBNull(command.Parameters["@Fax"].Value) ? null : (string)command.Parameters["@Fax"].Value;
				_internal					 = Convert.IsDBNull(command.Parameters["@Internal"].Value) ? null : (string)command.Parameters["@Internal"].Value;
				_jobTitle					 = Convert.IsDBNull(command.Parameters["@JobTitle"].Value) ? null : (string)command.Parameters["@JobTitle"].Value;
				_avatar					 = Convert.IsDBNull(command.Parameters["@Avatar"].Value) ? null : (string)command.Parameters["@Avatar"].Value;
				_mobile					 = Convert.IsDBNull(command.Parameters["@Mobile"].Value) ? null : (string)command.Parameters["@Mobile"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_primaryMobile					 = Convert.IsDBNull(command.Parameters["@PrimaryMobile"].Value) ? null : (string)command.Parameters["@PrimaryMobile"].Value;
				_mobileVerified					 = Convert.IsDBNull(command.Parameters["@MobileVerified"].Value) ? (bool?)null : (bool?)command.Parameters["@MobileVerified"].Value;
				_verificationCode					 = Convert.IsDBNull(command.Parameters["@VerificationCode"].Value) ? null : (string)command.Parameters["@VerificationCode"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? AppRoleId
		{
			get
			{
				return _appRoleId;
			}
			set
			{
				_appRoleId = value;
			}
		}

		public Int32? UserGroupId
		{
			get
			{
				return _userGroupId;
			}
			set
			{
				_userGroupId = value;
			}
		}

		public string RealName
		{
			get
			{
				return _realName;
			}
			set
			{
				_realName = value;
			}
		}

		public string UserName
		{
			get
			{
				return _userName;
			}
			set
			{
				_userName = value;
			}
		}

		public string Password
		{
			get
			{
				return _password;
			}
			set
			{
				_password = value;
			}
		}

		public bool? IsOnline
		{
			get
			{
				return _isOnline;
			}
			set
			{
				_isOnline = value;
			}
		}

		public bool? IsLocked
		{
			get
			{
				return _isLocked;
			}
			set
			{
				_isLocked = value;
			}
		}

		public bool? MustChangeData
		{
			get
			{
				return _mustChangeData;
			}
			set
			{
				_mustChangeData = value;
			}
		}

		public DateTime? LastLogin
		{
			get
			{
				return _lastLogin;
			}
			set
			{
				_lastLogin = value;
			}
		}

		public bool? MustChangePassword
		{
			get
			{
				return _mustChangePassword;
			}
			set
			{
				_mustChangePassword = value;
			}
		}

		public bool? EmailVerified
		{
			get
			{
				return _emailVerified;
			}
			set
			{
				_emailVerified = value;
			}
		}

		public string FirebaseId
		{
			get
			{
				return _firebaseId;
			}
			set
			{
				_firebaseId = value;
			}
		}

		public string SignalrId
		{
			get
			{
				return _signalrId;
			}
			set
			{
				_signalrId = value;
			}
		}

		public Int32? FailedCount
		{
			get
			{
				return _failedCount;
			}
			set
			{
				_failedCount = value;
			}
		}

		public string DefaultRoute
		{
			get
			{
				return _defaultRoute;
			}
			set
			{
				_defaultRoute = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string WhatsApp
		{
			get
			{
				return _whatsApp;
			}
			set
			{
				_whatsApp = value;
			}
		}

		public string ZoomId
		{
			get
			{
				return _zoomId;
			}
			set
			{
				_zoomId = value;
			}
		}

		public string LinkedIn
		{
			get
			{
				return _linkedIn;
			}
			set
			{
				_linkedIn = value;
			}
		}

		public string UserBio
		{
			get
			{
				return _userBio;
			}
			set
			{
				_userBio = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public string Email
		{
			get
			{
				return _email;
			}
			set
			{
				_email = value;
			}
		}

		public string Fax
		{
			get
			{
				return _fax;
			}
			set
			{
				_fax = value;
			}
		}

		public string Internal
		{
			get
			{
				return _internal;
			}
			set
			{
				_internal = value;
			}
		}

		public string JobTitle
		{
			get
			{
				return _jobTitle;
			}
			set
			{
				_jobTitle = value;
			}
		}

		public string Avatar
		{
			get
			{
				return _avatar;
			}
			set
			{
				_avatar = value;
			}
		}

		public string Mobile
		{
			get
			{
				return _mobile;
			}
			set
			{
				_mobile = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public string PrimaryMobile
		{
			get
			{
				return _primaryMobile;
			}
			set
			{
				_primaryMobile = value;
			}
		}

		public bool? MobileVerified
		{
			get
			{
				return _mobileVerified;
			}
			set
			{
				_mobileVerified = value;
			}
		}

		public string VerificationCode
		{
			get
			{
				return _verificationCode;
			}
			set
			{
				_verificationCode = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppUser_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[AppRoleId]
			,[UserGroupId]
			,[RealName]
			,[UserName]
			,[Password]
			,[isOnline]
			,[IsLocked]
			,[MustChangeData]
			,[LastLogin]
			,[MustChangePassword]
			,[EmailVerified]
			,[FirebaseId]
			,[SignalrId]
			,[FailedCount]
			,[DefaultRoute]
			,[Phone]
			,[WhatsApp]
			,[ZoomId]
			,[LinkedIn]
			,[UserBio]
			,[Latitude]
			,[Longitude]
			,[Address]
			,[Email]
			,[Fax]
			,[Internal]
			,[JobTitle]
			,[Avatar]
			,[Mobile]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[PrimaryMobile]
			,[MobileVerified]
			,[VerificationCode]
			FROM [dbo].[AppUser]
			WHERE 
			[UserId] = @UserId
			";

		internal static string ctprAppUser_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[AppUser]
			WHERE 
			[UserId] = @UserId
			";

		internal static string ctprAppUser_SelectAllByUserId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[AppRoleId]
			,[UserGroupId]
			,[RealName]
			,[UserName]
			,[Password]
			,[isOnline]
			,[IsLocked]
			,[MustChangeData]
			,[LastLogin]
			,[MustChangePassword]
			,[EmailVerified]
			,[FirebaseId]
			,[SignalrId]
			,[FailedCount]
			,[DefaultRoute]
			,[Phone]
			,[WhatsApp]
			,[ZoomId]
			,[LinkedIn]
			,[UserBio]
			,[Latitude]
			,[Longitude]
			,[Address]
			,[Email]
			,[Fax]
			,[Internal]
			,[JobTitle]
			,[Avatar]
			,[Mobile]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[PrimaryMobile]
			,[MobileVerified]
			,[VerificationCode]
			FROM [dbo].[AppUser]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_SelectAllByUserIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_DeleteAllByUserId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser]
			WHERE 
			[UserId] = @UserId OR ([UserId] IS NULL AND @UserId IS NULL)
			";

		internal static string ctprAppUser_SelectAllByAppRoleId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[AppRoleId]
			,[UserGroupId]
			,[RealName]
			,[UserName]
			,[Password]
			,[isOnline]
			,[IsLocked]
			,[MustChangeData]
			,[LastLogin]
			,[MustChangePassword]
			,[EmailVerified]
			,[FirebaseId]
			,[SignalrId]
			,[FailedCount]
			,[DefaultRoute]
			,[Phone]
			,[WhatsApp]
			,[ZoomId]
			,[LinkedIn]
			,[UserBio]
			,[Latitude]
			,[Longitude]
			,[Address]
			,[Email]
			,[Fax]
			,[Internal]
			,[JobTitle]
			,[Avatar]
			,[Mobile]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[PrimaryMobile]
			,[MobileVerified]
			,[VerificationCode]
			FROM [dbo].[AppUser]
			WHERE 
			[AppRoleId] = @AppRoleId OR ([AppRoleId] IS NULL AND @AppRoleId IS NULL)
			";

		internal static string ctprAppUser_SelectAllByAppRoleIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser]
			WHERE 
			[AppRoleId] = @AppRoleId OR ([AppRoleId] IS NULL AND @AppRoleId IS NULL)
			";

		internal static string ctprAppUser_DeleteAllByAppRoleId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser]
			WHERE 
			[AppRoleId] = @AppRoleId OR ([AppRoleId] IS NULL AND @AppRoleId IS NULL)
			";

		internal static string ctprAppUser_SelectAllByUserGroupId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[AppRoleId]
			,[UserGroupId]
			,[RealName]
			,[UserName]
			,[Password]
			,[isOnline]
			,[IsLocked]
			,[MustChangeData]
			,[LastLogin]
			,[MustChangePassword]
			,[EmailVerified]
			,[FirebaseId]
			,[SignalrId]
			,[FailedCount]
			,[DefaultRoute]
			,[Phone]
			,[WhatsApp]
			,[ZoomId]
			,[LinkedIn]
			,[UserBio]
			,[Latitude]
			,[Longitude]
			,[Address]
			,[Email]
			,[Fax]
			,[Internal]
			,[JobTitle]
			,[Avatar]
			,[Mobile]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[PrimaryMobile]
			,[MobileVerified]
			,[VerificationCode]
			FROM [dbo].[AppUser]
			WHERE 
			[UserGroupId] = @UserGroupId OR ([UserGroupId] IS NULL AND @UserGroupId IS NULL)
			";

		internal static string ctprAppUser_SelectAllByUserGroupIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser]
			WHERE 
			[UserGroupId] = @UserGroupId OR ([UserGroupId] IS NULL AND @UserGroupId IS NULL)
			";

		internal static string ctprAppUser_DeleteAllByUserGroupId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser]
			WHERE 
			[UserGroupId] = @UserGroupId OR ([UserGroupId] IS NULL AND @UserGroupId IS NULL)
			";

		internal static string ctprAppUser_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[AppUser]
			(
			[AppRoleId]
			,[UserGroupId]
			,[RealName]
			,[UserName]
			,[Password]
			,[isOnline]
			,[IsLocked]
			,[MustChangeData]
			,[LastLogin]
			,[MustChangePassword]
			,[EmailVerified]
			,[FirebaseId]
			,[SignalrId]
			,[FailedCount]
			,[DefaultRoute]
			,[Phone]
			,[WhatsApp]
			,[ZoomId]
			,[LinkedIn]
			,[UserBio]
			,[Latitude]
			,[Longitude]
			,[Address]
			,[Email]
			,[Fax]
			,[Internal]
			,[JobTitle]
			,[Avatar]
			,[Mobile]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[PrimaryMobile]
			,[MobileVerified]
			,[VerificationCode]
			)
			VALUES
			(
			@AppRoleId
			,@UserGroupId
			,@RealName
			,@UserName
			,@Password
			,@isOnline
			,@IsLocked
			,@MustChangeData
			,@LastLogin
			,@MustChangePassword
			,@EmailVerified
			,@FirebaseId
			,@SignalrId
			,@FailedCount
			,@DefaultRoute
			,@Phone
			,@WhatsApp
			,@ZoomId
			,@LinkedIn
			,@UserBio
			,@Latitude
			,@Longitude
			,@Address
			,@Email
			,@Fax
			,@Internal
			,@JobTitle
			,@Avatar
			,@Mobile
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@PrimaryMobile
			,@MobileVerified
			,@VerificationCode
			)
			SELECT 
			@UserId = [UserId]
			,@AppRoleId = [AppRoleId]
			,@UserGroupId = [UserGroupId]
			,@RealName = [RealName]
			,@UserName = [UserName]
			,@Password = [Password]
			,@isOnline = [isOnline]
			,@IsLocked = [IsLocked]
			,@MustChangeData = [MustChangeData]
			,@LastLogin = [LastLogin]
			,@MustChangePassword = [MustChangePassword]
			,@EmailVerified = [EmailVerified]
			,@FirebaseId = [FirebaseId]
			,@SignalrId = [SignalrId]
			,@FailedCount = [FailedCount]
			,@DefaultRoute = [DefaultRoute]
			,@Phone = [Phone]
			,@WhatsApp = [WhatsApp]
			,@ZoomId = [ZoomId]
			,@LinkedIn = [LinkedIn]
			,@UserBio = [UserBio]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@Address = [Address]
			,@Email = [Email]
			,@Fax = [Fax]
			,@Internal = [Internal]
			,@JobTitle = [JobTitle]
			,@Avatar = [Avatar]
			,@Mobile = [Mobile]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@PrimaryMobile = [PrimaryMobile]
			,@MobileVerified = [MobileVerified]
			,@VerificationCode = [VerificationCode]
			FROM [dbo].[AppUser]
			WHERE 
			[UserId] = SCOPE_IDENTITY()
			";

		internal static string ctprAppUser_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[AppRoleId]
			,[UserGroupId]
			,[RealName]
			,[UserName]
			,[Password]
			,[isOnline]
			,[IsLocked]
			,[MustChangeData]
			,[LastLogin]
			,[MustChangePassword]
			,[EmailVerified]
			,[FirebaseId]
			,[SignalrId]
			,[FailedCount]
			,[DefaultRoute]
			,[Phone]
			,[WhatsApp]
			,[ZoomId]
			,[LinkedIn]
			,[UserBio]
			,[Latitude]
			,[Longitude]
			,[Address]
			,[Email]
			,[Fax]
			,[Internal]
			,[JobTitle]
			,[Avatar]
			,[Mobile]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[PrimaryMobile]
			,[MobileVerified]
			,[VerificationCode]
			FROM [dbo].[AppUser]
			";

		internal static string ctprAppUser_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser]
			";

		internal static string ctprAppUser_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppUser]
			##CRITERIA##
			";

		internal static string ctprAppUser_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[UserId]
			,[AppRoleId]
			,[UserGroupId]
			,[RealName]
			,[UserName]
			,[Password]
			,[isOnline]
			,[IsLocked]
			,[MustChangeData]
			,[LastLogin]
			,[MustChangePassword]
			,[EmailVerified]
			,[FirebaseId]
			,[SignalrId]
			,[FailedCount]
			,[DefaultRoute]
			,[Phone]
			,[WhatsApp]
			,[ZoomId]
			,[LinkedIn]
			,[UserBio]
			,[Latitude]
			,[Longitude]
			,[Address]
			,[Email]
			,[Fax]
			,[Internal]
			,[JobTitle]
			,[Avatar]
			,[Mobile]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[PrimaryMobile]
			,[MobileVerified]
			,[VerificationCode]
			FROM [dbo].[AppUser]
			##CRITERIA##
			";

		internal static string ctprAppUser_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppUser]
			##CRITERIA##
			";

		internal static string ctprAppUser_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[AppUser]
			SET
			[AppRoleId] = @AppRoleId
			,[UserGroupId] = @UserGroupId
			,[RealName] = @RealName
			,[UserName] = @UserName
			,[Password] = @Password
			,[isOnline] = @isOnline
			,[IsLocked] = @IsLocked
			,[MustChangeData] = @MustChangeData
			,[LastLogin] = @LastLogin
			,[MustChangePassword] = @MustChangePassword
			,[EmailVerified] = @EmailVerified
			,[FirebaseId] = @FirebaseId
			,[SignalrId] = @SignalrId
			,[FailedCount] = @FailedCount
			,[DefaultRoute] = @DefaultRoute
			,[Phone] = @Phone
			,[WhatsApp] = @WhatsApp
			,[ZoomId] = @ZoomId
			,[LinkedIn] = @LinkedIn
			,[UserBio] = @UserBio
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[Address] = @Address
			,[Email] = @Email
			,[Fax] = @Fax
			,[Internal] = @Internal
			,[JobTitle] = @JobTitle
			,[Avatar] = @Avatar
			,[Mobile] = @Mobile
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[PrimaryMobile] = @PrimaryMobile
			,[MobileVerified] = @MobileVerified
			,[VerificationCode] = @VerificationCode
			WHERE 
			[UserId] = @UserId
			SELECT 
			@UserId = [UserId]
			,@AppRoleId = [AppRoleId]
			,@UserGroupId = [UserGroupId]
			,@RealName = [RealName]
			,@UserName = [UserName]
			,@Password = [Password]
			,@isOnline = [isOnline]
			,@IsLocked = [IsLocked]
			,@MustChangeData = [MustChangeData]
			,@LastLogin = [LastLogin]
			,@MustChangePassword = [MustChangePassword]
			,@EmailVerified = [EmailVerified]
			,@FirebaseId = [FirebaseId]
			,@SignalrId = [SignalrId]
			,@FailedCount = [FailedCount]
			,@DefaultRoute = [DefaultRoute]
			,@Phone = [Phone]
			,@WhatsApp = [WhatsApp]
			,@ZoomId = [ZoomId]
			,@LinkedIn = [LinkedIn]
			,@UserBio = [UserBio]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@Address = [Address]
			,@Email = [Email]
			,@Fax = [Fax]
			,@Internal = [Internal]
			,@JobTitle = [JobTitle]
			,@Avatar = [Avatar]
			,@Mobile = [Mobile]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@PrimaryMobile = [PrimaryMobile]
			,@MobileVerified = [MobileVerified]
			,@VerificationCode = [VerificationCode]
			FROM [dbo].[AppUser]
			WHERE 
			[UserId] = @UserId
			";

	}
}
#endregion
