/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppSetting : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _settingId;
		protected Int32? _userId;
		protected string _settingCode;
		protected string _settingValue;
		#endregion

		#region class methods
		public DAOAppSetting()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table AppSetting based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAppSetting
		///</returns>
		///<parameters>
		///Int32? settingId
		///</parameters>
		public static DAOAppSetting SelectOne(Int32? settingId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppSetting_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppSetting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SettingId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)settingId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOAppSetting retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAppSetting();
					retObj._settingId					 = Convert.IsDBNull(dt.Rows[0]["SettingId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SettingId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._settingCode					 = Convert.IsDBNull(dt.Rows[0]["SettingCode"]) ? null : (string)dt.Rows[0]["SettingCode"];
					retObj._settingValue					 = Convert.IsDBNull(dt.Rows[0]["SettingValue"]) ? null : (string)dt.Rows[0]["SettingValue"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table AppSetting based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppSetting_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SettingId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_settingId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table AppSetting
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppSetting_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SettingId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_settingId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SettingCode", SqlDbType.NVarChar, 100, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_settingCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SettingValue", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_settingValue?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_settingId					 = Convert.IsDBNull(command.Parameters["@SettingId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SettingId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_settingCode					 = Convert.IsDBNull(command.Parameters["@SettingCode"].Value) ? null : (string)command.Parameters["@SettingCode"].Value;
				_settingValue					 = Convert.IsDBNull(command.Parameters["@SettingValue"].Value) ? null : (string)command.Parameters["@SettingValue"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppSetting
		///</Summary>
		///<returns>
		///IList-DAOAppSetting.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppSetting> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppSetting_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppSetting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppSetting> objList = new List<DAOAppSetting>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppSetting retObj = new DAOAppSetting();
						retObj._settingId					 = Convert.IsDBNull(row["SettingId"]) ? (Int32?)null : (Int32?)row["SettingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._settingCode					 = Convert.IsDBNull(row["SettingCode"]) ? null : (string)row["SettingCode"];
						retObj._settingValue					 = Convert.IsDBNull(row["SettingValue"]) ? null : (string)row["SettingValue"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppSetting_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppSetting
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppSetting_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppSetting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "SettingId", true) == 0) lst.Add(Convert.IsDBNull(row["SettingId"]) ? (Int32?)null : (Int32?)row["SettingId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "SettingCode", true) == 0) lst.Add(Convert.IsDBNull(row["SettingCode"]) ? null : (string)row["SettingCode"]);
						if (string.Compare(projection.Member, "SettingValue", true) == 0) lst.Add(Convert.IsDBNull(row["SettingValue"]) ? null : (string)row["SettingValue"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppSetting
		///</Summary>
		///<returns>
		///IList-DAOAppSetting.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppSetting> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppSetting_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppSetting");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppSetting> objList = new List<DAOAppSetting>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppSetting retObj = new DAOAppSetting();
						retObj._settingId					 = Convert.IsDBNull(row["SettingId"]) ? (Int32?)null : (Int32?)row["SettingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._settingCode					 = Convert.IsDBNull(row["SettingCode"]) ? null : (string)row["SettingCode"];
						retObj._settingValue					 = Convert.IsDBNull(row["SettingValue"]) ? null : (string)row["SettingValue"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppSetting
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppSetting_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table AppSetting based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppSetting_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SettingId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_settingId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SettingCode", SqlDbType.NVarChar, 100, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_settingCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SettingValue", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_settingValue?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_settingId					 = Convert.IsDBNull(command.Parameters["@SettingId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SettingId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_settingCode					 = Convert.IsDBNull(command.Parameters["@SettingCode"].Value) ? null : (string)command.Parameters["@SettingCode"].Value;
				_settingValue					 = Convert.IsDBNull(command.Parameters["@SettingValue"].Value) ? null : (string)command.Parameters["@SettingValue"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? SettingId
		{
			get
			{
				return _settingId;
			}
			set
			{
				_settingId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public string SettingCode
		{
			get
			{
				return _settingCode;
			}
			set
			{
				_settingCode = value;
			}
		}

		public string SettingValue
		{
			get
			{
				return _settingValue;
			}
			set
			{
				_settingValue = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppSetting_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[SettingId]
			,[UserId]
			,[SettingCode]
			,[SettingValue]
			FROM [dbo].[AppSetting]
			WHERE 
			[SettingId] = @SettingId
			";

		internal static string ctprAppSetting_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[AppSetting]
			WHERE 
			[SettingId] = @SettingId
			";

		internal static string ctprAppSetting_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[AppSetting]
			(
			[SettingId]
			,[UserId]
			,[SettingCode]
			,[SettingValue]
			)
			VALUES
			(
			@SettingId
			,@UserId
			,@SettingCode
			,@SettingValue
			)
			SELECT 
			@SettingId = [SettingId]
			,@UserId = [UserId]
			,@SettingCode = [SettingCode]
			,@SettingValue = [SettingValue]
			FROM [dbo].[AppSetting]
			WHERE 
			[SettingId] = @SettingId
			";

		internal static string ctprAppSetting_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[SettingId]
			,[UserId]
			,[SettingCode]
			,[SettingValue]
			FROM [dbo].[AppSetting]
			";

		internal static string ctprAppSetting_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppSetting]
			";

		internal static string ctprAppSetting_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppSetting]
			##CRITERIA##
			";

		internal static string ctprAppSetting_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[SettingId]
			,[UserId]
			,[SettingCode]
			,[SettingValue]
			FROM [dbo].[AppSetting]
			##CRITERIA##
			";

		internal static string ctprAppSetting_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppSetting]
			##CRITERIA##
			";

		internal static string ctprAppSetting_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[AppSetting]
			SET
			[UserId] = @UserId
			,[SettingCode] = @SettingCode
			,[SettingValue] = @SettingValue
			WHERE 
			[SettingId] = @SettingId
			SELECT 
			@SettingId = [SettingId]
			,@UserId = [UserId]
			,@SettingCode = [SettingCode]
			,@SettingValue = [SettingValue]
			FROM [dbo].[AppSetting]
			WHERE 
			[SettingId] = @SettingId
			";

	}
}
#endregion
