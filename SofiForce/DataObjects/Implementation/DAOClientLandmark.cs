/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientLandmark : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _clientId;
		protected Int32? _landmarkId;
		protected Int64? _detaillandId;
		#endregion

		#region class methods
		public DAOClientLandmark()
		{
		}
		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Landmark based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientLandmark.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOClientLandmark> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Landmark");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientLandmark> objList = new List<DAOClientLandmark>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientLandmark retObj = new DAOClientLandmark();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._landmarkId					 = Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"];
						retObj._detaillandId					 = Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Landmark with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Landmark based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientLandmark.
		///</returns>
		///<parameters>
		///Int32? landmarkId
		///</parameters>
		public static IList<DAOClientLandmark> SelectAllByLandmarkId(Int32? landmarkId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_SelectAllByLandmarkId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Landmark");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LandmarkId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)landmarkId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientLandmark> objList = new List<DAOClientLandmark>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientLandmark retObj = new DAOClientLandmark();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._landmarkId					 = Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"];
						retObj._detaillandId					 = Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? landmarkId
		///</parameters>
		public static Int32 SelectAllByLandmarkIdCount(Int32? landmarkId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_SelectAllByLandmarkIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LandmarkId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)landmarkId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Landmark with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? landmarkId
		///</parameters>
		public static void DeleteAllByLandmarkId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? landmarkId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_DeleteAllByLandmarkId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@LandmarkId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)landmarkId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_Landmark based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientLandmark
		///</returns>
		///<parameters>
		///Int64? detaillandId
		///</parameters>
		public static DAOClientLandmark SelectOne(Int64? detaillandId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Landmark");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetaillandId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)detaillandId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientLandmark retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientLandmark();
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._landmarkId					 = Convert.IsDBNull(dt.Rows[0]["LandmarkId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["LandmarkId"];
					retObj._detaillandId					 = Convert.IsDBNull(dt.Rows[0]["DetaillandId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["DetaillandId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_Landmark based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetaillandId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_detaillandId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_Landmark
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LandmarkId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_landmarkId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DetaillandId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _detaillandId));

				command.ExecuteNonQuery();

				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_landmarkId					 = Convert.IsDBNull(command.Parameters["@LandmarkId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@LandmarkId"].Value;
				_detaillandId					 = Convert.IsDBNull(command.Parameters["@DetaillandId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetaillandId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_Landmark
		///</Summary>
		///<returns>
		///IList-DAOClientLandmark.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientLandmark> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Landmark");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientLandmark> objList = new List<DAOClientLandmark>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientLandmark retObj = new DAOClientLandmark();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._landmarkId					 = Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"];
						retObj._detaillandId					 = Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_Landmark
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Landmark_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Landmark");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "LandmarkId", true) == 0) lst.Add(Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"]);
						if (string.Compare(projection.Member, "DetaillandId", true) == 0) lst.Add(Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_Landmark
		///</Summary>
		///<returns>
		///IList-DAOClientLandmark.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientLandmark> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Landmark_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Landmark");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientLandmark> objList = new List<DAOClientLandmark>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientLandmark retObj = new DAOClientLandmark();
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._landmarkId					 = Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"];
						retObj._detaillandId					 = Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_Landmark
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Landmark_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_Landmark based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Landmark_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LandmarkId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_landmarkId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DetaillandId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_detaillandId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_landmarkId					 = Convert.IsDBNull(command.Parameters["@LandmarkId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@LandmarkId"].Value;
				_detaillandId					 = Convert.IsDBNull(command.Parameters["@DetaillandId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetaillandId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? LandmarkId
		{
			get
			{
				return _landmarkId;
			}
			set
			{
				_landmarkId = value;
			}
		}

		public Int64? DetaillandId
		{
			get
			{
				return _detaillandId;
			}
			set
			{
				_detaillandId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_Landmark_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[LandmarkId]
			,[DetaillandId]
			FROM [dbo].[Client_Landmark]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Landmark_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Landmark]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Landmark_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Landmark]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Landmark_SelectAllByLandmarkId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[LandmarkId]
			,[DetaillandId]
			FROM [dbo].[Client_Landmark]
			WHERE 
			[LandmarkId] = @LandmarkId OR ([LandmarkId] IS NULL AND @LandmarkId IS NULL)
			";

		internal static string ctprClient_Landmark_SelectAllByLandmarkIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Landmark]
			WHERE 
			[LandmarkId] = @LandmarkId OR ([LandmarkId] IS NULL AND @LandmarkId IS NULL)
			";

		internal static string ctprClient_Landmark_DeleteAllByLandmarkId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Landmark]
			WHERE 
			[LandmarkId] = @LandmarkId OR ([LandmarkId] IS NULL AND @LandmarkId IS NULL)
			";

		internal static string ctprClient_Landmark_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[LandmarkId]
			,[DetaillandId]
			FROM [dbo].[Client_Landmark]
			WHERE 
			[DetaillandId] = @DetaillandId
			";

		internal static string ctprClient_Landmark_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_Landmark]
			WHERE 
			[DetaillandId] = @DetaillandId
			";

		internal static string ctprClient_Landmark_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_Landmark]
			(
			[ClientId]
			,[LandmarkId]
			)
			VALUES
			(
			@ClientId
			,@LandmarkId
			)
			SELECT 
			@ClientId = [ClientId]
			,@LandmarkId = [LandmarkId]
			,@DetaillandId = [DetaillandId]
			FROM [dbo].[Client_Landmark]
			WHERE 
			[DetaillandId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_Landmark_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientId]
			,[LandmarkId]
			,[DetaillandId]
			FROM [dbo].[Client_Landmark]
			";

		internal static string ctprClient_Landmark_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Landmark]
			";

		internal static string ctprClient_Landmark_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_Landmark]
			##CRITERIA##
			";

		internal static string ctprClient_Landmark_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientId]
			,[LandmarkId]
			,[DetaillandId]
			FROM [dbo].[Client_Landmark]
			##CRITERIA##
			";

		internal static string ctprClient_Landmark_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_Landmark]
			##CRITERIA##
			";

		internal static string ctprClient_Landmark_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_Landmark]
			SET
			[ClientId] = @ClientId
			,[LandmarkId] = @LandmarkId
			WHERE 
			[DetaillandId] = @DetaillandId
			SELECT 
			@ClientId = [ClientId]
			,@LandmarkId = [LandmarkId]
			,@DetaillandId = [DetaillandId]
			FROM [dbo].[Client_Landmark]
			WHERE 
			[DetaillandId] = @DetaillandId
			";

	}
}
#endregion
