/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppUserQuickOrderDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _detailId;
		protected Int64? _quickOrderId;
		protected string _messageType;
		protected string _message;
		protected Int32? _messageGroup;
		protected string _url;
		#endregion

		#region class methods
		public DAOAppUserQuickOrderDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table AppUser_QuickOrder_Detail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAppUserQuickOrderDetail
		///</returns>
		///<parameters>
		///Int64? detailId
		///</parameters>
		public static DAOAppUserQuickOrderDetail SelectOne(Int64? detailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_QuickOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)detailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOAppUserQuickOrderDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAppUserQuickOrderDetail();
					retObj._detailId					 = Convert.IsDBNull(dt.Rows[0]["DetailId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["DetailId"];
					retObj._quickOrderId					 = Convert.IsDBNull(dt.Rows[0]["QuickOrderId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["QuickOrderId"];
					retObj._messageType					 = Convert.IsDBNull(dt.Rows[0]["MessageType"]) ? null : (string)dt.Rows[0]["MessageType"];
					retObj._message					 = Convert.IsDBNull(dt.Rows[0]["Message"]) ? null : (string)dt.Rows[0]["Message"];
					retObj._messageGroup					 = Convert.IsDBNull(dt.Rows[0]["MessageGroup"]) ? (Int32?)null : (Int32?)dt.Rows[0]["MessageGroup"];
					retObj._url					 = Convert.IsDBNull(dt.Rows[0]["Url"]) ? null : (string)dt.Rows[0]["Url"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table AppUser_QuickOrder_Detail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table AppUser_QuickOrder_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOAppUserQuickOrderDetail.
		///</returns>
		///<parameters>
		///Int64? quickOrderId
		///</parameters>
		public static IList<DAOAppUserQuickOrderDetail> SelectAllByQuickOrderId(Int64? quickOrderId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_SelectAllByQuickOrderId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_QuickOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@QuickOrderId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)quickOrderId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserQuickOrderDetail> objList = new List<DAOAppUserQuickOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserQuickOrderDetail retObj = new DAOAppUserQuickOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._quickOrderId					 = Convert.IsDBNull(row["QuickOrderId"]) ? (Int64?)null : (Int64?)row["QuickOrderId"];
						retObj._messageType					 = Convert.IsDBNull(row["MessageType"]) ? null : (string)row["MessageType"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._messageGroup					 = Convert.IsDBNull(row["MessageGroup"]) ? (Int32?)null : (Int32?)row["MessageGroup"];
						retObj._url					 = Convert.IsDBNull(row["Url"]) ? null : (string)row["Url"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? quickOrderId
		///</parameters>
		public static Int32 SelectAllByQuickOrderIdCount(Int64? quickOrderId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_SelectAllByQuickOrderIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@QuickOrderId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)quickOrderId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table AppUser_QuickOrder_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? quickOrderId
		///</parameters>
		public static void DeleteAllByQuickOrderId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? quickOrderId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_DeleteAllByQuickOrderId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@QuickOrderId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)quickOrderId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table AppUser_QuickOrder_Detail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _detailId));
				command.Parameters.Add(CtSqlParameter.Get("@QuickOrderId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_quickOrderId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MessageType", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_messageType?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MessageGroup", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_messageGroup?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Url", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_url?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_quickOrderId					 = Convert.IsDBNull(command.Parameters["@QuickOrderId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@QuickOrderId"].Value;
				_messageType					 = Convert.IsDBNull(command.Parameters["@MessageType"].Value) ? null : (string)command.Parameters["@MessageType"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;
				_messageGroup					 = Convert.IsDBNull(command.Parameters["@MessageGroup"].Value) ? (Int32?)null : (Int32?)command.Parameters["@MessageGroup"].Value;
				_url					 = Convert.IsDBNull(command.Parameters["@Url"].Value) ? null : (string)command.Parameters["@Url"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppUser_QuickOrder_Detail
		///</Summary>
		///<returns>
		///IList-DAOAppUserQuickOrderDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppUserQuickOrderDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_QuickOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserQuickOrderDetail> objList = new List<DAOAppUserQuickOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserQuickOrderDetail retObj = new DAOAppUserQuickOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._quickOrderId					 = Convert.IsDBNull(row["QuickOrderId"]) ? (Int64?)null : (Int64?)row["QuickOrderId"];
						retObj._messageType					 = Convert.IsDBNull(row["MessageType"]) ? null : (string)row["MessageType"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._messageGroup					 = Convert.IsDBNull(row["MessageGroup"]) ? (Int32?)null : (Int32?)row["MessageGroup"];
						retObj._url					 = Convert.IsDBNull(row["Url"]) ? null : (string)row["Url"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppUser_QuickOrder_Detail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_QuickOrder_Detail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_QuickOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"]);
						if (string.Compare(projection.Member, "QuickOrderId", true) == 0) lst.Add(Convert.IsDBNull(row["QuickOrderId"]) ? (Int64?)null : (Int64?)row["QuickOrderId"]);
						if (string.Compare(projection.Member, "MessageType", true) == 0) lst.Add(Convert.IsDBNull(row["MessageType"]) ? null : (string)row["MessageType"]);
						if (string.Compare(projection.Member, "Message", true) == 0) lst.Add(Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"]);
						if (string.Compare(projection.Member, "MessageGroup", true) == 0) lst.Add(Convert.IsDBNull(row["MessageGroup"]) ? (Int32?)null : (Int32?)row["MessageGroup"]);
						if (string.Compare(projection.Member, "Url", true) == 0) lst.Add(Convert.IsDBNull(row["Url"]) ? null : (string)row["Url"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppUser_QuickOrder_Detail
		///</Summary>
		///<returns>
		///IList-DAOAppUserQuickOrderDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppUserQuickOrderDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_QuickOrder_Detail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_QuickOrder_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserQuickOrderDetail> objList = new List<DAOAppUserQuickOrderDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserQuickOrderDetail retObj = new DAOAppUserQuickOrderDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._quickOrderId					 = Convert.IsDBNull(row["QuickOrderId"]) ? (Int64?)null : (Int64?)row["QuickOrderId"];
						retObj._messageType					 = Convert.IsDBNull(row["MessageType"]) ? null : (string)row["MessageType"];
						retObj._message					 = Convert.IsDBNull(row["Message"]) ? null : (string)row["Message"];
						retObj._messageGroup					 = Convert.IsDBNull(row["MessageGroup"]) ? (Int32?)null : (Int32?)row["MessageGroup"];
						retObj._url					 = Convert.IsDBNull(row["Url"]) ? null : (string)row["Url"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppUser_QuickOrder_Detail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_QuickOrder_Detail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table AppUser_QuickOrder_Detail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_QuickOrder_Detail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@QuickOrderId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_quickOrderId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MessageType", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_messageType?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Message", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_message?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MessageGroup", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_messageGroup?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Url", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_url?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_quickOrderId					 = Convert.IsDBNull(command.Parameters["@QuickOrderId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@QuickOrderId"].Value;
				_messageType					 = Convert.IsDBNull(command.Parameters["@MessageType"].Value) ? null : (string)command.Parameters["@MessageType"].Value;
				_message					 = Convert.IsDBNull(command.Parameters["@Message"].Value) ? null : (string)command.Parameters["@Message"].Value;
				_messageGroup					 = Convert.IsDBNull(command.Parameters["@MessageGroup"].Value) ? (Int32?)null : (Int32?)command.Parameters["@MessageGroup"].Value;
				_url					 = Convert.IsDBNull(command.Parameters["@Url"].Value) ? null : (string)command.Parameters["@Url"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int64? QuickOrderId
		{
			get
			{
				return _quickOrderId;
			}
			set
			{
				_quickOrderId = value;
			}
		}

		public string MessageType
		{
			get
			{
				return _messageType;
			}
			set
			{
				_messageType = value;
			}
		}

		public string Message
		{
			get
			{
				return _message;
			}
			set
			{
				_message = value;
			}
		}

		public Int32? MessageGroup
		{
			get
			{
				return _messageGroup;
			}
			set
			{
				_messageGroup = value;
			}
		}

		public string Url
		{
			get
			{
				return _url;
			}
			set
			{
				_url = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppUser_QuickOrder_Detail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[QuickOrderId]
			,[MessageType]
			,[Message]
			,[MessageGroup]
			,[Url]
			FROM [dbo].[AppUser_QuickOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprAppUser_QuickOrder_Detail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[AppUser_QuickOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprAppUser_QuickOrder_Detail_SelectAllByQuickOrderId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[QuickOrderId]
			,[MessageType]
			,[Message]
			,[MessageGroup]
			,[Url]
			FROM [dbo].[AppUser_QuickOrder_Detail]
			WHERE 
			[QuickOrderId] = @QuickOrderId OR ([QuickOrderId] IS NULL AND @QuickOrderId IS NULL)
			";

		internal static string ctprAppUser_QuickOrder_Detail_SelectAllByQuickOrderIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_QuickOrder_Detail]
			WHERE 
			[QuickOrderId] = @QuickOrderId OR ([QuickOrderId] IS NULL AND @QuickOrderId IS NULL)
			";

		internal static string ctprAppUser_QuickOrder_Detail_DeleteAllByQuickOrderId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[AppUser_QuickOrder_Detail]
			WHERE 
			[QuickOrderId] = @QuickOrderId OR ([QuickOrderId] IS NULL AND @QuickOrderId IS NULL)
			";

		internal static string ctprAppUser_QuickOrder_Detail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[AppUser_QuickOrder_Detail]
			(
			[QuickOrderId]
			,[MessageType]
			,[Message]
			,[MessageGroup]
			,[Url]
			)
			VALUES
			(
			@QuickOrderId
			,@MessageType
			,@Message
			,@MessageGroup
			,@Url
			)
			SELECT 
			@DetailId = [DetailId]
			,@QuickOrderId = [QuickOrderId]
			,@MessageType = [MessageType]
			,@Message = [Message]
			,@MessageGroup = [MessageGroup]
			,@Url = [Url]
			FROM [dbo].[AppUser_QuickOrder_Detail]
			WHERE 
			[DetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprAppUser_QuickOrder_Detail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[QuickOrderId]
			,[MessageType]
			,[Message]
			,[MessageGroup]
			,[Url]
			FROM [dbo].[AppUser_QuickOrder_Detail]
			";

		internal static string ctprAppUser_QuickOrder_Detail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_QuickOrder_Detail]
			";

		internal static string ctprAppUser_QuickOrder_Detail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppUser_QuickOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprAppUser_QuickOrder_Detail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[QuickOrderId]
			,[MessageType]
			,[Message]
			,[MessageGroup]
			,[Url]
			FROM [dbo].[AppUser_QuickOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprAppUser_QuickOrder_Detail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppUser_QuickOrder_Detail]
			##CRITERIA##
			";

		internal static string ctprAppUser_QuickOrder_Detail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[AppUser_QuickOrder_Detail]
			SET
			[QuickOrderId] = @QuickOrderId
			,[MessageType] = @MessageType
			,[Message] = @Message
			,[MessageGroup] = @MessageGroup
			,[Url] = @Url
			WHERE 
			[DetailId] = @DetailId
			SELECT 
			@DetailId = [DetailId]
			,@QuickOrderId = [QuickOrderId]
			,@MessageType = [MessageType]
			,@Message = [Message]
			,@MessageGroup = [MessageGroup]
			,@Url = [Url]
			FROM [dbo].[AppUser_QuickOrder_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

	}
}
#endregion
