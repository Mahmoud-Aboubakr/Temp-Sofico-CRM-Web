/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAd : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _adId;
		protected string _adCode;
		protected string _adNameEn;
		protected string _adNameAr;
		protected bool? _isExpire;
		protected DateTime? _expireDate;
		protected string _imagePath;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOAd()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Ad based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAd
		///</returns>
		///<parameters>
		///Int32? adId
		///</parameters>
		public static DAOAd SelectOne(Int32? adId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAd_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Ad");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AdId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)adId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOAd retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAd();
					retObj._adId					 = Convert.IsDBNull(dt.Rows[0]["AdId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AdId"];
					retObj._adCode					 = Convert.IsDBNull(dt.Rows[0]["AdCode"]) ? null : (string)dt.Rows[0]["AdCode"];
					retObj._adNameEn					 = Convert.IsDBNull(dt.Rows[0]["AdNameEn"]) ? null : (string)dt.Rows[0]["AdNameEn"];
					retObj._adNameAr					 = Convert.IsDBNull(dt.Rows[0]["AdNameAr"]) ? null : (string)dt.Rows[0]["AdNameAr"];
					retObj._isExpire					 = Convert.IsDBNull(dt.Rows[0]["IsExpire"]) ? (bool?)null : (bool?)dt.Rows[0]["IsExpire"];
					retObj._expireDate					 = Convert.IsDBNull(dt.Rows[0]["ExpireDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ExpireDate"];
					retObj._imagePath					 = Convert.IsDBNull(dt.Rows[0]["ImagePath"]) ? null : (string)dt.Rows[0]["ImagePath"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Ad based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAd_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AdId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_adId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Ad
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAd_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AdId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _adId));
				command.Parameters.Add(CtSqlParameter.Get("@AdCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AdNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AdNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsExpire", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isExpire?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExpireDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_expireDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ImagePath", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_imagePath?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_adId					 = Convert.IsDBNull(command.Parameters["@AdId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AdId"].Value;
				_adCode					 = Convert.IsDBNull(command.Parameters["@AdCode"].Value) ? null : (string)command.Parameters["@AdCode"].Value;
				_adNameEn					 = Convert.IsDBNull(command.Parameters["@AdNameEn"].Value) ? null : (string)command.Parameters["@AdNameEn"].Value;
				_adNameAr					 = Convert.IsDBNull(command.Parameters["@AdNameAr"].Value) ? null : (string)command.Parameters["@AdNameAr"].Value;
				_isExpire					 = Convert.IsDBNull(command.Parameters["@IsExpire"].Value) ? (bool?)null : (bool?)command.Parameters["@IsExpire"].Value;
				_expireDate					 = Convert.IsDBNull(command.Parameters["@ExpireDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ExpireDate"].Value;
				_imagePath					 = Convert.IsDBNull(command.Parameters["@ImagePath"].Value) ? null : (string)command.Parameters["@ImagePath"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Ad
		///</Summary>
		///<returns>
		///IList-DAOAd.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAd> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAd_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Ad");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAd> objList = new List<DAOAd>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAd retObj = new DAOAd();
						retObj._adId					 = Convert.IsDBNull(row["AdId"]) ? (Int32?)null : (Int32?)row["AdId"];
						retObj._adCode					 = Convert.IsDBNull(row["AdCode"]) ? null : (string)row["AdCode"];
						retObj._adNameEn					 = Convert.IsDBNull(row["AdNameEn"]) ? null : (string)row["AdNameEn"];
						retObj._adNameAr					 = Convert.IsDBNull(row["AdNameAr"]) ? null : (string)row["AdNameAr"];
						retObj._isExpire					 = Convert.IsDBNull(row["IsExpire"]) ? (bool?)null : (bool?)row["IsExpire"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._imagePath					 = Convert.IsDBNull(row["ImagePath"]) ? null : (string)row["ImagePath"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAd_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAd
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAd_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Ad");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "AdId", true) == 0) lst.Add(Convert.IsDBNull(row["AdId"]) ? (Int32?)null : (Int32?)row["AdId"]);
						if (string.Compare(projection.Member, "AdCode", true) == 0) lst.Add(Convert.IsDBNull(row["AdCode"]) ? null : (string)row["AdCode"]);
						if (string.Compare(projection.Member, "AdNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["AdNameEn"]) ? null : (string)row["AdNameEn"]);
						if (string.Compare(projection.Member, "AdNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["AdNameAr"]) ? null : (string)row["AdNameAr"]);
						if (string.Compare(projection.Member, "IsExpire", true) == 0) lst.Add(Convert.IsDBNull(row["IsExpire"]) ? (bool?)null : (bool?)row["IsExpire"]);
						if (string.Compare(projection.Member, "ExpireDate", true) == 0) lst.Add(Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"]);
						if (string.Compare(projection.Member, "ImagePath", true) == 0) lst.Add(Convert.IsDBNull(row["ImagePath"]) ? null : (string)row["ImagePath"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Ad
		///</Summary>
		///<returns>
		///IList-DAOAd.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAd> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAd_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Ad");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAd> objList = new List<DAOAd>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAd retObj = new DAOAd();
						retObj._adId					 = Convert.IsDBNull(row["AdId"]) ? (Int32?)null : (Int32?)row["AdId"];
						retObj._adCode					 = Convert.IsDBNull(row["AdCode"]) ? null : (string)row["AdCode"];
						retObj._adNameEn					 = Convert.IsDBNull(row["AdNameEn"]) ? null : (string)row["AdNameEn"];
						retObj._adNameAr					 = Convert.IsDBNull(row["AdNameAr"]) ? null : (string)row["AdNameAr"];
						retObj._isExpire					 = Convert.IsDBNull(row["IsExpire"]) ? (bool?)null : (bool?)row["IsExpire"];
						retObj._expireDate					 = Convert.IsDBNull(row["ExpireDate"]) ? (DateTime?)null : (DateTime?)row["ExpireDate"];
						retObj._imagePath					 = Convert.IsDBNull(row["ImagePath"]) ? null : (string)row["ImagePath"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Ad
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAd_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Ad based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAd_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AdId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_adId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AdCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AdNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AdNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsExpire", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isExpire?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ExpireDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_expireDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ImagePath", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_imagePath?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_adId					 = Convert.IsDBNull(command.Parameters["@AdId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AdId"].Value;
				_adCode					 = Convert.IsDBNull(command.Parameters["@AdCode"].Value) ? null : (string)command.Parameters["@AdCode"].Value;
				_adNameEn					 = Convert.IsDBNull(command.Parameters["@AdNameEn"].Value) ? null : (string)command.Parameters["@AdNameEn"].Value;
				_adNameAr					 = Convert.IsDBNull(command.Parameters["@AdNameAr"].Value) ? null : (string)command.Parameters["@AdNameAr"].Value;
				_isExpire					 = Convert.IsDBNull(command.Parameters["@IsExpire"].Value) ? (bool?)null : (bool?)command.Parameters["@IsExpire"].Value;
				_expireDate					 = Convert.IsDBNull(command.Parameters["@ExpireDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ExpireDate"].Value;
				_imagePath					 = Convert.IsDBNull(command.Parameters["@ImagePath"].Value) ? null : (string)command.Parameters["@ImagePath"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? AdId
		{
			get
			{
				return _adId;
			}
			set
			{
				_adId = value;
			}
		}

		public string AdCode
		{
			get
			{
				return _adCode;
			}
			set
			{
				_adCode = value;
			}
		}

		public string AdNameEn
		{
			get
			{
				return _adNameEn;
			}
			set
			{
				_adNameEn = value;
			}
		}

		public string AdNameAr
		{
			get
			{
				return _adNameAr;
			}
			set
			{
				_adNameAr = value;
			}
		}

		public bool? IsExpire
		{
			get
			{
				return _isExpire;
			}
			set
			{
				_isExpire = value;
			}
		}

		public DateTime? ExpireDate
		{
			get
			{
				return _expireDate;
			}
			set
			{
				_expireDate = value;
			}
		}

		public string ImagePath
		{
			get
			{
				return _imagePath;
			}
			set
			{
				_imagePath = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAd_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[AdId]
			,[AdCode]
			,[AdNameEn]
			,[AdNameAr]
			,[IsExpire]
			,[ExpireDate]
			,[ImagePath]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Ad]
			WHERE 
			[AdId] = @AdId
			";

		internal static string ctprAd_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Ad]
			WHERE 
			[AdId] = @AdId
			";

		internal static string ctprAd_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Ad]
			(
			[AdCode]
			,[AdNameEn]
			,[AdNameAr]
			,[IsExpire]
			,[ExpireDate]
			,[ImagePath]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@AdCode
			,@AdNameEn
			,@AdNameAr
			,@IsExpire
			,@ExpireDate
			,@ImagePath
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@AdId = [AdId]
			,@AdCode = [AdCode]
			,@AdNameEn = [AdNameEn]
			,@AdNameAr = [AdNameAr]
			,@IsExpire = [IsExpire]
			,@ExpireDate = [ExpireDate]
			,@ImagePath = [ImagePath]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Ad]
			WHERE 
			[AdId] = SCOPE_IDENTITY()
			";

		internal static string ctprAd_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[AdId]
			,[AdCode]
			,[AdNameEn]
			,[AdNameAr]
			,[IsExpire]
			,[ExpireDate]
			,[ImagePath]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Ad]
			";

		internal static string ctprAd_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Ad]
			";

		internal static string ctprAd_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Ad]
			##CRITERIA##
			";

		internal static string ctprAd_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[AdId]
			,[AdCode]
			,[AdNameEn]
			,[AdNameAr]
			,[IsExpire]
			,[ExpireDate]
			,[ImagePath]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Ad]
			##CRITERIA##
			";

		internal static string ctprAd_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Ad]
			##CRITERIA##
			";

		internal static string ctprAd_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Ad]
			SET
			[AdCode] = @AdCode
			,[AdNameEn] = @AdNameEn
			,[AdNameAr] = @AdNameAr
			,[IsExpire] = @IsExpire
			,[ExpireDate] = @ExpireDate
			,[ImagePath] = @ImagePath
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[AdId] = @AdId
			SELECT 
			@AdId = [AdId]
			,@AdCode = [AdCode]
			,@AdNameEn = [AdNameEn]
			,@AdNameAr = [AdNameAr]
			,@IsExpire = [IsExpire]
			,@ExpireDate = [ExpireDate]
			,@ImagePath = [ImagePath]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Ad]
			WHERE 
			[AdId] = @AdId
			";

	}
}
#endregion
