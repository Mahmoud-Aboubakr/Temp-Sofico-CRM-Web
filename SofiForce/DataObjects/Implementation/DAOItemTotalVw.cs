/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOItemTotalVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _itemId;
		protected Int32? _storeId;
		protected Int32? _quantity;
		protected Int32? _acceptDays;
		protected string _itemCode;
		protected string _itemNameEn;
		protected string _itemNameAr;
		protected string _vendorNameEn;
		protected string _vendorNameAr;
		protected Int32? _vendorId;
		protected Int32? _available;
		protected bool? _hasPromotion;
		protected bool? _isNewAdded;
		protected bool? _isNewStocked;
		protected Int32? _unitId;
		protected bool? _isTaxable;
		protected decimal? _publicPrice;
		protected decimal? _clientPrice;
		protected decimal? _discount;
		protected Int32? _itemGroupId;
		protected bool? _isLocal;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _quota;
		#endregion

		#region class methods
		public DAOItemTotalVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table ItemTotalVw
		///</Summary>
		///<returns>
		///IList-DAOItemTotalVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOItemTotalVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItemTotalVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ItemTotalVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItemTotalVw> objList = new List<DAOItemTotalVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItemTotalVw retObj = new DAOItemTotalVw();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._acceptDays					 = Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._vendorNameEn					 = Convert.IsDBNull(row["VendorNameEn"]) ? null : (string)row["VendorNameEn"];
						retObj._vendorNameAr					 = Convert.IsDBNull(row["VendorNameAr"]) ? null : (string)row["VendorNameAr"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._available					 = Convert.IsDBNull(row["Available"]) ? (Int32?)null : (Int32?)row["Available"];
						retObj._hasPromotion					 = Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"];
						retObj._isNewAdded					 = Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"];
						retObj._isNewStocked					 = Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._itemGroupId					 = Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"];
						retObj._isLocal					 = Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._quota					 = Convert.IsDBNull(row["Quota"]) ? (Int32?)null : (Int32?)row["Quota"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItemTotalVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiItemTotalVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItemTotalVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ItemTotalVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ItemId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"]);
						if (string.Compare(projection.Member, "StoreId", true) == 0) lst.Add(Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"]);
						if (string.Compare(projection.Member, "Quantity", true) == 0) lst.Add(Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"]);
						if (string.Compare(projection.Member, "AcceptDays", true) == 0) lst.Add(Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"]);
						if (string.Compare(projection.Member, "ItemCode", true) == 0) lst.Add(Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"]);
						if (string.Compare(projection.Member, "ItemNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"]);
						if (string.Compare(projection.Member, "ItemNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"]);
						if (string.Compare(projection.Member, "VendorNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["VendorNameEn"]) ? null : (string)row["VendorNameEn"]);
						if (string.Compare(projection.Member, "VendorNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["VendorNameAr"]) ? null : (string)row["VendorNameAr"]);
						if (string.Compare(projection.Member, "VendorId", true) == 0) lst.Add(Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"]);
						if (string.Compare(projection.Member, "Available", true) == 0) lst.Add(Convert.IsDBNull(row["Available"]) ? (Int32?)null : (Int32?)row["Available"]);
						if (string.Compare(projection.Member, "HasPromotion", true) == 0) lst.Add(Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"]);
						if (string.Compare(projection.Member, "IsNewAdded", true) == 0) lst.Add(Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"]);
						if (string.Compare(projection.Member, "IsNewStocked", true) == 0) lst.Add(Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"]);
						if (string.Compare(projection.Member, "UnitId", true) == 0) lst.Add(Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"]);
						if (string.Compare(projection.Member, "IsTaxable", true) == 0) lst.Add(Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"]);
						if (string.Compare(projection.Member, "PublicPrice", true) == 0) lst.Add(Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"]);
						if (string.Compare(projection.Member, "ClientPrice", true) == 0) lst.Add(Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"]);
						if (string.Compare(projection.Member, "Discount", true) == 0) lst.Add(Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"]);
						if (string.Compare(projection.Member, "ItemGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"]);
						if (string.Compare(projection.Member, "IsLocal", true) == 0) lst.Add(Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "Quota", true) == 0) lst.Add(Convert.IsDBNull(row["Quota"]) ? (Int32?)null : (Int32?)row["Quota"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api ItemTotalVw
		///</Summary>
		///<returns>
		///IList-DAOItemTotalVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOItemTotalVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItemTotalVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ItemTotalVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItemTotalVw> objList = new List<DAOItemTotalVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItemTotalVw retObj = new DAOItemTotalVw();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._acceptDays					 = Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._vendorNameEn					 = Convert.IsDBNull(row["VendorNameEn"]) ? null : (string)row["VendorNameEn"];
						retObj._vendorNameAr					 = Convert.IsDBNull(row["VendorNameAr"]) ? null : (string)row["VendorNameAr"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._available					 = Convert.IsDBNull(row["Available"]) ? (Int32?)null : (Int32?)row["Available"];
						retObj._hasPromotion					 = Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"];
						retObj._isNewAdded					 = Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"];
						retObj._isNewStocked					 = Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._itemGroupId					 = Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"];
						retObj._isLocal					 = Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._quota					 = Convert.IsDBNull(row["Quota"]) ? (Int32?)null : (Int32?)row["Quota"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api ItemTotalVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItemTotalVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ItemId
		{
			get
			{
				return _itemId;
			}
			set
			{
				_itemId = value;
			}
		}

		public Int32? StoreId
		{
			get
			{
				return _storeId;
			}
			set
			{
				_storeId = value;
			}
		}

		public Int32? Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity = value;
			}
		}

		public Int32? AcceptDays
		{
			get
			{
				return _acceptDays;
			}
			set
			{
				_acceptDays = value;
			}
		}

		public string ItemCode
		{
			get
			{
				return _itemCode;
			}
			set
			{
				_itemCode = value;
			}
		}

		public string ItemNameEn
		{
			get
			{
				return _itemNameEn;
			}
			set
			{
				_itemNameEn = value;
			}
		}

		public string ItemNameAr
		{
			get
			{
				return _itemNameAr;
			}
			set
			{
				_itemNameAr = value;
			}
		}

		public string VendorNameEn
		{
			get
			{
				return _vendorNameEn;
			}
			set
			{
				_vendorNameEn = value;
			}
		}

		public string VendorNameAr
		{
			get
			{
				return _vendorNameAr;
			}
			set
			{
				_vendorNameAr = value;
			}
		}

		public Int32? VendorId
		{
			get
			{
				return _vendorId;
			}
			set
			{
				_vendorId = value;
			}
		}

		public Int32? Available
		{
			get
			{
				return _available;
			}
			set
			{
				_available = value;
			}
		}

		public bool? HasPromotion
		{
			get
			{
				return _hasPromotion;
			}
			set
			{
				_hasPromotion = value;
			}
		}

		public bool? IsNewAdded
		{
			get
			{
				return _isNewAdded;
			}
			set
			{
				_isNewAdded = value;
			}
		}

		public bool? IsNewStocked
		{
			get
			{
				return _isNewStocked;
			}
			set
			{
				_isNewStocked = value;
			}
		}

		public Int32? UnitId
		{
			get
			{
				return _unitId;
			}
			set
			{
				_unitId = value;
			}
		}

		public bool? IsTaxable
		{
			get
			{
				return _isTaxable;
			}
			set
			{
				_isTaxable = value;
			}
		}

		public decimal? PublicPrice
		{
			get
			{
				return _publicPrice;
			}
			set
			{
				_publicPrice = value;
			}
		}

		public decimal? ClientPrice
		{
			get
			{
				return _clientPrice;
			}
			set
			{
				_clientPrice = value;
			}
		}

		public decimal? Discount
		{
			get
			{
				return _discount;
			}
			set
			{
				_discount = value;
			}
		}

		public Int32? ItemGroupId
		{
			get
			{
				return _itemGroupId;
			}
			set
			{
				_itemGroupId = value;
			}
		}

		public bool? IsLocal
		{
			get
			{
				return _isLocal;
			}
			set
			{
				_isLocal = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public Int32? Quota
		{
			get
			{
				return _quota;
			}
			set
			{
				_quota = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprItemTotalVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ItemId]
			,[StoreId]
			,[Quantity]
			,[AcceptDays]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[VendorNameEn]
			,[VendorNameAr]
			,[VendorId]
			,[Available]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[UnitId]
			,[IsTaxable]
			,[PublicPrice]
			,[ClientPrice]
			,[Discount]
			,[ItemGroupId]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[Quota]
			FROM [dbo].[ItemTotalVw]
			";

		internal static string ctprItemTotalVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[ItemTotalVw]
			";

		internal static string ctprItemTotalVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[ItemTotalVw]
			##CRITERIA##
			";

		internal static string ctprItemTotalVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ItemId]
			,[StoreId]
			,[Quantity]
			,[AcceptDays]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[VendorNameEn]
			,[VendorNameAr]
			,[VendorId]
			,[Available]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[UnitId]
			,[IsTaxable]
			,[PublicPrice]
			,[ClientPrice]
			,[Discount]
			,[ItemGroupId]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[Quota]
			FROM [dbo].[ItemTotalVw]
			##CRITERIA##
			";

		internal static string ctprItemTotalVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[ItemTotalVw]
			##CRITERIA##
			";

	}
}
#endregion
