/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPromotionCriteriaAttrVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected string _itemCode;
		protected bool? _isCustom;
		protected Int32? _itemId;
		protected Int32? _vendorId;
		protected string _vendorCode;
		protected string _vendorNameEn;
		protected string _vendorNameAr;
		protected string _itemNameEn;
		protected string _itemNameAr;
		protected decimal? _publicPrice;
		protected decimal? _clientPrice;
		protected string _attributeNameEn;
		protected string _attributeNameAr;
		protected string _attributeCode;
		#endregion

		#region class methods
		public DAOPromotionCriteriaAttrVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table PromotionCriteriaAttrVw
		///</Summary>
		///<returns>
		///IList-DAOPromotionCriteriaAttrVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPromotionCriteriaAttrVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionCriteriaAttrVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionCriteriaAttrVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionCriteriaAttrVw> objList = new List<DAOPromotionCriteriaAttrVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionCriteriaAttrVw retObj = new DAOPromotionCriteriaAttrVw();
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._isCustom					 = Convert.IsDBNull(row["IsCustom"]) ? (bool?)null : (bool?)row["IsCustom"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._vendorNameEn					 = Convert.IsDBNull(row["VendorNameEn"]) ? null : (string)row["VendorNameEn"];
						retObj._vendorNameAr					 = Convert.IsDBNull(row["VendorNameAr"]) ? null : (string)row["VendorNameAr"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._attributeNameEn					 = Convert.IsDBNull(row["AttributeNameEn"]) ? null : (string)row["AttributeNameEn"];
						retObj._attributeNameAr					 = Convert.IsDBNull(row["AttributeNameAr"]) ? null : (string)row["AttributeNameAr"];
						retObj._attributeCode					 = Convert.IsDBNull(row["AttributeCode"]) ? null : (string)row["AttributeCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionCriteriaAttrVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPromotionCriteriaAttrVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionCriteriaAttrVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionCriteriaAttrVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ItemCode", true) == 0) lst.Add(Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"]);
						if (string.Compare(projection.Member, "IsCustom", true) == 0) lst.Add(Convert.IsDBNull(row["IsCustom"]) ? (bool?)null : (bool?)row["IsCustom"]);
						if (string.Compare(projection.Member, "ItemId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"]);
						if (string.Compare(projection.Member, "VendorId", true) == 0) lst.Add(Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"]);
						if (string.Compare(projection.Member, "VendorCode", true) == 0) lst.Add(Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"]);
						if (string.Compare(projection.Member, "VendorNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["VendorNameEn"]) ? null : (string)row["VendorNameEn"]);
						if (string.Compare(projection.Member, "VendorNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["VendorNameAr"]) ? null : (string)row["VendorNameAr"]);
						if (string.Compare(projection.Member, "ItemNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"]);
						if (string.Compare(projection.Member, "ItemNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"]);
						if (string.Compare(projection.Member, "PublicPrice", true) == 0) lst.Add(Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"]);
						if (string.Compare(projection.Member, "ClientPrice", true) == 0) lst.Add(Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"]);
						if (string.Compare(projection.Member, "AttributeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["AttributeNameEn"]) ? null : (string)row["AttributeNameEn"]);
						if (string.Compare(projection.Member, "AttributeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["AttributeNameAr"]) ? null : (string)row["AttributeNameAr"]);
						if (string.Compare(projection.Member, "AttributeCode", true) == 0) lst.Add(Convert.IsDBNull(row["AttributeCode"]) ? null : (string)row["AttributeCode"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api PromotionCriteriaAttrVw
		///</Summary>
		///<returns>
		///IList-DAOPromotionCriteriaAttrVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPromotionCriteriaAttrVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionCriteriaAttrVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionCriteriaAttrVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionCriteriaAttrVw> objList = new List<DAOPromotionCriteriaAttrVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionCriteriaAttrVw retObj = new DAOPromotionCriteriaAttrVw();
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._isCustom					 = Convert.IsDBNull(row["IsCustom"]) ? (bool?)null : (bool?)row["IsCustom"];
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._vendorNameEn					 = Convert.IsDBNull(row["VendorNameEn"]) ? null : (string)row["VendorNameEn"];
						retObj._vendorNameAr					 = Convert.IsDBNull(row["VendorNameAr"]) ? null : (string)row["VendorNameAr"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._attributeNameEn					 = Convert.IsDBNull(row["AttributeNameEn"]) ? null : (string)row["AttributeNameEn"];
						retObj._attributeNameAr					 = Convert.IsDBNull(row["AttributeNameAr"]) ? null : (string)row["AttributeNameAr"];
						retObj._attributeCode					 = Convert.IsDBNull(row["AttributeCode"]) ? null : (string)row["AttributeCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api PromotionCriteriaAttrVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionCriteriaAttrVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string ItemCode
		{
			get
			{
				return _itemCode;
			}
			set
			{
				_itemCode = value;
			}
		}

		public bool? IsCustom
		{
			get
			{
				return _isCustom;
			}
			set
			{
				_isCustom = value;
			}
		}

		public Int32? ItemId
		{
			get
			{
				return _itemId;
			}
			set
			{
				_itemId = value;
			}
		}

		public Int32? VendorId
		{
			get
			{
				return _vendorId;
			}
			set
			{
				_vendorId = value;
			}
		}

		public string VendorCode
		{
			get
			{
				return _vendorCode;
			}
			set
			{
				_vendorCode = value;
			}
		}

		public string VendorNameEn
		{
			get
			{
				return _vendorNameEn;
			}
			set
			{
				_vendorNameEn = value;
			}
		}

		public string VendorNameAr
		{
			get
			{
				return _vendorNameAr;
			}
			set
			{
				_vendorNameAr = value;
			}
		}

		public string ItemNameEn
		{
			get
			{
				return _itemNameEn;
			}
			set
			{
				_itemNameEn = value;
			}
		}

		public string ItemNameAr
		{
			get
			{
				return _itemNameAr;
			}
			set
			{
				_itemNameAr = value;
			}
		}

		public decimal? PublicPrice
		{
			get
			{
				return _publicPrice;
			}
			set
			{
				_publicPrice = value;
			}
		}

		public decimal? ClientPrice
		{
			get
			{
				return _clientPrice;
			}
			set
			{
				_clientPrice = value;
			}
		}

		public string AttributeNameEn
		{
			get
			{
				return _attributeNameEn;
			}
			set
			{
				_attributeNameEn = value;
			}
		}

		public string AttributeNameAr
		{
			get
			{
				return _attributeNameAr;
			}
			set
			{
				_attributeNameAr = value;
			}
		}

		public string AttributeCode
		{
			get
			{
				return _attributeCode;
			}
			set
			{
				_attributeCode = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPromotionCriteriaAttrVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ItemCode]
			,[IsCustom]
			,[ItemId]
			,[VendorId]
			,[VendorCode]
			,[VendorNameEn]
			,[VendorNameAr]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[AttributeNameEn]
			,[AttributeNameAr]
			,[AttributeCode]
			FROM [dbo].[PromotionCriteriaAttrVw]
			";

		internal static string ctprPromotionCriteriaAttrVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromotionCriteriaAttrVw]
			";

		internal static string ctprPromotionCriteriaAttrVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[PromotionCriteriaAttrVw]
			##CRITERIA##
			";

		internal static string ctprPromotionCriteriaAttrVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ItemCode]
			,[IsCustom]
			,[ItemId]
			,[VendorId]
			,[VendorCode]
			,[VendorNameEn]
			,[VendorNameAr]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[AttributeNameEn]
			,[AttributeNameAr]
			,[AttributeCode]
			FROM [dbo].[PromotionCriteriaAttrVw]
			##CRITERIA##
			";

		internal static string ctprPromotionCriteriaAttrVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[PromotionCriteriaAttrVw]
			##CRITERIA##
			";

	}
}
#endregion
