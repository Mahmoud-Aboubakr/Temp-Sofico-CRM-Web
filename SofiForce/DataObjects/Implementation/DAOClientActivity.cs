/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientActivity : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _activityId;
		protected Int32? _clientId;
		protected Int32? _representativeId;
		protected DateTime? _activityDate;
		protected DateTime? _activityTime;
		protected Int32? _duration;
		protected bool? _inJourney;
		protected bool? _isPositive;
		protected bool? _inZone;
		protected Int32? _activityTypeId;
		protected double? _latitude;
		protected double? _longitude;
		protected decimal? _distance;
		protected Int64? _salesId;
		protected DateTime? _callAgain;
		protected string _notes;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOClientActivity()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_Activity based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientActivity
		///</returns>
		///<parameters>
		///Int64? activityId
		///</parameters>
		public static DAOClientActivity SelectOne(Int64? activityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Activity");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ActivityId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)activityId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientActivity retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientActivity();
					retObj._activityId					 = Convert.IsDBNull(dt.Rows[0]["ActivityId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["ActivityId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._representativeId					 = Convert.IsDBNull(dt.Rows[0]["RepresentativeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RepresentativeId"];
					retObj._activityDate					 = Convert.IsDBNull(dt.Rows[0]["ActivityDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ActivityDate"];
					retObj._activityTime					 = Convert.IsDBNull(dt.Rows[0]["ActivityTime"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ActivityTime"];
					retObj._duration					 = Convert.IsDBNull(dt.Rows[0]["Duration"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Duration"];
					retObj._inJourney					 = Convert.IsDBNull(dt.Rows[0]["InJourney"]) ? (bool?)null : (bool?)dt.Rows[0]["InJourney"];
					retObj._isPositive					 = Convert.IsDBNull(dt.Rows[0]["IsPositive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsPositive"];
					retObj._inZone					 = Convert.IsDBNull(dt.Rows[0]["InZone"]) ? (bool?)null : (bool?)dt.Rows[0]["InZone"];
					retObj._activityTypeId					 = Convert.IsDBNull(dt.Rows[0]["ActivityTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ActivityTypeId"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._distance					 = Convert.IsDBNull(dt.Rows[0]["Distance"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Distance"];
					retObj._salesId					 = Convert.IsDBNull(dt.Rows[0]["SalesId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesId"];
					retObj._callAgain					 = Convert.IsDBNull(dt.Rows[0]["CallAgain"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CallAgain"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_Activity based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ActivityId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_activityId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Activity based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientActivity.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOClientActivity> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Activity");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientActivity> objList = new List<DAOClientActivity>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientActivity retObj = new DAOClientActivity();
						retObj._activityId					 = Convert.IsDBNull(row["ActivityId"]) ? (Int64?)null : (Int64?)row["ActivityId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._activityDate					 = Convert.IsDBNull(row["ActivityDate"]) ? (DateTime?)null : (DateTime?)row["ActivityDate"];
						retObj._activityTime					 = Convert.IsDBNull(row["ActivityTime"]) ? (DateTime?)null : (DateTime?)row["ActivityTime"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._inJourney					 = Convert.IsDBNull(row["InJourney"]) ? (bool?)null : (bool?)row["InJourney"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._activityTypeId					 = Convert.IsDBNull(row["ActivityTypeId"]) ? (Int32?)null : (Int32?)row["ActivityTypeId"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._callAgain					 = Convert.IsDBNull(row["CallAgain"]) ? (DateTime?)null : (DateTime?)row["CallAgain"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Activity with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Activity based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientActivity.
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static IList<DAOClientActivity> SelectAllByRepresentativeId(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Activity");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientActivity> objList = new List<DAOClientActivity>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientActivity retObj = new DAOClientActivity();
						retObj._activityId					 = Convert.IsDBNull(row["ActivityId"]) ? (Int64?)null : (Int64?)row["ActivityId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._activityDate					 = Convert.IsDBNull(row["ActivityDate"]) ? (DateTime?)null : (DateTime?)row["ActivityDate"];
						retObj._activityTime					 = Convert.IsDBNull(row["ActivityTime"]) ? (DateTime?)null : (DateTime?)row["ActivityTime"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._inJourney					 = Convert.IsDBNull(row["InJourney"]) ? (bool?)null : (bool?)row["InJourney"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._activityTypeId					 = Convert.IsDBNull(row["ActivityTypeId"]) ? (Int32?)null : (Int32?)row["ActivityTypeId"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._callAgain					 = Convert.IsDBNull(row["CallAgain"]) ? (DateTime?)null : (DateTime?)row["CallAgain"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static Int32 SelectAllByRepresentativeIdCount(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAllByRepresentativeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Activity with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId
		///</parameters>
		public static void DeleteAllByRepresentativeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_DeleteAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Activity based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientActivity.
		///</returns>
		///<parameters>
		///Int32? activityTypeId
		///</parameters>
		public static IList<DAOClientActivity> SelectAllByActivityTypeId(Int32? activityTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAllByActivityTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Activity");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ActivityTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)activityTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientActivity> objList = new List<DAOClientActivity>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientActivity retObj = new DAOClientActivity();
						retObj._activityId					 = Convert.IsDBNull(row["ActivityId"]) ? (Int64?)null : (Int64?)row["ActivityId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._activityDate					 = Convert.IsDBNull(row["ActivityDate"]) ? (DateTime?)null : (DateTime?)row["ActivityDate"];
						retObj._activityTime					 = Convert.IsDBNull(row["ActivityTime"]) ? (DateTime?)null : (DateTime?)row["ActivityTime"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._inJourney					 = Convert.IsDBNull(row["InJourney"]) ? (bool?)null : (bool?)row["InJourney"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._activityTypeId					 = Convert.IsDBNull(row["ActivityTypeId"]) ? (Int32?)null : (Int32?)row["ActivityTypeId"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._callAgain					 = Convert.IsDBNull(row["CallAgain"]) ? (DateTime?)null : (DateTime?)row["CallAgain"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? activityTypeId
		///</parameters>
		public static Int32 SelectAllByActivityTypeIdCount(Int32? activityTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAllByActivityTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ActivityTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)activityTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Activity with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? activityTypeId
		///</parameters>
		public static void DeleteAllByActivityTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? activityTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_DeleteAllByActivityTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ActivityTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)activityTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_Activity
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ActivityId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _activityId));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActivityDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_activityDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActivityTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_activityTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Duration", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_duration?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InJourney", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inJourney?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsPositive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isPositive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActivityTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_activityTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CallAgain", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_callAgain?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_activityId					 = Convert.IsDBNull(command.Parameters["@ActivityId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ActivityId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_activityDate					 = Convert.IsDBNull(command.Parameters["@ActivityDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ActivityDate"].Value;
				_activityTime					 = Convert.IsDBNull(command.Parameters["@ActivityTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ActivityTime"].Value;
				_duration					 = Convert.IsDBNull(command.Parameters["@Duration"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Duration"].Value;
				_inJourney					 = Convert.IsDBNull(command.Parameters["@InJourney"].Value) ? (bool?)null : (bool?)command.Parameters["@InJourney"].Value;
				_isPositive					 = Convert.IsDBNull(command.Parameters["@IsPositive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsPositive"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_activityTypeId					 = Convert.IsDBNull(command.Parameters["@ActivityTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ActivityTypeId"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Distance"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_callAgain					 = Convert.IsDBNull(command.Parameters["@CallAgain"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CallAgain"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_Activity
		///</Summary>
		///<returns>
		///IList-DAOClientActivity.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientActivity> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Activity");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientActivity> objList = new List<DAOClientActivity>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientActivity retObj = new DAOClientActivity();
						retObj._activityId					 = Convert.IsDBNull(row["ActivityId"]) ? (Int64?)null : (Int64?)row["ActivityId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._activityDate					 = Convert.IsDBNull(row["ActivityDate"]) ? (DateTime?)null : (DateTime?)row["ActivityDate"];
						retObj._activityTime					 = Convert.IsDBNull(row["ActivityTime"]) ? (DateTime?)null : (DateTime?)row["ActivityTime"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._inJourney					 = Convert.IsDBNull(row["InJourney"]) ? (bool?)null : (bool?)row["InJourney"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._activityTypeId					 = Convert.IsDBNull(row["ActivityTypeId"]) ? (Int32?)null : (Int32?)row["ActivityTypeId"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._callAgain					 = Convert.IsDBNull(row["CallAgain"]) ? (DateTime?)null : (DateTime?)row["CallAgain"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_Activity
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Activity_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Activity");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ActivityId", true) == 0) lst.Add(Convert.IsDBNull(row["ActivityId"]) ? (Int64?)null : (Int64?)row["ActivityId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "ActivityDate", true) == 0) lst.Add(Convert.IsDBNull(row["ActivityDate"]) ? (DateTime?)null : (DateTime?)row["ActivityDate"]);
						if (string.Compare(projection.Member, "ActivityTime", true) == 0) lst.Add(Convert.IsDBNull(row["ActivityTime"]) ? (DateTime?)null : (DateTime?)row["ActivityTime"]);
						if (string.Compare(projection.Member, "Duration", true) == 0) lst.Add(Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"]);
						if (string.Compare(projection.Member, "InJourney", true) == 0) lst.Add(Convert.IsDBNull(row["InJourney"]) ? (bool?)null : (bool?)row["InJourney"]);
						if (string.Compare(projection.Member, "IsPositive", true) == 0) lst.Add(Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "ActivityTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ActivityTypeId"]) ? (Int32?)null : (Int32?)row["ActivityTypeId"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "CallAgain", true) == 0) lst.Add(Convert.IsDBNull(row["CallAgain"]) ? (DateTime?)null : (DateTime?)row["CallAgain"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_Activity
		///</Summary>
		///<returns>
		///IList-DAOClientActivity.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientActivity> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Activity_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Activity");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientActivity> objList = new List<DAOClientActivity>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientActivity retObj = new DAOClientActivity();
						retObj._activityId					 = Convert.IsDBNull(row["ActivityId"]) ? (Int64?)null : (Int64?)row["ActivityId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._activityDate					 = Convert.IsDBNull(row["ActivityDate"]) ? (DateTime?)null : (DateTime?)row["ActivityDate"];
						retObj._activityTime					 = Convert.IsDBNull(row["ActivityTime"]) ? (DateTime?)null : (DateTime?)row["ActivityTime"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._inJourney					 = Convert.IsDBNull(row["InJourney"]) ? (bool?)null : (bool?)row["InJourney"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._activityTypeId					 = Convert.IsDBNull(row["ActivityTypeId"]) ? (Int32?)null : (Int32?)row["ActivityTypeId"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (decimal?)null : (decimal?)row["Distance"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._callAgain					 = Convert.IsDBNull(row["CallAgain"]) ? (DateTime?)null : (DateTime?)row["CallAgain"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_Activity
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Activity_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_Activity based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Activity_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ActivityId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_activityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActivityDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_activityDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActivityTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_activityTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Duration", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_duration?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InJourney", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inJourney?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsPositive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isPositive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InZone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inZone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ActivityTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_activityTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Distance", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_distance?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CallAgain", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_callAgain?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_activityId					 = Convert.IsDBNull(command.Parameters["@ActivityId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ActivityId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_activityDate					 = Convert.IsDBNull(command.Parameters["@ActivityDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ActivityDate"].Value;
				_activityTime					 = Convert.IsDBNull(command.Parameters["@ActivityTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ActivityTime"].Value;
				_duration					 = Convert.IsDBNull(command.Parameters["@Duration"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Duration"].Value;
				_inJourney					 = Convert.IsDBNull(command.Parameters["@InJourney"].Value) ? (bool?)null : (bool?)command.Parameters["@InJourney"].Value;
				_isPositive					 = Convert.IsDBNull(command.Parameters["@IsPositive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsPositive"].Value;
				_inZone					 = Convert.IsDBNull(command.Parameters["@InZone"].Value) ? (bool?)null : (bool?)command.Parameters["@InZone"].Value;
				_activityTypeId					 = Convert.IsDBNull(command.Parameters["@ActivityTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ActivityTypeId"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_distance					 = Convert.IsDBNull(command.Parameters["@Distance"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Distance"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_callAgain					 = Convert.IsDBNull(command.Parameters["@CallAgain"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CallAgain"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? ActivityId
		{
			get
			{
				return _activityId;
			}
			set
			{
				_activityId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public DateTime? ActivityDate
		{
			get
			{
				return _activityDate;
			}
			set
			{
				_activityDate = value;
			}
		}

		public DateTime? ActivityTime
		{
			get
			{
				return _activityTime;
			}
			set
			{
				_activityTime = value;
			}
		}

		public Int32? Duration
		{
			get
			{
				return _duration;
			}
			set
			{
				_duration = value;
			}
		}

		public bool? InJourney
		{
			get
			{
				return _inJourney;
			}
			set
			{
				_inJourney = value;
			}
		}

		public bool? IsPositive
		{
			get
			{
				return _isPositive;
			}
			set
			{
				_isPositive = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public Int32? ActivityTypeId
		{
			get
			{
				return _activityTypeId;
			}
			set
			{
				_activityTypeId = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public decimal? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public DateTime? CallAgain
		{
			get
			{
				return _callAgain;
			}
			set
			{
				_callAgain = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_Activity_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ActivityId]
			,[ClientId]
			,[RepresentativeId]
			,[ActivityDate]
			,[ActivityTime]
			,[Duration]
			,[InJourney]
			,[IsPositive]
			,[InZone]
			,[ActivityTypeId]
			,[Latitude]
			,[Longitude]
			,[Distance]
			,[SalesId]
			,[CallAgain]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Activity]
			WHERE 
			[ActivityId] = @ActivityId
			";

		internal static string ctprClient_Activity_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_Activity]
			WHERE 
			[ActivityId] = @ActivityId
			";

		internal static string ctprClient_Activity_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ActivityId]
			,[ClientId]
			,[RepresentativeId]
			,[ActivityDate]
			,[ActivityTime]
			,[Duration]
			,[InJourney]
			,[IsPositive]
			,[InZone]
			,[ActivityTypeId]
			,[Latitude]
			,[Longitude]
			,[Distance]
			,[SalesId]
			,[CallAgain]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Activity]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Activity_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Activity]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Activity_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Activity]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Activity_SelectAllByRepresentativeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ActivityId]
			,[ClientId]
			,[RepresentativeId]
			,[ActivityDate]
			,[ActivityTime]
			,[Duration]
			,[InJourney]
			,[IsPositive]
			,[InZone]
			,[ActivityTypeId]
			,[Latitude]
			,[Longitude]
			,[Distance]
			,[SalesId]
			,[CallAgain]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Activity]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_Activity_SelectAllByRepresentativeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Activity]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_Activity_DeleteAllByRepresentativeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Activity]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_Activity_SelectAllByActivityTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ActivityId]
			,[ClientId]
			,[RepresentativeId]
			,[ActivityDate]
			,[ActivityTime]
			,[Duration]
			,[InJourney]
			,[IsPositive]
			,[InZone]
			,[ActivityTypeId]
			,[Latitude]
			,[Longitude]
			,[Distance]
			,[SalesId]
			,[CallAgain]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Activity]
			WHERE 
			[ActivityTypeId] = @ActivityTypeId OR ([ActivityTypeId] IS NULL AND @ActivityTypeId IS NULL)
			";

		internal static string ctprClient_Activity_SelectAllByActivityTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Activity]
			WHERE 
			[ActivityTypeId] = @ActivityTypeId OR ([ActivityTypeId] IS NULL AND @ActivityTypeId IS NULL)
			";

		internal static string ctprClient_Activity_DeleteAllByActivityTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Activity]
			WHERE 
			[ActivityTypeId] = @ActivityTypeId OR ([ActivityTypeId] IS NULL AND @ActivityTypeId IS NULL)
			";

		internal static string ctprClient_Activity_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_Activity]
			(
			[ClientId]
			,[RepresentativeId]
			,[ActivityDate]
			,[ActivityTime]
			,[Duration]
			,[InJourney]
			,[IsPositive]
			,[InZone]
			,[ActivityTypeId]
			,[Latitude]
			,[Longitude]
			,[Distance]
			,[SalesId]
			,[CallAgain]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@ClientId
			,@RepresentativeId
			,@ActivityDate
			,@ActivityTime
			,@Duration
			,@InJourney
			,@IsPositive
			,@InZone
			,@ActivityTypeId
			,@Latitude
			,@Longitude
			,@Distance
			,@SalesId
			,@CallAgain
			,@Notes
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@ActivityId = [ActivityId]
			,@ClientId = [ClientId]
			,@RepresentativeId = [RepresentativeId]
			,@ActivityDate = [ActivityDate]
			,@ActivityTime = [ActivityTime]
			,@Duration = [Duration]
			,@InJourney = [InJourney]
			,@IsPositive = [IsPositive]
			,@InZone = [InZone]
			,@ActivityTypeId = [ActivityTypeId]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@Distance = [Distance]
			,@SalesId = [SalesId]
			,@CallAgain = [CallAgain]
			,@Notes = [Notes]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Activity]
			WHERE 
			[ActivityId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_Activity_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ActivityId]
			,[ClientId]
			,[RepresentativeId]
			,[ActivityDate]
			,[ActivityTime]
			,[Duration]
			,[InJourney]
			,[IsPositive]
			,[InZone]
			,[ActivityTypeId]
			,[Latitude]
			,[Longitude]
			,[Distance]
			,[SalesId]
			,[CallAgain]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Activity]
			";

		internal static string ctprClient_Activity_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Activity]
			";

		internal static string ctprClient_Activity_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_Activity]
			##CRITERIA##
			";

		internal static string ctprClient_Activity_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ActivityId]
			,[ClientId]
			,[RepresentativeId]
			,[ActivityDate]
			,[ActivityTime]
			,[Duration]
			,[InJourney]
			,[IsPositive]
			,[InZone]
			,[ActivityTypeId]
			,[Latitude]
			,[Longitude]
			,[Distance]
			,[SalesId]
			,[CallAgain]
			,[Notes]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Activity]
			##CRITERIA##
			";

		internal static string ctprClient_Activity_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_Activity]
			##CRITERIA##
			";

		internal static string ctprClient_Activity_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_Activity]
			SET
			[ClientId] = @ClientId
			,[RepresentativeId] = @RepresentativeId
			,[ActivityDate] = @ActivityDate
			,[ActivityTime] = @ActivityTime
			,[Duration] = @Duration
			,[InJourney] = @InJourney
			,[IsPositive] = @IsPositive
			,[InZone] = @InZone
			,[ActivityTypeId] = @ActivityTypeId
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[Distance] = @Distance
			,[SalesId] = @SalesId
			,[CallAgain] = @CallAgain
			,[Notes] = @Notes
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[ActivityId] = @ActivityId
			SELECT 
			@ActivityId = [ActivityId]
			,@ClientId = [ClientId]
			,@RepresentativeId = [RepresentativeId]
			,@ActivityDate = [ActivityDate]
			,@ActivityTime = [ActivityTime]
			,@Duration = [Duration]
			,@InJourney = [InJourney]
			,@IsPositive = [IsPositive]
			,@InZone = [InZone]
			,@ActivityTypeId = [ActivityTypeId]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@Distance = [Distance]
			,@SalesId = [SalesId]
			,@CallAgain = [CallAgain]
			,@Notes = [Notes]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Activity]
			WHERE 
			[ActivityId] = @ActivityId
			";

	}
}
#endregion
