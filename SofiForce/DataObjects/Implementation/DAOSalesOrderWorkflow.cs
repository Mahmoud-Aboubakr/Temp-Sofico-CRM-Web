/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrderWorkflow : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _workflowId;
		protected Int64? _salesId;
		protected Int32? _salesOrderStatusId;
		protected Int32? _agentId;
		protected DateTime? _workflowDate;
		#endregion

		#region class methods
		public DAOSalesOrderWorkflow()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table SalesOrder_Workflow based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSalesOrderWorkflow
		///</returns>
		///<parameters>
		///Int64? workflowId
		///</parameters>
		public static DAOSalesOrderWorkflow SelectOne(Int64? workflowId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Workflow");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@WorkflowId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)workflowId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSalesOrderWorkflow retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSalesOrderWorkflow();
					retObj._workflowId					 = Convert.IsDBNull(dt.Rows[0]["WorkflowId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["WorkflowId"];
					retObj._salesId					 = Convert.IsDBNull(dt.Rows[0]["SalesId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesId"];
					retObj._salesOrderStatusId					 = Convert.IsDBNull(dt.Rows[0]["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesOrderStatusId"];
					retObj._agentId					 = Convert.IsDBNull(dt.Rows[0]["AgentId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AgentId"];
					retObj._workflowDate					 = Convert.IsDBNull(dt.Rows[0]["WorkflowDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["WorkflowDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table SalesOrder_Workflow based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@WorkflowId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_workflowId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Workflow based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderWorkflow.
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static IList<DAOSalesOrderWorkflow> SelectAllBySalesId(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_SelectAllBySalesId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Workflow");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderWorkflow> objList = new List<DAOSalesOrderWorkflow>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderWorkflow retObj = new DAOSalesOrderWorkflow();
						retObj._workflowId					 = Convert.IsDBNull(row["WorkflowId"]) ? (Int64?)null : (Int64?)row["WorkflowId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._workflowDate					 = Convert.IsDBNull(row["WorkflowDate"]) ? (DateTime?)null : (DateTime?)row["WorkflowDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static Int32 SelectAllBySalesIdCount(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_SelectAllBySalesIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Workflow with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId
		///</parameters>
		public static void DeleteAllBySalesId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_DeleteAllBySalesId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder_Workflow based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderWorkflow.
		///</returns>
		///<parameters>
		///Int32? salesOrderStatusId
		///</parameters>
		public static IList<DAOSalesOrderWorkflow> SelectAllBySalesOrderStatusId(Int32? salesOrderStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_SelectAllBySalesOrderStatusId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Workflow");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderWorkflow> objList = new List<DAOSalesOrderWorkflow>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderWorkflow retObj = new DAOSalesOrderWorkflow();
						retObj._workflowId					 = Convert.IsDBNull(row["WorkflowId"]) ? (Int64?)null : (Int64?)row["WorkflowId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._workflowDate					 = Convert.IsDBNull(row["WorkflowDate"]) ? (DateTime?)null : (DateTime?)row["WorkflowDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesOrderStatusId
		///</parameters>
		public static Int32 SelectAllBySalesOrderStatusIdCount(Int32? salesOrderStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_SelectAllBySalesOrderStatusIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder_Workflow with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderStatusId
		///</parameters>
		public static void DeleteAllBySalesOrderStatusId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_DeleteAllBySalesOrderStatusId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderStatusId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table SalesOrder_Workflow
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@WorkflowId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _workflowId));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_agentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WorkflowDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_workflowDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_workflowId					 = Convert.IsDBNull(command.Parameters["@WorkflowId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@WorkflowId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_salesOrderStatusId					 = Convert.IsDBNull(command.Parameters["@SalesOrderStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderStatusId"].Value;
				_agentId					 = Convert.IsDBNull(command.Parameters["@AgentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AgentId"].Value;
				_workflowDate					 = Convert.IsDBNull(command.Parameters["@WorkflowDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@WorkflowDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrder_Workflow
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderWorkflow.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrderWorkflow> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Workflow");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderWorkflow> objList = new List<DAOSalesOrderWorkflow>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderWorkflow retObj = new DAOSalesOrderWorkflow();
						retObj._workflowId					 = Convert.IsDBNull(row["WorkflowId"]) ? (Int64?)null : (Int64?)row["WorkflowId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._workflowDate					 = Convert.IsDBNull(row["WorkflowDate"]) ? (DateTime?)null : (DateTime?)row["WorkflowDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrder_Workflow
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Workflow_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Workflow");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "WorkflowId", true) == 0) lst.Add(Convert.IsDBNull(row["WorkflowId"]) ? (Int64?)null : (Int64?)row["WorkflowId"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "SalesOrderStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"]);
						if (string.Compare(projection.Member, "AgentId", true) == 0) lst.Add(Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"]);
						if (string.Compare(projection.Member, "WorkflowDate", true) == 0) lst.Add(Convert.IsDBNull(row["WorkflowDate"]) ? (DateTime?)null : (DateTime?)row["WorkflowDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Workflow
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderWorkflow.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrderWorkflow> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Workflow_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder_Workflow");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderWorkflow> objList = new List<DAOSalesOrderWorkflow>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderWorkflow retObj = new DAOSalesOrderWorkflow();
						retObj._workflowId					 = Convert.IsDBNull(row["WorkflowId"]) ? (Int64?)null : (Int64?)row["WorkflowId"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._workflowDate					 = Convert.IsDBNull(row["WorkflowDate"]) ? (DateTime?)null : (DateTime?)row["WorkflowDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrder_Workflow
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_Workflow_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table SalesOrder_Workflow based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_Workflow_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@WorkflowId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_workflowId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_agentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WorkflowDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_workflowDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_workflowId					 = Convert.IsDBNull(command.Parameters["@WorkflowId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@WorkflowId"].Value;
				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_salesOrderStatusId					 = Convert.IsDBNull(command.Parameters["@SalesOrderStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderStatusId"].Value;
				_agentId					 = Convert.IsDBNull(command.Parameters["@AgentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AgentId"].Value;
				_workflowDate					 = Convert.IsDBNull(command.Parameters["@WorkflowDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@WorkflowDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? WorkflowId
		{
			get
			{
				return _workflowId;
			}
			set
			{
				_workflowId = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public Int32? SalesOrderStatusId
		{
			get
			{
				return _salesOrderStatusId;
			}
			set
			{
				_salesOrderStatusId = value;
			}
		}

		public Int32? AgentId
		{
			get
			{
				return _agentId;
			}
			set
			{
				_agentId = value;
			}
		}

		public DateTime? WorkflowDate
		{
			get
			{
				return _workflowDate;
			}
			set
			{
				_workflowDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrder_Workflow_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[WorkflowId]
			,[SalesId]
			,[SalesOrderStatusId]
			,[AgentId]
			,[WorkflowDate]
			FROM [dbo].[SalesOrder_Workflow]
			WHERE 
			[WorkflowId] = @WorkflowId
			";

		internal static string ctprSalesOrder_Workflow_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Workflow]
			WHERE 
			[WorkflowId] = @WorkflowId
			";

		internal static string ctprSalesOrder_Workflow_SelectAllBySalesId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[WorkflowId]
			,[SalesId]
			,[SalesOrderStatusId]
			,[AgentId]
			,[WorkflowDate]
			FROM [dbo].[SalesOrder_Workflow]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Workflow_SelectAllBySalesIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Workflow]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Workflow_DeleteAllBySalesId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Workflow]
			WHERE 
			[SalesId] = @SalesId OR ([SalesId] IS NULL AND @SalesId IS NULL)
			";

		internal static string ctprSalesOrder_Workflow_SelectAllBySalesOrderStatusId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[WorkflowId]
			,[SalesId]
			,[SalesOrderStatusId]
			,[AgentId]
			,[WorkflowDate]
			FROM [dbo].[SalesOrder_Workflow]
			WHERE 
			[SalesOrderStatusId] = @SalesOrderStatusId OR ([SalesOrderStatusId] IS NULL AND @SalesOrderStatusId IS NULL)
			";

		internal static string ctprSalesOrder_Workflow_SelectAllBySalesOrderStatusIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Workflow]
			WHERE 
			[SalesOrderStatusId] = @SalesOrderStatusId OR ([SalesOrderStatusId] IS NULL AND @SalesOrderStatusId IS NULL)
			";

		internal static string ctprSalesOrder_Workflow_DeleteAllBySalesOrderStatusId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder_Workflow]
			WHERE 
			[SalesOrderStatusId] = @SalesOrderStatusId OR ([SalesOrderStatusId] IS NULL AND @SalesOrderStatusId IS NULL)
			";

		internal static string ctprSalesOrder_Workflow_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[SalesOrder_Workflow]
			(
			[SalesId]
			,[SalesOrderStatusId]
			,[AgentId]
			,[WorkflowDate]
			)
			VALUES
			(
			@SalesId
			,@SalesOrderStatusId
			,@AgentId
			,@WorkflowDate
			)
			SELECT 
			@WorkflowId = [WorkflowId]
			,@SalesId = [SalesId]
			,@SalesOrderStatusId = [SalesOrderStatusId]
			,@AgentId = [AgentId]
			,@WorkflowDate = [WorkflowDate]
			FROM [dbo].[SalesOrder_Workflow]
			WHERE 
			[WorkflowId] = SCOPE_IDENTITY()
			";

		internal static string ctprSalesOrder_Workflow_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[WorkflowId]
			,[SalesId]
			,[SalesOrderStatusId]
			,[AgentId]
			,[WorkflowDate]
			FROM [dbo].[SalesOrder_Workflow]
			";

		internal static string ctprSalesOrder_Workflow_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Workflow]
			";

		internal static string ctprSalesOrder_Workflow_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrder_Workflow]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Workflow_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[WorkflowId]
			,[SalesId]
			,[SalesOrderStatusId]
			,[AgentId]
			,[WorkflowDate]
			FROM [dbo].[SalesOrder_Workflow]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Workflow_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder_Workflow]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_Workflow_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[SalesOrder_Workflow]
			SET
			[SalesId] = @SalesId
			,[SalesOrderStatusId] = @SalesOrderStatusId
			,[AgentId] = @AgentId
			,[WorkflowDate] = @WorkflowDate
			WHERE 
			[WorkflowId] = @WorkflowId
			SELECT 
			@WorkflowId = [WorkflowId]
			,@SalesId = [SalesId]
			,@SalesOrderStatusId = [SalesOrderStatusId]
			,@AgentId = [AgentId]
			,@WorkflowDate = [WorkflowDate]
			FROM [dbo].[SalesOrder_Workflow]
			WHERE 
			[WorkflowId] = @WorkflowId
			";

	}
}
#endregion
