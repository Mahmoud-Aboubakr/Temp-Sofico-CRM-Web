/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOBranchInvoiceingSetupVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _serviceWorkerId;
		protected bool? _isEnabled;
		protected Int32? _branchId;
		protected Int32? _setupId;
		protected string _branchNameAr;
		protected string _branchCode;
		protected string _branchNameEn;
		protected string _serviceWorkerCode;
		protected string _serviceWorkerNameEn;
		protected string _serviceWorkerNameAr;
		#endregion

		#region class methods
		public DAOBranchInvoiceingSetupVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Branch_Invoiceing_SetupVw
		///</Summary>
		///<returns>
		///IList-DAOBranchInvoiceingSetupVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOBranchInvoiceingSetupVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprBranch_Invoiceing_SetupVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Branch_Invoiceing_SetupVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOBranchInvoiceingSetupVw> objList = new List<DAOBranchInvoiceingSetupVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOBranchInvoiceingSetupVw retObj = new DAOBranchInvoiceingSetupVw();
						retObj._serviceWorkerId					 = Convert.IsDBNull(row["ServiceWorkerId"]) ? (Int32?)null : (Int32?)row["ServiceWorkerId"];
						retObj._isEnabled					 = Convert.IsDBNull(row["IsEnabled"]) ? (bool?)null : (bool?)row["IsEnabled"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._setupId					 = Convert.IsDBNull(row["SetupId"]) ? (Int32?)null : (Int32?)row["SetupId"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._serviceWorkerCode					 = Convert.IsDBNull(row["ServiceWorkerCode"]) ? null : (string)row["ServiceWorkerCode"];
						retObj._serviceWorkerNameEn					 = Convert.IsDBNull(row["ServiceWorkerNameEn"]) ? null : (string)row["ServiceWorkerNameEn"];
						retObj._serviceWorkerNameAr					 = Convert.IsDBNull(row["ServiceWorkerNameAr"]) ? null : (string)row["ServiceWorkerNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprBranch_Invoiceing_SetupVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiBranch_Invoiceing_SetupVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprBranch_Invoiceing_SetupVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Branch_Invoiceing_SetupVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ServiceWorkerId", true) == 0) lst.Add(Convert.IsDBNull(row["ServiceWorkerId"]) ? (Int32?)null : (Int32?)row["ServiceWorkerId"]);
						if (string.Compare(projection.Member, "IsEnabled", true) == 0) lst.Add(Convert.IsDBNull(row["IsEnabled"]) ? (bool?)null : (bool?)row["IsEnabled"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "SetupId", true) == 0) lst.Add(Convert.IsDBNull(row["SetupId"]) ? (Int32?)null : (Int32?)row["SetupId"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "ServiceWorkerCode", true) == 0) lst.Add(Convert.IsDBNull(row["ServiceWorkerCode"]) ? null : (string)row["ServiceWorkerCode"]);
						if (string.Compare(projection.Member, "ServiceWorkerNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ServiceWorkerNameEn"]) ? null : (string)row["ServiceWorkerNameEn"]);
						if (string.Compare(projection.Member, "ServiceWorkerNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ServiceWorkerNameAr"]) ? null : (string)row["ServiceWorkerNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Branch_Invoiceing_SetupVw
		///</Summary>
		///<returns>
		///IList-DAOBranchInvoiceingSetupVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOBranchInvoiceingSetupVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprBranch_Invoiceing_SetupVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Branch_Invoiceing_SetupVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOBranchInvoiceingSetupVw> objList = new List<DAOBranchInvoiceingSetupVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOBranchInvoiceingSetupVw retObj = new DAOBranchInvoiceingSetupVw();
						retObj._serviceWorkerId					 = Convert.IsDBNull(row["ServiceWorkerId"]) ? (Int32?)null : (Int32?)row["ServiceWorkerId"];
						retObj._isEnabled					 = Convert.IsDBNull(row["IsEnabled"]) ? (bool?)null : (bool?)row["IsEnabled"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._setupId					 = Convert.IsDBNull(row["SetupId"]) ? (Int32?)null : (Int32?)row["SetupId"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._serviceWorkerCode					 = Convert.IsDBNull(row["ServiceWorkerCode"]) ? null : (string)row["ServiceWorkerCode"];
						retObj._serviceWorkerNameEn					 = Convert.IsDBNull(row["ServiceWorkerNameEn"]) ? null : (string)row["ServiceWorkerNameEn"];
						retObj._serviceWorkerNameAr					 = Convert.IsDBNull(row["ServiceWorkerNameAr"]) ? null : (string)row["ServiceWorkerNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Branch_Invoiceing_SetupVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprBranch_Invoiceing_SetupVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ServiceWorkerId
		{
			get
			{
				return _serviceWorkerId;
			}
			set
			{
				_serviceWorkerId = value;
			}
		}

		public bool? IsEnabled
		{
			get
			{
				return _isEnabled;
			}
			set
			{
				_isEnabled = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? SetupId
		{
			get
			{
				return _setupId;
			}
			set
			{
				_setupId = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string ServiceWorkerCode
		{
			get
			{
				return _serviceWorkerCode;
			}
			set
			{
				_serviceWorkerCode = value;
			}
		}

		public string ServiceWorkerNameEn
		{
			get
			{
				return _serviceWorkerNameEn;
			}
			set
			{
				_serviceWorkerNameEn = value;
			}
		}

		public string ServiceWorkerNameAr
		{
			get
			{
				return _serviceWorkerNameAr;
			}
			set
			{
				_serviceWorkerNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprBranch_Invoiceing_SetupVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ServiceWorkerId]
			,[IsEnabled]
			,[BranchId]
			,[SetupId]
			,[BranchNameAr]
			,[BranchCode]
			,[BranchNameEn]
			,[ServiceWorkerCode]
			,[ServiceWorkerNameEn]
			,[ServiceWorkerNameAr]
			FROM [dbo].[Branch_Invoiceing_SetupVw]
			";

		internal static string ctprBranch_Invoiceing_SetupVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Branch_Invoiceing_SetupVw]
			";

		internal static string ctprBranch_Invoiceing_SetupVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Branch_Invoiceing_SetupVw]
			##CRITERIA##
			";

		internal static string ctprBranch_Invoiceing_SetupVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ServiceWorkerId]
			,[IsEnabled]
			,[BranchId]
			,[SetupId]
			,[BranchNameAr]
			,[BranchCode]
			,[BranchNameEn]
			,[ServiceWorkerCode]
			,[ServiceWorkerNameEn]
			,[ServiceWorkerNameAr]
			FROM [dbo].[Branch_Invoiceing_SetupVw]
			##CRITERIA##
			";

		internal static string ctprBranch_Invoiceing_SetupVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Branch_Invoiceing_SetupVw]
			##CRITERIA##
			";

	}
}
#endregion
