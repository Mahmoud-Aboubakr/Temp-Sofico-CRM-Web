/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPromotionTypeVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _promotionTypeId;
		protected string _promotionTypeCode;
		protected string _promotionTypeNameAr;
		protected string _promotionTypeNameEn;
		protected string _promotionTypeDesc;
		protected Int32? _promotionInputId;
		protected Int32? _promotionOutputId;
		protected bool? _isActive;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected Int32? _displayOrder;
		protected string _promotionOutputCode;
		protected string _promotionOutputNameEn;
		protected string _promotionOutputNameAr;
		protected string _promotionInputCode;
		protected string _promotionInputNameEn;
		protected string _promotionInputNameAr;
		#endregion

		#region class methods
		public DAOPromotionTypeVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table PromotionTypeVw
		///</Summary>
		///<returns>
		///IList-DAOPromotionTypeVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPromotionTypeVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionTypeVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionTypeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionTypeVw> objList = new List<DAOPromotionTypeVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionTypeVw retObj = new DAOPromotionTypeVw();
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._promotionTypeCode					 = Convert.IsDBNull(row["PromotionTypeCode"]) ? null : (string)row["PromotionTypeCode"];
						retObj._promotionTypeNameAr					 = Convert.IsDBNull(row["PromotionTypeNameAr"]) ? null : (string)row["PromotionTypeNameAr"];
						retObj._promotionTypeNameEn					 = Convert.IsDBNull(row["PromotionTypeNameEn"]) ? null : (string)row["PromotionTypeNameEn"];
						retObj._promotionTypeDesc					 = Convert.IsDBNull(row["PromotionTypeDesc"]) ? null : (string)row["PromotionTypeDesc"];
						retObj._promotionInputId					 = Convert.IsDBNull(row["PromotionInputId"]) ? (Int32?)null : (Int32?)row["PromotionInputId"];
						retObj._promotionOutputId					 = Convert.IsDBNull(row["PromotionOutputId"]) ? (Int32?)null : (Int32?)row["PromotionOutputId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._promotionOutputCode					 = Convert.IsDBNull(row["PromotionOutputCode"]) ? null : (string)row["PromotionOutputCode"];
						retObj._promotionOutputNameEn					 = Convert.IsDBNull(row["PromotionOutputNameEn"]) ? null : (string)row["PromotionOutputNameEn"];
						retObj._promotionOutputNameAr					 = Convert.IsDBNull(row["PromotionOutputNameAr"]) ? null : (string)row["PromotionOutputNameAr"];
						retObj._promotionInputCode					 = Convert.IsDBNull(row["PromotionInputCode"]) ? null : (string)row["PromotionInputCode"];
						retObj._promotionInputNameEn					 = Convert.IsDBNull(row["PromotionInputNameEn"]) ? null : (string)row["PromotionInputNameEn"];
						retObj._promotionInputNameAr					 = Convert.IsDBNull(row["PromotionInputNameAr"]) ? null : (string)row["PromotionInputNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionTypeVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPromotionTypeVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionTypeVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionTypeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "PromotionTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"]);
						if (string.Compare(projection.Member, "PromotionTypeCode", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionTypeCode"]) ? null : (string)row["PromotionTypeCode"]);
						if (string.Compare(projection.Member, "PromotionTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionTypeNameAr"]) ? null : (string)row["PromotionTypeNameAr"]);
						if (string.Compare(projection.Member, "PromotionTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionTypeNameEn"]) ? null : (string)row["PromotionTypeNameEn"]);
						if (string.Compare(projection.Member, "PromotionTypeDesc", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionTypeDesc"]) ? null : (string)row["PromotionTypeDesc"]);
						if (string.Compare(projection.Member, "PromotionInputId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionInputId"]) ? (Int32?)null : (Int32?)row["PromotionInputId"]);
						if (string.Compare(projection.Member, "PromotionOutputId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionOutputId"]) ? (Int32?)null : (Int32?)row["PromotionOutputId"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "PromotionOutputCode", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionOutputCode"]) ? null : (string)row["PromotionOutputCode"]);
						if (string.Compare(projection.Member, "PromotionOutputNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionOutputNameEn"]) ? null : (string)row["PromotionOutputNameEn"]);
						if (string.Compare(projection.Member, "PromotionOutputNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionOutputNameAr"]) ? null : (string)row["PromotionOutputNameAr"]);
						if (string.Compare(projection.Member, "PromotionInputCode", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionInputCode"]) ? null : (string)row["PromotionInputCode"]);
						if (string.Compare(projection.Member, "PromotionInputNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionInputNameEn"]) ? null : (string)row["PromotionInputNameEn"]);
						if (string.Compare(projection.Member, "PromotionInputNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionInputNameAr"]) ? null : (string)row["PromotionInputNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api PromotionTypeVw
		///</Summary>
		///<returns>
		///IList-DAOPromotionTypeVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPromotionTypeVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionTypeVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionTypeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionTypeVw> objList = new List<DAOPromotionTypeVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionTypeVw retObj = new DAOPromotionTypeVw();
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._promotionTypeCode					 = Convert.IsDBNull(row["PromotionTypeCode"]) ? null : (string)row["PromotionTypeCode"];
						retObj._promotionTypeNameAr					 = Convert.IsDBNull(row["PromotionTypeNameAr"]) ? null : (string)row["PromotionTypeNameAr"];
						retObj._promotionTypeNameEn					 = Convert.IsDBNull(row["PromotionTypeNameEn"]) ? null : (string)row["PromotionTypeNameEn"];
						retObj._promotionTypeDesc					 = Convert.IsDBNull(row["PromotionTypeDesc"]) ? null : (string)row["PromotionTypeDesc"];
						retObj._promotionInputId					 = Convert.IsDBNull(row["PromotionInputId"]) ? (Int32?)null : (Int32?)row["PromotionInputId"];
						retObj._promotionOutputId					 = Convert.IsDBNull(row["PromotionOutputId"]) ? (Int32?)null : (Int32?)row["PromotionOutputId"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._promotionOutputCode					 = Convert.IsDBNull(row["PromotionOutputCode"]) ? null : (string)row["PromotionOutputCode"];
						retObj._promotionOutputNameEn					 = Convert.IsDBNull(row["PromotionOutputNameEn"]) ? null : (string)row["PromotionOutputNameEn"];
						retObj._promotionOutputNameAr					 = Convert.IsDBNull(row["PromotionOutputNameAr"]) ? null : (string)row["PromotionOutputNameAr"];
						retObj._promotionInputCode					 = Convert.IsDBNull(row["PromotionInputCode"]) ? null : (string)row["PromotionInputCode"];
						retObj._promotionInputNameEn					 = Convert.IsDBNull(row["PromotionInputNameEn"]) ? null : (string)row["PromotionInputNameEn"];
						retObj._promotionInputNameAr					 = Convert.IsDBNull(row["PromotionInputNameAr"]) ? null : (string)row["PromotionInputNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api PromotionTypeVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionTypeVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? PromotionTypeId
		{
			get
			{
				return _promotionTypeId;
			}
			set
			{
				_promotionTypeId = value;
			}
		}

		public string PromotionTypeCode
		{
			get
			{
				return _promotionTypeCode;
			}
			set
			{
				_promotionTypeCode = value;
			}
		}

		public string PromotionTypeNameAr
		{
			get
			{
				return _promotionTypeNameAr;
			}
			set
			{
				_promotionTypeNameAr = value;
			}
		}

		public string PromotionTypeNameEn
		{
			get
			{
				return _promotionTypeNameEn;
			}
			set
			{
				_promotionTypeNameEn = value;
			}
		}

		public string PromotionTypeDesc
		{
			get
			{
				return _promotionTypeDesc;
			}
			set
			{
				_promotionTypeDesc = value;
			}
		}

		public Int32? PromotionInputId
		{
			get
			{
				return _promotionInputId;
			}
			set
			{
				_promotionInputId = value;
			}
		}

		public Int32? PromotionOutputId
		{
			get
			{
				return _promotionOutputId;
			}
			set
			{
				_promotionOutputId = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public string PromotionOutputCode
		{
			get
			{
				return _promotionOutputCode;
			}
			set
			{
				_promotionOutputCode = value;
			}
		}

		public string PromotionOutputNameEn
		{
			get
			{
				return _promotionOutputNameEn;
			}
			set
			{
				_promotionOutputNameEn = value;
			}
		}

		public string PromotionOutputNameAr
		{
			get
			{
				return _promotionOutputNameAr;
			}
			set
			{
				_promotionOutputNameAr = value;
			}
		}

		public string PromotionInputCode
		{
			get
			{
				return _promotionInputCode;
			}
			set
			{
				_promotionInputCode = value;
			}
		}

		public string PromotionInputNameEn
		{
			get
			{
				return _promotionInputNameEn;
			}
			set
			{
				_promotionInputNameEn = value;
			}
		}

		public string PromotionInputNameAr
		{
			get
			{
				return _promotionInputNameAr;
			}
			set
			{
				_promotionInputNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPromotionTypeVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[PromotionTypeId]
			,[PromotionTypeCode]
			,[PromotionTypeNameAr]
			,[PromotionTypeNameEn]
			,[PromotionTypeDesc]
			,[PromotionInputId]
			,[PromotionOutputId]
			,[IsActive]
			,[CanDelete]
			,[CanEdit]
			,[DisplayOrder]
			,[PromotionOutputCode]
			,[PromotionOutputNameEn]
			,[PromotionOutputNameAr]
			,[PromotionInputCode]
			,[PromotionInputNameEn]
			,[PromotionInputNameAr]
			FROM [dbo].[PromotionTypeVw]
			";

		internal static string ctprPromotionTypeVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromotionTypeVw]
			";

		internal static string ctprPromotionTypeVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[PromotionTypeVw]
			##CRITERIA##
			";

		internal static string ctprPromotionTypeVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[PromotionTypeId]
			,[PromotionTypeCode]
			,[PromotionTypeNameAr]
			,[PromotionTypeNameEn]
			,[PromotionTypeDesc]
			,[PromotionInputId]
			,[PromotionOutputId]
			,[IsActive]
			,[CanDelete]
			,[CanEdit]
			,[DisplayOrder]
			,[PromotionOutputCode]
			,[PromotionOutputNameEn]
			,[PromotionOutputNameAr]
			,[PromotionInputCode]
			,[PromotionInputNameEn]
			,[PromotionInputNameAr]
			FROM [dbo].[PromotionTypeVw]
			##CRITERIA##
			";

		internal static string ctprPromotionTypeVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[PromotionTypeVw]
			##CRITERIA##
			";

	}
}
#endregion
