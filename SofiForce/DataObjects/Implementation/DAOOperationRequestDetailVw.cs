/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOOperationRequestDetailVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _detailId;
		protected Int32? _operationId;
		protected Int32? _clientId;
		protected Int32? _clientTypeId;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _regionId;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected Int32? _locationLevelId;
		protected bool? _isChain;
		protected string _building;
		protected string _floor;
		protected string _property;
		protected string _landmark;
		protected string _address;
		protected string _phone;
		protected string _mobile;
		protected string _whatsApp;
		protected double? _latitude;
		protected double? _longitude;
		protected Int32? _operationStatusId;
		protected string _clientCode;
		protected string _governerateNameEn;
		protected string _governerateNameAr;
		protected string _cityNameAr;
		protected string _cityNameEn;
		protected string _locationLevelNameEn;
		protected string _locationLevelNameAr;
		protected string _operationStatusNameEn;
		protected string _operationStatusNameAr;
		protected DateTime? _operationDate;
		protected decimal? _accuracy;
		protected string _responsibleNameAr;
		protected string _responsibleNameEn;
		protected bool? _inZone;
		protected string _clientTypeNameEn;
		protected string _clientTypeNameAr;
		protected string _taxCode;
		protected string _commercialCode;
		protected Int32? _operationRejectReasonId;
		protected Int32? _representativeId;
		protected Int32? _operationTypeId;
		#endregion

		#region class methods
		public DAOOperationRequestDetailVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table OperationRequest_DetailVw
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetailVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOOperationRequestDetailVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_DetailVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_DetailVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetailVw> objList = new List<DAOOperationRequestDetailVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetailVw retObj = new DAOOperationRequestDetailVw();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._cityNameAr					 = Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"];
						retObj._cityNameEn					 = Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"];
						retObj._locationLevelNameEn					 = Convert.IsDBNull(row["LocationLevelNameEn"]) ? null : (string)row["LocationLevelNameEn"];
						retObj._locationLevelNameAr					 = Convert.IsDBNull(row["LocationLevelNameAr"]) ? null : (string)row["LocationLevelNameAr"];
						retObj._operationStatusNameEn					 = Convert.IsDBNull(row["OperationStatusNameEn"]) ? null : (string)row["OperationStatusNameEn"];
						retObj._operationStatusNameAr					 = Convert.IsDBNull(row["OperationStatusNameAr"]) ? null : (string)row["OperationStatusNameAr"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._clientTypeNameEn					 = Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"];
						retObj._clientTypeNameAr					 = Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOperationRequest_DetailVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiOperationRequest_DetailVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_DetailVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_DetailVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"]);
						if (string.Compare(projection.Member, "OperationId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "ClientTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "RegionId", true) == 0) lst.Add(Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "LocationLevelId", true) == 0) lst.Add(Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"]);
						if (string.Compare(projection.Member, "IsChain", true) == 0) lst.Add(Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"]);
						if (string.Compare(projection.Member, "Building", true) == 0) lst.Add(Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"]);
						if (string.Compare(projection.Member, "Floor", true) == 0) lst.Add(Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"]);
						if (string.Compare(projection.Member, "Property", true) == 0) lst.Add(Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"]);
						if (string.Compare(projection.Member, "Landmark", true) == 0) lst.Add(Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "Mobile", true) == 0) lst.Add(Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"]);
						if (string.Compare(projection.Member, "WhatsApp", true) == 0) lst.Add(Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "OperationStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "GovernerateNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"]);
						if (string.Compare(projection.Member, "GovernerateNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"]);
						if (string.Compare(projection.Member, "CityNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"]);
						if (string.Compare(projection.Member, "CityNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"]);
						if (string.Compare(projection.Member, "LocationLevelNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["LocationLevelNameEn"]) ? null : (string)row["LocationLevelNameEn"]);
						if (string.Compare(projection.Member, "LocationLevelNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["LocationLevelNameAr"]) ? null : (string)row["LocationLevelNameAr"]);
						if (string.Compare(projection.Member, "OperationStatusNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["OperationStatusNameEn"]) ? null : (string)row["OperationStatusNameEn"]);
						if (string.Compare(projection.Member, "OperationStatusNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["OperationStatusNameAr"]) ? null : (string)row["OperationStatusNameAr"]);
						if (string.Compare(projection.Member, "OperationDate", true) == 0) lst.Add(Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"]);
						if (string.Compare(projection.Member, "Accuracy", true) == 0) lst.Add(Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"]);
						if (string.Compare(projection.Member, "ResponsibleNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"]);
						if (string.Compare(projection.Member, "ResponsibleNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "ClientTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"]);
						if (string.Compare(projection.Member, "ClientTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"]);
						if (string.Compare(projection.Member, "TaxCode", true) == 0) lst.Add(Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"]);
						if (string.Compare(projection.Member, "CommercialCode", true) == 0) lst.Add(Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"]);
						if (string.Compare(projection.Member, "OperationRejectReasonId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "OperationTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api OperationRequest_DetailVw
		///</Summary>
		///<returns>
		///IList-DAOOperationRequestDetailVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOOperationRequestDetailVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_DetailVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OperationRequest_DetailVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOperationRequestDetailVw> objList = new List<DAOOperationRequestDetailVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOperationRequestDetailVw retObj = new DAOOperationRequestDetailVw();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._operationId					 = Convert.IsDBNull(row["OperationId"]) ? (Int32?)null : (Int32?)row["OperationId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._operationStatusId					 = Convert.IsDBNull(row["OperationStatusId"]) ? (Int32?)null : (Int32?)row["OperationStatusId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._cityNameAr					 = Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"];
						retObj._cityNameEn					 = Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"];
						retObj._locationLevelNameEn					 = Convert.IsDBNull(row["LocationLevelNameEn"]) ? null : (string)row["LocationLevelNameEn"];
						retObj._locationLevelNameAr					 = Convert.IsDBNull(row["LocationLevelNameAr"]) ? null : (string)row["LocationLevelNameAr"];
						retObj._operationStatusNameEn					 = Convert.IsDBNull(row["OperationStatusNameEn"]) ? null : (string)row["OperationStatusNameEn"];
						retObj._operationStatusNameAr					 = Convert.IsDBNull(row["OperationStatusNameAr"]) ? null : (string)row["OperationStatusNameAr"];
						retObj._operationDate					 = Convert.IsDBNull(row["OperationDate"]) ? (DateTime?)null : (DateTime?)row["OperationDate"];
						retObj._accuracy					 = Convert.IsDBNull(row["Accuracy"]) ? (decimal?)null : (decimal?)row["Accuracy"];
						retObj._responsibleNameAr					 = Convert.IsDBNull(row["ResponsibleNameAr"]) ? null : (string)row["ResponsibleNameAr"];
						retObj._responsibleNameEn					 = Convert.IsDBNull(row["ResponsibleNameEn"]) ? null : (string)row["ResponsibleNameEn"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._clientTypeNameEn					 = Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"];
						retObj._clientTypeNameAr					 = Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._operationRejectReasonId					 = Convert.IsDBNull(row["OperationRejectReasonId"]) ? (Int32?)null : (Int32?)row["OperationRejectReasonId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._operationTypeId					 = Convert.IsDBNull(row["OperationTypeId"]) ? (Int32?)null : (Int32?)row["OperationTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api OperationRequest_DetailVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOperationRequest_DetailVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int32? OperationId
		{
			get
			{
				return _operationId;
			}
			set
			{
				_operationId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? ClientTypeId
		{
			get
			{
				return _clientTypeId;
			}
			set
			{
				_clientTypeId = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int32? RegionId
		{
			get
			{
				return _regionId;
			}
			set
			{
				_regionId = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public Int32? LocationLevelId
		{
			get
			{
				return _locationLevelId;
			}
			set
			{
				_locationLevelId = value;
			}
		}

		public bool? IsChain
		{
			get
			{
				return _isChain;
			}
			set
			{
				_isChain = value;
			}
		}

		public string Building
		{
			get
			{
				return _building;
			}
			set
			{
				_building = value;
			}
		}

		public string Floor
		{
			get
			{
				return _floor;
			}
			set
			{
				_floor = value;
			}
		}

		public string Property
		{
			get
			{
				return _property;
			}
			set
			{
				_property = value;
			}
		}

		public string Landmark
		{
			get
			{
				return _landmark;
			}
			set
			{
				_landmark = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string Mobile
		{
			get
			{
				return _mobile;
			}
			set
			{
				_mobile = value;
			}
		}

		public string WhatsApp
		{
			get
			{
				return _whatsApp;
			}
			set
			{
				_whatsApp = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public Int32? OperationStatusId
		{
			get
			{
				return _operationStatusId;
			}
			set
			{
				_operationStatusId = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string GovernerateNameEn
		{
			get
			{
				return _governerateNameEn;
			}
			set
			{
				_governerateNameEn = value;
			}
		}

		public string GovernerateNameAr
		{
			get
			{
				return _governerateNameAr;
			}
			set
			{
				_governerateNameAr = value;
			}
		}

		public string CityNameAr
		{
			get
			{
				return _cityNameAr;
			}
			set
			{
				_cityNameAr = value;
			}
		}

		public string CityNameEn
		{
			get
			{
				return _cityNameEn;
			}
			set
			{
				_cityNameEn = value;
			}
		}

		public string LocationLevelNameEn
		{
			get
			{
				return _locationLevelNameEn;
			}
			set
			{
				_locationLevelNameEn = value;
			}
		}

		public string LocationLevelNameAr
		{
			get
			{
				return _locationLevelNameAr;
			}
			set
			{
				_locationLevelNameAr = value;
			}
		}

		public string OperationStatusNameEn
		{
			get
			{
				return _operationStatusNameEn;
			}
			set
			{
				_operationStatusNameEn = value;
			}
		}

		public string OperationStatusNameAr
		{
			get
			{
				return _operationStatusNameAr;
			}
			set
			{
				_operationStatusNameAr = value;
			}
		}

		public DateTime? OperationDate
		{
			get
			{
				return _operationDate;
			}
			set
			{
				_operationDate = value;
			}
		}

		public decimal? Accuracy
		{
			get
			{
				return _accuracy;
			}
			set
			{
				_accuracy = value;
			}
		}

		public string ResponsibleNameAr
		{
			get
			{
				return _responsibleNameAr;
			}
			set
			{
				_responsibleNameAr = value;
			}
		}

		public string ResponsibleNameEn
		{
			get
			{
				return _responsibleNameEn;
			}
			set
			{
				_responsibleNameEn = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public string ClientTypeNameEn
		{
			get
			{
				return _clientTypeNameEn;
			}
			set
			{
				_clientTypeNameEn = value;
			}
		}

		public string ClientTypeNameAr
		{
			get
			{
				return _clientTypeNameAr;
			}
			set
			{
				_clientTypeNameAr = value;
			}
		}

		public string TaxCode
		{
			get
			{
				return _taxCode;
			}
			set
			{
				_taxCode = value;
			}
		}

		public string CommercialCode
		{
			get
			{
				return _commercialCode;
			}
			set
			{
				_commercialCode = value;
			}
		}

		public Int32? OperationRejectReasonId
		{
			get
			{
				return _operationRejectReasonId;
			}
			set
			{
				_operationRejectReasonId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? OperationTypeId
		{
			get
			{
				return _operationTypeId;
			}
			set
			{
				_operationTypeId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprOperationRequest_DetailVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[OperationId]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Landmark]
			,[Address]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[OperationStatusId]
			,[ClientCode]
			,[GovernerateNameEn]
			,[GovernerateNameAr]
			,[CityNameAr]
			,[CityNameEn]
			,[LocationLevelNameEn]
			,[LocationLevelNameAr]
			,[OperationStatusNameEn]
			,[OperationStatusNameAr]
			,[OperationDate]
			,[Accuracy]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[InZone]
			,[ClientTypeNameEn]
			,[ClientTypeNameAr]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			,[RepresentativeId]
			,[OperationTypeId]
			FROM [dbo].[OperationRequest_DetailVw]
			";

		internal static string ctprOperationRequest_DetailVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_DetailVw]
			";

		internal static string ctprOperationRequest_DetailVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[OperationRequest_DetailVw]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_DetailVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[OperationId]
			,[ClientId]
			,[ClientTypeId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[LocationLevelId]
			,[IsChain]
			,[Building]
			,[Floor]
			,[Property]
			,[Landmark]
			,[Address]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[Latitude]
			,[Longitude]
			,[OperationStatusId]
			,[ClientCode]
			,[GovernerateNameEn]
			,[GovernerateNameAr]
			,[CityNameAr]
			,[CityNameEn]
			,[LocationLevelNameEn]
			,[LocationLevelNameAr]
			,[OperationStatusNameEn]
			,[OperationStatusNameAr]
			,[OperationDate]
			,[Accuracy]
			,[ResponsibleNameAr]
			,[ResponsibleNameEn]
			,[InZone]
			,[ClientTypeNameEn]
			,[ClientTypeNameAr]
			,[TaxCode]
			,[CommercialCode]
			,[OperationRejectReasonId]
			,[RepresentativeId]
			,[OperationTypeId]
			FROM [dbo].[OperationRequest_DetailVw]
			##CRITERIA##
			";

		internal static string ctprOperationRequest_DetailVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[OperationRequest_DetailVw]
			##CRITERIA##
			";

	}
}
#endregion
