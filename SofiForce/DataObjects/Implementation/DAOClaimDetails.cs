/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClaimDetails : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _detailId;
		protected Int64? _claimId;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		protected decimal? _invoiceValue;
		protected Int32? _invoiceType;
		#endregion

		#region class methods
		public DAOClaimDetails()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Claim_Details based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClaimDetails
		///</returns>
		///<parameters>
		///Int64? detailId
		///</parameters>
		public static DAOClaimDetails SelectOne(Int64? detailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim_Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)detailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClaimDetails retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClaimDetails();
					retObj._detailId					 = Convert.IsDBNull(dt.Rows[0]["DetailId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["DetailId"];
					retObj._claimId					 = Convert.IsDBNull(dt.Rows[0]["ClaimId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["ClaimId"];
					retObj._invoiceCode					 = Convert.IsDBNull(dt.Rows[0]["InvoiceCode"]) ? null : (string)dt.Rows[0]["InvoiceCode"];
					retObj._invoiceDate					 = Convert.IsDBNull(dt.Rows[0]["InvoiceDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["InvoiceDate"];
					retObj._invoiceValue					 = Convert.IsDBNull(dt.Rows[0]["InvoiceValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["InvoiceValue"];
					retObj._invoiceType					 = Convert.IsDBNull(dt.Rows[0]["InvoiceType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InvoiceType"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Claim_Details based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Claim_Details based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClaimDetails.
		///</returns>
		///<parameters>
		///Int64? claimId
		///</parameters>
		public static IList<DAOClaimDetails> SelectAllByClaimId(Int64? claimId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_SelectAllByClaimId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim_Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)claimId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClaimDetails> objList = new List<DAOClaimDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClaimDetails retObj = new DAOClaimDetails();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._claimId					 = Convert.IsDBNull(row["ClaimId"]) ? (Int64?)null : (Int64?)row["ClaimId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceValue					 = Convert.IsDBNull(row["InvoiceValue"]) ? (decimal?)null : (decimal?)row["InvoiceValue"];
						retObj._invoiceType					 = Convert.IsDBNull(row["InvoiceType"]) ? (Int32?)null : (Int32?)row["InvoiceType"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? claimId
		///</parameters>
		public static Int32 SelectAllByClaimIdCount(Int64? claimId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_SelectAllByClaimIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)claimId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Claim_Details with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? claimId
		///</parameters>
		public static void DeleteAllByClaimId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? claimId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_DeleteAllByClaimId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)claimId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Claim_Details
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _detailId));
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_claimId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_invoiceValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceType", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceType?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_claimId					 = Convert.IsDBNull(command.Parameters["@ClaimId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClaimId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;
				_invoiceValue					 = Convert.IsDBNull(command.Parameters["@InvoiceValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@InvoiceValue"].Value;
				_invoiceType					 = Convert.IsDBNull(command.Parameters["@InvoiceType"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceType"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Claim_Details
		///</Summary>
		///<returns>
		///IList-DAOClaimDetails.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClaimDetails> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim_Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClaimDetails> objList = new List<DAOClaimDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClaimDetails retObj = new DAOClaimDetails();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._claimId					 = Convert.IsDBNull(row["ClaimId"]) ? (Int64?)null : (Int64?)row["ClaimId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceValue					 = Convert.IsDBNull(row["InvoiceValue"]) ? (decimal?)null : (decimal?)row["InvoiceValue"];
						retObj._invoiceType					 = Convert.IsDBNull(row["InvoiceType"]) ? (Int32?)null : (Int32?)row["InvoiceType"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClaim_Details
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClaim_Details_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim_Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"]);
						if (string.Compare(projection.Member, "ClaimId", true) == 0) lst.Add(Convert.IsDBNull(row["ClaimId"]) ? (Int64?)null : (Int64?)row["ClaimId"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "InvoiceDate", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"]);
						if (string.Compare(projection.Member, "InvoiceValue", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceValue"]) ? (decimal?)null : (decimal?)row["InvoiceValue"]);
						if (string.Compare(projection.Member, "InvoiceType", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceType"]) ? (Int32?)null : (Int32?)row["InvoiceType"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Claim_Details
		///</Summary>
		///<returns>
		///IList-DAOClaimDetails.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClaimDetails> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClaim_Details_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Claim_Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClaimDetails> objList = new List<DAOClaimDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClaimDetails retObj = new DAOClaimDetails();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int64?)null : (Int64?)row["DetailId"];
						retObj._claimId					 = Convert.IsDBNull(row["ClaimId"]) ? (Int64?)null : (Int64?)row["ClaimId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._invoiceValue					 = Convert.IsDBNull(row["InvoiceValue"]) ? (decimal?)null : (decimal?)row["InvoiceValue"];
						retObj._invoiceType					 = Convert.IsDBNull(row["InvoiceType"]) ? (Int32?)null : (Int32?)row["InvoiceType"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Claim_Details
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClaim_Details_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Claim_Details based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClaim_Details_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClaimId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_claimId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_invoiceValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceType", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceType?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@DetailId"].Value;
				_claimId					 = Convert.IsDBNull(command.Parameters["@ClaimId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClaimId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;
				_invoiceValue					 = Convert.IsDBNull(command.Parameters["@InvoiceValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@InvoiceValue"].Value;
				_invoiceType					 = Convert.IsDBNull(command.Parameters["@InvoiceType"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceType"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int64? ClaimId
		{
			get
			{
				return _claimId;
			}
			set
			{
				_claimId = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public DateTime? InvoiceDate
		{
			get
			{
				return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
			}
		}

		public decimal? InvoiceValue
		{
			get
			{
				return _invoiceValue;
			}
			set
			{
				_invoiceValue = value;
			}
		}

		public Int32? InvoiceType
		{
			get
			{
				return _invoiceType;
			}
			set
			{
				_invoiceType = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClaim_Details_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[ClaimId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceValue]
			,[InvoiceType]
			FROM [dbo].[Claim_Details]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprClaim_Details_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Claim_Details]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprClaim_Details_SelectAllByClaimId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[ClaimId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceValue]
			,[InvoiceType]
			FROM [dbo].[Claim_Details]
			WHERE 
			[ClaimId] = @ClaimId OR ([ClaimId] IS NULL AND @ClaimId IS NULL)
			";

		internal static string ctprClaim_Details_SelectAllByClaimIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Claim_Details]
			WHERE 
			[ClaimId] = @ClaimId OR ([ClaimId] IS NULL AND @ClaimId IS NULL)
			";

		internal static string ctprClaim_Details_DeleteAllByClaimId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Claim_Details]
			WHERE 
			[ClaimId] = @ClaimId OR ([ClaimId] IS NULL AND @ClaimId IS NULL)
			";

		internal static string ctprClaim_Details_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Claim_Details]
			(
			[ClaimId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceValue]
			,[InvoiceType]
			)
			VALUES
			(
			@ClaimId
			,@InvoiceCode
			,@InvoiceDate
			,@InvoiceValue
			,@InvoiceType
			)
			SELECT 
			@DetailId = [DetailId]
			,@ClaimId = [ClaimId]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			,@InvoiceValue = [InvoiceValue]
			,@InvoiceType = [InvoiceType]
			FROM [dbo].[Claim_Details]
			WHERE 
			[DetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprClaim_Details_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[ClaimId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceValue]
			,[InvoiceType]
			FROM [dbo].[Claim_Details]
			";

		internal static string ctprClaim_Details_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Claim_Details]
			";

		internal static string ctprClaim_Details_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Claim_Details]
			##CRITERIA##
			";

		internal static string ctprClaim_Details_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[ClaimId]
			,[InvoiceCode]
			,[InvoiceDate]
			,[InvoiceValue]
			,[InvoiceType]
			FROM [dbo].[Claim_Details]
			##CRITERIA##
			";

		internal static string ctprClaim_Details_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Claim_Details]
			##CRITERIA##
			";

		internal static string ctprClaim_Details_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Claim_Details]
			SET
			[ClaimId] = @ClaimId
			,[InvoiceCode] = @InvoiceCode
			,[InvoiceDate] = @InvoiceDate
			,[InvoiceValue] = @InvoiceValue
			,[InvoiceType] = @InvoiceType
			WHERE 
			[DetailId] = @DetailId
			SELECT 
			@DetailId = [DetailId]
			,@ClaimId = [ClaimId]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			,@InvoiceValue = [InvoiceValue]
			,@InvoiceType = [InvoiceType]
			FROM [dbo].[Claim_Details]
			WHERE 
			[DetailId] = @DetailId
			";

	}
}
#endregion
