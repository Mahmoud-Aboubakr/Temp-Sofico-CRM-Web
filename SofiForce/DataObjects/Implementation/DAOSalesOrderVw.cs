/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrderVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _salesId;
		protected string _salesCode;
		protected Int32? _clientId;
		protected Int32? _branchId;
		protected Int32? _agentId;
		protected Int32? _representativeId;
		protected Int32? _storeId;
		protected Int32? _priorityTypeId;
		protected DateTime? _salesDate;
		protected Int32? _salesOrderStatusId;
		protected Int32? _salesOrderSourceId;
		protected double? _latitude;
		protected decimal? _itemTotal;
		protected decimal? _itemDiscountTotal;
		protected decimal? _taxTotal;
		protected decimal? _cashDiscountTotal;
		protected decimal? _netTotal;
		protected string _notes;
		protected Int32? _invoiceRetry;
		protected bool? _isInvoiced;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		protected string _clientCode;
		protected string _branchNameEn;
		protected string _branchCode;
		protected string _representativeCode;
		protected string _representativeNameEn;
		protected string _storeNameEn;
		protected string _storeCode;
		protected string _priorityNameEn;
		protected string _salesOrderSourceNameEn;
		protected string _salesOrderSourceNameAr;
		protected string _salesOrderSourceCode;
		protected string _salesOrderStatusCode;
		protected string _salesOrderStatusNameEn;
		protected string _salesOrderStatusNameAr;
		protected Int32? _paymentTermId;
		protected string _paymentTermNameEn;
		protected Int32? _salesOrderTypeId;
		protected string _salesOrderTypeNameAr;
		protected string _salesOrderTypeNameEn;
		protected string _storeNameAr;
		protected string _representativeNameAr;
		protected string _paymentTermNameAr;
		protected string _branchNameAr;
		protected string _priorityNameAr;
		protected string _clientNameEn;
		protected string _clientNameAr;
		protected Int32? _supervisorId;
		protected decimal? _customDiscountTotal;
		protected decimal? _deliveryTotal;
		protected Int64? _recId;
		protected double? _longitude;
		protected DateTime? _salesTime;
		protected bool? _hasError;
		protected Int64? _salesPerenId;
		protected bool? _inprogress;
		protected bool? _isBackoffice;
		protected bool? _isDeleted;
		protected Int32? _representativeUserId;
		protected Int32? _supervisorUserId;
		#endregion

		#region class methods
		public DAOSalesOrderVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrderVw
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrderVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrderVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrderVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderVw> objList = new List<DAOSalesOrderVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderVw retObj = new DAOSalesOrderVw();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._storeNameEn					 = Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"];
						retObj._storeCode					 = Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"];
						retObj._priorityNameEn					 = Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"];
						retObj._salesOrderSourceNameEn					 = Convert.IsDBNull(row["SalesOrderSourceNameEn"]) ? null : (string)row["SalesOrderSourceNameEn"];
						retObj._salesOrderSourceNameAr					 = Convert.IsDBNull(row["SalesOrderSourceNameAr"]) ? null : (string)row["SalesOrderSourceNameAr"];
						retObj._salesOrderSourceCode					 = Convert.IsDBNull(row["SalesOrderSourceCode"]) ? null : (string)row["SalesOrderSourceCode"];
						retObj._salesOrderStatusCode					 = Convert.IsDBNull(row["SalesOrderStatusCode"]) ? null : (string)row["SalesOrderStatusCode"];
						retObj._salesOrderStatusNameEn					 = Convert.IsDBNull(row["SalesOrderStatusNameEn"]) ? null : (string)row["SalesOrderStatusNameEn"];
						retObj._salesOrderStatusNameAr					 = Convert.IsDBNull(row["SalesOrderStatusNameAr"]) ? null : (string)row["SalesOrderStatusNameAr"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._paymentTermNameEn					 = Convert.IsDBNull(row["PaymentTermNameEn"]) ? null : (string)row["PaymentTermNameEn"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._salesOrderTypeNameAr					 = Convert.IsDBNull(row["SalesOrderTypeNameAr"]) ? null : (string)row["SalesOrderTypeNameAr"];
						retObj._salesOrderTypeNameEn					 = Convert.IsDBNull(row["SalesOrderTypeNameEn"]) ? null : (string)row["SalesOrderTypeNameEn"];
						retObj._storeNameAr					 = Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._paymentTermNameAr					 = Convert.IsDBNull(row["PaymentTermNameAr"]) ? null : (string)row["PaymentTermNameAr"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._priorityNameAr					 = Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						retObj._representativeUserId					 = Convert.IsDBNull(row["RepresentativeUserId"]) ? (Int32?)null : (Int32?)row["RepresentativeUserId"];
						retObj._supervisorUserId					 = Convert.IsDBNull(row["SupervisorUserId"]) ? (Int32?)null : (Int32?)row["SupervisorUserId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrderVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrderVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrderVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrderVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "SalesCode", true) == 0) lst.Add(Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "AgentId", true) == 0) lst.Add(Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "StoreId", true) == 0) lst.Add(Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"]);
						if (string.Compare(projection.Member, "PriorityTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"]);
						if (string.Compare(projection.Member, "SalesDate", true) == 0) lst.Add(Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"]);
						if (string.Compare(projection.Member, "SalesOrderStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"]);
						if (string.Compare(projection.Member, "SalesOrderSourceId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "ItemTotal", true) == 0) lst.Add(Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"]);
						if (string.Compare(projection.Member, "ItemDiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"]);
						if (string.Compare(projection.Member, "TaxTotal", true) == 0) lst.Add(Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"]);
						if (string.Compare(projection.Member, "CashDiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"]);
						if (string.Compare(projection.Member, "NetTotal", true) == 0) lst.Add(Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "InvoiceRetry", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"]);
						if (string.Compare(projection.Member, "IsInvoiced", true) == 0) lst.Add(Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "InvoiceDate", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "StoreNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"]);
						if (string.Compare(projection.Member, "StoreCode", true) == 0) lst.Add(Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"]);
						if (string.Compare(projection.Member, "PriorityNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"]);
						if (string.Compare(projection.Member, "SalesOrderSourceNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderSourceNameEn"]) ? null : (string)row["SalesOrderSourceNameEn"]);
						if (string.Compare(projection.Member, "SalesOrderSourceNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderSourceNameAr"]) ? null : (string)row["SalesOrderSourceNameAr"]);
						if (string.Compare(projection.Member, "SalesOrderSourceCode", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderSourceCode"]) ? null : (string)row["SalesOrderSourceCode"]);
						if (string.Compare(projection.Member, "SalesOrderStatusCode", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderStatusCode"]) ? null : (string)row["SalesOrderStatusCode"]);
						if (string.Compare(projection.Member, "SalesOrderStatusNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderStatusNameEn"]) ? null : (string)row["SalesOrderStatusNameEn"]);
						if (string.Compare(projection.Member, "SalesOrderStatusNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderStatusNameAr"]) ? null : (string)row["SalesOrderStatusNameAr"]);
						if (string.Compare(projection.Member, "PaymentTermId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"]);
						if (string.Compare(projection.Member, "PaymentTermNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentTermNameEn"]) ? null : (string)row["PaymentTermNameEn"]);
						if (string.Compare(projection.Member, "SalesOrderTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"]);
						if (string.Compare(projection.Member, "SalesOrderTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderTypeNameAr"]) ? null : (string)row["SalesOrderTypeNameAr"]);
						if (string.Compare(projection.Member, "SalesOrderTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderTypeNameEn"]) ? null : (string)row["SalesOrderTypeNameEn"]);
						if (string.Compare(projection.Member, "StoreNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "PaymentTermNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentTermNameAr"]) ? null : (string)row["PaymentTermNameAr"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "PriorityNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "SupervisorId", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"]);
						if (string.Compare(projection.Member, "CustomDiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"]);
						if (string.Compare(projection.Member, "DeliveryTotal", true) == 0) lst.Add(Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"]);
						if (string.Compare(projection.Member, "RecId", true) == 0) lst.Add(Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "SalesTime", true) == 0) lst.Add(Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"]);
						if (string.Compare(projection.Member, "HasError", true) == 0) lst.Add(Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"]);
						if (string.Compare(projection.Member, "SalesPerenId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"]);
						if (string.Compare(projection.Member, "Inprogress", true) == 0) lst.Add(Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"]);
						if (string.Compare(projection.Member, "IsBackoffice", true) == 0) lst.Add(Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"]);
						if (string.Compare(projection.Member, "IsDeleted", true) == 0) lst.Add(Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"]);
						if (string.Compare(projection.Member, "RepresentativeUserId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeUserId"]) ? (Int32?)null : (Int32?)row["RepresentativeUserId"]);
						if (string.Compare(projection.Member, "SupervisorUserId", true) == 0) lst.Add(Convert.IsDBNull(row["SupervisorUserId"]) ? (Int32?)null : (Int32?)row["SupervisorUserId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrderVw
		///</Summary>
		///<returns>
		///IList-DAOSalesOrderVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrderVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrderVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrderVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrderVw> objList = new List<DAOSalesOrderVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrderVw retObj = new DAOSalesOrderVw();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._storeNameEn					 = Convert.IsDBNull(row["StoreNameEn"]) ? null : (string)row["StoreNameEn"];
						retObj._storeCode					 = Convert.IsDBNull(row["StoreCode"]) ? null : (string)row["StoreCode"];
						retObj._priorityNameEn					 = Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"];
						retObj._salesOrderSourceNameEn					 = Convert.IsDBNull(row["SalesOrderSourceNameEn"]) ? null : (string)row["SalesOrderSourceNameEn"];
						retObj._salesOrderSourceNameAr					 = Convert.IsDBNull(row["SalesOrderSourceNameAr"]) ? null : (string)row["SalesOrderSourceNameAr"];
						retObj._salesOrderSourceCode					 = Convert.IsDBNull(row["SalesOrderSourceCode"]) ? null : (string)row["SalesOrderSourceCode"];
						retObj._salesOrderStatusCode					 = Convert.IsDBNull(row["SalesOrderStatusCode"]) ? null : (string)row["SalesOrderStatusCode"];
						retObj._salesOrderStatusNameEn					 = Convert.IsDBNull(row["SalesOrderStatusNameEn"]) ? null : (string)row["SalesOrderStatusNameEn"];
						retObj._salesOrderStatusNameAr					 = Convert.IsDBNull(row["SalesOrderStatusNameAr"]) ? null : (string)row["SalesOrderStatusNameAr"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._paymentTermNameEn					 = Convert.IsDBNull(row["PaymentTermNameEn"]) ? null : (string)row["PaymentTermNameEn"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._salesOrderTypeNameAr					 = Convert.IsDBNull(row["SalesOrderTypeNameAr"]) ? null : (string)row["SalesOrderTypeNameAr"];
						retObj._salesOrderTypeNameEn					 = Convert.IsDBNull(row["SalesOrderTypeNameEn"]) ? null : (string)row["SalesOrderTypeNameEn"];
						retObj._storeNameAr					 = Convert.IsDBNull(row["StoreNameAr"]) ? null : (string)row["StoreNameAr"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._paymentTermNameAr					 = Convert.IsDBNull(row["PaymentTermNameAr"]) ? null : (string)row["PaymentTermNameAr"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._priorityNameAr					 = Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._supervisorId					 = Convert.IsDBNull(row["SupervisorId"]) ? (Int32?)null : (Int32?)row["SupervisorId"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						retObj._representativeUserId					 = Convert.IsDBNull(row["RepresentativeUserId"]) ? (Int32?)null : (Int32?)row["RepresentativeUserId"];
						retObj._supervisorUserId					 = Convert.IsDBNull(row["SupervisorUserId"]) ? (Int32?)null : (Int32?)row["SupervisorUserId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrderVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrderVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public string SalesCode
		{
			get
			{
				return _salesCode;
			}
			set
			{
				_salesCode = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? AgentId
		{
			get
			{
				return _agentId;
			}
			set
			{
				_agentId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? StoreId
		{
			get
			{
				return _storeId;
			}
			set
			{
				_storeId = value;
			}
		}

		public Int32? PriorityTypeId
		{
			get
			{
				return _priorityTypeId;
			}
			set
			{
				_priorityTypeId = value;
			}
		}

		public DateTime? SalesDate
		{
			get
			{
				return _salesDate;
			}
			set
			{
				_salesDate = value;
			}
		}

		public Int32? SalesOrderStatusId
		{
			get
			{
				return _salesOrderStatusId;
			}
			set
			{
				_salesOrderStatusId = value;
			}
		}

		public Int32? SalesOrderSourceId
		{
			get
			{
				return _salesOrderSourceId;
			}
			set
			{
				_salesOrderSourceId = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public decimal? ItemTotal
		{
			get
			{
				return _itemTotal;
			}
			set
			{
				_itemTotal = value;
			}
		}

		public decimal? ItemDiscountTotal
		{
			get
			{
				return _itemDiscountTotal;
			}
			set
			{
				_itemDiscountTotal = value;
			}
		}

		public decimal? TaxTotal
		{
			get
			{
				return _taxTotal;
			}
			set
			{
				_taxTotal = value;
			}
		}

		public decimal? CashDiscountTotal
		{
			get
			{
				return _cashDiscountTotal;
			}
			set
			{
				_cashDiscountTotal = value;
			}
		}

		public decimal? NetTotal
		{
			get
			{
				return _netTotal;
			}
			set
			{
				_netTotal = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? InvoiceRetry
		{
			get
			{
				return _invoiceRetry;
			}
			set
			{
				_invoiceRetry = value;
			}
		}

		public bool? IsInvoiced
		{
			get
			{
				return _isInvoiced;
			}
			set
			{
				_isInvoiced = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public DateTime? InvoiceDate
		{
			get
			{
				return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public string StoreNameEn
		{
			get
			{
				return _storeNameEn;
			}
			set
			{
				_storeNameEn = value;
			}
		}

		public string StoreCode
		{
			get
			{
				return _storeCode;
			}
			set
			{
				_storeCode = value;
			}
		}

		public string PriorityNameEn
		{
			get
			{
				return _priorityNameEn;
			}
			set
			{
				_priorityNameEn = value;
			}
		}

		public string SalesOrderSourceNameEn
		{
			get
			{
				return _salesOrderSourceNameEn;
			}
			set
			{
				_salesOrderSourceNameEn = value;
			}
		}

		public string SalesOrderSourceNameAr
		{
			get
			{
				return _salesOrderSourceNameAr;
			}
			set
			{
				_salesOrderSourceNameAr = value;
			}
		}

		public string SalesOrderSourceCode
		{
			get
			{
				return _salesOrderSourceCode;
			}
			set
			{
				_salesOrderSourceCode = value;
			}
		}

		public string SalesOrderStatusCode
		{
			get
			{
				return _salesOrderStatusCode;
			}
			set
			{
				_salesOrderStatusCode = value;
			}
		}

		public string SalesOrderStatusNameEn
		{
			get
			{
				return _salesOrderStatusNameEn;
			}
			set
			{
				_salesOrderStatusNameEn = value;
			}
		}

		public string SalesOrderStatusNameAr
		{
			get
			{
				return _salesOrderStatusNameAr;
			}
			set
			{
				_salesOrderStatusNameAr = value;
			}
		}

		public Int32? PaymentTermId
		{
			get
			{
				return _paymentTermId;
			}
			set
			{
				_paymentTermId = value;
			}
		}

		public string PaymentTermNameEn
		{
			get
			{
				return _paymentTermNameEn;
			}
			set
			{
				_paymentTermNameEn = value;
			}
		}

		public Int32? SalesOrderTypeId
		{
			get
			{
				return _salesOrderTypeId;
			}
			set
			{
				_salesOrderTypeId = value;
			}
		}

		public string SalesOrderTypeNameAr
		{
			get
			{
				return _salesOrderTypeNameAr;
			}
			set
			{
				_salesOrderTypeNameAr = value;
			}
		}

		public string SalesOrderTypeNameEn
		{
			get
			{
				return _salesOrderTypeNameEn;
			}
			set
			{
				_salesOrderTypeNameEn = value;
			}
		}

		public string StoreNameAr
		{
			get
			{
				return _storeNameAr;
			}
			set
			{
				_storeNameAr = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string PaymentTermNameAr
		{
			get
			{
				return _paymentTermNameAr;
			}
			set
			{
				_paymentTermNameAr = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string PriorityNameAr
		{
			get
			{
				return _priorityNameAr;
			}
			set
			{
				_priorityNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public Int32? SupervisorId
		{
			get
			{
				return _supervisorId;
			}
			set
			{
				_supervisorId = value;
			}
		}

		public decimal? CustomDiscountTotal
		{
			get
			{
				return _customDiscountTotal;
			}
			set
			{
				_customDiscountTotal = value;
			}
		}

		public decimal? DeliveryTotal
		{
			get
			{
				return _deliveryTotal;
			}
			set
			{
				_deliveryTotal = value;
			}
		}

		public Int64? RecId
		{
			get
			{
				return _recId;
			}
			set
			{
				_recId = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public DateTime? SalesTime
		{
			get
			{
				return _salesTime;
			}
			set
			{
				_salesTime = value;
			}
		}

		public bool? HasError
		{
			get
			{
				return _hasError;
			}
			set
			{
				_hasError = value;
			}
		}

		public Int64? SalesPerenId
		{
			get
			{
				return _salesPerenId;
			}
			set
			{
				_salesPerenId = value;
			}
		}

		public bool? Inprogress
		{
			get
			{
				return _inprogress;
			}
			set
			{
				_inprogress = value;
			}
		}

		public bool? IsBackoffice
		{
			get
			{
				return _isBackoffice;
			}
			set
			{
				_isBackoffice = value;
			}
		}

		public bool? IsDeleted
		{
			get
			{
				return _isDeleted;
			}
			set
			{
				_isDeleted = value;
			}
		}

		public Int32? RepresentativeUserId
		{
			get
			{
				return _representativeUserId;
			}
			set
			{
				_representativeUserId = value;
			}
		}

		public Int32? SupervisorUserId
		{
			get
			{
				return _supervisorUserId;
			}
			set
			{
				_supervisorUserId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrderVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[SalesDate]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[Latitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[ClientCode]
			,[BranchNameEn]
			,[BranchCode]
			,[RepresentativeCode]
			,[RepresentativeNameEn]
			,[StoreNameEn]
			,[StoreCode]
			,[PriorityNameEn]
			,[SalesOrderSourceNameEn]
			,[SalesOrderSourceNameAr]
			,[SalesOrderSourceCode]
			,[SalesOrderStatusCode]
			,[SalesOrderStatusNameEn]
			,[SalesOrderStatusNameAr]
			,[PaymentTermId]
			,[PaymentTermNameEn]
			,[SalesOrderTypeId]
			,[SalesOrderTypeNameAr]
			,[SalesOrderTypeNameEn]
			,[StoreNameAr]
			,[RepresentativeNameAr]
			,[PaymentTermNameAr]
			,[BranchNameAr]
			,[PriorityNameAr]
			,[ClientNameEn]
			,[ClientNameAr]
			,[SupervisorId]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[RecId]
			,[Longitude]
			,[SalesTime]
			,[HasError]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			,[RepresentativeUserId]
			,[SupervisorUserId]
			FROM [dbo].[SalesOrderVw]
			";

		internal static string ctprSalesOrderVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrderVw]
			";

		internal static string ctprSalesOrderVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrderVw]
			##CRITERIA##
			";

		internal static string ctprSalesOrderVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[SalesId]
			,[SalesCode]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[SalesDate]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[Latitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[ClientCode]
			,[BranchNameEn]
			,[BranchCode]
			,[RepresentativeCode]
			,[RepresentativeNameEn]
			,[StoreNameEn]
			,[StoreCode]
			,[PriorityNameEn]
			,[SalesOrderSourceNameEn]
			,[SalesOrderSourceNameAr]
			,[SalesOrderSourceCode]
			,[SalesOrderStatusCode]
			,[SalesOrderStatusNameEn]
			,[SalesOrderStatusNameAr]
			,[PaymentTermId]
			,[PaymentTermNameEn]
			,[SalesOrderTypeId]
			,[SalesOrderTypeNameAr]
			,[SalesOrderTypeNameEn]
			,[StoreNameAr]
			,[RepresentativeNameAr]
			,[PaymentTermNameAr]
			,[BranchNameAr]
			,[PriorityNameAr]
			,[ClientNameEn]
			,[ClientNameAr]
			,[SupervisorId]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[RecId]
			,[Longitude]
			,[SalesTime]
			,[HasError]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			,[RepresentativeUserId]
			,[SupervisorUserId]
			FROM [dbo].[SalesOrderVw]
			##CRITERIA##
			";

		internal static string ctprSalesOrderVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrderVw]
			##CRITERIA##
			";

	}
}
#endregion
