/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOArticleDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _detailId;
		protected Int32? _articleId;
		protected string _articleContentAr;
		protected string _articleContentEn;
		#endregion

		#region class methods
		public DAOArticleDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Article_Detail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOArticleDetail
		///</returns>
		///<parameters>
		///Int32? detailId
		///</parameters>
		public static DAOArticleDetail SelectOne(Int32? detailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)detailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOArticleDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOArticleDetail();
					retObj._detailId					 = Convert.IsDBNull(dt.Rows[0]["DetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DetailId"];
					retObj._articleId					 = Convert.IsDBNull(dt.Rows[0]["ArticleId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ArticleId"];
					retObj._articleContentAr					 = Convert.IsDBNull(dt.Rows[0]["ArticleContentAr"]) ? null : (string)dt.Rows[0]["ArticleContentAr"];
					retObj._articleContentEn					 = Convert.IsDBNull(dt.Rows[0]["ArticleContentEn"]) ? null : (string)dt.Rows[0]["ArticleContentEn"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Article_Detail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Article_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOArticleDetail.
		///</returns>
		///<parameters>
		///Int32? articleId
		///</parameters>
		public static IList<DAOArticleDetail> SelectAllByArticleId(Int32? articleId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_SelectAllByArticleId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ArticleId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)articleId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOArticleDetail> objList = new List<DAOArticleDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOArticleDetail retObj = new DAOArticleDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._articleId					 = Convert.IsDBNull(row["ArticleId"]) ? (Int32?)null : (Int32?)row["ArticleId"];
						retObj._articleContentAr					 = Convert.IsDBNull(row["ArticleContentAr"]) ? null : (string)row["ArticleContentAr"];
						retObj._articleContentEn					 = Convert.IsDBNull(row["ArticleContentEn"]) ? null : (string)row["ArticleContentEn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? articleId
		///</parameters>
		public static Int32 SelectAllByArticleIdCount(Int32? articleId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_SelectAllByArticleIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ArticleId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)articleId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Article_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? articleId
		///</parameters>
		public static void DeleteAllByArticleId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? articleId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_DeleteAllByArticleId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ArticleId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)articleId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Article_Detail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _detailId));
				command.Parameters.Add(CtSqlParameter.Get("@ArticleId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_articleId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ArticleContentAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_articleContentAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ArticleContentEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_articleContentEn?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DetailId"].Value;
				_articleId					 = Convert.IsDBNull(command.Parameters["@ArticleId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ArticleId"].Value;
				_articleContentAr					 = Convert.IsDBNull(command.Parameters["@ArticleContentAr"].Value) ? null : (string)command.Parameters["@ArticleContentAr"].Value;
				_articleContentEn					 = Convert.IsDBNull(command.Parameters["@ArticleContentEn"].Value) ? null : (string)command.Parameters["@ArticleContentEn"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Article_Detail
		///</Summary>
		///<returns>
		///IList-DAOArticleDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOArticleDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOArticleDetail> objList = new List<DAOArticleDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOArticleDetail retObj = new DAOArticleDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._articleId					 = Convert.IsDBNull(row["ArticleId"]) ? (Int32?)null : (Int32?)row["ArticleId"];
						retObj._articleContentAr					 = Convert.IsDBNull(row["ArticleContentAr"]) ? null : (string)row["ArticleContentAr"];
						retObj._articleContentEn					 = Convert.IsDBNull(row["ArticleContentEn"]) ? null : (string)row["ArticleContentEn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiArticle_Detail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprArticle_Detail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetailId", true) == 0) lst.Add(Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"]);
						if (string.Compare(projection.Member, "ArticleId", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleId"]) ? (Int32?)null : (Int32?)row["ArticleId"]);
						if (string.Compare(projection.Member, "ArticleContentAr", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleContentAr"]) ? null : (string)row["ArticleContentAr"]);
						if (string.Compare(projection.Member, "ArticleContentEn", true) == 0) lst.Add(Convert.IsDBNull(row["ArticleContentEn"]) ? null : (string)row["ArticleContentEn"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Article_Detail
		///</Summary>
		///<returns>
		///IList-DAOArticleDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOArticleDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprArticle_Detail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Article_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOArticleDetail> objList = new List<DAOArticleDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOArticleDetail retObj = new DAOArticleDetail();
						retObj._detailId					 = Convert.IsDBNull(row["DetailId"]) ? (Int32?)null : (Int32?)row["DetailId"];
						retObj._articleId					 = Convert.IsDBNull(row["ArticleId"]) ? (Int32?)null : (Int32?)row["ArticleId"];
						retObj._articleContentAr					 = Convert.IsDBNull(row["ArticleContentAr"]) ? null : (string)row["ArticleContentAr"];
						retObj._articleContentEn					 = Convert.IsDBNull(row["ArticleContentEn"]) ? null : (string)row["ArticleContentEn"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Article_Detail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprArticle_Detail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Article_Detail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprArticle_Detail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DetailId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_detailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ArticleId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_articleId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ArticleContentAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_articleContentAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ArticleContentEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_articleContentEn?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_detailId					 = Convert.IsDBNull(command.Parameters["@DetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DetailId"].Value;
				_articleId					 = Convert.IsDBNull(command.Parameters["@ArticleId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ArticleId"].Value;
				_articleContentAr					 = Convert.IsDBNull(command.Parameters["@ArticleContentAr"].Value) ? null : (string)command.Parameters["@ArticleContentAr"].Value;
				_articleContentEn					 = Convert.IsDBNull(command.Parameters["@ArticleContentEn"].Value) ? null : (string)command.Parameters["@ArticleContentEn"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? DetailId
		{
			get
			{
				return _detailId;
			}
			set
			{
				_detailId = value;
			}
		}

		public Int32? ArticleId
		{
			get
			{
				return _articleId;
			}
			set
			{
				_articleId = value;
			}
		}

		public string ArticleContentAr
		{
			get
			{
				return _articleContentAr;
			}
			set
			{
				_articleContentAr = value;
			}
		}

		public string ArticleContentEn
		{
			get
			{
				return _articleContentEn;
			}
			set
			{
				_articleContentEn = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprArticle_Detail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[ArticleId]
			,[ArticleContentAr]
			,[ArticleContentEn]
			FROM [dbo].[Article_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprArticle_Detail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Article_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

		internal static string ctprArticle_Detail_SelectAllByArticleId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[ArticleId]
			,[ArticleContentAr]
			,[ArticleContentEn]
			FROM [dbo].[Article_Detail]
			WHERE 
			[ArticleId] = @ArticleId OR ([ArticleId] IS NULL AND @ArticleId IS NULL)
			";

		internal static string ctprArticle_Detail_SelectAllByArticleIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Article_Detail]
			WHERE 
			[ArticleId] = @ArticleId OR ([ArticleId] IS NULL AND @ArticleId IS NULL)
			";

		internal static string ctprArticle_Detail_DeleteAllByArticleId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Article_Detail]
			WHERE 
			[ArticleId] = @ArticleId OR ([ArticleId] IS NULL AND @ArticleId IS NULL)
			";

		internal static string ctprArticle_Detail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Article_Detail]
			(
			[ArticleId]
			,[ArticleContentAr]
			,[ArticleContentEn]
			)
			VALUES
			(
			@ArticleId
			,@ArticleContentAr
			,@ArticleContentEn
			)
			SELECT 
			@DetailId = [DetailId]
			,@ArticleId = [ArticleId]
			,@ArticleContentAr = [ArticleContentAr]
			,@ArticleContentEn = [ArticleContentEn]
			FROM [dbo].[Article_Detail]
			WHERE 
			[DetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprArticle_Detail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetailId]
			,[ArticleId]
			,[ArticleContentAr]
			,[ArticleContentEn]
			FROM [dbo].[Article_Detail]
			";

		internal static string ctprArticle_Detail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Article_Detail]
			";

		internal static string ctprArticle_Detail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Article_Detail]
			##CRITERIA##
			";

		internal static string ctprArticle_Detail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetailId]
			,[ArticleId]
			,[ArticleContentAr]
			,[ArticleContentEn]
			FROM [dbo].[Article_Detail]
			##CRITERIA##
			";

		internal static string ctprArticle_Detail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Article_Detail]
			##CRITERIA##
			";

		internal static string ctprArticle_Detail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Article_Detail]
			SET
			[ArticleId] = @ArticleId
			,[ArticleContentAr] = @ArticleContentAr
			,[ArticleContentEn] = @ArticleContentEn
			WHERE 
			[DetailId] = @DetailId
			SELECT 
			@DetailId = [DetailId]
			,@ArticleId = [ArticleId]
			,@ArticleContentAr = [ArticleContentAr]
			,@ArticleContentEn = [ArticleContentEn]
			FROM [dbo].[Article_Detail]
			WHERE 
			[DetailId] = @DetailId
			";

	}
}
#endregion
