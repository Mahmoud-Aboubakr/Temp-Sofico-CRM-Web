/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientComplainVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _complainId;
		protected string _complainCode;
		protected Int32? _branchId;
		protected Int32? _representativeId;
		protected Int32? _clientId;
		protected DateTime? _complainDate;
		protected DateTime? _complainTime;
		protected Int32? _complainTypeId;
		protected Int32? _complainTypeDetailId;
		protected string _phone;
		protected string _phoneAlternative;
		protected Int32? _priorityId;
		protected Int32? _complainStatusId;
		protected bool? _isClosed;
		protected DateTime? _closeDate;
		protected Int32? _duration;
		protected double? _longitude;
		protected double? _latitude;
		protected Int32? _departmentId;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _complainTypeNameAr;
		protected string _complainTypeNameEn;
		protected string _complainStatusNameAr;
		protected string _complainStatusNameEn;
		protected string _departmentNameEn;
		protected string _departmentNameAr;
		protected string _priorityNameAr;
		protected string _priorityNameEn;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected string _branchCode;
		protected string _priorityColor;
		protected bool? _inZone;
		protected double? _distance;
		protected string _complainTypeDetailNameEn;
		protected string _complainTypeDetailNameAr;
		#endregion

		#region class methods
		public DAOClientComplainVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_ComplainVw
		///</Summary>
		///<returns>
		///IList-DAOClientComplainVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientComplainVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ComplainVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ComplainVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientComplainVw> objList = new List<DAOClientComplainVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientComplainVw retObj = new DAOClientComplainVw();
						retObj._complainId					 = Convert.IsDBNull(row["ComplainId"]) ? (Int64?)null : (Int64?)row["ComplainId"];
						retObj._complainCode					 = Convert.IsDBNull(row["ComplainCode"]) ? null : (string)row["ComplainCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._complainDate					 = Convert.IsDBNull(row["ComplainDate"]) ? (DateTime?)null : (DateTime?)row["ComplainDate"];
						retObj._complainTime					 = Convert.IsDBNull(row["ComplainTime"]) ? (DateTime?)null : (DateTime?)row["ComplainTime"];
						retObj._complainTypeId					 = Convert.IsDBNull(row["ComplainTypeId"]) ? (Int32?)null : (Int32?)row["ComplainTypeId"];
						retObj._complainTypeDetailId					 = Convert.IsDBNull(row["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)row["ComplainTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._complainStatusId					 = Convert.IsDBNull(row["ComplainStatusId"]) ? (Int32?)null : (Int32?)row["ComplainStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._complainTypeNameAr					 = Convert.IsDBNull(row["ComplainTypeNameAr"]) ? null : (string)row["ComplainTypeNameAr"];
						retObj._complainTypeNameEn					 = Convert.IsDBNull(row["ComplainTypeNameEn"]) ? null : (string)row["ComplainTypeNameEn"];
						retObj._complainStatusNameAr					 = Convert.IsDBNull(row["ComplainStatusNameAr"]) ? null : (string)row["ComplainStatusNameAr"];
						retObj._complainStatusNameEn					 = Convert.IsDBNull(row["ComplainStatusNameEn"]) ? null : (string)row["ComplainStatusNameEn"];
						retObj._departmentNameEn					 = Convert.IsDBNull(row["DepartmentNameEn"]) ? null : (string)row["DepartmentNameEn"];
						retObj._departmentNameAr					 = Convert.IsDBNull(row["DepartmentNameAr"]) ? null : (string)row["DepartmentNameAr"];
						retObj._priorityNameAr					 = Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"];
						retObj._priorityNameEn					 = Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._priorityColor					 = Convert.IsDBNull(row["PriorityColor"]) ? null : (string)row["PriorityColor"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._complainTypeDetailNameEn					 = Convert.IsDBNull(row["ComplainTypeDetailNameEn"]) ? null : (string)row["ComplainTypeDetailNameEn"];
						retObj._complainTypeDetailNameAr					 = Convert.IsDBNull(row["ComplainTypeDetailNameAr"]) ? null : (string)row["ComplainTypeDetailNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ComplainVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_ComplainVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ComplainVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ComplainVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ComplainId", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainId"]) ? (Int64?)null : (Int64?)row["ComplainId"]);
						if (string.Compare(projection.Member, "ComplainCode", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainCode"]) ? null : (string)row["ComplainCode"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "ComplainDate", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainDate"]) ? (DateTime?)null : (DateTime?)row["ComplainDate"]);
						if (string.Compare(projection.Member, "ComplainTime", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTime"]) ? (DateTime?)null : (DateTime?)row["ComplainTime"]);
						if (string.Compare(projection.Member, "ComplainTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeId"]) ? (Int32?)null : (Int32?)row["ComplainTypeId"]);
						if (string.Compare(projection.Member, "ComplainTypeDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)row["ComplainTypeDetailId"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "PhoneAlternative", true) == 0) lst.Add(Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"]);
						if (string.Compare(projection.Member, "PriorityId", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"]);
						if (string.Compare(projection.Member, "ComplainStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainStatusId"]) ? (Int32?)null : (Int32?)row["ComplainStatusId"]);
						if (string.Compare(projection.Member, "IsClosed", true) == 0) lst.Add(Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"]);
						if (string.Compare(projection.Member, "CloseDate", true) == 0) lst.Add(Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"]);
						if (string.Compare(projection.Member, "Duration", true) == 0) lst.Add(Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "DepartmentId", true) == 0) lst.Add(Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "RepresentativeCode", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"]);
						if (string.Compare(projection.Member, "RepresentativeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"]);
						if (string.Compare(projection.Member, "RepresentativeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"]);
						if (string.Compare(projection.Member, "ComplainTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeNameAr"]) ? null : (string)row["ComplainTypeNameAr"]);
						if (string.Compare(projection.Member, "ComplainTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeNameEn"]) ? null : (string)row["ComplainTypeNameEn"]);
						if (string.Compare(projection.Member, "ComplainStatusNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainStatusNameAr"]) ? null : (string)row["ComplainStatusNameAr"]);
						if (string.Compare(projection.Member, "ComplainStatusNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainStatusNameEn"]) ? null : (string)row["ComplainStatusNameEn"]);
						if (string.Compare(projection.Member, "DepartmentNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["DepartmentNameEn"]) ? null : (string)row["DepartmentNameEn"]);
						if (string.Compare(projection.Member, "DepartmentNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["DepartmentNameAr"]) ? null : (string)row["DepartmentNameAr"]);
						if (string.Compare(projection.Member, "PriorityNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"]);
						if (string.Compare(projection.Member, "PriorityNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "PriorityColor", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityColor"]) ? null : (string)row["PriorityColor"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"]);
						if (string.Compare(projection.Member, "ComplainTypeDetailNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeDetailNameEn"]) ? null : (string)row["ComplainTypeDetailNameEn"]);
						if (string.Compare(projection.Member, "ComplainTypeDetailNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ComplainTypeDetailNameAr"]) ? null : (string)row["ComplainTypeDetailNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_ComplainVw
		///</Summary>
		///<returns>
		///IList-DAOClientComplainVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientComplainVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ComplainVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ComplainVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientComplainVw> objList = new List<DAOClientComplainVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientComplainVw retObj = new DAOClientComplainVw();
						retObj._complainId					 = Convert.IsDBNull(row["ComplainId"]) ? (Int64?)null : (Int64?)row["ComplainId"];
						retObj._complainCode					 = Convert.IsDBNull(row["ComplainCode"]) ? null : (string)row["ComplainCode"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._complainDate					 = Convert.IsDBNull(row["ComplainDate"]) ? (DateTime?)null : (DateTime?)row["ComplainDate"];
						retObj._complainTime					 = Convert.IsDBNull(row["ComplainTime"]) ? (DateTime?)null : (DateTime?)row["ComplainTime"];
						retObj._complainTypeId					 = Convert.IsDBNull(row["ComplainTypeId"]) ? (Int32?)null : (Int32?)row["ComplainTypeId"];
						retObj._complainTypeDetailId					 = Convert.IsDBNull(row["ComplainTypeDetailId"]) ? (Int32?)null : (Int32?)row["ComplainTypeDetailId"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._phoneAlternative					 = Convert.IsDBNull(row["PhoneAlternative"]) ? null : (string)row["PhoneAlternative"];
						retObj._priorityId					 = Convert.IsDBNull(row["PriorityId"]) ? (Int32?)null : (Int32?)row["PriorityId"];
						retObj._complainStatusId					 = Convert.IsDBNull(row["ComplainStatusId"]) ? (Int32?)null : (Int32?)row["ComplainStatusId"];
						retObj._isClosed					 = Convert.IsDBNull(row["IsClosed"]) ? (bool?)null : (bool?)row["IsClosed"];
						retObj._closeDate					 = Convert.IsDBNull(row["CloseDate"]) ? (DateTime?)null : (DateTime?)row["CloseDate"];
						retObj._duration					 = Convert.IsDBNull(row["Duration"]) ? (Int32?)null : (Int32?)row["Duration"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._departmentId					 = Convert.IsDBNull(row["DepartmentId"]) ? (Int32?)null : (Int32?)row["DepartmentId"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._representativeCode					 = Convert.IsDBNull(row["RepresentativeCode"]) ? null : (string)row["RepresentativeCode"];
						retObj._representativeNameAr					 = Convert.IsDBNull(row["RepresentativeNameAr"]) ? null : (string)row["RepresentativeNameAr"];
						retObj._representativeNameEn					 = Convert.IsDBNull(row["RepresentativeNameEn"]) ? null : (string)row["RepresentativeNameEn"];
						retObj._complainTypeNameAr					 = Convert.IsDBNull(row["ComplainTypeNameAr"]) ? null : (string)row["ComplainTypeNameAr"];
						retObj._complainTypeNameEn					 = Convert.IsDBNull(row["ComplainTypeNameEn"]) ? null : (string)row["ComplainTypeNameEn"];
						retObj._complainStatusNameAr					 = Convert.IsDBNull(row["ComplainStatusNameAr"]) ? null : (string)row["ComplainStatusNameAr"];
						retObj._complainStatusNameEn					 = Convert.IsDBNull(row["ComplainStatusNameEn"]) ? null : (string)row["ComplainStatusNameEn"];
						retObj._departmentNameEn					 = Convert.IsDBNull(row["DepartmentNameEn"]) ? null : (string)row["DepartmentNameEn"];
						retObj._departmentNameAr					 = Convert.IsDBNull(row["DepartmentNameAr"]) ? null : (string)row["DepartmentNameAr"];
						retObj._priorityNameAr					 = Convert.IsDBNull(row["PriorityNameAr"]) ? null : (string)row["PriorityNameAr"];
						retObj._priorityNameEn					 = Convert.IsDBNull(row["PriorityNameEn"]) ? null : (string)row["PriorityNameEn"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._priorityColor					 = Convert.IsDBNull(row["PriorityColor"]) ? null : (string)row["PriorityColor"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (double?)null : (double?)row["Distance"];
						retObj._complainTypeDetailNameEn					 = Convert.IsDBNull(row["ComplainTypeDetailNameEn"]) ? null : (string)row["ComplainTypeDetailNameEn"];
						retObj._complainTypeDetailNameAr					 = Convert.IsDBNull(row["ComplainTypeDetailNameAr"]) ? null : (string)row["ComplainTypeDetailNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_ComplainVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ComplainVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? ComplainId
		{
			get
			{
				return _complainId;
			}
			set
			{
				_complainId = value;
			}
		}

		public string ComplainCode
		{
			get
			{
				return _complainCode;
			}
			set
			{
				_complainCode = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public DateTime? ComplainDate
		{
			get
			{
				return _complainDate;
			}
			set
			{
				_complainDate = value;
			}
		}

		public DateTime? ComplainTime
		{
			get
			{
				return _complainTime;
			}
			set
			{
				_complainTime = value;
			}
		}

		public Int32? ComplainTypeId
		{
			get
			{
				return _complainTypeId;
			}
			set
			{
				_complainTypeId = value;
			}
		}

		public Int32? ComplainTypeDetailId
		{
			get
			{
				return _complainTypeDetailId;
			}
			set
			{
				_complainTypeDetailId = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string PhoneAlternative
		{
			get
			{
				return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
			}
		}

		public Int32? PriorityId
		{
			get
			{
				return _priorityId;
			}
			set
			{
				_priorityId = value;
			}
		}

		public Int32? ComplainStatusId
		{
			get
			{
				return _complainStatusId;
			}
			set
			{
				_complainStatusId = value;
			}
		}

		public bool? IsClosed
		{
			get
			{
				return _isClosed;
			}
			set
			{
				_isClosed = value;
			}
		}

		public DateTime? CloseDate
		{
			get
			{
				return _closeDate;
			}
			set
			{
				_closeDate = value;
			}
		}

		public Int32? Duration
		{
			get
			{
				return _duration;
			}
			set
			{
				_duration = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public Int32? DepartmentId
		{
			get
			{
				return _departmentId;
			}
			set
			{
				_departmentId = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string RepresentativeCode
		{
			get
			{
				return _representativeCode;
			}
			set
			{
				_representativeCode = value;
			}
		}

		public string RepresentativeNameAr
		{
			get
			{
				return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
			}
		}

		public string RepresentativeNameEn
		{
			get
			{
				return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
			}
		}

		public string ComplainTypeNameAr
		{
			get
			{
				return _complainTypeNameAr;
			}
			set
			{
				_complainTypeNameAr = value;
			}
		}

		public string ComplainTypeNameEn
		{
			get
			{
				return _complainTypeNameEn;
			}
			set
			{
				_complainTypeNameEn = value;
			}
		}

		public string ComplainStatusNameAr
		{
			get
			{
				return _complainStatusNameAr;
			}
			set
			{
				_complainStatusNameAr = value;
			}
		}

		public string ComplainStatusNameEn
		{
			get
			{
				return _complainStatusNameEn;
			}
			set
			{
				_complainStatusNameEn = value;
			}
		}

		public string DepartmentNameEn
		{
			get
			{
				return _departmentNameEn;
			}
			set
			{
				_departmentNameEn = value;
			}
		}

		public string DepartmentNameAr
		{
			get
			{
				return _departmentNameAr;
			}
			set
			{
				_departmentNameAr = value;
			}
		}

		public string PriorityNameAr
		{
			get
			{
				return _priorityNameAr;
			}
			set
			{
				_priorityNameAr = value;
			}
		}

		public string PriorityNameEn
		{
			get
			{
				return _priorityNameEn;
			}
			set
			{
				_priorityNameEn = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public string PriorityColor
		{
			get
			{
				return _priorityColor;
			}
			set
			{
				_priorityColor = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public double? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		public string ComplainTypeDetailNameEn
		{
			get
			{
				return _complainTypeDetailNameEn;
			}
			set
			{
				_complainTypeDetailNameEn = value;
			}
		}

		public string ComplainTypeDetailNameAr
		{
			get
			{
				return _complainTypeDetailNameAr;
			}
			set
			{
				_complainTypeDetailNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_ComplainVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ComplainId]
			,[ComplainCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[ComplainDate]
			,[ComplainTime]
			,[ComplainTypeId]
			,[ComplainTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[ComplainStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Longitude]
			,[Latitude]
			,[DepartmentId]
			,[BranchNameAr]
			,[BranchNameEn]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[ComplainTypeNameAr]
			,[ComplainTypeNameEn]
			,[ComplainStatusNameAr]
			,[ComplainStatusNameEn]
			,[DepartmentNameEn]
			,[DepartmentNameAr]
			,[PriorityNameAr]
			,[PriorityNameEn]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BranchCode]
			,[PriorityColor]
			,[InZone]
			,[Distance]
			,[ComplainTypeDetailNameEn]
			,[ComplainTypeDetailNameAr]
			FROM [dbo].[Client_ComplainVw]
			";

		internal static string ctprClient_ComplainVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ComplainVw]
			";

		internal static string ctprClient_ComplainVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_ComplainVw]
			##CRITERIA##
			";

		internal static string ctprClient_ComplainVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ComplainId]
			,[ComplainCode]
			,[BranchId]
			,[RepresentativeId]
			,[ClientId]
			,[ComplainDate]
			,[ComplainTime]
			,[ComplainTypeId]
			,[ComplainTypeDetailId]
			,[Phone]
			,[PhoneAlternative]
			,[PriorityId]
			,[ComplainStatusId]
			,[IsClosed]
			,[CloseDate]
			,[Duration]
			,[Longitude]
			,[Latitude]
			,[DepartmentId]
			,[BranchNameAr]
			,[BranchNameEn]
			,[RepresentativeCode]
			,[RepresentativeNameAr]
			,[RepresentativeNameEn]
			,[ComplainTypeNameAr]
			,[ComplainTypeNameEn]
			,[ComplainStatusNameAr]
			,[ComplainStatusNameEn]
			,[DepartmentNameEn]
			,[DepartmentNameAr]
			,[PriorityNameAr]
			,[PriorityNameEn]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BranchCode]
			,[PriorityColor]
			,[InZone]
			,[Distance]
			,[ComplainTypeDetailNameEn]
			,[ComplainTypeDetailNameAr]
			FROM [dbo].[Client_ComplainVw]
			##CRITERIA##
			";

		internal static string ctprClient_ComplainVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_ComplainVw]
			##CRITERIA##
			";

	}
}
#endregion
