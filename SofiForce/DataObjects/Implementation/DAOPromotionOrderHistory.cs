/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPromotionOrderHistory : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _historyId;
		protected Int32? _promotionId;
		protected Int32? _clientId;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		#endregion

		#region class methods
		public DAOPromotionOrderHistory()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table PromotionOrderHistory based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOPromotionOrderHistory
		///</returns>
		///<parameters>
		///Int32? historyId
		///</parameters>
		public static DAOPromotionOrderHistory SelectOne(Int32? historyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOrderHistory");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@HistoryId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)historyId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOPromotionOrderHistory retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPromotionOrderHistory();
					retObj._historyId					 = Convert.IsDBNull(dt.Rows[0]["HistoryId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["HistoryId"];
					retObj._promotionId					 = Convert.IsDBNull(dt.Rows[0]["PromotionId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PromotionId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._invoiceCode					 = Convert.IsDBNull(dt.Rows[0]["InvoiceCode"]) ? null : (string)dt.Rows[0]["InvoiceCode"];
					retObj._invoiceDate					 = Convert.IsDBNull(dt.Rows[0]["InvoiceDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["InvoiceDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table PromotionOrderHistory based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@HistoryId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_historyId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PromotionOrderHistory based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotionOrderHistory.
		///</returns>
		///<parameters>
		///Int32? historyId
		///</parameters>
		public static IList<DAOPromotionOrderHistory> SelectAllByHistoryId(Int32? historyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_SelectAllByHistoryId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOrderHistory");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@HistoryId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)historyId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionOrderHistory> objList = new List<DAOPromotionOrderHistory>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionOrderHistory retObj = new DAOPromotionOrderHistory();
						retObj._historyId					 = Convert.IsDBNull(row["HistoryId"]) ? (Int32?)null : (Int32?)row["HistoryId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? historyId
		///</parameters>
		public static Int32 SelectAllByHistoryIdCount(Int32? historyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_SelectAllByHistoryIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@HistoryId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)historyId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PromotionOrderHistory with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? historyId
		///</parameters>
		public static void DeleteAllByHistoryId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? historyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_DeleteAllByHistoryId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@HistoryId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)historyId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table PromotionOrderHistory based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotionOrderHistory.
		///</returns>
		///<parameters>
		///Int32? promotionId
		///</parameters>
		public static IList<DAOPromotionOrderHistory> SelectAllByPromotionId(Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_SelectAllByPromotionId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOrderHistory");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionOrderHistory> objList = new List<DAOPromotionOrderHistory>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionOrderHistory retObj = new DAOPromotionOrderHistory();
						retObj._historyId					 = Convert.IsDBNull(row["HistoryId"]) ? (Int32?)null : (Int32?)row["HistoryId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? promotionId
		///</parameters>
		public static Int32 SelectAllByPromotionIdCount(Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_SelectAllByPromotionIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table PromotionOrderHistory with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionId
		///</parameters>
		public static void DeleteAllByPromotionId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_DeleteAllByPromotionId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table PromotionOrderHistory
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@HistoryId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _historyId));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_historyId					 = Convert.IsDBNull(command.Parameters["@HistoryId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@HistoryId"].Value;
				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table PromotionOrderHistory
		///</Summary>
		///<returns>
		///IList-DAOPromotionOrderHistory.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPromotionOrderHistory> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOrderHistory");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionOrderHistory> objList = new List<DAOPromotionOrderHistory>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionOrderHistory retObj = new DAOPromotionOrderHistory();
						retObj._historyId					 = Convert.IsDBNull(row["HistoryId"]) ? (Int32?)null : (Int32?)row["HistoryId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPromotionOrderHistory
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionOrderHistory_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOrderHistory");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "HistoryId", true) == 0) lst.Add(Convert.IsDBNull(row["HistoryId"]) ? (Int32?)null : (Int32?)row["HistoryId"]);
						if (string.Compare(projection.Member, "PromotionId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "InvoiceDate", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api PromotionOrderHistory
		///</Summary>
		///<returns>
		///IList-DAOPromotionOrderHistory.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPromotionOrderHistory> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionOrderHistory_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromotionOrderHistory");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotionOrderHistory> objList = new List<DAOPromotionOrderHistory>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotionOrderHistory retObj = new DAOPromotionOrderHistory();
						retObj._historyId					 = Convert.IsDBNull(row["HistoryId"]) ? (Int32?)null : (Int32?)row["HistoryId"];
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api PromotionOrderHistory
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotionOrderHistory_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table PromotionOrderHistory based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotionOrderHistory_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@HistoryId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_historyId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_historyId					 = Convert.IsDBNull(command.Parameters["@HistoryId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@HistoryId"].Value;
				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? HistoryId
		{
			get
			{
				return _historyId;
			}
			set
			{
				_historyId = value;
			}
		}

		public Int32? PromotionId
		{
			get
			{
				return _promotionId;
			}
			set
			{
				_promotionId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public DateTime? InvoiceDate
		{
			get
			{
				return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPromotionOrderHistory_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[HistoryId]
			,[PromotionId]
			,[ClientId]
			,[InvoiceCode]
			,[InvoiceDate]
			FROM [dbo].[PromotionOrderHistory]
			WHERE 
			[HistoryId] = @HistoryId
			";

		internal static string ctprPromotionOrderHistory_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[PromotionOrderHistory]
			WHERE 
			[HistoryId] = @HistoryId
			";

		internal static string ctprPromotionOrderHistory_SelectAllByHistoryId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[HistoryId]
			,[PromotionId]
			,[ClientId]
			,[InvoiceCode]
			,[InvoiceDate]
			FROM [dbo].[PromotionOrderHistory]
			WHERE 
			[HistoryId] = @HistoryId OR ([HistoryId] IS NULL AND @HistoryId IS NULL)
			";

		internal static string ctprPromotionOrderHistory_SelectAllByHistoryIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromotionOrderHistory]
			WHERE 
			[HistoryId] = @HistoryId OR ([HistoryId] IS NULL AND @HistoryId IS NULL)
			";

		internal static string ctprPromotionOrderHistory_DeleteAllByHistoryId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PromotionOrderHistory]
			WHERE 
			[HistoryId] = @HistoryId OR ([HistoryId] IS NULL AND @HistoryId IS NULL)
			";

		internal static string ctprPromotionOrderHistory_SelectAllByPromotionId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[HistoryId]
			,[PromotionId]
			,[ClientId]
			,[InvoiceCode]
			,[InvoiceDate]
			FROM [dbo].[PromotionOrderHistory]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprPromotionOrderHistory_SelectAllByPromotionIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromotionOrderHistory]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprPromotionOrderHistory_DeleteAllByPromotionId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[PromotionOrderHistory]
			WHERE 
			[PromotionId] = @PromotionId OR ([PromotionId] IS NULL AND @PromotionId IS NULL)
			";

		internal static string ctprPromotionOrderHistory_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[PromotionOrderHistory]
			(
			[PromotionId]
			,[ClientId]
			,[InvoiceCode]
			,[InvoiceDate]
			)
			VALUES
			(
			@PromotionId
			,@ClientId
			,@InvoiceCode
			,@InvoiceDate
			)
			SELECT 
			@HistoryId = [HistoryId]
			,@PromotionId = [PromotionId]
			,@ClientId = [ClientId]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			FROM [dbo].[PromotionOrderHistory]
			WHERE 
			[HistoryId] = SCOPE_IDENTITY()
			";

		internal static string ctprPromotionOrderHistory_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[HistoryId]
			,[PromotionId]
			,[ClientId]
			,[InvoiceCode]
			,[InvoiceDate]
			FROM [dbo].[PromotionOrderHistory]
			";

		internal static string ctprPromotionOrderHistory_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromotionOrderHistory]
			";

		internal static string ctprPromotionOrderHistory_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[PromotionOrderHistory]
			##CRITERIA##
			";

		internal static string ctprPromotionOrderHistory_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[HistoryId]
			,[PromotionId]
			,[ClientId]
			,[InvoiceCode]
			,[InvoiceDate]
			FROM [dbo].[PromotionOrderHistory]
			##CRITERIA##
			";

		internal static string ctprPromotionOrderHistory_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[PromotionOrderHistory]
			##CRITERIA##
			";

		internal static string ctprPromotionOrderHistory_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[PromotionOrderHistory]
			SET
			[PromotionId] = @PromotionId
			,[ClientId] = @ClientId
			,[InvoiceCode] = @InvoiceCode
			,[InvoiceDate] = @InvoiceDate
			WHERE 
			[HistoryId] = @HistoryId
			SELECT 
			@HistoryId = [HistoryId]
			,@PromotionId = [PromotionId]
			,@ClientId = [ClientId]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			FROM [dbo].[PromotionOrderHistory]
			WHERE 
			[HistoryId] = @HistoryId
			";

	}
}
#endregion
