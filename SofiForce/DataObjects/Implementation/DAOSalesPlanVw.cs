/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesPlanVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _journeyYear;
		protected Int32? _journeyMonth;
		protected Int32? _clientId;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _branchId;
		protected string _branchNameEn;
		protected string _branchNameAr;
		protected string _branchCode;
		protected decimal? _creditLimit;
		protected decimal? _creditBalance;
		protected string _phone;
		protected string _mobile;
		protected string _whatsApp;
		protected bool? _isActive;
		protected Int32? _clientTypeId;
		protected string _clientTypeNameEn;
		protected string _clientTypeNameAr;
		protected Int32? _regionId;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected Int32? _clientGroupId;
		protected Int32? _clientGroupSubId;
		protected Int32? _clientClassificationId;
		protected Int32? _paymentTermId;
		protected Int32? _clientAccountId;
		protected bool? _isTaxable;
		protected decimal? _targetValue;
		protected Int32? _targetVisit;
		protected Int32? _targetCall;
		#endregion

		#region class methods
		public DAOSalesPlanVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesPlanVw
		///</Summary>
		///<returns>
		///IList-DAOSalesPlanVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesPlanVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesPlanVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesPlanVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesPlanVw> objList = new List<DAOSalesPlanVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesPlanVw retObj = new DAOSalesPlanVw();
						retObj._journeyYear					 = Convert.IsDBNull(row["JourneyYear"]) ? (Int32?)null : (Int32?)row["JourneyYear"];
						retObj._journeyMonth					 = Convert.IsDBNull(row["JourneyMonth"]) ? (Int32?)null : (Int32?)row["JourneyMonth"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientTypeNameEn					 = Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"];
						retObj._clientTypeNameAr					 = Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._targetValue					 = Convert.IsDBNull(row["TargetValue"]) ? (decimal?)null : (decimal?)row["TargetValue"];
						retObj._targetVisit					 = Convert.IsDBNull(row["TargetVisit"]) ? (Int32?)null : (Int32?)row["TargetVisit"];
						retObj._targetCall					 = Convert.IsDBNull(row["TargetCall"]) ? (Int32?)null : (Int32?)row["TargetCall"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesPlanVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesPlanVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesPlanVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesPlanVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "JourneyYear", true) == 0) lst.Add(Convert.IsDBNull(row["JourneyYear"]) ? (Int32?)null : (Int32?)row["JourneyYear"]);
						if (string.Compare(projection.Member, "JourneyMonth", true) == 0) lst.Add(Convert.IsDBNull(row["JourneyMonth"]) ? (Int32?)null : (Int32?)row["JourneyMonth"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "CreditLimit", true) == 0) lst.Add(Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"]);
						if (string.Compare(projection.Member, "CreditBalance", true) == 0) lst.Add(Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "Mobile", true) == 0) lst.Add(Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"]);
						if (string.Compare(projection.Member, "WhatsApp", true) == 0) lst.Add(Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "ClientTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"]);
						if (string.Compare(projection.Member, "ClientTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"]);
						if (string.Compare(projection.Member, "ClientTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"]);
						if (string.Compare(projection.Member, "RegionId", true) == 0) lst.Add(Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "ClientGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"]);
						if (string.Compare(projection.Member, "ClientGroupSubId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"]);
						if (string.Compare(projection.Member, "ClientClassificationId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"]);
						if (string.Compare(projection.Member, "PaymentTermId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"]);
						if (string.Compare(projection.Member, "ClientAccountId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"]);
						if (string.Compare(projection.Member, "IsTaxable", true) == 0) lst.Add(Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"]);
						if (string.Compare(projection.Member, "TargetValue", true) == 0) lst.Add(Convert.IsDBNull(row["TargetValue"]) ? (decimal?)null : (decimal?)row["TargetValue"]);
						if (string.Compare(projection.Member, "TargetVisit", true) == 0) lst.Add(Convert.IsDBNull(row["TargetVisit"]) ? (Int32?)null : (Int32?)row["TargetVisit"]);
						if (string.Compare(projection.Member, "TargetCall", true) == 0) lst.Add(Convert.IsDBNull(row["TargetCall"]) ? (Int32?)null : (Int32?)row["TargetCall"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesPlanVw
		///</Summary>
		///<returns>
		///IList-DAOSalesPlanVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesPlanVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesPlanVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesPlanVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesPlanVw> objList = new List<DAOSalesPlanVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesPlanVw retObj = new DAOSalesPlanVw();
						retObj._journeyYear					 = Convert.IsDBNull(row["JourneyYear"]) ? (Int32?)null : (Int32?)row["JourneyYear"];
						retObj._journeyMonth					 = Convert.IsDBNull(row["JourneyMonth"]) ? (Int32?)null : (Int32?)row["JourneyMonth"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientTypeNameEn					 = Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"];
						retObj._clientTypeNameAr					 = Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._targetValue					 = Convert.IsDBNull(row["TargetValue"]) ? (decimal?)null : (decimal?)row["TargetValue"];
						retObj._targetVisit					 = Convert.IsDBNull(row["TargetVisit"]) ? (Int32?)null : (Int32?)row["TargetVisit"];
						retObj._targetCall					 = Convert.IsDBNull(row["TargetCall"]) ? (Int32?)null : (Int32?)row["TargetCall"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesPlanVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesPlanVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? JourneyYear
		{
			get
			{
				return _journeyYear;
			}
			set
			{
				_journeyYear = value;
			}
		}

		public Int32? JourneyMonth
		{
			get
			{
				return _journeyMonth;
			}
			set
			{
				_journeyMonth = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public decimal? CreditLimit
		{
			get
			{
				return _creditLimit;
			}
			set
			{
				_creditLimit = value;
			}
		}

		public decimal? CreditBalance
		{
			get
			{
				return _creditBalance;
			}
			set
			{
				_creditBalance = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string Mobile
		{
			get
			{
				return _mobile;
			}
			set
			{
				_mobile = value;
			}
		}

		public string WhatsApp
		{
			get
			{
				return _whatsApp;
			}
			set
			{
				_whatsApp = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? ClientTypeId
		{
			get
			{
				return _clientTypeId;
			}
			set
			{
				_clientTypeId = value;
			}
		}

		public string ClientTypeNameEn
		{
			get
			{
				return _clientTypeNameEn;
			}
			set
			{
				_clientTypeNameEn = value;
			}
		}

		public string ClientTypeNameAr
		{
			get
			{
				return _clientTypeNameAr;
			}
			set
			{
				_clientTypeNameAr = value;
			}
		}

		public Int32? RegionId
		{
			get
			{
				return _regionId;
			}
			set
			{
				_regionId = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public Int32? ClientGroupId
		{
			get
			{
				return _clientGroupId;
			}
			set
			{
				_clientGroupId = value;
			}
		}

		public Int32? ClientGroupSubId
		{
			get
			{
				return _clientGroupSubId;
			}
			set
			{
				_clientGroupSubId = value;
			}
		}

		public Int32? ClientClassificationId
		{
			get
			{
				return _clientClassificationId;
			}
			set
			{
				_clientClassificationId = value;
			}
		}

		public Int32? PaymentTermId
		{
			get
			{
				return _paymentTermId;
			}
			set
			{
				_paymentTermId = value;
			}
		}

		public Int32? ClientAccountId
		{
			get
			{
				return _clientAccountId;
			}
			set
			{
				_clientAccountId = value;
			}
		}

		public bool? IsTaxable
		{
			get
			{
				return _isTaxable;
			}
			set
			{
				_isTaxable = value;
			}
		}

		public decimal? TargetValue
		{
			get
			{
				return _targetValue;
			}
			set
			{
				_targetValue = value;
			}
		}

		public Int32? TargetVisit
		{
			get
			{
				return _targetVisit;
			}
			set
			{
				_targetVisit = value;
			}
		}

		public Int32? TargetCall
		{
			get
			{
				return _targetCall;
			}
			set
			{
				_targetCall = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesPlanVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[JourneyYear]
			,[JourneyMonth]
			,[ClientId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BranchId]
			,[BranchNameEn]
			,[BranchNameAr]
			,[BranchCode]
			,[CreditLimit]
			,[CreditBalance]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[ClientTypeId]
			,[ClientTypeNameEn]
			,[ClientTypeNameAr]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[PaymentTermId]
			,[ClientAccountId]
			,[IsTaxable]
			,[TargetValue]
			,[TargetVisit]
			,[TargetCall]
			FROM [dbo].[SalesPlanVw]
			";

		internal static string ctprSalesPlanVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesPlanVw]
			";

		internal static string ctprSalesPlanVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesPlanVw]
			##CRITERIA##
			";

		internal static string ctprSalesPlanVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[JourneyYear]
			,[JourneyMonth]
			,[ClientId]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BranchId]
			,[BranchNameEn]
			,[BranchNameAr]
			,[BranchCode]
			,[CreditLimit]
			,[CreditBalance]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[ClientTypeId]
			,[ClientTypeNameEn]
			,[ClientTypeNameAr]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[PaymentTermId]
			,[ClientAccountId]
			,[IsTaxable]
			,[TargetValue]
			,[TargetVisit]
			,[TargetCall]
			FROM [dbo].[SalesPlanVw]
			##CRITERIA##
			";

		internal static string ctprSalesPlanVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesPlanVw]
			##CRITERIA##
			";

	}
}
#endregion
