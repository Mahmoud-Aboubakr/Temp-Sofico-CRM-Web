/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientPayment : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _paymentId;
		protected Int32? _clientId;
		protected DateTime? _paymentDate;
		protected Int32? _paymentMethodId;
		protected decimal? _paymentValue;
		protected string _paymentCode;
		protected Int32? _representativeId;
		protected Int32? _bankId;
		protected DateTime? _dueDate;
		protected bool? _isRejected;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOClientPayment()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_Payment based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientPayment
		///</returns>
		///<parameters>
		///Int64? paymentId
		///</parameters>
		public static DAOClientPayment SelectOne(Int64? paymentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)paymentId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientPayment retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientPayment();
					retObj._paymentId					 = Convert.IsDBNull(dt.Rows[0]["PaymentId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["PaymentId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._paymentDate					 = Convert.IsDBNull(dt.Rows[0]["PaymentDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["PaymentDate"];
					retObj._paymentMethodId					 = Convert.IsDBNull(dt.Rows[0]["PaymentMethodId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PaymentMethodId"];
					retObj._paymentValue					 = Convert.IsDBNull(dt.Rows[0]["PaymentValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["PaymentValue"];
					retObj._paymentCode					 = Convert.IsDBNull(dt.Rows[0]["PaymentCode"]) ? null : (string)dt.Rows[0]["PaymentCode"];
					retObj._representativeId					 = Convert.IsDBNull(dt.Rows[0]["RepresentativeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RepresentativeId"];
					retObj._bankId					 = Convert.IsDBNull(dt.Rows[0]["BankId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BankId"];
					retObj._dueDate					 = Convert.IsDBNull(dt.Rows[0]["DueDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["DueDate"];
					retObj._isRejected					 = Convert.IsDBNull(dt.Rows[0]["IsRejected"]) ? (bool?)null : (bool?)dt.Rows[0]["IsRejected"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_Payment based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_paymentId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Payment based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientPayment.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOClientPayment> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPayment> objList = new List<DAOClientPayment>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPayment retObj = new DAOClientPayment();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Payment with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Payment based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientPayment.
		///</returns>
		///<parameters>
		///Int32? paymentMethodId
		///</parameters>
		public static IList<DAOClientPayment> SelectAllByPaymentMethodId(Int32? paymentMethodId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByPaymentMethodId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentMethodId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentMethodId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPayment> objList = new List<DAOClientPayment>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPayment retObj = new DAOClientPayment();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? paymentMethodId
		///</parameters>
		public static Int32 SelectAllByPaymentMethodIdCount(Int32? paymentMethodId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByPaymentMethodIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentMethodId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentMethodId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Payment with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? paymentMethodId
		///</parameters>
		public static void DeleteAllByPaymentMethodId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? paymentMethodId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_DeleteAllByPaymentMethodId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentMethodId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentMethodId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Payment based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientPayment.
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static IList<DAOClientPayment> SelectAllByRepresentativeId(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPayment> objList = new List<DAOClientPayment>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPayment retObj = new DAOClientPayment();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static Int32 SelectAllByRepresentativeIdCount(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByRepresentativeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Payment with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId
		///</parameters>
		public static void DeleteAllByRepresentativeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_DeleteAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Payment based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientPayment.
		///</returns>
		///<parameters>
		///Int32? bankId
		///</parameters>
		public static IList<DAOClientPayment> SelectAllByBankId(Int32? bankId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByBankId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BankId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)bankId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPayment> objList = new List<DAOClientPayment>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPayment retObj = new DAOClientPayment();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? bankId
		///</parameters>
		public static Int32 SelectAllByBankIdCount(Int32? bankId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllByBankIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BankId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)bankId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Payment with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? bankId
		///</parameters>
		public static void DeleteAllByBankId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? bankId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_DeleteAllByBankId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BankId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)bankId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_Payment
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _paymentId));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_paymentDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentMethodId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_paymentMethodId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_paymentValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_paymentCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BankId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_bankId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DueDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dueDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsRejected", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isRejected?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_paymentId					 = Convert.IsDBNull(command.Parameters["@PaymentId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@PaymentId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_paymentDate					 = Convert.IsDBNull(command.Parameters["@PaymentDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@PaymentDate"].Value;
				_paymentMethodId					 = Convert.IsDBNull(command.Parameters["@PaymentMethodId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PaymentMethodId"].Value;
				_paymentValue					 = Convert.IsDBNull(command.Parameters["@PaymentValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PaymentValue"].Value;
				_paymentCode					 = Convert.IsDBNull(command.Parameters["@PaymentCode"].Value) ? null : (string)command.Parameters["@PaymentCode"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_bankId					 = Convert.IsDBNull(command.Parameters["@BankId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BankId"].Value;
				_dueDate					 = Convert.IsDBNull(command.Parameters["@DueDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@DueDate"].Value;
				_isRejected					 = Convert.IsDBNull(command.Parameters["@IsRejected"].Value) ? (bool?)null : (bool?)command.Parameters["@IsRejected"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_Payment
		///</Summary>
		///<returns>
		///IList-DAOClientPayment.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientPayment> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPayment> objList = new List<DAOClientPayment>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPayment retObj = new DAOClientPayment();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_Payment
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Payment_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "PaymentId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "PaymentDate", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"]);
						if (string.Compare(projection.Member, "PaymentMethodId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"]);
						if (string.Compare(projection.Member, "PaymentValue", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"]);
						if (string.Compare(projection.Member, "PaymentCode", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "BankId", true) == 0) lst.Add(Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"]);
						if (string.Compare(projection.Member, "DueDate", true) == 0) lst.Add(Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"]);
						if (string.Compare(projection.Member, "IsRejected", true) == 0) lst.Add(Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_Payment
		///</Summary>
		///<returns>
		///IList-DAOClientPayment.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientPayment> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Payment_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Payment");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPayment> objList = new List<DAOClientPayment>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPayment retObj = new DAOClientPayment();
						retObj._paymentId					 = Convert.IsDBNull(row["PaymentId"]) ? (Int64?)null : (Int64?)row["PaymentId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._paymentDate					 = Convert.IsDBNull(row["PaymentDate"]) ? (DateTime?)null : (DateTime?)row["PaymentDate"];
						retObj._paymentMethodId					 = Convert.IsDBNull(row["PaymentMethodId"]) ? (Int32?)null : (Int32?)row["PaymentMethodId"];
						retObj._paymentValue					 = Convert.IsDBNull(row["PaymentValue"]) ? (decimal?)null : (decimal?)row["PaymentValue"];
						retObj._paymentCode					 = Convert.IsDBNull(row["PaymentCode"]) ? null : (string)row["PaymentCode"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._bankId					 = Convert.IsDBNull(row["BankId"]) ? (Int32?)null : (Int32?)row["BankId"];
						retObj._dueDate					 = Convert.IsDBNull(row["DueDate"]) ? (DateTime?)null : (DateTime?)row["DueDate"];
						retObj._isRejected					 = Convert.IsDBNull(row["IsRejected"]) ? (bool?)null : (bool?)row["IsRejected"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_Payment
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Payment_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_Payment based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Payment_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_paymentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_paymentDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentMethodId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_paymentMethodId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_paymentValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_paymentCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BankId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_bankId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DueDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dueDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsRejected", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isRejected?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_paymentId					 = Convert.IsDBNull(command.Parameters["@PaymentId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@PaymentId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_paymentDate					 = Convert.IsDBNull(command.Parameters["@PaymentDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@PaymentDate"].Value;
				_paymentMethodId					 = Convert.IsDBNull(command.Parameters["@PaymentMethodId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PaymentMethodId"].Value;
				_paymentValue					 = Convert.IsDBNull(command.Parameters["@PaymentValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PaymentValue"].Value;
				_paymentCode					 = Convert.IsDBNull(command.Parameters["@PaymentCode"].Value) ? null : (string)command.Parameters["@PaymentCode"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_bankId					 = Convert.IsDBNull(command.Parameters["@BankId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BankId"].Value;
				_dueDate					 = Convert.IsDBNull(command.Parameters["@DueDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@DueDate"].Value;
				_isRejected					 = Convert.IsDBNull(command.Parameters["@IsRejected"].Value) ? (bool?)null : (bool?)command.Parameters["@IsRejected"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? PaymentId
		{
			get
			{
				return _paymentId;
			}
			set
			{
				_paymentId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public DateTime? PaymentDate
		{
			get
			{
				return _paymentDate;
			}
			set
			{
				_paymentDate = value;
			}
		}

		public Int32? PaymentMethodId
		{
			get
			{
				return _paymentMethodId;
			}
			set
			{
				_paymentMethodId = value;
			}
		}

		public decimal? PaymentValue
		{
			get
			{
				return _paymentValue;
			}
			set
			{
				_paymentValue = value;
			}
		}

		public string PaymentCode
		{
			get
			{
				return _paymentCode;
			}
			set
			{
				_paymentCode = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? BankId
		{
			get
			{
				return _bankId;
			}
			set
			{
				_bankId = value;
			}
		}

		public DateTime? DueDate
		{
			get
			{
				return _dueDate;
			}
			set
			{
				_dueDate = value;
			}
		}

		public bool? IsRejected
		{
			get
			{
				return _isRejected;
			}
			set
			{
				_isRejected = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_Payment_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Payment]
			WHERE 
			[PaymentId] = @PaymentId
			";

		internal static string ctprClient_Payment_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_Payment]
			WHERE 
			[PaymentId] = @PaymentId
			";

		internal static string ctprClient_Payment_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Payment]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Payment_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Payment]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Payment_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Payment]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Payment_SelectAllByPaymentMethodId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Payment]
			WHERE 
			[PaymentMethodId] = @PaymentMethodId OR ([PaymentMethodId] IS NULL AND @PaymentMethodId IS NULL)
			";

		internal static string ctprClient_Payment_SelectAllByPaymentMethodIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Payment]
			WHERE 
			[PaymentMethodId] = @PaymentMethodId OR ([PaymentMethodId] IS NULL AND @PaymentMethodId IS NULL)
			";

		internal static string ctprClient_Payment_DeleteAllByPaymentMethodId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Payment]
			WHERE 
			[PaymentMethodId] = @PaymentMethodId OR ([PaymentMethodId] IS NULL AND @PaymentMethodId IS NULL)
			";

		internal static string ctprClient_Payment_SelectAllByRepresentativeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Payment]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_Payment_SelectAllByRepresentativeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Payment]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_Payment_DeleteAllByRepresentativeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Payment]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprClient_Payment_SelectAllByBankId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Payment]
			WHERE 
			[BankId] = @BankId OR ([BankId] IS NULL AND @BankId IS NULL)
			";

		internal static string ctprClient_Payment_SelectAllByBankIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Payment]
			WHERE 
			[BankId] = @BankId OR ([BankId] IS NULL AND @BankId IS NULL)
			";

		internal static string ctprClient_Payment_DeleteAllByBankId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Payment]
			WHERE 
			[BankId] = @BankId OR ([BankId] IS NULL AND @BankId IS NULL)
			";

		internal static string ctprClient_Payment_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_Payment]
			(
			[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@ClientId
			,@PaymentDate
			,@PaymentMethodId
			,@PaymentValue
			,@PaymentCode
			,@RepresentativeId
			,@BankId
			,@DueDate
			,@IsRejected
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@PaymentId = [PaymentId]
			,@ClientId = [ClientId]
			,@PaymentDate = [PaymentDate]
			,@PaymentMethodId = [PaymentMethodId]
			,@PaymentValue = [PaymentValue]
			,@PaymentCode = [PaymentCode]
			,@RepresentativeId = [RepresentativeId]
			,@BankId = [BankId]
			,@DueDate = [DueDate]
			,@IsRejected = [IsRejected]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Payment]
			WHERE 
			[PaymentId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_Payment_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Payment]
			";

		internal static string ctprClient_Payment_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Payment]
			";

		internal static string ctprClient_Payment_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_Payment]
			##CRITERIA##
			";

		internal static string ctprClient_Payment_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[PaymentId]
			,[ClientId]
			,[PaymentDate]
			,[PaymentMethodId]
			,[PaymentValue]
			,[PaymentCode]
			,[RepresentativeId]
			,[BankId]
			,[DueDate]
			,[IsRejected]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Payment]
			##CRITERIA##
			";

		internal static string ctprClient_Payment_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_Payment]
			##CRITERIA##
			";

		internal static string ctprClient_Payment_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_Payment]
			SET
			[ClientId] = @ClientId
			,[PaymentDate] = @PaymentDate
			,[PaymentMethodId] = @PaymentMethodId
			,[PaymentValue] = @PaymentValue
			,[PaymentCode] = @PaymentCode
			,[RepresentativeId] = @RepresentativeId
			,[BankId] = @BankId
			,[DueDate] = @DueDate
			,[IsRejected] = @IsRejected
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[PaymentId] = @PaymentId
			SELECT 
			@PaymentId = [PaymentId]
			,@ClientId = [ClientId]
			,@PaymentDate = [PaymentDate]
			,@PaymentMethodId = [PaymentMethodId]
			,@PaymentValue = [PaymentValue]
			,@PaymentCode = [PaymentCode]
			,@RepresentativeId = [RepresentativeId]
			,@BankId = [BankId]
			,@DueDate = [DueDate]
			,@IsRejected = [IsRejected]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Payment]
			WHERE 
			[PaymentId] = @PaymentId
			";

	}
}
#endregion
