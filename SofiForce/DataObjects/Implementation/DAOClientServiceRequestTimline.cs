/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientServiceRequestTimline : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _timelineId;
		protected Int64? _requestId;
		protected Int32? _requestStatusId;
		protected Int32? _userId;
		protected DateTime? _timelineDate;
		protected string _notes;
		#endregion

		#region class methods
		public DAOClientServiceRequestTimline()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_ServiceRequest_Timline based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientServiceRequestTimline
		///</returns>
		///<parameters>
		///Int64? timelineId
		///</parameters>
		public static DAOClientServiceRequestTimline SelectOne(Int64? timelineId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest_Timline");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TimelineId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)timelineId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientServiceRequestTimline retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientServiceRequestTimline();
					retObj._timelineId					 = Convert.IsDBNull(dt.Rows[0]["TimelineId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["TimelineId"];
					retObj._requestId					 = Convert.IsDBNull(dt.Rows[0]["RequestId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RequestId"];
					retObj._requestStatusId					 = Convert.IsDBNull(dt.Rows[0]["RequestStatusId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RequestStatusId"];
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._timelineDate					 = Convert.IsDBNull(dt.Rows[0]["TimelineDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TimelineDate"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_ServiceRequest_Timline based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TimelineId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_timelineId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest_Timline based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequestTimline.
		///</returns>
		///<parameters>
		///Int64? requestId
		///</parameters>
		public static IList<DAOClientServiceRequestTimline> SelectAllByRequestId(Int64? requestId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllByRequestId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest_Timline");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)requestId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequestTimline> objList = new List<DAOClientServiceRequestTimline>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequestTimline retObj = new DAOClientServiceRequestTimline();
						retObj._timelineId					 = Convert.IsDBNull(row["TimelineId"]) ? (Int64?)null : (Int64?)row["TimelineId"];
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._timelineDate					 = Convert.IsDBNull(row["TimelineDate"]) ? (DateTime?)null : (DateTime?)row["TimelineDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? requestId
		///</parameters>
		public static Int32 SelectAllByRequestIdCount(Int64? requestId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllByRequestIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)requestId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest_Timline with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? requestId
		///</parameters>
		public static void DeleteAllByRequestId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? requestId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_DeleteAllByRequestId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, (object)requestId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_ServiceRequest_Timline based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequestTimline.
		///</returns>
		///<parameters>
		///Int32? requestStatusId
		///</parameters>
		public static IList<DAOClientServiceRequestTimline> SelectAllByRequestStatusId(Int32? requestStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllByRequestStatusId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest_Timline");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequestTimline> objList = new List<DAOClientServiceRequestTimline>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequestTimline retObj = new DAOClientServiceRequestTimline();
						retObj._timelineId					 = Convert.IsDBNull(row["TimelineId"]) ? (Int64?)null : (Int64?)row["TimelineId"];
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._timelineDate					 = Convert.IsDBNull(row["TimelineDate"]) ? (DateTime?)null : (DateTime?)row["TimelineDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? requestStatusId
		///</parameters>
		public static Int32 SelectAllByRequestStatusIdCount(Int32? requestStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllByRequestStatusIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_ServiceRequest_Timline with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestStatusId
		///</parameters>
		public static void DeleteAllByRequestStatusId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? requestStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_DeleteAllByRequestStatusId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)requestStatusId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_ServiceRequest_Timline
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TimelineId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _timelineId));
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_requestId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TimelineDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_timelineDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_timelineId					 = Convert.IsDBNull(command.Parameters["@TimelineId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@TimelineId"].Value;
				_requestId					 = Convert.IsDBNull(command.Parameters["@RequestId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RequestId"].Value;
				_requestStatusId					 = Convert.IsDBNull(command.Parameters["@RequestStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestStatusId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_timelineDate					 = Convert.IsDBNull(command.Parameters["@TimelineDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TimelineDate"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_ServiceRequest_Timline
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequestTimline.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientServiceRequestTimline> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest_Timline");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequestTimline> objList = new List<DAOClientServiceRequestTimline>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequestTimline retObj = new DAOClientServiceRequestTimline();
						retObj._timelineId					 = Convert.IsDBNull(row["TimelineId"]) ? (Int64?)null : (Int64?)row["TimelineId"];
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._timelineDate					 = Convert.IsDBNull(row["TimelineDate"]) ? (DateTime?)null : (DateTime?)row["TimelineDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_ServiceRequest_Timline
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest_Timline");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "TimelineId", true) == 0) lst.Add(Convert.IsDBNull(row["TimelineId"]) ? (Int64?)null : (Int64?)row["TimelineId"]);
						if (string.Compare(projection.Member, "RequestId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"]);
						if (string.Compare(projection.Member, "RequestStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "TimelineDate", true) == 0) lst.Add(Convert.IsDBNull(row["TimelineDate"]) ? (DateTime?)null : (DateTime?)row["TimelineDate"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_ServiceRequest_Timline
		///</Summary>
		///<returns>
		///IList-DAOClientServiceRequestTimline.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientServiceRequestTimline> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_ServiceRequest_Timline");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientServiceRequestTimline> objList = new List<DAOClientServiceRequestTimline>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientServiceRequestTimline retObj = new DAOClientServiceRequestTimline();
						retObj._timelineId					 = Convert.IsDBNull(row["TimelineId"]) ? (Int64?)null : (Int64?)row["TimelineId"];
						retObj._requestId					 = Convert.IsDBNull(row["RequestId"]) ? (Int64?)null : (Int64?)row["RequestId"];
						retObj._requestStatusId					 = Convert.IsDBNull(row["RequestStatusId"]) ? (Int32?)null : (Int32?)row["RequestStatusId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._timelineDate					 = Convert.IsDBNull(row["TimelineDate"]) ? (DateTime?)null : (DateTime?)row["TimelineDate"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_ServiceRequest_Timline
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_ServiceRequest_Timline_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_ServiceRequest_Timline based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_ServiceRequest_Timline_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TimelineId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_timelineId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_requestId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequestStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_requestStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TimelineDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_timelineDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_timelineId					 = Convert.IsDBNull(command.Parameters["@TimelineId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@TimelineId"].Value;
				_requestId					 = Convert.IsDBNull(command.Parameters["@RequestId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RequestId"].Value;
				_requestStatusId					 = Convert.IsDBNull(command.Parameters["@RequestStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RequestStatusId"].Value;
				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_timelineDate					 = Convert.IsDBNull(command.Parameters["@TimelineDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TimelineDate"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? TimelineId
		{
			get
			{
				return _timelineId;
			}
			set
			{
				_timelineId = value;
			}
		}

		public Int64? RequestId
		{
			get
			{
				return _requestId;
			}
			set
			{
				_requestId = value;
			}
		}

		public Int32? RequestStatusId
		{
			get
			{
				return _requestStatusId;
			}
			set
			{
				_requestStatusId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public DateTime? TimelineDate
		{
			get
			{
				return _timelineDate;
			}
			set
			{
				_timelineDate = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_ServiceRequest_Timline_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[TimelineId]
			,[RequestId]
			,[RequestStatusId]
			,[UserId]
			,[TimelineDate]
			,[Notes]
			FROM [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[TimelineId] = @TimelineId
			";

		internal static string ctprClient_ServiceRequest_Timline_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[TimelineId] = @TimelineId
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllByRequestId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[TimelineId]
			,[RequestId]
			,[RequestStatusId]
			,[UserId]
			,[TimelineDate]
			,[Notes]
			FROM [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[RequestId] = @RequestId OR ([RequestId] IS NULL AND @RequestId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllByRequestIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[RequestId] = @RequestId OR ([RequestId] IS NULL AND @RequestId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_Timline_DeleteAllByRequestId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[RequestId] = @RequestId OR ([RequestId] IS NULL AND @RequestId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllByRequestStatusId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[TimelineId]
			,[RequestId]
			,[RequestStatusId]
			,[UserId]
			,[TimelineDate]
			,[Notes]
			FROM [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[RequestStatusId] = @RequestStatusId OR ([RequestStatusId] IS NULL AND @RequestStatusId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllByRequestStatusIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[RequestStatusId] = @RequestStatusId OR ([RequestStatusId] IS NULL AND @RequestStatusId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_Timline_DeleteAllByRequestStatusId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[RequestStatusId] = @RequestStatusId OR ([RequestStatusId] IS NULL AND @RequestStatusId IS NULL)
			";

		internal static string ctprClient_ServiceRequest_Timline_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_ServiceRequest_Timline]
			(
			[RequestId]
			,[RequestStatusId]
			,[UserId]
			,[TimelineDate]
			,[Notes]
			)
			VALUES
			(
			@RequestId
			,@RequestStatusId
			,@UserId
			,@TimelineDate
			,@Notes
			)
			SELECT 
			@TimelineId = [TimelineId]
			,@RequestId = [RequestId]
			,@RequestStatusId = [RequestStatusId]
			,@UserId = [UserId]
			,@TimelineDate = [TimelineDate]
			,@Notes = [Notes]
			FROM [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[TimelineId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[TimelineId]
			,[RequestId]
			,[RequestStatusId]
			,[UserId]
			,[TimelineDate]
			,[Notes]
			FROM [dbo].[Client_ServiceRequest_Timline]
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest_Timline]
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_ServiceRequest_Timline]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[TimelineId]
			,[RequestId]
			,[RequestStatusId]
			,[UserId]
			,[TimelineDate]
			,[Notes]
			FROM [dbo].[Client_ServiceRequest_Timline]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequest_Timline_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_ServiceRequest_Timline]
			##CRITERIA##
			";

		internal static string ctprClient_ServiceRequest_Timline_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_ServiceRequest_Timline]
			SET
			[RequestId] = @RequestId
			,[RequestStatusId] = @RequestStatusId
			,[UserId] = @UserId
			,[TimelineDate] = @TimelineDate
			,[Notes] = @Notes
			WHERE 
			[TimelineId] = @TimelineId
			SELECT 
			@TimelineId = [TimelineId]
			,@RequestId = [RequestId]
			,@RequestStatusId = [RequestStatusId]
			,@UserId = [UserId]
			,@TimelineDate = [TimelineDate]
			,@Notes = [Notes]
			FROM [dbo].[Client_ServiceRequest_Timline]
			WHERE 
			[TimelineId] = @TimelineId
			";

	}
}
#endregion
