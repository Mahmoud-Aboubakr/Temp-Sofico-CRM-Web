/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAODeal : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _dealId;
		protected string _dealCode;
		protected string _dealNameEn;
		protected string _dealNameAr;
		protected decimal? _fromValue;
		protected decimal? _toValue;
		protected Int32? _growth1;
		protected Int32? _growth2;
		protected decimal? _growth1Discount;
		protected decimal? _growth2Discount;
		protected Int32? _growth1Days;
		protected Int32? _growth2Days;
		protected string _descAr;
		protected string _descEn;
		protected string _color;
		protected string _icon;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAODeal()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Deal based on the primary key(s)
		///</Summary>
		///<returns>
		///DAODeal
		///</returns>
		///<parameters>
		///Int32? dealId
		///</parameters>
		public static DAODeal SelectOne(Int32? dealId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprDeal_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Deal");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DealId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)dealId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAODeal retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAODeal();
					retObj._dealId					 = Convert.IsDBNull(dt.Rows[0]["DealId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DealId"];
					retObj._dealCode					 = Convert.IsDBNull(dt.Rows[0]["DealCode"]) ? null : (string)dt.Rows[0]["DealCode"];
					retObj._dealNameEn					 = Convert.IsDBNull(dt.Rows[0]["DealNameEn"]) ? null : (string)dt.Rows[0]["DealNameEn"];
					retObj._dealNameAr					 = Convert.IsDBNull(dt.Rows[0]["DealNameAr"]) ? null : (string)dt.Rows[0]["DealNameAr"];
					retObj._fromValue					 = Convert.IsDBNull(dt.Rows[0]["FromValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["FromValue"];
					retObj._toValue					 = Convert.IsDBNull(dt.Rows[0]["ToValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ToValue"];
					retObj._growth1					 = Convert.IsDBNull(dt.Rows[0]["Growth1"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Growth1"];
					retObj._growth2					 = Convert.IsDBNull(dt.Rows[0]["Growth2"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Growth2"];
					retObj._growth1Discount					 = Convert.IsDBNull(dt.Rows[0]["Growth1Discount"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Growth1Discount"];
					retObj._growth2Discount					 = Convert.IsDBNull(dt.Rows[0]["Growth2Discount"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Growth2Discount"];
					retObj._growth1Days					 = Convert.IsDBNull(dt.Rows[0]["Growth1Days"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Growth1Days"];
					retObj._growth2Days					 = Convert.IsDBNull(dt.Rows[0]["Growth2Days"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Growth2Days"];
					retObj._descAr					 = Convert.IsDBNull(dt.Rows[0]["DescAr"]) ? null : (string)dt.Rows[0]["DescAr"];
					retObj._descEn					 = Convert.IsDBNull(dt.Rows[0]["DescEn"]) ? null : (string)dt.Rows[0]["DescEn"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["Color"]) ? null : (string)dt.Rows[0]["Color"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["Icon"]) ? null : (string)dt.Rows[0]["Icon"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._canEdit					 = Convert.IsDBNull(dt.Rows[0]["CanEdit"]) ? (bool?)null : (bool?)dt.Rows[0]["CanEdit"];
					retObj._canDelete					 = Convert.IsDBNull(dt.Rows[0]["CanDelete"]) ? (bool?)null : (bool?)dt.Rows[0]["CanDelete"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Deal based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprDeal_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DealId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_dealId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Deal
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprDeal_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DealId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _dealId));
				command.Parameters.Add(CtSqlParameter.Get("@DealCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dealCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DealNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dealNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DealNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dealNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FromValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_fromValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ToValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_toValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth1Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_growth1Discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth2Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_growth2Discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth1Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth1Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth2Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth2Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_dealId					 = Convert.IsDBNull(command.Parameters["@DealId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DealId"].Value;
				_dealCode					 = Convert.IsDBNull(command.Parameters["@DealCode"].Value) ? null : (string)command.Parameters["@DealCode"].Value;
				_dealNameEn					 = Convert.IsDBNull(command.Parameters["@DealNameEn"].Value) ? null : (string)command.Parameters["@DealNameEn"].Value;
				_dealNameAr					 = Convert.IsDBNull(command.Parameters["@DealNameAr"].Value) ? null : (string)command.Parameters["@DealNameAr"].Value;
				_fromValue					 = Convert.IsDBNull(command.Parameters["@FromValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@FromValue"].Value;
				_toValue					 = Convert.IsDBNull(command.Parameters["@ToValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ToValue"].Value;
				_growth1					 = Convert.IsDBNull(command.Parameters["@Growth1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth1"].Value;
				_growth2					 = Convert.IsDBNull(command.Parameters["@Growth2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth2"].Value;
				_growth1Discount					 = Convert.IsDBNull(command.Parameters["@Growth1Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Growth1Discount"].Value;
				_growth2Discount					 = Convert.IsDBNull(command.Parameters["@Growth2Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Growth2Discount"].Value;
				_growth1Days					 = Convert.IsDBNull(command.Parameters["@Growth1Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth1Days"].Value;
				_growth2Days					 = Convert.IsDBNull(command.Parameters["@Growth2Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth2Days"].Value;
				_descAr					 = Convert.IsDBNull(command.Parameters["@DescAr"].Value) ? null : (string)command.Parameters["@DescAr"].Value;
				_descEn					 = Convert.IsDBNull(command.Parameters["@DescEn"].Value) ? null : (string)command.Parameters["@DescEn"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Deal
		///</Summary>
		///<returns>
		///IList-DAODeal.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAODeal> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprDeal_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Deal");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAODeal> objList = new List<DAODeal>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAODeal retObj = new DAODeal();
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						retObj._dealCode					 = Convert.IsDBNull(row["DealCode"]) ? null : (string)row["DealCode"];
						retObj._dealNameEn					 = Convert.IsDBNull(row["DealNameEn"]) ? null : (string)row["DealNameEn"];
						retObj._dealNameAr					 = Convert.IsDBNull(row["DealNameAr"]) ? null : (string)row["DealNameAr"];
						retObj._fromValue					 = Convert.IsDBNull(row["FromValue"]) ? (decimal?)null : (decimal?)row["FromValue"];
						retObj._toValue					 = Convert.IsDBNull(row["ToValue"]) ? (decimal?)null : (decimal?)row["ToValue"];
						retObj._growth1					 = Convert.IsDBNull(row["Growth1"]) ? (Int32?)null : (Int32?)row["Growth1"];
						retObj._growth2					 = Convert.IsDBNull(row["Growth2"]) ? (Int32?)null : (Int32?)row["Growth2"];
						retObj._growth1Discount					 = Convert.IsDBNull(row["Growth1Discount"]) ? (decimal?)null : (decimal?)row["Growth1Discount"];
						retObj._growth2Discount					 = Convert.IsDBNull(row["Growth2Discount"]) ? (decimal?)null : (decimal?)row["Growth2Discount"];
						retObj._growth1Days					 = Convert.IsDBNull(row["Growth1Days"]) ? (Int32?)null : (Int32?)row["Growth1Days"];
						retObj._growth2Days					 = Convert.IsDBNull(row["Growth2Days"]) ? (Int32?)null : (Int32?)row["Growth2Days"];
						retObj._descAr					 = Convert.IsDBNull(row["DescAr"]) ? null : (string)row["DescAr"];
						retObj._descEn					 = Convert.IsDBNull(row["DescEn"]) ? null : (string)row["DescEn"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprDeal_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiDeal
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprDeal_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Deal");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DealId", true) == 0) lst.Add(Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"]);
						if (string.Compare(projection.Member, "DealCode", true) == 0) lst.Add(Convert.IsDBNull(row["DealCode"]) ? null : (string)row["DealCode"]);
						if (string.Compare(projection.Member, "DealNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["DealNameEn"]) ? null : (string)row["DealNameEn"]);
						if (string.Compare(projection.Member, "DealNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["DealNameAr"]) ? null : (string)row["DealNameAr"]);
						if (string.Compare(projection.Member, "FromValue", true) == 0) lst.Add(Convert.IsDBNull(row["FromValue"]) ? (decimal?)null : (decimal?)row["FromValue"]);
						if (string.Compare(projection.Member, "ToValue", true) == 0) lst.Add(Convert.IsDBNull(row["ToValue"]) ? (decimal?)null : (decimal?)row["ToValue"]);
						if (string.Compare(projection.Member, "Growth1", true) == 0) lst.Add(Convert.IsDBNull(row["Growth1"]) ? (Int32?)null : (Int32?)row["Growth1"]);
						if (string.Compare(projection.Member, "Growth2", true) == 0) lst.Add(Convert.IsDBNull(row["Growth2"]) ? (Int32?)null : (Int32?)row["Growth2"]);
						if (string.Compare(projection.Member, "Growth1Discount", true) == 0) lst.Add(Convert.IsDBNull(row["Growth1Discount"]) ? (decimal?)null : (decimal?)row["Growth1Discount"]);
						if (string.Compare(projection.Member, "Growth2Discount", true) == 0) lst.Add(Convert.IsDBNull(row["Growth2Discount"]) ? (decimal?)null : (decimal?)row["Growth2Discount"]);
						if (string.Compare(projection.Member, "Growth1Days", true) == 0) lst.Add(Convert.IsDBNull(row["Growth1Days"]) ? (Int32?)null : (Int32?)row["Growth1Days"]);
						if (string.Compare(projection.Member, "Growth2Days", true) == 0) lst.Add(Convert.IsDBNull(row["Growth2Days"]) ? (Int32?)null : (Int32?)row["Growth2Days"]);
						if (string.Compare(projection.Member, "DescAr", true) == 0) lst.Add(Convert.IsDBNull(row["DescAr"]) ? null : (string)row["DescAr"]);
						if (string.Compare(projection.Member, "DescEn", true) == 0) lst.Add(Convert.IsDBNull(row["DescEn"]) ? null : (string)row["DescEn"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Deal
		///</Summary>
		///<returns>
		///IList-DAODeal.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAODeal> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprDeal_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Deal");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAODeal> objList = new List<DAODeal>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAODeal retObj = new DAODeal();
						retObj._dealId					 = Convert.IsDBNull(row["DealId"]) ? (Int32?)null : (Int32?)row["DealId"];
						retObj._dealCode					 = Convert.IsDBNull(row["DealCode"]) ? null : (string)row["DealCode"];
						retObj._dealNameEn					 = Convert.IsDBNull(row["DealNameEn"]) ? null : (string)row["DealNameEn"];
						retObj._dealNameAr					 = Convert.IsDBNull(row["DealNameAr"]) ? null : (string)row["DealNameAr"];
						retObj._fromValue					 = Convert.IsDBNull(row["FromValue"]) ? (decimal?)null : (decimal?)row["FromValue"];
						retObj._toValue					 = Convert.IsDBNull(row["ToValue"]) ? (decimal?)null : (decimal?)row["ToValue"];
						retObj._growth1					 = Convert.IsDBNull(row["Growth1"]) ? (Int32?)null : (Int32?)row["Growth1"];
						retObj._growth2					 = Convert.IsDBNull(row["Growth2"]) ? (Int32?)null : (Int32?)row["Growth2"];
						retObj._growth1Discount					 = Convert.IsDBNull(row["Growth1Discount"]) ? (decimal?)null : (decimal?)row["Growth1Discount"];
						retObj._growth2Discount					 = Convert.IsDBNull(row["Growth2Discount"]) ? (decimal?)null : (decimal?)row["Growth2Discount"];
						retObj._growth1Days					 = Convert.IsDBNull(row["Growth1Days"]) ? (Int32?)null : (Int32?)row["Growth1Days"];
						retObj._growth2Days					 = Convert.IsDBNull(row["Growth2Days"]) ? (Int32?)null : (Int32?)row["Growth2Days"];
						retObj._descAr					 = Convert.IsDBNull(row["DescAr"]) ? null : (string)row["DescAr"];
						retObj._descEn					 = Convert.IsDBNull(row["DescEn"]) ? null : (string)row["DescEn"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Deal
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprDeal_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Deal based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprDeal_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@DealId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_dealId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DealCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dealCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DealNameEn", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dealNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DealNameAr", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dealNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FromValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_fromValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ToValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_toValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth1", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth2", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth1Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_growth1Discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth2Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 2, "", DataRowVersion.Proposed, (object)_growth2Discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth1Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth1Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Growth2Days", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_growth2Days?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_dealId					 = Convert.IsDBNull(command.Parameters["@DealId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DealId"].Value;
				_dealCode					 = Convert.IsDBNull(command.Parameters["@DealCode"].Value) ? null : (string)command.Parameters["@DealCode"].Value;
				_dealNameEn					 = Convert.IsDBNull(command.Parameters["@DealNameEn"].Value) ? null : (string)command.Parameters["@DealNameEn"].Value;
				_dealNameAr					 = Convert.IsDBNull(command.Parameters["@DealNameAr"].Value) ? null : (string)command.Parameters["@DealNameAr"].Value;
				_fromValue					 = Convert.IsDBNull(command.Parameters["@FromValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@FromValue"].Value;
				_toValue					 = Convert.IsDBNull(command.Parameters["@ToValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ToValue"].Value;
				_growth1					 = Convert.IsDBNull(command.Parameters["@Growth1"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth1"].Value;
				_growth2					 = Convert.IsDBNull(command.Parameters["@Growth2"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth2"].Value;
				_growth1Discount					 = Convert.IsDBNull(command.Parameters["@Growth1Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Growth1Discount"].Value;
				_growth2Discount					 = Convert.IsDBNull(command.Parameters["@Growth2Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Growth2Discount"].Value;
				_growth1Days					 = Convert.IsDBNull(command.Parameters["@Growth1Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth1Days"].Value;
				_growth2Days					 = Convert.IsDBNull(command.Parameters["@Growth2Days"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Growth2Days"].Value;
				_descAr					 = Convert.IsDBNull(command.Parameters["@DescAr"].Value) ? null : (string)command.Parameters["@DescAr"].Value;
				_descEn					 = Convert.IsDBNull(command.Parameters["@DescEn"].Value) ? null : (string)command.Parameters["@DescEn"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? DealId
		{
			get
			{
				return _dealId;
			}
			set
			{
				_dealId = value;
			}
		}

		public string DealCode
		{
			get
			{
				return _dealCode;
			}
			set
			{
				_dealCode = value;
			}
		}

		public string DealNameEn
		{
			get
			{
				return _dealNameEn;
			}
			set
			{
				_dealNameEn = value;
			}
		}

		public string DealNameAr
		{
			get
			{
				return _dealNameAr;
			}
			set
			{
				_dealNameAr = value;
			}
		}

		public decimal? FromValue
		{
			get
			{
				return _fromValue;
			}
			set
			{
				_fromValue = value;
			}
		}

		public decimal? ToValue
		{
			get
			{
				return _toValue;
			}
			set
			{
				_toValue = value;
			}
		}

		public Int32? Growth1
		{
			get
			{
				return _growth1;
			}
			set
			{
				_growth1 = value;
			}
		}

		public Int32? Growth2
		{
			get
			{
				return _growth2;
			}
			set
			{
				_growth2 = value;
			}
		}

		public decimal? Growth1Discount
		{
			get
			{
				return _growth1Discount;
			}
			set
			{
				_growth1Discount = value;
			}
		}

		public decimal? Growth2Discount
		{
			get
			{
				return _growth2Discount;
			}
			set
			{
				_growth2Discount = value;
			}
		}

		public Int32? Growth1Days
		{
			get
			{
				return _growth1Days;
			}
			set
			{
				_growth1Days = value;
			}
		}

		public Int32? Growth2Days
		{
			get
			{
				return _growth2Days;
			}
			set
			{
				_growth2Days = value;
			}
		}

		public string DescAr
		{
			get
			{
				return _descAr;
			}
			set
			{
				_descAr = value;
			}
		}

		public string DescEn
		{
			get
			{
				return _descEn;
			}
			set
			{
				_descEn = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprDeal_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[DealId]
			,[DealCode]
			,[DealNameEn]
			,[DealNameAr]
			,[FromValue]
			,[ToValue]
			,[Growth1]
			,[Growth2]
			,[Growth1Discount]
			,[Growth2Discount]
			,[Growth1Days]
			,[Growth2Days]
			,[DescAr]
			,[DescEn]
			,[Color]
			,[Icon]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Deal]
			WHERE 
			[DealId] = @DealId
			";

		internal static string ctprDeal_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Deal]
			WHERE 
			[DealId] = @DealId
			";

		internal static string ctprDeal_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Deal]
			(
			[DealCode]
			,[DealNameEn]
			,[DealNameAr]
			,[FromValue]
			,[ToValue]
			,[Growth1]
			,[Growth2]
			,[Growth1Discount]
			,[Growth2Discount]
			,[Growth1Days]
			,[Growth2Days]
			,[DescAr]
			,[DescEn]
			,[Color]
			,[Icon]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@DealCode
			,@DealNameEn
			,@DealNameAr
			,@FromValue
			,@ToValue
			,@Growth1
			,@Growth2
			,@Growth1Discount
			,@Growth2Discount
			,@Growth1Days
			,@Growth2Days
			,@DescAr
			,@DescEn
			,@Color
			,@Icon
			,@DisplayOrder
			,@IsActive
			,@CanEdit
			,@CanDelete
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@DealId = [DealId]
			,@DealCode = [DealCode]
			,@DealNameEn = [DealNameEn]
			,@DealNameAr = [DealNameAr]
			,@FromValue = [FromValue]
			,@ToValue = [ToValue]
			,@Growth1 = [Growth1]
			,@Growth2 = [Growth2]
			,@Growth1Discount = [Growth1Discount]
			,@Growth2Discount = [Growth2Discount]
			,@Growth1Days = [Growth1Days]
			,@Growth2Days = [Growth2Days]
			,@DescAr = [DescAr]
			,@DescEn = [DescEn]
			,@Color = [Color]
			,@Icon = [Icon]
			,@DisplayOrder = [DisplayOrder]
			,@IsActive = [IsActive]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Deal]
			WHERE 
			[DealId] = SCOPE_IDENTITY()
			";

		internal static string ctprDeal_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DealId]
			,[DealCode]
			,[DealNameEn]
			,[DealNameAr]
			,[FromValue]
			,[ToValue]
			,[Growth1]
			,[Growth2]
			,[Growth1Discount]
			,[Growth2Discount]
			,[Growth1Days]
			,[Growth2Days]
			,[DescAr]
			,[DescEn]
			,[Color]
			,[Icon]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Deal]
			";

		internal static string ctprDeal_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Deal]
			";

		internal static string ctprDeal_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Deal]
			##CRITERIA##
			";

		internal static string ctprDeal_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DealId]
			,[DealCode]
			,[DealNameEn]
			,[DealNameAr]
			,[FromValue]
			,[ToValue]
			,[Growth1]
			,[Growth2]
			,[Growth1Discount]
			,[Growth2Discount]
			,[Growth1Days]
			,[Growth2Days]
			,[DescAr]
			,[DescEn]
			,[Color]
			,[Icon]
			,[DisplayOrder]
			,[IsActive]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Deal]
			##CRITERIA##
			";

		internal static string ctprDeal_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Deal]
			##CRITERIA##
			";

		internal static string ctprDeal_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Deal]
			SET
			[DealCode] = @DealCode
			,[DealNameEn] = @DealNameEn
			,[DealNameAr] = @DealNameAr
			,[FromValue] = @FromValue
			,[ToValue] = @ToValue
			,[Growth1] = @Growth1
			,[Growth2] = @Growth2
			,[Growth1Discount] = @Growth1Discount
			,[Growth2Discount] = @Growth2Discount
			,[Growth1Days] = @Growth1Days
			,[Growth2Days] = @Growth2Days
			,[DescAr] = @DescAr
			,[DescEn] = @DescEn
			,[Color] = @Color
			,[Icon] = @Icon
			,[DisplayOrder] = @DisplayOrder
			,[IsActive] = @IsActive
			,[CanEdit] = @CanEdit
			,[CanDelete] = @CanDelete
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[DealId] = @DealId
			SELECT 
			@DealId = [DealId]
			,@DealCode = [DealCode]
			,@DealNameEn = [DealNameEn]
			,@DealNameAr = [DealNameAr]
			,@FromValue = [FromValue]
			,@ToValue = [ToValue]
			,@Growth1 = [Growth1]
			,@Growth2 = [Growth2]
			,@Growth1Discount = [Growth1Discount]
			,@Growth2Discount = [Growth2Discount]
			,@Growth1Days = [Growth1Days]
			,@Growth2Days = [Growth2Days]
			,@DescAr = [DescAr]
			,@DescEn = [DescEn]
			,@Color = [Color]
			,@Icon = [Icon]
			,@DisplayOrder = [DisplayOrder]
			,@IsActive = [IsActive]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Deal]
			WHERE 
			[DealId] = @DealId
			";

	}
}
#endregion
