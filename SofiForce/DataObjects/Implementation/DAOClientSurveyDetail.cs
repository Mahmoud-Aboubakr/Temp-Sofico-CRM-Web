/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientSurveyDetail : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _clientDetailId;
		protected Int64? _clientServeyId;
		protected Int32? _surveyDetailId;
		#endregion

		#region class methods
		public DAOClientSurveyDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_Survey_Detail based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientSurveyDetail
		///</returns>
		///<parameters>
		///Int64? clientDetailId
		///</parameters>
		public static DAOClientSurveyDetail SelectOne(Int64? clientDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Survey_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientDetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)clientDetailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientSurveyDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientSurveyDetail();
					retObj._clientDetailId					 = Convert.IsDBNull(dt.Rows[0]["ClientDetailId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["ClientDetailId"];
					retObj._clientServeyId					 = Convert.IsDBNull(dt.Rows[0]["ClientServeyId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["ClientServeyId"];
					retObj._surveyDetailId					 = Convert.IsDBNull(dt.Rows[0]["SurveyDetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SurveyDetailId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_Survey_Detail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientDetailId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_clientDetailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Survey_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientSurveyDetail.
		///</returns>
		///<parameters>
		///Int64? clientServeyId
		///</parameters>
		public static IList<DAOClientSurveyDetail> SelectAllByClientServeyId(Int64? clientServeyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_SelectAllByClientServeyId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Survey_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientServeyId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)clientServeyId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientSurveyDetail> objList = new List<DAOClientSurveyDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientSurveyDetail retObj = new DAOClientSurveyDetail();
						retObj._clientDetailId					 = Convert.IsDBNull(row["ClientDetailId"]) ? (Int64?)null : (Int64?)row["ClientDetailId"];
						retObj._clientServeyId					 = Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"];
						retObj._surveyDetailId					 = Convert.IsDBNull(row["SurveyDetailId"]) ? (Int32?)null : (Int32?)row["SurveyDetailId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int64? clientServeyId
		///</parameters>
		public static Int32 SelectAllByClientServeyIdCount(Int64? clientServeyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_SelectAllByClientServeyIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientServeyId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)clientServeyId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Survey_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int64? clientServeyId
		///</parameters>
		public static void DeleteAllByClientServeyId(zSofiForceConn_TxConnectionProvider connectionProvider, Int64? clientServeyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_DeleteAllByClientServeyId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientServeyId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)clientServeyId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Survey_Detail based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientSurveyDetail.
		///</returns>
		///<parameters>
		///Int32? surveyDetailId
		///</parameters>
		public static IList<DAOClientSurveyDetail> SelectAllBySurveyDetailId(Int32? surveyDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_SelectAllBySurveyDetailId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Survey_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SurveyDetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)surveyDetailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientSurveyDetail> objList = new List<DAOClientSurveyDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientSurveyDetail retObj = new DAOClientSurveyDetail();
						retObj._clientDetailId					 = Convert.IsDBNull(row["ClientDetailId"]) ? (Int64?)null : (Int64?)row["ClientDetailId"];
						retObj._clientServeyId					 = Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"];
						retObj._surveyDetailId					 = Convert.IsDBNull(row["SurveyDetailId"]) ? (Int32?)null : (Int32?)row["SurveyDetailId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? surveyDetailId
		///</parameters>
		public static Int32 SelectAllBySurveyDetailIdCount(Int32? surveyDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_SelectAllBySurveyDetailIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SurveyDetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)surveyDetailId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Survey_Detail with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? surveyDetailId
		///</parameters>
		public static void DeleteAllBySurveyDetailId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? surveyDetailId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_DeleteAllBySurveyDetailId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SurveyDetailId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)surveyDetailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_Survey_Detail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientDetailId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _clientDetailId));
				command.Parameters.Add(CtSqlParameter.Get("@ClientServeyId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_clientServeyId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SurveyDetailId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_surveyDetailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_clientDetailId					 = Convert.IsDBNull(command.Parameters["@ClientDetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClientDetailId"].Value;
				_clientServeyId					 = Convert.IsDBNull(command.Parameters["@ClientServeyId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClientServeyId"].Value;
				_surveyDetailId					 = Convert.IsDBNull(command.Parameters["@SurveyDetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SurveyDetailId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_Survey_Detail
		///</Summary>
		///<returns>
		///IList-DAOClientSurveyDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientSurveyDetail> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Survey_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientSurveyDetail> objList = new List<DAOClientSurveyDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientSurveyDetail retObj = new DAOClientSurveyDetail();
						retObj._clientDetailId					 = Convert.IsDBNull(row["ClientDetailId"]) ? (Int64?)null : (Int64?)row["ClientDetailId"];
						retObj._clientServeyId					 = Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"];
						retObj._surveyDetailId					 = Convert.IsDBNull(row["SurveyDetailId"]) ? (Int32?)null : (Int32?)row["SurveyDetailId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_Survey_Detail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Survey_Detail_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Survey_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientDetailId"]) ? (Int64?)null : (Int64?)row["ClientDetailId"]);
						if (string.Compare(projection.Member, "ClientServeyId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"]);
						if (string.Compare(projection.Member, "SurveyDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["SurveyDetailId"]) ? (Int32?)null : (Int32?)row["SurveyDetailId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_Survey_Detail
		///</Summary>
		///<returns>
		///IList-DAOClientSurveyDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientSurveyDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Survey_Detail_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Survey_Detail");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientSurveyDetail> objList = new List<DAOClientSurveyDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientSurveyDetail retObj = new DAOClientSurveyDetail();
						retObj._clientDetailId					 = Convert.IsDBNull(row["ClientDetailId"]) ? (Int64?)null : (Int64?)row["ClientDetailId"];
						retObj._clientServeyId					 = Convert.IsDBNull(row["ClientServeyId"]) ? (Int64?)null : (Int64?)row["ClientServeyId"];
						retObj._surveyDetailId					 = Convert.IsDBNull(row["SurveyDetailId"]) ? (Int32?)null : (Int32?)row["SurveyDetailId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_Survey_Detail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Survey_Detail_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_Survey_Detail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Survey_Detail_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientDetailId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_clientDetailId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientServeyId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_clientServeyId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SurveyDetailId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_surveyDetailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_clientDetailId					 = Convert.IsDBNull(command.Parameters["@ClientDetailId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClientDetailId"].Value;
				_clientServeyId					 = Convert.IsDBNull(command.Parameters["@ClientServeyId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@ClientServeyId"].Value;
				_surveyDetailId					 = Convert.IsDBNull(command.Parameters["@SurveyDetailId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SurveyDetailId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? ClientDetailId
		{
			get
			{
				return _clientDetailId;
			}
			set
			{
				_clientDetailId = value;
			}
		}

		public Int64? ClientServeyId
		{
			get
			{
				return _clientServeyId;
			}
			set
			{
				_clientServeyId = value;
			}
		}

		public Int32? SurveyDetailId
		{
			get
			{
				return _surveyDetailId;
			}
			set
			{
				_surveyDetailId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_Survey_Detail_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ClientDetailId]
			,[ClientServeyId]
			,[SurveyDetailId]
			FROM [dbo].[Client_Survey_Detail]
			WHERE 
			[ClientDetailId] = @ClientDetailId
			";

		internal static string ctprClient_Survey_Detail_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_Survey_Detail]
			WHERE 
			[ClientDetailId] = @ClientDetailId
			";

		internal static string ctprClient_Survey_Detail_SelectAllByClientServeyId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientDetailId]
			,[ClientServeyId]
			,[SurveyDetailId]
			FROM [dbo].[Client_Survey_Detail]
			WHERE 
			[ClientServeyId] = @ClientServeyId OR ([ClientServeyId] IS NULL AND @ClientServeyId IS NULL)
			";

		internal static string ctprClient_Survey_Detail_SelectAllByClientServeyIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Survey_Detail]
			WHERE 
			[ClientServeyId] = @ClientServeyId OR ([ClientServeyId] IS NULL AND @ClientServeyId IS NULL)
			";

		internal static string ctprClient_Survey_Detail_DeleteAllByClientServeyId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Survey_Detail]
			WHERE 
			[ClientServeyId] = @ClientServeyId OR ([ClientServeyId] IS NULL AND @ClientServeyId IS NULL)
			";

		internal static string ctprClient_Survey_Detail_SelectAllBySurveyDetailId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientDetailId]
			,[ClientServeyId]
			,[SurveyDetailId]
			FROM [dbo].[Client_Survey_Detail]
			WHERE 
			[SurveyDetailId] = @SurveyDetailId OR ([SurveyDetailId] IS NULL AND @SurveyDetailId IS NULL)
			";

		internal static string ctprClient_Survey_Detail_SelectAllBySurveyDetailIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Survey_Detail]
			WHERE 
			[SurveyDetailId] = @SurveyDetailId OR ([SurveyDetailId] IS NULL AND @SurveyDetailId IS NULL)
			";

		internal static string ctprClient_Survey_Detail_DeleteAllBySurveyDetailId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Survey_Detail]
			WHERE 
			[SurveyDetailId] = @SurveyDetailId OR ([SurveyDetailId] IS NULL AND @SurveyDetailId IS NULL)
			";

		internal static string ctprClient_Survey_Detail_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_Survey_Detail]
			(
			[ClientServeyId]
			,[SurveyDetailId]
			)
			VALUES
			(
			@ClientServeyId
			,@SurveyDetailId
			)
			SELECT 
			@ClientDetailId = [ClientDetailId]
			,@ClientServeyId = [ClientServeyId]
			,@SurveyDetailId = [SurveyDetailId]
			FROM [dbo].[Client_Survey_Detail]
			WHERE 
			[ClientDetailId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_Survey_Detail_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientDetailId]
			,[ClientServeyId]
			,[SurveyDetailId]
			FROM [dbo].[Client_Survey_Detail]
			";

		internal static string ctprClient_Survey_Detail_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Survey_Detail]
			";

		internal static string ctprClient_Survey_Detail_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_Survey_Detail]
			##CRITERIA##
			";

		internal static string ctprClient_Survey_Detail_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientDetailId]
			,[ClientServeyId]
			,[SurveyDetailId]
			FROM [dbo].[Client_Survey_Detail]
			##CRITERIA##
			";

		internal static string ctprClient_Survey_Detail_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_Survey_Detail]
			##CRITERIA##
			";

		internal static string ctprClient_Survey_Detail_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_Survey_Detail]
			SET
			[ClientServeyId] = @ClientServeyId
			,[SurveyDetailId] = @SurveyDetailId
			WHERE 
			[ClientDetailId] = @ClientDetailId
			SELECT 
			@ClientDetailId = [ClientDetailId]
			,@ClientServeyId = [ClientServeyId]
			,@SurveyDetailId = [SurveyDetailId]
			FROM [dbo].[Client_Survey_Detail]
			WHERE 
			[ClientDetailId] = @ClientDetailId
			";

	}
}
#endregion
