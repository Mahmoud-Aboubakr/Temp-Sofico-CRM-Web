/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOItemQuotaByClientVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _itemId;
		protected string _itemCode;
		protected string _itemNameEn;
		protected string _itemNameAr;
		protected Int32? _vendorId;
		protected Int32? _clientId;
		protected Int32? _branchId;
		protected Int32? _quantity;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected DateTime? _fromDate;
		protected DateTime? _toDate;
		protected Int32? _quotaQty;
		protected string _invoiceCode;
		protected DateTime? _salesDate;
		protected Int32? _salesOrderStatusId;
		#endregion

		#region class methods
		public DAOItemQuotaByClientVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Item_Quota_ByClientVw
		///</Summary>
		///<returns>
		///IList-DAOItemQuotaByClientVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOItemQuotaByClientVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_Quota_ByClientVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item_Quota_ByClientVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItemQuotaByClientVw> objList = new List<DAOItemQuotaByClientVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItemQuotaByClientVw retObj = new DAOItemQuotaByClientVw();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._fromDate					 = Convert.IsDBNull(row["FromDate"]) ? (DateTime?)null : (DateTime?)row["FromDate"];
						retObj._toDate					 = Convert.IsDBNull(row["ToDate"]) ? (DateTime?)null : (DateTime?)row["ToDate"];
						retObj._quotaQty					 = Convert.IsDBNull(row["QuotaQty"]) ? (Int32?)null : (Int32?)row["QuotaQty"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_Quota_ByClientVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiItem_Quota_ByClientVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_Quota_ByClientVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item_Quota_ByClientVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ItemId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"]);
						if (string.Compare(projection.Member, "ItemCode", true) == 0) lst.Add(Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"]);
						if (string.Compare(projection.Member, "ItemNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"]);
						if (string.Compare(projection.Member, "ItemNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"]);
						if (string.Compare(projection.Member, "VendorId", true) == 0) lst.Add(Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "Quantity", true) == 0) lst.Add(Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"]);
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "FromDate", true) == 0) lst.Add(Convert.IsDBNull(row["FromDate"]) ? (DateTime?)null : (DateTime?)row["FromDate"]);
						if (string.Compare(projection.Member, "ToDate", true) == 0) lst.Add(Convert.IsDBNull(row["ToDate"]) ? (DateTime?)null : (DateTime?)row["ToDate"]);
						if (string.Compare(projection.Member, "QuotaQty", true) == 0) lst.Add(Convert.IsDBNull(row["QuotaQty"]) ? (Int32?)null : (Int32?)row["QuotaQty"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "SalesDate", true) == 0) lst.Add(Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"]);
						if (string.Compare(projection.Member, "SalesOrderStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Item_Quota_ByClientVw
		///</Summary>
		///<returns>
		///IList-DAOItemQuotaByClientVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOItemQuotaByClientVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_Quota_ByClientVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item_Quota_ByClientVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItemQuotaByClientVw> objList = new List<DAOItemQuotaByClientVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItemQuotaByClientVw retObj = new DAOItemQuotaByClientVw();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._fromDate					 = Convert.IsDBNull(row["FromDate"]) ? (DateTime?)null : (DateTime?)row["FromDate"];
						retObj._toDate					 = Convert.IsDBNull(row["ToDate"]) ? (DateTime?)null : (DateTime?)row["ToDate"];
						retObj._quotaQty					 = Convert.IsDBNull(row["QuotaQty"]) ? (Int32?)null : (Int32?)row["QuotaQty"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Item_Quota_ByClientVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_Quota_ByClientVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ItemId
		{
			get
			{
				return _itemId;
			}
			set
			{
				_itemId = value;
			}
		}

		public string ItemCode
		{
			get
			{
				return _itemCode;
			}
			set
			{
				_itemCode = value;
			}
		}

		public string ItemNameEn
		{
			get
			{
				return _itemNameEn;
			}
			set
			{
				_itemNameEn = value;
			}
		}

		public string ItemNameAr
		{
			get
			{
				return _itemNameAr;
			}
			set
			{
				_itemNameAr = value;
			}
		}

		public Int32? VendorId
		{
			get
			{
				return _vendorId;
			}
			set
			{
				_vendorId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity = value;
			}
		}

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public DateTime? FromDate
		{
			get
			{
				return _fromDate;
			}
			set
			{
				_fromDate = value;
			}
		}

		public DateTime? ToDate
		{
			get
			{
				return _toDate;
			}
			set
			{
				_toDate = value;
			}
		}

		public Int32? QuotaQty
		{
			get
			{
				return _quotaQty;
			}
			set
			{
				_quotaQty = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public DateTime? SalesDate
		{
			get
			{
				return _salesDate;
			}
			set
			{
				_salesDate = value;
			}
		}

		public Int32? SalesOrderStatusId
		{
			get
			{
				return _salesOrderStatusId;
			}
			set
			{
				_salesOrderStatusId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprItem_Quota_ByClientVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ItemId]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[VendorId]
			,[ClientId]
			,[BranchId]
			,[Quantity]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[FromDate]
			,[ToDate]
			,[QuotaQty]
			,[InvoiceCode]
			,[SalesDate]
			,[SalesOrderStatusId]
			FROM [dbo].[Item_Quota_ByClientVw]
			";

		internal static string ctprItem_Quota_ByClientVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Item_Quota_ByClientVw]
			";

		internal static string ctprItem_Quota_ByClientVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Item_Quota_ByClientVw]
			##CRITERIA##
			";

		internal static string ctprItem_Quota_ByClientVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ItemId]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[VendorId]
			,[ClientId]
			,[BranchId]
			,[Quantity]
			,[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[FromDate]
			,[ToDate]
			,[QuotaQty]
			,[InvoiceCode]
			,[SalesDate]
			,[SalesOrderStatusId]
			FROM [dbo].[Item_Quota_ByClientVw]
			##CRITERIA##
			";

		internal static string ctprItem_Quota_ByClientVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Item_Quota_ByClientVw]
			##CRITERIA##
			";

	}
}
#endregion
