/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientAddress : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _addressId;
		protected Int32? _clientId;
		protected bool? _isDefault;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected string _address;
		protected string _landmark;
		protected string _building;
		protected string _floor;
		protected string _property;
		protected string _email;
		protected string _phone;
		protected double? _lat;
		protected double? _lng;
		protected bool? _needValidation;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOClientAddress()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_Address based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientAddress
		///</returns>
		///<parameters>
		///Int32? addressId
		///</parameters>
		public static DAOClientAddress SelectOne(Int32? addressId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Address");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AddressId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)addressId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientAddress retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientAddress();
					retObj._addressId					 = Convert.IsDBNull(dt.Rows[0]["AddressId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AddressId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._isDefault					 = Convert.IsDBNull(dt.Rows[0]["IsDefault"]) ? (bool?)null : (bool?)dt.Rows[0]["IsDefault"];
					retObj._governerateId					 = Convert.IsDBNull(dt.Rows[0]["GovernerateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["GovernerateId"];
					retObj._cityId					 = Convert.IsDBNull(dt.Rows[0]["CityId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CityId"];
					retObj._address					 = Convert.IsDBNull(dt.Rows[0]["Address"]) ? null : (string)dt.Rows[0]["Address"];
					retObj._landmark					 = Convert.IsDBNull(dt.Rows[0]["Landmark"]) ? null : (string)dt.Rows[0]["Landmark"];
					retObj._building					 = Convert.IsDBNull(dt.Rows[0]["Building"]) ? null : (string)dt.Rows[0]["Building"];
					retObj._floor					 = Convert.IsDBNull(dt.Rows[0]["Floor"]) ? null : (string)dt.Rows[0]["Floor"];
					retObj._property					 = Convert.IsDBNull(dt.Rows[0]["Property"]) ? null : (string)dt.Rows[0]["Property"];
					retObj._email					 = Convert.IsDBNull(dt.Rows[0]["Email"]) ? null : (string)dt.Rows[0]["Email"];
					retObj._phone					 = Convert.IsDBNull(dt.Rows[0]["Phone"]) ? null : (string)dt.Rows[0]["Phone"];
					retObj._lat					 = Convert.IsDBNull(dt.Rows[0]["Lat"]) ? (double?)null : (double?)dt.Rows[0]["Lat"];
					retObj._lng					 = Convert.IsDBNull(dt.Rows[0]["Lng"]) ? (double?)null : (double?)dt.Rows[0]["Lng"];
					retObj._needValidation					 = Convert.IsDBNull(dt.Rows[0]["NeedValidation"]) ? (bool?)null : (bool?)dt.Rows[0]["NeedValidation"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_Address based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AddressId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_addressId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Address based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientAddress.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOClientAddress> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Address");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientAddress> objList = new List<DAOClientAddress>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientAddress retObj = new DAOClientAddress();
						retObj._addressId					 = Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._isDefault					 = Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Address with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Address based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientAddress.
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static IList<DAOClientAddress> SelectAllByGovernerateId(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAllByGovernerateId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Address");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientAddress> objList = new List<DAOClientAddress>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientAddress retObj = new DAOClientAddress();
						retObj._addressId					 = Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._isDefault					 = Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? governerateId
		///</parameters>
		public static Int32 SelectAllByGovernerateIdCount(Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAllByGovernerateIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Address with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId
		///</parameters>
		public static void DeleteAllByGovernerateId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? governerateId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_DeleteAllByGovernerateId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)governerateId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Address based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientAddress.
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static IList<DAOClientAddress> SelectAllByCityId(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAllByCityId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Address");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientAddress> objList = new List<DAOClientAddress>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientAddress retObj = new DAOClientAddress();
						retObj._addressId					 = Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._isDefault					 = Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? cityId
		///</parameters>
		public static Int32 SelectAllByCityIdCount(Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAllByCityIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Address with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId
		///</parameters>
		public static void DeleteAllByCityId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? cityId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_DeleteAllByCityId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)cityId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_Address
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AddressId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _addressId));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsDefault", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isDefault?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Landmark", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_landmark?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Building", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_building?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Floor", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_floor?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Property", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_property?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Email", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_email?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lat", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lat?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lng", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lng?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NeedValidation", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_needValidation?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_addressId					 = Convert.IsDBNull(command.Parameters["@AddressId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AddressId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_isDefault					 = Convert.IsDBNull(command.Parameters["@IsDefault"].Value) ? (bool?)null : (bool?)command.Parameters["@IsDefault"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_landmark					 = Convert.IsDBNull(command.Parameters["@Landmark"].Value) ? null : (string)command.Parameters["@Landmark"].Value;
				_building					 = Convert.IsDBNull(command.Parameters["@Building"].Value) ? null : (string)command.Parameters["@Building"].Value;
				_floor					 = Convert.IsDBNull(command.Parameters["@Floor"].Value) ? null : (string)command.Parameters["@Floor"].Value;
				_property					 = Convert.IsDBNull(command.Parameters["@Property"].Value) ? null : (string)command.Parameters["@Property"].Value;
				_email					 = Convert.IsDBNull(command.Parameters["@Email"].Value) ? null : (string)command.Parameters["@Email"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_lat					 = Convert.IsDBNull(command.Parameters["@Lat"].Value) ? (double?)null : (double?)command.Parameters["@Lat"].Value;
				_lng					 = Convert.IsDBNull(command.Parameters["@Lng"].Value) ? (double?)null : (double?)command.Parameters["@Lng"].Value;
				_needValidation					 = Convert.IsDBNull(command.Parameters["@NeedValidation"].Value) ? (bool?)null : (bool?)command.Parameters["@NeedValidation"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_Address
		///</Summary>
		///<returns>
		///IList-DAOClientAddress.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientAddress> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Address");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientAddress> objList = new List<DAOClientAddress>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientAddress retObj = new DAOClientAddress();
						retObj._addressId					 = Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._isDefault					 = Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_Address
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Address_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Address");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "AddressId", true) == 0) lst.Add(Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "IsDefault", true) == 0) lst.Add(Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "Landmark", true) == 0) lst.Add(Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"]);
						if (string.Compare(projection.Member, "Building", true) == 0) lst.Add(Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"]);
						if (string.Compare(projection.Member, "Floor", true) == 0) lst.Add(Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"]);
						if (string.Compare(projection.Member, "Property", true) == 0) lst.Add(Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"]);
						if (string.Compare(projection.Member, "Email", true) == 0) lst.Add(Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "Lat", true) == 0) lst.Add(Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"]);
						if (string.Compare(projection.Member, "Lng", true) == 0) lst.Add(Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"]);
						if (string.Compare(projection.Member, "NeedValidation", true) == 0) lst.Add(Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_Address
		///</Summary>
		///<returns>
		///IList-DAOClientAddress.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientAddress> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Address_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Address");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientAddress> objList = new List<DAOClientAddress>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientAddress retObj = new DAOClientAddress();
						retObj._addressId					 = Convert.IsDBNull(row["AddressId"]) ? (Int32?)null : (Int32?)row["AddressId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._isDefault					 = Convert.IsDBNull(row["IsDefault"]) ? (bool?)null : (bool?)row["IsDefault"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._landmark					 = Convert.IsDBNull(row["Landmark"]) ? null : (string)row["Landmark"];
						retObj._building					 = Convert.IsDBNull(row["Building"]) ? null : (string)row["Building"];
						retObj._floor					 = Convert.IsDBNull(row["Floor"]) ? null : (string)row["Floor"];
						retObj._property					 = Convert.IsDBNull(row["Property"]) ? null : (string)row["Property"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._lat					 = Convert.IsDBNull(row["Lat"]) ? (double?)null : (double?)row["Lat"];
						retObj._lng					 = Convert.IsDBNull(row["Lng"]) ? (double?)null : (double?)row["Lng"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_Address
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Address_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_Address based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Address_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AddressId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_addressId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsDefault", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isDefault?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@GovernerateId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_governerateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CityId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cityId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Landmark", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_landmark?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Building", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_building?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Floor", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_floor?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Property", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_property?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Email", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_email?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Phone", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lat", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lat?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Lng", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_lng?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NeedValidation", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_needValidation?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_addressId					 = Convert.IsDBNull(command.Parameters["@AddressId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AddressId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_isDefault					 = Convert.IsDBNull(command.Parameters["@IsDefault"].Value) ? (bool?)null : (bool?)command.Parameters["@IsDefault"].Value;
				_governerateId					 = Convert.IsDBNull(command.Parameters["@GovernerateId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@GovernerateId"].Value;
				_cityId					 = Convert.IsDBNull(command.Parameters["@CityId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CityId"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_landmark					 = Convert.IsDBNull(command.Parameters["@Landmark"].Value) ? null : (string)command.Parameters["@Landmark"].Value;
				_building					 = Convert.IsDBNull(command.Parameters["@Building"].Value) ? null : (string)command.Parameters["@Building"].Value;
				_floor					 = Convert.IsDBNull(command.Parameters["@Floor"].Value) ? null : (string)command.Parameters["@Floor"].Value;
				_property					 = Convert.IsDBNull(command.Parameters["@Property"].Value) ? null : (string)command.Parameters["@Property"].Value;
				_email					 = Convert.IsDBNull(command.Parameters["@Email"].Value) ? null : (string)command.Parameters["@Email"].Value;
				_phone					 = Convert.IsDBNull(command.Parameters["@Phone"].Value) ? null : (string)command.Parameters["@Phone"].Value;
				_lat					 = Convert.IsDBNull(command.Parameters["@Lat"].Value) ? (double?)null : (double?)command.Parameters["@Lat"].Value;
				_lng					 = Convert.IsDBNull(command.Parameters["@Lng"].Value) ? (double?)null : (double?)command.Parameters["@Lng"].Value;
				_needValidation					 = Convert.IsDBNull(command.Parameters["@NeedValidation"].Value) ? (bool?)null : (bool?)command.Parameters["@NeedValidation"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? AddressId
		{
			get
			{
				return _addressId;
			}
			set
			{
				_addressId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public bool? IsDefault
		{
			get
			{
				return _isDefault;
			}
			set
			{
				_isDefault = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public string Landmark
		{
			get
			{
				return _landmark;
			}
			set
			{
				_landmark = value;
			}
		}

		public string Building
		{
			get
			{
				return _building;
			}
			set
			{
				_building = value;
			}
		}

		public string Floor
		{
			get
			{
				return _floor;
			}
			set
			{
				_floor = value;
			}
		}

		public string Property
		{
			get
			{
				return _property;
			}
			set
			{
				_property = value;
			}
		}

		public string Email
		{
			get
			{
				return _email;
			}
			set
			{
				_email = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public double? Lat
		{
			get
			{
				return _lat;
			}
			set
			{
				_lat = value;
			}
		}

		public double? Lng
		{
			get
			{
				return _lng;
			}
			set
			{
				_lng = value;
			}
		}

		public bool? NeedValidation
		{
			get
			{
				return _needValidation;
			}
			set
			{
				_needValidation = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_Address_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lat]
			,[Lng]
			,[NeedValidation]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Address]
			WHERE 
			[AddressId] = @AddressId
			";

		internal static string ctprClient_Address_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_Address]
			WHERE 
			[AddressId] = @AddressId
			";

		internal static string ctprClient_Address_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lat]
			,[Lng]
			,[NeedValidation]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Address]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Address_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Address]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Address_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Address]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Address_SelectAllByGovernerateId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lat]
			,[Lng]
			,[NeedValidation]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Address]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprClient_Address_SelectAllByGovernerateIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Address]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprClient_Address_DeleteAllByGovernerateId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Address]
			WHERE 
			[GovernerateId] = @GovernerateId OR ([GovernerateId] IS NULL AND @GovernerateId IS NULL)
			";

		internal static string ctprClient_Address_SelectAllByCityId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lat]
			,[Lng]
			,[NeedValidation]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Address]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprClient_Address_SelectAllByCityIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Address]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprClient_Address_DeleteAllByCityId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Address]
			WHERE 
			[CityId] = @CityId OR ([CityId] IS NULL AND @CityId IS NULL)
			";

		internal static string ctprClient_Address_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_Address]
			(
			[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lat]
			,[Lng]
			,[NeedValidation]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@ClientId
			,@IsDefault
			,@GovernerateId
			,@CityId
			,@Address
			,@Landmark
			,@Building
			,@Floor
			,@Property
			,@Email
			,@Phone
			,@Lat
			,@Lng
			,@NeedValidation
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@AddressId = [AddressId]
			,@ClientId = [ClientId]
			,@IsDefault = [IsDefault]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@Address = [Address]
			,@Landmark = [Landmark]
			,@Building = [Building]
			,@Floor = [Floor]
			,@Property = [Property]
			,@Email = [Email]
			,@Phone = [Phone]
			,@Lat = [Lat]
			,@Lng = [Lng]
			,@NeedValidation = [NeedValidation]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Address]
			WHERE 
			[AddressId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_Address_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lat]
			,[Lng]
			,[NeedValidation]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Address]
			";

		internal static string ctprClient_Address_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Address]
			";

		internal static string ctprClient_Address_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_Address]
			##CRITERIA##
			";

		internal static string ctprClient_Address_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[AddressId]
			,[ClientId]
			,[IsDefault]
			,[GovernerateId]
			,[CityId]
			,[Address]
			,[Landmark]
			,[Building]
			,[Floor]
			,[Property]
			,[Email]
			,[Phone]
			,[Lat]
			,[Lng]
			,[NeedValidation]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Address]
			##CRITERIA##
			";

		internal static string ctprClient_Address_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_Address]
			##CRITERIA##
			";

		internal static string ctprClient_Address_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_Address]
			SET
			[ClientId] = @ClientId
			,[IsDefault] = @IsDefault
			,[GovernerateId] = @GovernerateId
			,[CityId] = @CityId
			,[Address] = @Address
			,[Landmark] = @Landmark
			,[Building] = @Building
			,[Floor] = @Floor
			,[Property] = @Property
			,[Email] = @Email
			,[Phone] = @Phone
			,[Lat] = @Lat
			,[Lng] = @Lng
			,[NeedValidation] = @NeedValidation
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[AddressId] = @AddressId
			SELECT 
			@AddressId = [AddressId]
			,@ClientId = [ClientId]
			,@IsDefault = [IsDefault]
			,@GovernerateId = [GovernerateId]
			,@CityId = [CityId]
			,@Address = [Address]
			,@Landmark = [Landmark]
			,@Building = [Building]
			,@Floor = [Floor]
			,@Property = [Property]
			,@Email = [Email]
			,@Phone = [Phone]
			,@Lat = [Lat]
			,@Lng = [Lng]
			,@NeedValidation = [NeedValidation]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Address]
			WHERE 
			[AddressId] = @AddressId
			";

	}
}
#endregion
