/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOSalesOrder : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _salesId;
		protected string _salesCode;
		protected Int32? _salesOrderTypeId;
		protected Int32? _clientId;
		protected Int32? _branchId;
		protected Int32? _agentId;
		protected Int32? _representativeId;
		protected Int32? _storeId;
		protected Int32? _priorityTypeId;
		protected Int32? _paymentTermId;
		protected DateTime? _salesDate;
		protected DateTime? _salesTime;
		protected Int32? _salesOrderStatusId;
		protected Int32? _salesOrderSourceId;
		protected Int32? _salesChannelId;
		protected Int32? _salesPoolId;
		protected bool? _isOpened;
		protected decimal? _openValue;
		protected double? _latitude;
		protected double? _longitude;
		protected decimal? _itemTotal;
		protected decimal? _itemDiscountTotal;
		protected decimal? _taxTotal;
		protected decimal? _cashDiscountTotal;
		protected Int32? _customDiscountTypeId;
		protected decimal? _customDiscountValue;
		protected decimal? _customDiscountTotal;
		protected decimal? _deliveryTotal;
		protected decimal? _netTotal;
		protected string _notes;
		protected Int32? _invoiceRetry;
		protected bool? _hasError;
		protected bool? _isInvoiced;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		protected DateTime? _createDate;
		protected Int64? _recId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected Int64? _salesPerenId;
		protected bool? _inprogress;
		protected bool? _isBackoffice;
		protected bool? _isDeleted;
		#endregion

		#region class methods
		public DAOSalesOrder()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table SalesOrder based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSalesOrder
		///</returns>
		///<parameters>
		///Int64? salesId
		///</parameters>
		public static DAOSalesOrder SelectOne(Int64? salesId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)salesId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOSalesOrder retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSalesOrder();
					retObj._salesId					 = Convert.IsDBNull(dt.Rows[0]["SalesId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesId"];
					retObj._salesCode					 = Convert.IsDBNull(dt.Rows[0]["SalesCode"]) ? null : (string)dt.Rows[0]["SalesCode"];
					retObj._salesOrderTypeId					 = Convert.IsDBNull(dt.Rows[0]["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesOrderTypeId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._branchId					 = Convert.IsDBNull(dt.Rows[0]["BranchId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BranchId"];
					retObj._agentId					 = Convert.IsDBNull(dt.Rows[0]["AgentId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AgentId"];
					retObj._representativeId					 = Convert.IsDBNull(dt.Rows[0]["RepresentativeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RepresentativeId"];
					retObj._storeId					 = Convert.IsDBNull(dt.Rows[0]["StoreId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["StoreId"];
					retObj._priorityTypeId					 = Convert.IsDBNull(dt.Rows[0]["PriorityTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PriorityTypeId"];
					retObj._paymentTermId					 = Convert.IsDBNull(dt.Rows[0]["PaymentTermId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PaymentTermId"];
					retObj._salesDate					 = Convert.IsDBNull(dt.Rows[0]["SalesDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["SalesDate"];
					retObj._salesTime					 = Convert.IsDBNull(dt.Rows[0]["SalesTime"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["SalesTime"];
					retObj._salesOrderStatusId					 = Convert.IsDBNull(dt.Rows[0]["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesOrderStatusId"];
					retObj._salesOrderSourceId					 = Convert.IsDBNull(dt.Rows[0]["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesOrderSourceId"];
					retObj._salesChannelId					 = Convert.IsDBNull(dt.Rows[0]["SalesChannelId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesChannelId"];
					retObj._salesPoolId					 = Convert.IsDBNull(dt.Rows[0]["SalesPoolId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SalesPoolId"];
					retObj._isOpened					 = Convert.IsDBNull(dt.Rows[0]["IsOpened"]) ? (bool?)null : (bool?)dt.Rows[0]["IsOpened"];
					retObj._openValue					 = Convert.IsDBNull(dt.Rows[0]["OpenValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["OpenValue"];
					retObj._latitude					 = Convert.IsDBNull(dt.Rows[0]["Latitude"]) ? (double?)null : (double?)dt.Rows[0]["Latitude"];
					retObj._longitude					 = Convert.IsDBNull(dt.Rows[0]["Longitude"]) ? (double?)null : (double?)dt.Rows[0]["Longitude"];
					retObj._itemTotal					 = Convert.IsDBNull(dt.Rows[0]["ItemTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ItemTotal"];
					retObj._itemDiscountTotal					 = Convert.IsDBNull(dt.Rows[0]["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ItemDiscountTotal"];
					retObj._taxTotal					 = Convert.IsDBNull(dt.Rows[0]["TaxTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["TaxTotal"];
					retObj._cashDiscountTotal					 = Convert.IsDBNull(dt.Rows[0]["CashDiscountTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CashDiscountTotal"];
					retObj._customDiscountTypeId					 = Convert.IsDBNull(dt.Rows[0]["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CustomDiscountTypeId"];
					retObj._customDiscountValue					 = Convert.IsDBNull(dt.Rows[0]["CustomDiscountValue"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CustomDiscountValue"];
					retObj._customDiscountTotal					 = Convert.IsDBNull(dt.Rows[0]["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CustomDiscountTotal"];
					retObj._deliveryTotal					 = Convert.IsDBNull(dt.Rows[0]["DeliveryTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["DeliveryTotal"];
					retObj._netTotal					 = Convert.IsDBNull(dt.Rows[0]["NetTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["NetTotal"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
					retObj._invoiceRetry					 = Convert.IsDBNull(dt.Rows[0]["InvoiceRetry"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InvoiceRetry"];
					retObj._hasError					 = Convert.IsDBNull(dt.Rows[0]["HasError"]) ? (bool?)null : (bool?)dt.Rows[0]["HasError"];
					retObj._isInvoiced					 = Convert.IsDBNull(dt.Rows[0]["IsInvoiced"]) ? (bool?)null : (bool?)dt.Rows[0]["IsInvoiced"];
					retObj._invoiceCode					 = Convert.IsDBNull(dt.Rows[0]["InvoiceCode"]) ? null : (string)dt.Rows[0]["InvoiceCode"];
					retObj._invoiceDate					 = Convert.IsDBNull(dt.Rows[0]["InvoiceDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["InvoiceDate"];
					retObj._createDate					 = Convert.IsDBNull(dt.Rows[0]["CreateDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CreateDate"];
					retObj._recId					 = Convert.IsDBNull(dt.Rows[0]["RecId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["RecId"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._salesPerenId					 = Convert.IsDBNull(dt.Rows[0]["SalesPerenId"]) ? (Int64?)null : (Int64?)dt.Rows[0]["SalesPerenId"];
					retObj._inprogress					 = Convert.IsDBNull(dt.Rows[0]["Inprogress"]) ? (bool?)null : (bool?)dt.Rows[0]["Inprogress"];
					retObj._isBackoffice					 = Convert.IsDBNull(dt.Rows[0]["IsBackoffice"]) ? (bool?)null : (bool?)dt.Rows[0]["IsBackoffice"];
					retObj._isDeleted					 = Convert.IsDBNull(dt.Rows[0]["IsDeleted"]) ? (bool?)null : (bool?)dt.Rows[0]["IsDeleted"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table SalesOrder based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? salesOrderTypeId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllBySalesOrderTypeId(Int32? salesOrderTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesOrderTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesOrderTypeId
		///</parameters>
		public static Int32 SelectAllBySalesOrderTypeIdCount(Int32? salesOrderTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesOrderTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderTypeId
		///</parameters>
		public static void DeleteAllBySalesOrderTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllBySalesOrderTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByBranchId(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByBranchId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? branchId
		///</parameters>
		public static Int32 SelectAllByBranchIdCount(Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByBranchIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId
		///</parameters>
		public static void DeleteAllByBranchId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? branchId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByBranchId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)branchId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? agentId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByAgentId(Int32? agentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByAgentId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)agentId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? agentId
		///</parameters>
		public static Int32 SelectAllByAgentIdCount(Int32? agentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByAgentIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)agentId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? agentId
		///</parameters>
		public static void DeleteAllByAgentId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? agentId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByAgentId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)agentId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByRepresentativeId(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? representativeId
		///</parameters>
		public static Int32 SelectAllByRepresentativeIdCount(Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByRepresentativeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId
		///</parameters>
		public static void DeleteAllByRepresentativeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? representativeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByRepresentativeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)representativeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? storeId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByStoreId(Int32? storeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByStoreId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? storeId
		///</parameters>
		public static Int32 SelectAllByStoreIdCount(Int32? storeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByStoreIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? storeId
		///</parameters>
		public static void DeleteAllByStoreId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? storeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByStoreId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)storeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? priorityTypeId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByPriorityTypeId(Int32? priorityTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByPriorityTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? priorityTypeId
		///</parameters>
		public static Int32 SelectAllByPriorityTypeIdCount(Int32? priorityTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByPriorityTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? priorityTypeId
		///</parameters>
		public static void DeleteAllByPriorityTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? priorityTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByPriorityTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PriorityTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)priorityTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? paymentTermId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByPaymentTermId(Int32? paymentTermId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByPaymentTermId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentTermId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? paymentTermId
		///</parameters>
		public static Int32 SelectAllByPaymentTermIdCount(Int32? paymentTermId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByPaymentTermIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentTermId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? paymentTermId
		///</parameters>
		public static void DeleteAllByPaymentTermId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? paymentTermId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByPaymentTermId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)paymentTermId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? salesOrderStatusId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllBySalesOrderStatusId(Int32? salesOrderStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesOrderStatusId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesOrderStatusId
		///</parameters>
		public static Int32 SelectAllBySalesOrderStatusIdCount(Int32? salesOrderStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesOrderStatusIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderStatusId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderStatusId
		///</parameters>
		public static void DeleteAllBySalesOrderStatusId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderStatusId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllBySalesOrderStatusId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderStatusId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? salesOrderSourceId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllBySalesOrderSourceId(Int32? salesOrderSourceId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesOrderSourceId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderSourceId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderSourceId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesOrderSourceId
		///</parameters>
		public static Int32 SelectAllBySalesOrderSourceIdCount(Int32? salesOrderSourceId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesOrderSourceIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderSourceId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderSourceId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderSourceId
		///</parameters>
		public static void DeleteAllBySalesOrderSourceId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesOrderSourceId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllBySalesOrderSourceId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderSourceId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesOrderSourceId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? salesChannelId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllBySalesChannelId(Int32? salesChannelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesChannelId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesChannelId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesChannelId
		///</parameters>
		public static Int32 SelectAllBySalesChannelIdCount(Int32? salesChannelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesChannelIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesChannelId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesChannelId
		///</parameters>
		public static void DeleteAllBySalesChannelId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesChannelId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllBySalesChannelId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesChannelId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? salesPoolId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllBySalesPoolId(Int32? salesPoolId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesPoolId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesPoolId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? salesPoolId
		///</parameters>
		public static Int32 SelectAllBySalesPoolIdCount(Int32? salesPoolId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllBySalesPoolIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesPoolId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesPoolId
		///</parameters>
		public static void DeleteAllBySalesPoolId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? salesPoolId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllBySalesPoolId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)salesPoolId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table SalesOrder based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///Int32? customDiscountTypeId
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByCustomDiscountTypeId(Int32? customDiscountTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByCustomDiscountTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)customDiscountTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? customDiscountTypeId
		///</parameters>
		public static Int32 SelectAllByCustomDiscountTypeIdCount(Int32? customDiscountTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllByCustomDiscountTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)customDiscountTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table SalesOrder with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? customDiscountTypeId
		///</parameters>
		public static void DeleteAllByCustomDiscountTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? customDiscountTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_DeleteAllByCustomDiscountTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)customDiscountTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table SalesOrder
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _salesId));
				command.Parameters.Add(CtSqlParameter.Get("@SalesCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_agentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_storeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PriorityTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priorityTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_paymentTermId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderSourceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderSourceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesChannelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesPoolId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsOpened", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isOpened?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OpenValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_openValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_itemTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_itemDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_cashDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_customDiscountTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_customDiscountValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_customDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DeliveryTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_deliveryTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NetTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_netTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceRetry", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceRetry?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HasError", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_hasError?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsInvoiced", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isInvoiced?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CreateDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_createDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesPerenId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesPerenId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Inprogress", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inprogress?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsBackoffice", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isBackoffice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsDeleted", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isDeleted?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_salesCode					 = Convert.IsDBNull(command.Parameters["@SalesCode"].Value) ? null : (string)command.Parameters["@SalesCode"].Value;
				_salesOrderTypeId					 = Convert.IsDBNull(command.Parameters["@SalesOrderTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderTypeId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_agentId					 = Convert.IsDBNull(command.Parameters["@AgentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AgentId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_storeId					 = Convert.IsDBNull(command.Parameters["@StoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreId"].Value;
				_priorityTypeId					 = Convert.IsDBNull(command.Parameters["@PriorityTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PriorityTypeId"].Value;
				_paymentTermId					 = Convert.IsDBNull(command.Parameters["@PaymentTermId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PaymentTermId"].Value;
				_salesDate					 = Convert.IsDBNull(command.Parameters["@SalesDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@SalesDate"].Value;
				_salesTime					 = Convert.IsDBNull(command.Parameters["@SalesTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@SalesTime"].Value;
				_salesOrderStatusId					 = Convert.IsDBNull(command.Parameters["@SalesOrderStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderStatusId"].Value;
				_salesOrderSourceId					 = Convert.IsDBNull(command.Parameters["@SalesOrderSourceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderSourceId"].Value;
				_salesChannelId					 = Convert.IsDBNull(command.Parameters["@SalesChannelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesChannelId"].Value;
				_salesPoolId					 = Convert.IsDBNull(command.Parameters["@SalesPoolId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesPoolId"].Value;
				_isOpened					 = Convert.IsDBNull(command.Parameters["@IsOpened"].Value) ? (bool?)null : (bool?)command.Parameters["@IsOpened"].Value;
				_openValue					 = Convert.IsDBNull(command.Parameters["@OpenValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@OpenValue"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_itemTotal					 = Convert.IsDBNull(command.Parameters["@ItemTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ItemTotal"].Value;
				_itemDiscountTotal					 = Convert.IsDBNull(command.Parameters["@ItemDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ItemDiscountTotal"].Value;
				_taxTotal					 = Convert.IsDBNull(command.Parameters["@TaxTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxTotal"].Value;
				_cashDiscountTotal					 = Convert.IsDBNull(command.Parameters["@CashDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CashDiscountTotal"].Value;
				_customDiscountTypeId					 = Convert.IsDBNull(command.Parameters["@CustomDiscountTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CustomDiscountTypeId"].Value;
				_customDiscountValue					 = Convert.IsDBNull(command.Parameters["@CustomDiscountValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CustomDiscountValue"].Value;
				_customDiscountTotal					 = Convert.IsDBNull(command.Parameters["@CustomDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CustomDiscountTotal"].Value;
				_deliveryTotal					 = Convert.IsDBNull(command.Parameters["@DeliveryTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DeliveryTotal"].Value;
				_netTotal					 = Convert.IsDBNull(command.Parameters["@NetTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@NetTotal"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_invoiceRetry					 = Convert.IsDBNull(command.Parameters["@InvoiceRetry"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceRetry"].Value;
				_hasError					 = Convert.IsDBNull(command.Parameters["@HasError"].Value) ? (bool?)null : (bool?)command.Parameters["@HasError"].Value;
				_isInvoiced					 = Convert.IsDBNull(command.Parameters["@IsInvoiced"].Value) ? (bool?)null : (bool?)command.Parameters["@IsInvoiced"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;
				_createDate					 = Convert.IsDBNull(command.Parameters["@CreateDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CreateDate"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_salesPerenId					 = Convert.IsDBNull(command.Parameters["@SalesPerenId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesPerenId"].Value;
				_inprogress					 = Convert.IsDBNull(command.Parameters["@Inprogress"].Value) ? (bool?)null : (bool?)command.Parameters["@Inprogress"].Value;
				_isBackoffice					 = Convert.IsDBNull(command.Parameters["@IsBackoffice"].Value) ? (bool?)null : (bool?)command.Parameters["@IsBackoffice"].Value;
				_isDeleted					 = Convert.IsDBNull(command.Parameters["@IsDeleted"].Value) ? (bool?)null : (bool?)command.Parameters["@IsDeleted"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SalesOrder
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSalesOrder> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSalesOrder
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "SalesCode", true) == 0) lst.Add(Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"]);
						if (string.Compare(projection.Member, "SalesOrderTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "AgentId", true) == 0) lst.Add(Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"]);
						if (string.Compare(projection.Member, "RepresentativeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"]);
						if (string.Compare(projection.Member, "StoreId", true) == 0) lst.Add(Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"]);
						if (string.Compare(projection.Member, "PriorityTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"]);
						if (string.Compare(projection.Member, "PaymentTermId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"]);
						if (string.Compare(projection.Member, "SalesDate", true) == 0) lst.Add(Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"]);
						if (string.Compare(projection.Member, "SalesTime", true) == 0) lst.Add(Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"]);
						if (string.Compare(projection.Member, "SalesOrderStatusId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"]);
						if (string.Compare(projection.Member, "SalesOrderSourceId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"]);
						if (string.Compare(projection.Member, "SalesChannelId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"]);
						if (string.Compare(projection.Member, "SalesPoolId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"]);
						if (string.Compare(projection.Member, "IsOpened", true) == 0) lst.Add(Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"]);
						if (string.Compare(projection.Member, "OpenValue", true) == 0) lst.Add(Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "ItemTotal", true) == 0) lst.Add(Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"]);
						if (string.Compare(projection.Member, "ItemDiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"]);
						if (string.Compare(projection.Member, "TaxTotal", true) == 0) lst.Add(Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"]);
						if (string.Compare(projection.Member, "CashDiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"]);
						if (string.Compare(projection.Member, "CustomDiscountTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"]);
						if (string.Compare(projection.Member, "CustomDiscountValue", true) == 0) lst.Add(Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"]);
						if (string.Compare(projection.Member, "CustomDiscountTotal", true) == 0) lst.Add(Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"]);
						if (string.Compare(projection.Member, "DeliveryTotal", true) == 0) lst.Add(Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"]);
						if (string.Compare(projection.Member, "NetTotal", true) == 0) lst.Add(Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "InvoiceRetry", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"]);
						if (string.Compare(projection.Member, "HasError", true) == 0) lst.Add(Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"]);
						if (string.Compare(projection.Member, "IsInvoiced", true) == 0) lst.Add(Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"]);
						if (string.Compare(projection.Member, "InvoiceCode", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"]);
						if (string.Compare(projection.Member, "InvoiceDate", true) == 0) lst.Add(Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"]);
						if (string.Compare(projection.Member, "CreateDate", true) == 0) lst.Add(Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"]);
						if (string.Compare(projection.Member, "RecId", true) == 0) lst.Add(Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "SalesPerenId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"]);
						if (string.Compare(projection.Member, "Inprogress", true) == 0) lst.Add(Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"]);
						if (string.Compare(projection.Member, "IsBackoffice", true) == 0) lst.Add(Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"]);
						if (string.Compare(projection.Member, "IsDeleted", true) == 0) lst.Add(Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SalesOrder
		///</Summary>
		///<returns>
		///IList-DAOSalesOrder.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSalesOrder> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SalesOrder");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOSalesOrder> objList = new List<DAOSalesOrder>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSalesOrder retObj = new DAOSalesOrder();
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._salesCode					 = Convert.IsDBNull(row["SalesCode"]) ? null : (string)row["SalesCode"];
						retObj._salesOrderTypeId					 = Convert.IsDBNull(row["SalesOrderTypeId"]) ? (Int32?)null : (Int32?)row["SalesOrderTypeId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._agentId					 = Convert.IsDBNull(row["AgentId"]) ? (Int32?)null : (Int32?)row["AgentId"];
						retObj._representativeId					 = Convert.IsDBNull(row["RepresentativeId"]) ? (Int32?)null : (Int32?)row["RepresentativeId"];
						retObj._storeId					 = Convert.IsDBNull(row["StoreId"]) ? (Int32?)null : (Int32?)row["StoreId"];
						retObj._priorityTypeId					 = Convert.IsDBNull(row["PriorityTypeId"]) ? (Int32?)null : (Int32?)row["PriorityTypeId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._salesDate					 = Convert.IsDBNull(row["SalesDate"]) ? (DateTime?)null : (DateTime?)row["SalesDate"];
						retObj._salesTime					 = Convert.IsDBNull(row["SalesTime"]) ? (DateTime?)null : (DateTime?)row["SalesTime"];
						retObj._salesOrderStatusId					 = Convert.IsDBNull(row["SalesOrderStatusId"]) ? (Int32?)null : (Int32?)row["SalesOrderStatusId"];
						retObj._salesOrderSourceId					 = Convert.IsDBNull(row["SalesOrderSourceId"]) ? (Int32?)null : (Int32?)row["SalesOrderSourceId"];
						retObj._salesChannelId					 = Convert.IsDBNull(row["SalesChannelId"]) ? (Int32?)null : (Int32?)row["SalesChannelId"];
						retObj._salesPoolId					 = Convert.IsDBNull(row["SalesPoolId"]) ? (Int32?)null : (Int32?)row["SalesPoolId"];
						retObj._isOpened					 = Convert.IsDBNull(row["IsOpened"]) ? (bool?)null : (bool?)row["IsOpened"];
						retObj._openValue					 = Convert.IsDBNull(row["OpenValue"]) ? (decimal?)null : (decimal?)row["OpenValue"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._itemTotal					 = Convert.IsDBNull(row["ItemTotal"]) ? (decimal?)null : (decimal?)row["ItemTotal"];
						retObj._itemDiscountTotal					 = Convert.IsDBNull(row["ItemDiscountTotal"]) ? (decimal?)null : (decimal?)row["ItemDiscountTotal"];
						retObj._taxTotal					 = Convert.IsDBNull(row["TaxTotal"]) ? (decimal?)null : (decimal?)row["TaxTotal"];
						retObj._cashDiscountTotal					 = Convert.IsDBNull(row["CashDiscountTotal"]) ? (decimal?)null : (decimal?)row["CashDiscountTotal"];
						retObj._customDiscountTypeId					 = Convert.IsDBNull(row["CustomDiscountTypeId"]) ? (Int32?)null : (Int32?)row["CustomDiscountTypeId"];
						retObj._customDiscountValue					 = Convert.IsDBNull(row["CustomDiscountValue"]) ? (decimal?)null : (decimal?)row["CustomDiscountValue"];
						retObj._customDiscountTotal					 = Convert.IsDBNull(row["CustomDiscountTotal"]) ? (decimal?)null : (decimal?)row["CustomDiscountTotal"];
						retObj._deliveryTotal					 = Convert.IsDBNull(row["DeliveryTotal"]) ? (decimal?)null : (decimal?)row["DeliveryTotal"];
						retObj._netTotal					 = Convert.IsDBNull(row["NetTotal"]) ? (decimal?)null : (decimal?)row["NetTotal"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._invoiceRetry					 = Convert.IsDBNull(row["InvoiceRetry"]) ? (Int32?)null : (Int32?)row["InvoiceRetry"];
						retObj._hasError					 = Convert.IsDBNull(row["HasError"]) ? (bool?)null : (bool?)row["HasError"];
						retObj._isInvoiced					 = Convert.IsDBNull(row["IsInvoiced"]) ? (bool?)null : (bool?)row["IsInvoiced"];
						retObj._invoiceCode					 = Convert.IsDBNull(row["InvoiceCode"]) ? null : (string)row["InvoiceCode"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["InvoiceDate"]) ? (DateTime?)null : (DateTime?)row["InvoiceDate"];
						retObj._createDate					 = Convert.IsDBNull(row["CreateDate"]) ? (DateTime?)null : (DateTime?)row["CreateDate"];
						retObj._recId					 = Convert.IsDBNull(row["RecId"]) ? (Int64?)null : (Int64?)row["RecId"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._salesPerenId					 = Convert.IsDBNull(row["SalesPerenId"]) ? (Int64?)null : (Int64?)row["SalesPerenId"];
						retObj._inprogress					 = Convert.IsDBNull(row["Inprogress"]) ? (bool?)null : (bool?)row["Inprogress"];
						retObj._isBackoffice					 = Convert.IsDBNull(row["IsBackoffice"]) ? (bool?)null : (bool?)row["IsBackoffice"];
						retObj._isDeleted					 = Convert.IsDBNull(row["IsDeleted"]) ? (bool?)null : (bool?)row["IsDeleted"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SalesOrder
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSalesOrder_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table SalesOrder based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSalesOrder_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SalesId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_salesId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BranchId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_branchId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AgentId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_agentId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepresentativeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_representativeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StoreId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_storeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PriorityTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priorityTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PaymentTermId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_paymentTermId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesTime", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_salesTime?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderStatusId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderStatusId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesOrderSourceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesOrderSourceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesChannelId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesChannelId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesPoolId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_salesPoolId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsOpened", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isOpened?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OpenValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_openValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Latitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_latitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Longitude", SqlDbType.Float, 8, ParameterDirection.InputOutput, true, 53, 0, "", DataRowVersion.Proposed, (object)_longitude?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_itemTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_itemDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TaxTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_taxTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CashDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_cashDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_customDiscountTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountValue", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_customDiscountValue?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomDiscountTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_customDiscountTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DeliveryTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_deliveryTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NetTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_netTotal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceRetry", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_invoiceRetry?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HasError", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_hasError?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsInvoiced", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isInvoiced?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@InvoiceDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_invoiceDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CreateDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_createDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RecId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_recId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SalesPerenId", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, true, 19, 0, "", DataRowVersion.Proposed, (object)_salesPerenId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Inprogress", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_inprogress?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsBackoffice", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isBackoffice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsDeleted", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isDeleted?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_salesId					 = Convert.IsDBNull(command.Parameters["@SalesId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesId"].Value;
				_salesCode					 = Convert.IsDBNull(command.Parameters["@SalesCode"].Value) ? null : (string)command.Parameters["@SalesCode"].Value;
				_salesOrderTypeId					 = Convert.IsDBNull(command.Parameters["@SalesOrderTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderTypeId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_branchId					 = Convert.IsDBNull(command.Parameters["@BranchId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@BranchId"].Value;
				_agentId					 = Convert.IsDBNull(command.Parameters["@AgentId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AgentId"].Value;
				_representativeId					 = Convert.IsDBNull(command.Parameters["@RepresentativeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepresentativeId"].Value;
				_storeId					 = Convert.IsDBNull(command.Parameters["@StoreId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@StoreId"].Value;
				_priorityTypeId					 = Convert.IsDBNull(command.Parameters["@PriorityTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PriorityTypeId"].Value;
				_paymentTermId					 = Convert.IsDBNull(command.Parameters["@PaymentTermId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PaymentTermId"].Value;
				_salesDate					 = Convert.IsDBNull(command.Parameters["@SalesDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@SalesDate"].Value;
				_salesTime					 = Convert.IsDBNull(command.Parameters["@SalesTime"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@SalesTime"].Value;
				_salesOrderStatusId					 = Convert.IsDBNull(command.Parameters["@SalesOrderStatusId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderStatusId"].Value;
				_salesOrderSourceId					 = Convert.IsDBNull(command.Parameters["@SalesOrderSourceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesOrderSourceId"].Value;
				_salesChannelId					 = Convert.IsDBNull(command.Parameters["@SalesChannelId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesChannelId"].Value;
				_salesPoolId					 = Convert.IsDBNull(command.Parameters["@SalesPoolId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SalesPoolId"].Value;
				_isOpened					 = Convert.IsDBNull(command.Parameters["@IsOpened"].Value) ? (bool?)null : (bool?)command.Parameters["@IsOpened"].Value;
				_openValue					 = Convert.IsDBNull(command.Parameters["@OpenValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@OpenValue"].Value;
				_latitude					 = Convert.IsDBNull(command.Parameters["@Latitude"].Value) ? (double?)null : (double?)command.Parameters["@Latitude"].Value;
				_longitude					 = Convert.IsDBNull(command.Parameters["@Longitude"].Value) ? (double?)null : (double?)command.Parameters["@Longitude"].Value;
				_itemTotal					 = Convert.IsDBNull(command.Parameters["@ItemTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ItemTotal"].Value;
				_itemDiscountTotal					 = Convert.IsDBNull(command.Parameters["@ItemDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ItemDiscountTotal"].Value;
				_taxTotal					 = Convert.IsDBNull(command.Parameters["@TaxTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@TaxTotal"].Value;
				_cashDiscountTotal					 = Convert.IsDBNull(command.Parameters["@CashDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CashDiscountTotal"].Value;
				_customDiscountTypeId					 = Convert.IsDBNull(command.Parameters["@CustomDiscountTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CustomDiscountTypeId"].Value;
				_customDiscountValue					 = Convert.IsDBNull(command.Parameters["@CustomDiscountValue"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CustomDiscountValue"].Value;
				_customDiscountTotal					 = Convert.IsDBNull(command.Parameters["@CustomDiscountTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CustomDiscountTotal"].Value;
				_deliveryTotal					 = Convert.IsDBNull(command.Parameters["@DeliveryTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@DeliveryTotal"].Value;
				_netTotal					 = Convert.IsDBNull(command.Parameters["@NetTotal"].Value) ? (decimal?)null : (decimal?)command.Parameters["@NetTotal"].Value;
				_notes					 = Convert.IsDBNull(command.Parameters["@Notes"].Value) ? null : (string)command.Parameters["@Notes"].Value;
				_invoiceRetry					 = Convert.IsDBNull(command.Parameters["@InvoiceRetry"].Value) ? (Int32?)null : (Int32?)command.Parameters["@InvoiceRetry"].Value;
				_hasError					 = Convert.IsDBNull(command.Parameters["@HasError"].Value) ? (bool?)null : (bool?)command.Parameters["@HasError"].Value;
				_isInvoiced					 = Convert.IsDBNull(command.Parameters["@IsInvoiced"].Value) ? (bool?)null : (bool?)command.Parameters["@IsInvoiced"].Value;
				_invoiceCode					 = Convert.IsDBNull(command.Parameters["@InvoiceCode"].Value) ? null : (string)command.Parameters["@InvoiceCode"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["@InvoiceDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@InvoiceDate"].Value;
				_createDate					 = Convert.IsDBNull(command.Parameters["@CreateDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CreateDate"].Value;
				_recId					 = Convert.IsDBNull(command.Parameters["@RecId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@RecId"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_salesPerenId					 = Convert.IsDBNull(command.Parameters["@SalesPerenId"].Value) ? (Int64?)null : (Int64?)command.Parameters["@SalesPerenId"].Value;
				_inprogress					 = Convert.IsDBNull(command.Parameters["@Inprogress"].Value) ? (bool?)null : (bool?)command.Parameters["@Inprogress"].Value;
				_isBackoffice					 = Convert.IsDBNull(command.Parameters["@IsBackoffice"].Value) ? (bool?)null : (bool?)command.Parameters["@IsBackoffice"].Value;
				_isDeleted					 = Convert.IsDBNull(command.Parameters["@IsDeleted"].Value) ? (bool?)null : (bool?)command.Parameters["@IsDeleted"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public string SalesCode
		{
			get
			{
				return _salesCode;
			}
			set
			{
				_salesCode = value;
			}
		}

		public Int32? SalesOrderTypeId
		{
			get
			{
				return _salesOrderTypeId;
			}
			set
			{
				_salesOrderTypeId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public Int32? AgentId
		{
			get
			{
				return _agentId;
			}
			set
			{
				_agentId = value;
			}
		}

		public Int32? RepresentativeId
		{
			get
			{
				return _representativeId;
			}
			set
			{
				_representativeId = value;
			}
		}

		public Int32? StoreId
		{
			get
			{
				return _storeId;
			}
			set
			{
				_storeId = value;
			}
		}

		public Int32? PriorityTypeId
		{
			get
			{
				return _priorityTypeId;
			}
			set
			{
				_priorityTypeId = value;
			}
		}

		public Int32? PaymentTermId
		{
			get
			{
				return _paymentTermId;
			}
			set
			{
				_paymentTermId = value;
			}
		}

		public DateTime? SalesDate
		{
			get
			{
				return _salesDate;
			}
			set
			{
				_salesDate = value;
			}
		}

		public DateTime? SalesTime
		{
			get
			{
				return _salesTime;
			}
			set
			{
				_salesTime = value;
			}
		}

		public Int32? SalesOrderStatusId
		{
			get
			{
				return _salesOrderStatusId;
			}
			set
			{
				_salesOrderStatusId = value;
			}
		}

		public Int32? SalesOrderSourceId
		{
			get
			{
				return _salesOrderSourceId;
			}
			set
			{
				_salesOrderSourceId = value;
			}
		}

		public Int32? SalesChannelId
		{
			get
			{
				return _salesChannelId;
			}
			set
			{
				_salesChannelId = value;
			}
		}

		public Int32? SalesPoolId
		{
			get
			{
				return _salesPoolId;
			}
			set
			{
				_salesPoolId = value;
			}
		}

		public bool? IsOpened
		{
			get
			{
				return _isOpened;
			}
			set
			{
				_isOpened = value;
			}
		}

		public decimal? OpenValue
		{
			get
			{
				return _openValue;
			}
			set
			{
				_openValue = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public decimal? ItemTotal
		{
			get
			{
				return _itemTotal;
			}
			set
			{
				_itemTotal = value;
			}
		}

		public decimal? ItemDiscountTotal
		{
			get
			{
				return _itemDiscountTotal;
			}
			set
			{
				_itemDiscountTotal = value;
			}
		}

		public decimal? TaxTotal
		{
			get
			{
				return _taxTotal;
			}
			set
			{
				_taxTotal = value;
			}
		}

		public decimal? CashDiscountTotal
		{
			get
			{
				return _cashDiscountTotal;
			}
			set
			{
				_cashDiscountTotal = value;
			}
		}

		public Int32? CustomDiscountTypeId
		{
			get
			{
				return _customDiscountTypeId;
			}
			set
			{
				_customDiscountTypeId = value;
			}
		}

		public decimal? CustomDiscountValue
		{
			get
			{
				return _customDiscountValue;
			}
			set
			{
				_customDiscountValue = value;
			}
		}

		public decimal? CustomDiscountTotal
		{
			get
			{
				return _customDiscountTotal;
			}
			set
			{
				_customDiscountTotal = value;
			}
		}

		public decimal? DeliveryTotal
		{
			get
			{
				return _deliveryTotal;
			}
			set
			{
				_deliveryTotal = value;
			}
		}

		public decimal? NetTotal
		{
			get
			{
				return _netTotal;
			}
			set
			{
				_netTotal = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? InvoiceRetry
		{
			get
			{
				return _invoiceRetry;
			}
			set
			{
				_invoiceRetry = value;
			}
		}

		public bool? HasError
		{
			get
			{
				return _hasError;
			}
			set
			{
				_hasError = value;
			}
		}

		public bool? IsInvoiced
		{
			get
			{
				return _isInvoiced;
			}
			set
			{
				_isInvoiced = value;
			}
		}

		public string InvoiceCode
		{
			get
			{
				return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
			}
		}

		public DateTime? InvoiceDate
		{
			get
			{
				return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
			}
		}

		public DateTime? CreateDate
		{
			get
			{
				return _createDate;
			}
			set
			{
				_createDate = value;
			}
		}

		public Int64? RecId
		{
			get
			{
				return _recId;
			}
			set
			{
				_recId = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public Int64? SalesPerenId
		{
			get
			{
				return _salesPerenId;
			}
			set
			{
				_salesPerenId = value;
			}
		}

		public bool? Inprogress
		{
			get
			{
				return _inprogress;
			}
			set
			{
				_inprogress = value;
			}
		}

		public bool? IsBackoffice
		{
			get
			{
				return _isBackoffice;
			}
			set
			{
				_isBackoffice = value;
			}
		}

		public bool? IsDeleted
		{
			get
			{
				return _isDeleted;
			}
			set
			{
				_isDeleted = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSalesOrder_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesId] = @SalesId
			";

		internal static string ctprSalesOrder_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[SalesId] = @SalesId
			";

		internal static string ctprSalesOrder_SelectAllBySalesOrderTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesOrderTypeId] = @SalesOrderTypeId OR ([SalesOrderTypeId] IS NULL AND @SalesOrderTypeId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesOrderTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesOrderTypeId] = @SalesOrderTypeId OR ([SalesOrderTypeId] IS NULL AND @SalesOrderTypeId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllBySalesOrderTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[SalesOrderTypeId] = @SalesOrderTypeId OR ([SalesOrderTypeId] IS NULL AND @SalesOrderTypeId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByBranchId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByBranchIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByBranchId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[BranchId] = @BranchId OR ([BranchId] IS NULL AND @BranchId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByAgentId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[AgentId] = @AgentId OR ([AgentId] IS NULL AND @AgentId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByAgentIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[AgentId] = @AgentId OR ([AgentId] IS NULL AND @AgentId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByAgentId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[AgentId] = @AgentId OR ([AgentId] IS NULL AND @AgentId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByRepresentativeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByRepresentativeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByRepresentativeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[RepresentativeId] = @RepresentativeId OR ([RepresentativeId] IS NULL AND @RepresentativeId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByStoreId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[StoreId] = @StoreId OR ([StoreId] IS NULL AND @StoreId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByStoreIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[StoreId] = @StoreId OR ([StoreId] IS NULL AND @StoreId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByStoreId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[StoreId] = @StoreId OR ([StoreId] IS NULL AND @StoreId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByPriorityTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[PriorityTypeId] = @PriorityTypeId OR ([PriorityTypeId] IS NULL AND @PriorityTypeId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByPriorityTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[PriorityTypeId] = @PriorityTypeId OR ([PriorityTypeId] IS NULL AND @PriorityTypeId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByPriorityTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[PriorityTypeId] = @PriorityTypeId OR ([PriorityTypeId] IS NULL AND @PriorityTypeId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByPaymentTermId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[PaymentTermId] = @PaymentTermId OR ([PaymentTermId] IS NULL AND @PaymentTermId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByPaymentTermIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[PaymentTermId] = @PaymentTermId OR ([PaymentTermId] IS NULL AND @PaymentTermId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByPaymentTermId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[PaymentTermId] = @PaymentTermId OR ([PaymentTermId] IS NULL AND @PaymentTermId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesOrderStatusId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesOrderStatusId] = @SalesOrderStatusId OR ([SalesOrderStatusId] IS NULL AND @SalesOrderStatusId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesOrderStatusIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesOrderStatusId] = @SalesOrderStatusId OR ([SalesOrderStatusId] IS NULL AND @SalesOrderStatusId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllBySalesOrderStatusId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[SalesOrderStatusId] = @SalesOrderStatusId OR ([SalesOrderStatusId] IS NULL AND @SalesOrderStatusId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesOrderSourceId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesOrderSourceId] = @SalesOrderSourceId OR ([SalesOrderSourceId] IS NULL AND @SalesOrderSourceId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesOrderSourceIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesOrderSourceId] = @SalesOrderSourceId OR ([SalesOrderSourceId] IS NULL AND @SalesOrderSourceId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllBySalesOrderSourceId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[SalesOrderSourceId] = @SalesOrderSourceId OR ([SalesOrderSourceId] IS NULL AND @SalesOrderSourceId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesChannelId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesChannelId] = @SalesChannelId OR ([SalesChannelId] IS NULL AND @SalesChannelId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesChannelIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesChannelId] = @SalesChannelId OR ([SalesChannelId] IS NULL AND @SalesChannelId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllBySalesChannelId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[SalesChannelId] = @SalesChannelId OR ([SalesChannelId] IS NULL AND @SalesChannelId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesPoolId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesPoolId] = @SalesPoolId OR ([SalesPoolId] IS NULL AND @SalesPoolId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllBySalesPoolIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesPoolId] = @SalesPoolId OR ([SalesPoolId] IS NULL AND @SalesPoolId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllBySalesPoolId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[SalesPoolId] = @SalesPoolId OR ([SalesPoolId] IS NULL AND @SalesPoolId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByCustomDiscountTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[CustomDiscountTypeId] = @CustomDiscountTypeId OR ([CustomDiscountTypeId] IS NULL AND @CustomDiscountTypeId IS NULL)
			";

		internal static string ctprSalesOrder_SelectAllByCustomDiscountTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			WHERE 
			[CustomDiscountTypeId] = @CustomDiscountTypeId OR ([CustomDiscountTypeId] IS NULL AND @CustomDiscountTypeId IS NULL)
			";

		internal static string ctprSalesOrder_DeleteAllByCustomDiscountTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[SalesOrder]
			WHERE 
			[CustomDiscountTypeId] = @CustomDiscountTypeId OR ([CustomDiscountTypeId] IS NULL AND @CustomDiscountTypeId IS NULL)
			";

		internal static string ctprSalesOrder_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[SalesOrder]
			(
			[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			)
			VALUES
			(
			@SalesCode
			,@SalesOrderTypeId
			,@ClientId
			,@BranchId
			,@AgentId
			,@RepresentativeId
			,@StoreId
			,@PriorityTypeId
			,@PaymentTermId
			,@SalesDate
			,@SalesTime
			,@SalesOrderStatusId
			,@SalesOrderSourceId
			,@SalesChannelId
			,@SalesPoolId
			,@IsOpened
			,@OpenValue
			,@Latitude
			,@Longitude
			,@ItemTotal
			,@ItemDiscountTotal
			,@TaxTotal
			,@CashDiscountTotal
			,@CustomDiscountTypeId
			,@CustomDiscountValue
			,@CustomDiscountTotal
			,@DeliveryTotal
			,@NetTotal
			,@Notes
			,@InvoiceRetry
			,@HasError
			,@IsInvoiced
			,@InvoiceCode
			,@InvoiceDate
			,@CreateDate
			,@RecId
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@SalesPerenId
			,@Inprogress
			,@IsBackoffice
			,@IsDeleted
			)
			SELECT 
			@SalesId = [SalesId]
			,@SalesCode = [SalesCode]
			,@SalesOrderTypeId = [SalesOrderTypeId]
			,@ClientId = [ClientId]
			,@BranchId = [BranchId]
			,@AgentId = [AgentId]
			,@RepresentativeId = [RepresentativeId]
			,@StoreId = [StoreId]
			,@PriorityTypeId = [PriorityTypeId]
			,@PaymentTermId = [PaymentTermId]
			,@SalesDate = [SalesDate]
			,@SalesTime = [SalesTime]
			,@SalesOrderStatusId = [SalesOrderStatusId]
			,@SalesOrderSourceId = [SalesOrderSourceId]
			,@SalesChannelId = [SalesChannelId]
			,@SalesPoolId = [SalesPoolId]
			,@IsOpened = [IsOpened]
			,@OpenValue = [OpenValue]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@ItemTotal = [ItemTotal]
			,@ItemDiscountTotal = [ItemDiscountTotal]
			,@TaxTotal = [TaxTotal]
			,@CashDiscountTotal = [CashDiscountTotal]
			,@CustomDiscountTypeId = [CustomDiscountTypeId]
			,@CustomDiscountValue = [CustomDiscountValue]
			,@CustomDiscountTotal = [CustomDiscountTotal]
			,@DeliveryTotal = [DeliveryTotal]
			,@NetTotal = [NetTotal]
			,@Notes = [Notes]
			,@InvoiceRetry = [InvoiceRetry]
			,@HasError = [HasError]
			,@IsInvoiced = [IsInvoiced]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			,@CreateDate = [CreateDate]
			,@RecId = [RecId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@SalesPerenId = [SalesPerenId]
			,@Inprogress = [Inprogress]
			,@IsBackoffice = [IsBackoffice]
			,@IsDeleted = [IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesId] = SCOPE_IDENTITY()
			";

		internal static string ctprSalesOrder_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			";

		internal static string ctprSalesOrder_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			";

		internal static string ctprSalesOrder_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[SalesOrder]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[SalesId]
			,[SalesCode]
			,[SalesOrderTypeId]
			,[ClientId]
			,[BranchId]
			,[AgentId]
			,[RepresentativeId]
			,[StoreId]
			,[PriorityTypeId]
			,[PaymentTermId]
			,[SalesDate]
			,[SalesTime]
			,[SalesOrderStatusId]
			,[SalesOrderSourceId]
			,[SalesChannelId]
			,[SalesPoolId]
			,[IsOpened]
			,[OpenValue]
			,[Latitude]
			,[Longitude]
			,[ItemTotal]
			,[ItemDiscountTotal]
			,[TaxTotal]
			,[CashDiscountTotal]
			,[CustomDiscountTypeId]
			,[CustomDiscountValue]
			,[CustomDiscountTotal]
			,[DeliveryTotal]
			,[NetTotal]
			,[Notes]
			,[InvoiceRetry]
			,[HasError]
			,[IsInvoiced]
			,[InvoiceCode]
			,[InvoiceDate]
			,[CreateDate]
			,[RecId]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[SalesPerenId]
			,[Inprogress]
			,[IsBackoffice]
			,[IsDeleted]
			FROM [dbo].[SalesOrder]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[SalesOrder]
			##CRITERIA##
			";

		internal static string ctprSalesOrder_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[SalesOrder]
			SET
			[SalesCode] = @SalesCode
			,[SalesOrderTypeId] = @SalesOrderTypeId
			,[ClientId] = @ClientId
			,[BranchId] = @BranchId
			,[AgentId] = @AgentId
			,[RepresentativeId] = @RepresentativeId
			,[StoreId] = @StoreId
			,[PriorityTypeId] = @PriorityTypeId
			,[PaymentTermId] = @PaymentTermId
			,[SalesDate] = @SalesDate
			,[SalesTime] = @SalesTime
			,[SalesOrderStatusId] = @SalesOrderStatusId
			,[SalesOrderSourceId] = @SalesOrderSourceId
			,[SalesChannelId] = @SalesChannelId
			,[SalesPoolId] = @SalesPoolId
			,[IsOpened] = @IsOpened
			,[OpenValue] = @OpenValue
			,[Latitude] = @Latitude
			,[Longitude] = @Longitude
			,[ItemTotal] = @ItemTotal
			,[ItemDiscountTotal] = @ItemDiscountTotal
			,[TaxTotal] = @TaxTotal
			,[CashDiscountTotal] = @CashDiscountTotal
			,[CustomDiscountTypeId] = @CustomDiscountTypeId
			,[CustomDiscountValue] = @CustomDiscountValue
			,[CustomDiscountTotal] = @CustomDiscountTotal
			,[DeliveryTotal] = @DeliveryTotal
			,[NetTotal] = @NetTotal
			,[Notes] = @Notes
			,[InvoiceRetry] = @InvoiceRetry
			,[HasError] = @HasError
			,[IsInvoiced] = @IsInvoiced
			,[InvoiceCode] = @InvoiceCode
			,[InvoiceDate] = @InvoiceDate
			,[CreateDate] = @CreateDate
			,[RecId] = @RecId
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[SalesPerenId] = @SalesPerenId
			,[Inprogress] = @Inprogress
			,[IsBackoffice] = @IsBackoffice
			,[IsDeleted] = @IsDeleted
			WHERE 
			[SalesId] = @SalesId
			SELECT 
			@SalesId = [SalesId]
			,@SalesCode = [SalesCode]
			,@SalesOrderTypeId = [SalesOrderTypeId]
			,@ClientId = [ClientId]
			,@BranchId = [BranchId]
			,@AgentId = [AgentId]
			,@RepresentativeId = [RepresentativeId]
			,@StoreId = [StoreId]
			,@PriorityTypeId = [PriorityTypeId]
			,@PaymentTermId = [PaymentTermId]
			,@SalesDate = [SalesDate]
			,@SalesTime = [SalesTime]
			,@SalesOrderStatusId = [SalesOrderStatusId]
			,@SalesOrderSourceId = [SalesOrderSourceId]
			,@SalesChannelId = [SalesChannelId]
			,@SalesPoolId = [SalesPoolId]
			,@IsOpened = [IsOpened]
			,@OpenValue = [OpenValue]
			,@Latitude = [Latitude]
			,@Longitude = [Longitude]
			,@ItemTotal = [ItemTotal]
			,@ItemDiscountTotal = [ItemDiscountTotal]
			,@TaxTotal = [TaxTotal]
			,@CashDiscountTotal = [CashDiscountTotal]
			,@CustomDiscountTypeId = [CustomDiscountTypeId]
			,@CustomDiscountValue = [CustomDiscountValue]
			,@CustomDiscountTotal = [CustomDiscountTotal]
			,@DeliveryTotal = [DeliveryTotal]
			,@NetTotal = [NetTotal]
			,@Notes = [Notes]
			,@InvoiceRetry = [InvoiceRetry]
			,@HasError = [HasError]
			,@IsInvoiced = [IsInvoiced]
			,@InvoiceCode = [InvoiceCode]
			,@InvoiceDate = [InvoiceDate]
			,@CreateDate = [CreateDate]
			,@RecId = [RecId]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@SalesPerenId = [SalesPerenId]
			,@Inprogress = [Inprogress]
			,@IsBackoffice = [IsBackoffice]
			,@IsDeleted = [IsDeleted]
			FROM [dbo].[SalesOrder]
			WHERE 
			[SalesId] = @SalesId
			";

	}
}
#endregion
