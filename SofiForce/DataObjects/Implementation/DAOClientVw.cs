/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _branchId;
		protected string _branchNameEn;
		protected string _branchNameAr;
		protected string _branchCode;
		protected decimal? _creditLimit;
		protected decimal? _creditBalance;
		protected string _phone;
		protected string _mobile;
		protected string _whatsApp;
		protected bool? _isActive;
		protected Int32? _clientId;
		protected string _clientTypeNameAr;
		protected string _clientTypeNameEn;
		protected Int32? _clientTypeId;
		protected Int32? _clientAccountId;
		protected Int32? _regionId;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected Int32? _clientGroupId;
		protected Int32? _clientGroupSubId;
		protected Int32? _clientClassificationId;
		protected Int32? _paymentTermId;
		protected bool? _isTaxable;
		protected double? _longitude;
		protected double? _latitude;
		protected string _governerateNameAr;
		protected string _governerateNameEn;
		protected string _cityNameAr;
		protected string _cityNameEn;
		protected string _taxCode;
		protected string _commercialCode;
		protected bool? _isChain;
		protected Int32? _locationLevelId;
		protected string _clientGroupSubCode;
		protected string _clientGroupSubNameEn;
		protected string _clientGroupSubNameAr;
		protected string _clientGroupCode;
		protected string _clientGroupNameEn;
		protected string _clientGroupNameAr;
		protected bool? _isNew;
		protected bool? _needValidation;
		protected string _businessUnitCode;
		protected string _businessUnitNameEn;
		protected string _businessUnitNameAr;
		protected Int32? _businessUnitId;
		protected bool? _isCashDiscount;
		protected bool? _inRoute;
		protected Int32? _cashGroupId;
		protected string _governerateCode;
		protected string _cityCode;
		#endregion

		#region class methods
		public DAOClientVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table ClientVw
		///</Summary>
		///<returns>
		///IList-DAOClientVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClientVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ClientVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientVw> objList = new List<DAOClientVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientVw retObj = new DAOClientVw();
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeNameAr					 = Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"];
						retObj._clientTypeNameEn					 = Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						retObj._cityNameAr					 = Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"];
						retObj._cityNameEn					 = Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupSubCode					 = Convert.IsDBNull(row["ClientGroupSubCode"]) ? null : (string)row["ClientGroupSubCode"];
						retObj._clientGroupSubNameEn					 = Convert.IsDBNull(row["ClientGroupSubNameEn"]) ? null : (string)row["ClientGroupSubNameEn"];
						retObj._clientGroupSubNameAr					 = Convert.IsDBNull(row["ClientGroupSubNameAr"]) ? null : (string)row["ClientGroupSubNameAr"];
						retObj._clientGroupCode					 = Convert.IsDBNull(row["ClientGroupCode"]) ? null : (string)row["ClientGroupCode"];
						retObj._clientGroupNameEn					 = Convert.IsDBNull(row["ClientGroupNameEn"]) ? null : (string)row["ClientGroupNameEn"];
						retObj._clientGroupNameAr					 = Convert.IsDBNull(row["ClientGroupNameAr"]) ? null : (string)row["ClientGroupNameAr"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._businessUnitCode					 = Convert.IsDBNull(row["BusinessUnitCode"]) ? null : (string)row["BusinessUnitCode"];
						retObj._businessUnitNameEn					 = Convert.IsDBNull(row["BusinessUnitNameEn"]) ? null : (string)row["BusinessUnitNameEn"];
						retObj._businessUnitNameAr					 = Convert.IsDBNull(row["BusinessUnitNameAr"]) ? null : (string)row["BusinessUnitNameAr"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._governerateCode					 = Convert.IsDBNull(row["GovernerateCode"]) ? null : (string)row["GovernerateCode"];
						retObj._cityCode					 = Convert.IsDBNull(row["CityCode"]) ? null : (string)row["CityCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClientVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClientVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClientVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ClientVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "BranchId", true) == 0) lst.Add(Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"]);
						if (string.Compare(projection.Member, "BranchNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"]);
						if (string.Compare(projection.Member, "BranchNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"]);
						if (string.Compare(projection.Member, "BranchCode", true) == 0) lst.Add(Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"]);
						if (string.Compare(projection.Member, "CreditLimit", true) == 0) lst.Add(Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"]);
						if (string.Compare(projection.Member, "CreditBalance", true) == 0) lst.Add(Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"]);
						if (string.Compare(projection.Member, "Phone", true) == 0) lst.Add(Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"]);
						if (string.Compare(projection.Member, "Mobile", true) == 0) lst.Add(Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"]);
						if (string.Compare(projection.Member, "WhatsApp", true) == 0) lst.Add(Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "ClientTypeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"]);
						if (string.Compare(projection.Member, "ClientTypeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"]);
						if (string.Compare(projection.Member, "ClientTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"]);
						if (string.Compare(projection.Member, "ClientAccountId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"]);
						if (string.Compare(projection.Member, "RegionId", true) == 0) lst.Add(Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"]);
						if (string.Compare(projection.Member, "GovernerateId", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"]);
						if (string.Compare(projection.Member, "CityId", true) == 0) lst.Add(Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"]);
						if (string.Compare(projection.Member, "ClientGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"]);
						if (string.Compare(projection.Member, "ClientGroupSubId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"]);
						if (string.Compare(projection.Member, "ClientClassificationId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"]);
						if (string.Compare(projection.Member, "PaymentTermId", true) == 0) lst.Add(Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"]);
						if (string.Compare(projection.Member, "IsTaxable", true) == 0) lst.Add(Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "GovernerateNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"]);
						if (string.Compare(projection.Member, "GovernerateNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"]);
						if (string.Compare(projection.Member, "CityNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"]);
						if (string.Compare(projection.Member, "CityNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"]);
						if (string.Compare(projection.Member, "TaxCode", true) == 0) lst.Add(Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"]);
						if (string.Compare(projection.Member, "CommercialCode", true) == 0) lst.Add(Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"]);
						if (string.Compare(projection.Member, "IsChain", true) == 0) lst.Add(Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"]);
						if (string.Compare(projection.Member, "LocationLevelId", true) == 0) lst.Add(Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"]);
						if (string.Compare(projection.Member, "ClientGroupSubCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupSubCode"]) ? null : (string)row["ClientGroupSubCode"]);
						if (string.Compare(projection.Member, "ClientGroupSubNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupSubNameEn"]) ? null : (string)row["ClientGroupSubNameEn"]);
						if (string.Compare(projection.Member, "ClientGroupSubNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupSubNameAr"]) ? null : (string)row["ClientGroupSubNameAr"]);
						if (string.Compare(projection.Member, "ClientGroupCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupCode"]) ? null : (string)row["ClientGroupCode"]);
						if (string.Compare(projection.Member, "ClientGroupNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupNameEn"]) ? null : (string)row["ClientGroupNameEn"]);
						if (string.Compare(projection.Member, "ClientGroupNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupNameAr"]) ? null : (string)row["ClientGroupNameAr"]);
						if (string.Compare(projection.Member, "IsNew", true) == 0) lst.Add(Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"]);
						if (string.Compare(projection.Member, "NeedValidation", true) == 0) lst.Add(Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"]);
						if (string.Compare(projection.Member, "BusinessUnitCode", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitCode"]) ? null : (string)row["BusinessUnitCode"]);
						if (string.Compare(projection.Member, "BusinessUnitNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitNameEn"]) ? null : (string)row["BusinessUnitNameEn"]);
						if (string.Compare(projection.Member, "BusinessUnitNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitNameAr"]) ? null : (string)row["BusinessUnitNameAr"]);
						if (string.Compare(projection.Member, "BusinessUnitId", true) == 0) lst.Add(Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"]);
						if (string.Compare(projection.Member, "IsCashDiscount", true) == 0) lst.Add(Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"]);
						if (string.Compare(projection.Member, "InRoute", true) == 0) lst.Add(Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"]);
						if (string.Compare(projection.Member, "CashGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"]);
						if (string.Compare(projection.Member, "GovernerateCode", true) == 0) lst.Add(Convert.IsDBNull(row["GovernerateCode"]) ? null : (string)row["GovernerateCode"]);
						if (string.Compare(projection.Member, "CityCode", true) == 0) lst.Add(Convert.IsDBNull(row["CityCode"]) ? null : (string)row["CityCode"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api ClientVw
		///</Summary>
		///<returns>
		///IList-DAOClientVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClientVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ClientVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientVw> objList = new List<DAOClientVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientVw retObj = new DAOClientVw();
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._branchId					 = Convert.IsDBNull(row["BranchId"]) ? (Int32?)null : (Int32?)row["BranchId"];
						retObj._branchNameEn					 = Convert.IsDBNull(row["BranchNameEn"]) ? null : (string)row["BranchNameEn"];
						retObj._branchNameAr					 = Convert.IsDBNull(row["BranchNameAr"]) ? null : (string)row["BranchNameAr"];
						retObj._branchCode					 = Convert.IsDBNull(row["BranchCode"]) ? null : (string)row["BranchCode"];
						retObj._creditLimit					 = Convert.IsDBNull(row["CreditLimit"]) ? (decimal?)null : (decimal?)row["CreditLimit"];
						retObj._creditBalance					 = Convert.IsDBNull(row["CreditBalance"]) ? (decimal?)null : (decimal?)row["CreditBalance"];
						retObj._phone					 = Convert.IsDBNull(row["Phone"]) ? null : (string)row["Phone"];
						retObj._mobile					 = Convert.IsDBNull(row["Mobile"]) ? null : (string)row["Mobile"];
						retObj._whatsApp					 = Convert.IsDBNull(row["WhatsApp"]) ? null : (string)row["WhatsApp"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientTypeNameAr					 = Convert.IsDBNull(row["ClientTypeNameAr"]) ? null : (string)row["ClientTypeNameAr"];
						retObj._clientTypeNameEn					 = Convert.IsDBNull(row["ClientTypeNameEn"]) ? null : (string)row["ClientTypeNameEn"];
						retObj._clientTypeId					 = Convert.IsDBNull(row["ClientTypeId"]) ? (Int32?)null : (Int32?)row["ClientTypeId"];
						retObj._clientAccountId					 = Convert.IsDBNull(row["ClientAccountId"]) ? (Int32?)null : (Int32?)row["ClientAccountId"];
						retObj._regionId					 = Convert.IsDBNull(row["RegionId"]) ? (Int32?)null : (Int32?)row["RegionId"];
						retObj._governerateId					 = Convert.IsDBNull(row["GovernerateId"]) ? (Int32?)null : (Int32?)row["GovernerateId"];
						retObj._cityId					 = Convert.IsDBNull(row["CityId"]) ? (Int32?)null : (Int32?)row["CityId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupSubId					 = Convert.IsDBNull(row["ClientGroupSubId"]) ? (Int32?)null : (Int32?)row["ClientGroupSubId"];
						retObj._clientClassificationId					 = Convert.IsDBNull(row["ClientClassificationId"]) ? (Int32?)null : (Int32?)row["ClientClassificationId"];
						retObj._paymentTermId					 = Convert.IsDBNull(row["PaymentTermId"]) ? (Int32?)null : (Int32?)row["PaymentTermId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._governerateNameAr					 = Convert.IsDBNull(row["GovernerateNameAr"]) ? null : (string)row["GovernerateNameAr"];
						retObj._governerateNameEn					 = Convert.IsDBNull(row["GovernerateNameEn"]) ? null : (string)row["GovernerateNameEn"];
						retObj._cityNameAr					 = Convert.IsDBNull(row["CityNameAr"]) ? null : (string)row["CityNameAr"];
						retObj._cityNameEn					 = Convert.IsDBNull(row["CityNameEn"]) ? null : (string)row["CityNameEn"];
						retObj._taxCode					 = Convert.IsDBNull(row["TaxCode"]) ? null : (string)row["TaxCode"];
						retObj._commercialCode					 = Convert.IsDBNull(row["CommercialCode"]) ? null : (string)row["CommercialCode"];
						retObj._isChain					 = Convert.IsDBNull(row["IsChain"]) ? (bool?)null : (bool?)row["IsChain"];
						retObj._locationLevelId					 = Convert.IsDBNull(row["LocationLevelId"]) ? (Int32?)null : (Int32?)row["LocationLevelId"];
						retObj._clientGroupSubCode					 = Convert.IsDBNull(row["ClientGroupSubCode"]) ? null : (string)row["ClientGroupSubCode"];
						retObj._clientGroupSubNameEn					 = Convert.IsDBNull(row["ClientGroupSubNameEn"]) ? null : (string)row["ClientGroupSubNameEn"];
						retObj._clientGroupSubNameAr					 = Convert.IsDBNull(row["ClientGroupSubNameAr"]) ? null : (string)row["ClientGroupSubNameAr"];
						retObj._clientGroupCode					 = Convert.IsDBNull(row["ClientGroupCode"]) ? null : (string)row["ClientGroupCode"];
						retObj._clientGroupNameEn					 = Convert.IsDBNull(row["ClientGroupNameEn"]) ? null : (string)row["ClientGroupNameEn"];
						retObj._clientGroupNameAr					 = Convert.IsDBNull(row["ClientGroupNameAr"]) ? null : (string)row["ClientGroupNameAr"];
						retObj._isNew					 = Convert.IsDBNull(row["IsNew"]) ? (bool?)null : (bool?)row["IsNew"];
						retObj._needValidation					 = Convert.IsDBNull(row["NeedValidation"]) ? (bool?)null : (bool?)row["NeedValidation"];
						retObj._businessUnitCode					 = Convert.IsDBNull(row["BusinessUnitCode"]) ? null : (string)row["BusinessUnitCode"];
						retObj._businessUnitNameEn					 = Convert.IsDBNull(row["BusinessUnitNameEn"]) ? null : (string)row["BusinessUnitNameEn"];
						retObj._businessUnitNameAr					 = Convert.IsDBNull(row["BusinessUnitNameAr"]) ? null : (string)row["BusinessUnitNameAr"];
						retObj._businessUnitId					 = Convert.IsDBNull(row["BusinessUnitId"]) ? (Int32?)null : (Int32?)row["BusinessUnitId"];
						retObj._isCashDiscount					 = Convert.IsDBNull(row["IsCashDiscount"]) ? (bool?)null : (bool?)row["IsCashDiscount"];
						retObj._inRoute					 = Convert.IsDBNull(row["InRoute"]) ? (bool?)null : (bool?)row["InRoute"];
						retObj._cashGroupId					 = Convert.IsDBNull(row["CashGroupId"]) ? (Int32?)null : (Int32?)row["CashGroupId"];
						retObj._governerateCode					 = Convert.IsDBNull(row["GovernerateCode"]) ? null : (string)row["GovernerateCode"];
						retObj._cityCode					 = Convert.IsDBNull(row["CityCode"]) ? null : (string)row["CityCode"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api ClientVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClientVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int32? BranchId
		{
			get
			{
				return _branchId;
			}
			set
			{
				_branchId = value;
			}
		}

		public string BranchNameEn
		{
			get
			{
				return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
			}
		}

		public string BranchNameAr
		{
			get
			{
				return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
			}
		}

		public string BranchCode
		{
			get
			{
				return _branchCode;
			}
			set
			{
				_branchCode = value;
			}
		}

		public decimal? CreditLimit
		{
			get
			{
				return _creditLimit;
			}
			set
			{
				_creditLimit = value;
			}
		}

		public decimal? CreditBalance
		{
			get
			{
				return _creditBalance;
			}
			set
			{
				_creditBalance = value;
			}
		}

		public string Phone
		{
			get
			{
				return _phone;
			}
			set
			{
				_phone = value;
			}
		}

		public string Mobile
		{
			get
			{
				return _mobile;
			}
			set
			{
				_mobile = value;
			}
		}

		public string WhatsApp
		{
			get
			{
				return _whatsApp;
			}
			set
			{
				_whatsApp = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public string ClientTypeNameAr
		{
			get
			{
				return _clientTypeNameAr;
			}
			set
			{
				_clientTypeNameAr = value;
			}
		}

		public string ClientTypeNameEn
		{
			get
			{
				return _clientTypeNameEn;
			}
			set
			{
				_clientTypeNameEn = value;
			}
		}

		public Int32? ClientTypeId
		{
			get
			{
				return _clientTypeId;
			}
			set
			{
				_clientTypeId = value;
			}
		}

		public Int32? ClientAccountId
		{
			get
			{
				return _clientAccountId;
			}
			set
			{
				_clientAccountId = value;
			}
		}

		public Int32? RegionId
		{
			get
			{
				return _regionId;
			}
			set
			{
				_regionId = value;
			}
		}

		public Int32? GovernerateId
		{
			get
			{
				return _governerateId;
			}
			set
			{
				_governerateId = value;
			}
		}

		public Int32? CityId
		{
			get
			{
				return _cityId;
			}
			set
			{
				_cityId = value;
			}
		}

		public Int32? ClientGroupId
		{
			get
			{
				return _clientGroupId;
			}
			set
			{
				_clientGroupId = value;
			}
		}

		public Int32? ClientGroupSubId
		{
			get
			{
				return _clientGroupSubId;
			}
			set
			{
				_clientGroupSubId = value;
			}
		}

		public Int32? ClientClassificationId
		{
			get
			{
				return _clientClassificationId;
			}
			set
			{
				_clientClassificationId = value;
			}
		}

		public Int32? PaymentTermId
		{
			get
			{
				return _paymentTermId;
			}
			set
			{
				_paymentTermId = value;
			}
		}

		public bool? IsTaxable
		{
			get
			{
				return _isTaxable;
			}
			set
			{
				_isTaxable = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public string GovernerateNameAr
		{
			get
			{
				return _governerateNameAr;
			}
			set
			{
				_governerateNameAr = value;
			}
		}

		public string GovernerateNameEn
		{
			get
			{
				return _governerateNameEn;
			}
			set
			{
				_governerateNameEn = value;
			}
		}

		public string CityNameAr
		{
			get
			{
				return _cityNameAr;
			}
			set
			{
				_cityNameAr = value;
			}
		}

		public string CityNameEn
		{
			get
			{
				return _cityNameEn;
			}
			set
			{
				_cityNameEn = value;
			}
		}

		public string TaxCode
		{
			get
			{
				return _taxCode;
			}
			set
			{
				_taxCode = value;
			}
		}

		public string CommercialCode
		{
			get
			{
				return _commercialCode;
			}
			set
			{
				_commercialCode = value;
			}
		}

		public bool? IsChain
		{
			get
			{
				return _isChain;
			}
			set
			{
				_isChain = value;
			}
		}

		public Int32? LocationLevelId
		{
			get
			{
				return _locationLevelId;
			}
			set
			{
				_locationLevelId = value;
			}
		}

		public string ClientGroupSubCode
		{
			get
			{
				return _clientGroupSubCode;
			}
			set
			{
				_clientGroupSubCode = value;
			}
		}

		public string ClientGroupSubNameEn
		{
			get
			{
				return _clientGroupSubNameEn;
			}
			set
			{
				_clientGroupSubNameEn = value;
			}
		}

		public string ClientGroupSubNameAr
		{
			get
			{
				return _clientGroupSubNameAr;
			}
			set
			{
				_clientGroupSubNameAr = value;
			}
		}

		public string ClientGroupCode
		{
			get
			{
				return _clientGroupCode;
			}
			set
			{
				_clientGroupCode = value;
			}
		}

		public string ClientGroupNameEn
		{
			get
			{
				return _clientGroupNameEn;
			}
			set
			{
				_clientGroupNameEn = value;
			}
		}

		public string ClientGroupNameAr
		{
			get
			{
				return _clientGroupNameAr;
			}
			set
			{
				_clientGroupNameAr = value;
			}
		}

		public bool? IsNew
		{
			get
			{
				return _isNew;
			}
			set
			{
				_isNew = value;
			}
		}

		public bool? NeedValidation
		{
			get
			{
				return _needValidation;
			}
			set
			{
				_needValidation = value;
			}
		}

		public string BusinessUnitCode
		{
			get
			{
				return _businessUnitCode;
			}
			set
			{
				_businessUnitCode = value;
			}
		}

		public string BusinessUnitNameEn
		{
			get
			{
				return _businessUnitNameEn;
			}
			set
			{
				_businessUnitNameEn = value;
			}
		}

		public string BusinessUnitNameAr
		{
			get
			{
				return _businessUnitNameAr;
			}
			set
			{
				_businessUnitNameAr = value;
			}
		}

		public Int32? BusinessUnitId
		{
			get
			{
				return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
			}
		}

		public bool? IsCashDiscount
		{
			get
			{
				return _isCashDiscount;
			}
			set
			{
				_isCashDiscount = value;
			}
		}

		public bool? InRoute
		{
			get
			{
				return _inRoute;
			}
			set
			{
				_inRoute = value;
			}
		}

		public Int32? CashGroupId
		{
			get
			{
				return _cashGroupId;
			}
			set
			{
				_cashGroupId = value;
			}
		}

		public string GovernerateCode
		{
			get
			{
				return _governerateCode;
			}
			set
			{
				_governerateCode = value;
			}
		}

		public string CityCode
		{
			get
			{
				return _cityCode;
			}
			set
			{
				_cityCode = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClientVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BranchId]
			,[BranchNameEn]
			,[BranchNameAr]
			,[BranchCode]
			,[CreditLimit]
			,[CreditBalance]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[ClientId]
			,[ClientTypeNameAr]
			,[ClientTypeNameEn]
			,[ClientTypeId]
			,[ClientAccountId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[PaymentTermId]
			,[IsTaxable]
			,[Longitude]
			,[Latitude]
			,[GovernerateNameAr]
			,[GovernerateNameEn]
			,[CityNameAr]
			,[CityNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsChain]
			,[LocationLevelId]
			,[ClientGroupSubCode]
			,[ClientGroupSubNameEn]
			,[ClientGroupSubNameAr]
			,[ClientGroupCode]
			,[ClientGroupNameEn]
			,[ClientGroupNameAr]
			,[IsNew]
			,[NeedValidation]
			,[BusinessUnitCode]
			,[BusinessUnitNameEn]
			,[BusinessUnitNameAr]
			,[BusinessUnitId]
			,[IsCashDiscount]
			,[InRoute]
			,[CashGroupId]
			,[GovernerateCode]
			,[CityCode]
			FROM [dbo].[ClientVw]
			";

		internal static string ctprClientVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[ClientVw]
			";

		internal static string ctprClientVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[ClientVw]
			##CRITERIA##
			";

		internal static string ctprClientVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[BranchId]
			,[BranchNameEn]
			,[BranchNameAr]
			,[BranchCode]
			,[CreditLimit]
			,[CreditBalance]
			,[Phone]
			,[Mobile]
			,[WhatsApp]
			,[IsActive]
			,[ClientId]
			,[ClientTypeNameAr]
			,[ClientTypeNameEn]
			,[ClientTypeId]
			,[ClientAccountId]
			,[RegionId]
			,[GovernerateId]
			,[CityId]
			,[ClientGroupId]
			,[ClientGroupSubId]
			,[ClientClassificationId]
			,[PaymentTermId]
			,[IsTaxable]
			,[Longitude]
			,[Latitude]
			,[GovernerateNameAr]
			,[GovernerateNameEn]
			,[CityNameAr]
			,[CityNameEn]
			,[TaxCode]
			,[CommercialCode]
			,[IsChain]
			,[LocationLevelId]
			,[ClientGroupSubCode]
			,[ClientGroupSubNameEn]
			,[ClientGroupSubNameAr]
			,[ClientGroupCode]
			,[ClientGroupNameEn]
			,[ClientGroupNameAr]
			,[IsNew]
			,[NeedValidation]
			,[BusinessUnitCode]
			,[BusinessUnitNameEn]
			,[BusinessUnitNameAr]
			,[BusinessUnitId]
			,[IsCashDiscount]
			,[InRoute]
			,[CashGroupId]
			,[GovernerateCode]
			,[CityCode]
			FROM [dbo].[ClientVw]
			##CRITERIA##
			";

		internal static string ctprClientVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[ClientVw]
			##CRITERIA##
			";

	}
}
#endregion
