/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:23 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOItem : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _itemId;
		protected Int32? _vendorId;
		protected Int32? _itemGroupId;
		protected Int32? _acceptDays;
		protected Int32? _unitId;
		protected bool? _isTaxable;
		protected string _itemCode;
		protected string _itemNameEn;
		protected string _itemNameAr;
		protected decimal? _publicPrice;
		protected decimal? _clientPrice;
		protected decimal? _returnPrice;
		protected decimal? _costPrice;
		protected decimal? _discount;
		protected bool? _isLocal;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected bool? _hasPromotion;
		protected bool? _isNewAdded;
		protected bool? _isNewStocked;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _productImage;
		protected Int32? _itemCategoryId;
		protected Int32? _itemSourceId;
		protected string _descriptionEn;
		protected string _descriptionAr;
		#endregion

		#region class methods
		public DAOItem()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Item based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOItem
		///</returns>
		///<parameters>
		///Int32? itemId
		///</parameters>
		public static DAOItem SelectOne(Int32? itemId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)itemId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOItem retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOItem();
					retObj._itemId					 = Convert.IsDBNull(dt.Rows[0]["ItemId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemId"];
					retObj._vendorId					 = Convert.IsDBNull(dt.Rows[0]["VendorId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["VendorId"];
					retObj._itemGroupId					 = Convert.IsDBNull(dt.Rows[0]["ItemGroupId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemGroupId"];
					retObj._acceptDays					 = Convert.IsDBNull(dt.Rows[0]["AcceptDays"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AcceptDays"];
					retObj._unitId					 = Convert.IsDBNull(dt.Rows[0]["UnitId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UnitId"];
					retObj._isTaxable					 = Convert.IsDBNull(dt.Rows[0]["IsTaxable"]) ? (bool?)null : (bool?)dt.Rows[0]["IsTaxable"];
					retObj._itemCode					 = Convert.IsDBNull(dt.Rows[0]["ItemCode"]) ? null : (string)dt.Rows[0]["ItemCode"];
					retObj._itemNameEn					 = Convert.IsDBNull(dt.Rows[0]["ItemNameEn"]) ? null : (string)dt.Rows[0]["ItemNameEn"];
					retObj._itemNameAr					 = Convert.IsDBNull(dt.Rows[0]["ItemNameAr"]) ? null : (string)dt.Rows[0]["ItemNameAr"];
					retObj._publicPrice					 = Convert.IsDBNull(dt.Rows[0]["PublicPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["PublicPrice"];
					retObj._clientPrice					 = Convert.IsDBNull(dt.Rows[0]["ClientPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ClientPrice"];
					retObj._returnPrice					 = Convert.IsDBNull(dt.Rows[0]["ReturnPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ReturnPrice"];
					retObj._costPrice					 = Convert.IsDBNull(dt.Rows[0]["CostPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CostPrice"];
					retObj._discount					 = Convert.IsDBNull(dt.Rows[0]["Discount"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Discount"];
					retObj._isLocal					 = Convert.IsDBNull(dt.Rows[0]["IsLocal"]) ? (bool?)null : (bool?)dt.Rows[0]["IsLocal"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["Color"]) ? null : (string)dt.Rows[0]["Color"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["Icon"]) ? null : (string)dt.Rows[0]["Icon"];
					retObj._hasPromotion					 = Convert.IsDBNull(dt.Rows[0]["HasPromotion"]) ? (bool?)null : (bool?)dt.Rows[0]["HasPromotion"];
					retObj._isNewAdded					 = Convert.IsDBNull(dt.Rows[0]["IsNewAdded"]) ? (bool?)null : (bool?)dt.Rows[0]["IsNewAdded"];
					retObj._isNewStocked					 = Convert.IsDBNull(dt.Rows[0]["IsNewStocked"]) ? (bool?)null : (bool?)dt.Rows[0]["IsNewStocked"];
					retObj._canEdit					 = Convert.IsDBNull(dt.Rows[0]["CanEdit"]) ? (bool?)null : (bool?)dt.Rows[0]["CanEdit"];
					retObj._canDelete					 = Convert.IsDBNull(dt.Rows[0]["CanDelete"]) ? (bool?)null : (bool?)dt.Rows[0]["CanDelete"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._productImage					 = Convert.IsDBNull(dt.Rows[0]["ProductImage"]) ? null : (string)dt.Rows[0]["ProductImage"];
					retObj._itemCategoryId					 = Convert.IsDBNull(dt.Rows[0]["ItemCategoryId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemCategoryId"];
					retObj._itemSourceId					 = Convert.IsDBNull(dt.Rows[0]["ItemSourceId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ItemSourceId"];
					retObj._descriptionEn					 = Convert.IsDBNull(dt.Rows[0]["DescriptionEn"]) ? null : (string)dt.Rows[0]["DescriptionEn"];
					retObj._descriptionAr					 = Convert.IsDBNull(dt.Rows[0]["DescriptionAr"]) ? null : (string)dt.Rows[0]["DescriptionAr"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Item based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_itemId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Item based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOItem.
		///</returns>
		///<parameters>
		///Int32? vendorId
		///</parameters>
		public static IList<DAOItem> SelectAllByVendorId(Int32? vendorId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAllByVendorId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)vendorId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItem> objList = new List<DAOItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItem retObj = new DAOItem();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._itemGroupId					 = Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"];
						retObj._acceptDays					 = Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._returnPrice					 = Convert.IsDBNull(row["ReturnPrice"]) ? (decimal?)null : (decimal?)row["ReturnPrice"];
						retObj._costPrice					 = Convert.IsDBNull(row["CostPrice"]) ? (decimal?)null : (decimal?)row["CostPrice"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._isLocal					 = Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._hasPromotion					 = Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"];
						retObj._isNewAdded					 = Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"];
						retObj._isNewStocked					 = Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._productImage					 = Convert.IsDBNull(row["ProductImage"]) ? null : (string)row["ProductImage"];
						retObj._itemCategoryId					 = Convert.IsDBNull(row["ItemCategoryId"]) ? (Int32?)null : (Int32?)row["ItemCategoryId"];
						retObj._itemSourceId					 = Convert.IsDBNull(row["ItemSourceId"]) ? (Int32?)null : (Int32?)row["ItemSourceId"];
						retObj._descriptionEn					 = Convert.IsDBNull(row["DescriptionEn"]) ? null : (string)row["DescriptionEn"];
						retObj._descriptionAr					 = Convert.IsDBNull(row["DescriptionAr"]) ? null : (string)row["DescriptionAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? vendorId
		///</parameters>
		public static Int32 SelectAllByVendorIdCount(Int32? vendorId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAllByVendorIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)vendorId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Item with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? vendorId
		///</parameters>
		public static void DeleteAllByVendorId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? vendorId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_DeleteAllByVendorId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)vendorId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Item based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOItem.
		///</returns>
		///<parameters>
		///Int32? itemCategoryId
		///</parameters>
		public static IList<DAOItem> SelectAllByItemCategoryId(Int32? itemCategoryId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAllByItemCategoryId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemCategoryId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemCategoryId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItem> objList = new List<DAOItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItem retObj = new DAOItem();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._itemGroupId					 = Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"];
						retObj._acceptDays					 = Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._returnPrice					 = Convert.IsDBNull(row["ReturnPrice"]) ? (decimal?)null : (decimal?)row["ReturnPrice"];
						retObj._costPrice					 = Convert.IsDBNull(row["CostPrice"]) ? (decimal?)null : (decimal?)row["CostPrice"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._isLocal					 = Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._hasPromotion					 = Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"];
						retObj._isNewAdded					 = Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"];
						retObj._isNewStocked					 = Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._productImage					 = Convert.IsDBNull(row["ProductImage"]) ? null : (string)row["ProductImage"];
						retObj._itemCategoryId					 = Convert.IsDBNull(row["ItemCategoryId"]) ? (Int32?)null : (Int32?)row["ItemCategoryId"];
						retObj._itemSourceId					 = Convert.IsDBNull(row["ItemSourceId"]) ? (Int32?)null : (Int32?)row["ItemSourceId"];
						retObj._descriptionEn					 = Convert.IsDBNull(row["DescriptionEn"]) ? null : (string)row["DescriptionEn"];
						retObj._descriptionAr					 = Convert.IsDBNull(row["DescriptionAr"]) ? null : (string)row["DescriptionAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? itemCategoryId
		///</parameters>
		public static Int32 SelectAllByItemCategoryIdCount(Int32? itemCategoryId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAllByItemCategoryIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemCategoryId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemCategoryId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Item with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemCategoryId
		///</parameters>
		public static void DeleteAllByItemCategoryId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemCategoryId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_DeleteAllByItemCategoryId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemCategoryId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemCategoryId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Item based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOItem.
		///</returns>
		///<parameters>
		///Int32? itemSourceId
		///</parameters>
		public static IList<DAOItem> SelectAllByItemSourceId(Int32? itemSourceId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAllByItemSourceId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemSourceId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemSourceId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItem> objList = new List<DAOItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItem retObj = new DAOItem();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._itemGroupId					 = Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"];
						retObj._acceptDays					 = Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._returnPrice					 = Convert.IsDBNull(row["ReturnPrice"]) ? (decimal?)null : (decimal?)row["ReturnPrice"];
						retObj._costPrice					 = Convert.IsDBNull(row["CostPrice"]) ? (decimal?)null : (decimal?)row["CostPrice"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._isLocal					 = Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._hasPromotion					 = Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"];
						retObj._isNewAdded					 = Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"];
						retObj._isNewStocked					 = Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._productImage					 = Convert.IsDBNull(row["ProductImage"]) ? null : (string)row["ProductImage"];
						retObj._itemCategoryId					 = Convert.IsDBNull(row["ItemCategoryId"]) ? (Int32?)null : (Int32?)row["ItemCategoryId"];
						retObj._itemSourceId					 = Convert.IsDBNull(row["ItemSourceId"]) ? (Int32?)null : (Int32?)row["ItemSourceId"];
						retObj._descriptionEn					 = Convert.IsDBNull(row["DescriptionEn"]) ? null : (string)row["DescriptionEn"];
						retObj._descriptionAr					 = Convert.IsDBNull(row["DescriptionAr"]) ? null : (string)row["DescriptionAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? itemSourceId
		///</parameters>
		public static Int32 SelectAllByItemSourceIdCount(Int32? itemSourceId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAllByItemSourceIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemSourceId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemSourceId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Item with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemSourceId
		///</parameters>
		public static void DeleteAllByItemSourceId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? itemSourceId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_DeleteAllByItemSourceId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemSourceId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)itemSourceId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Item
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _itemId));
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_vendorId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AcceptDays", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_acceptDays?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_unitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsTaxable", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isTaxable?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PublicPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_publicPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_clientPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReturnPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_returnPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CostPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_costPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsLocal", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isLocal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HasPromotion", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_hasPromotion?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNewAdded", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNewAdded?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNewStocked", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNewStocked?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductImage", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_productImage?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemCategoryId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemCategoryId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemSourceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemSourceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescriptionEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descriptionEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescriptionAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descriptionAr?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_itemId					 = Convert.IsDBNull(command.Parameters["@ItemId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemId"].Value;
				_vendorId					 = Convert.IsDBNull(command.Parameters["@VendorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VendorId"].Value;
				_itemGroupId					 = Convert.IsDBNull(command.Parameters["@ItemGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemGroupId"].Value;
				_acceptDays					 = Convert.IsDBNull(command.Parameters["@AcceptDays"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AcceptDays"].Value;
				_unitId					 = Convert.IsDBNull(command.Parameters["@UnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UnitId"].Value;
				_isTaxable					 = Convert.IsDBNull(command.Parameters["@IsTaxable"].Value) ? (bool?)null : (bool?)command.Parameters["@IsTaxable"].Value;
				_itemCode					 = Convert.IsDBNull(command.Parameters["@ItemCode"].Value) ? null : (string)command.Parameters["@ItemCode"].Value;
				_itemNameEn					 = Convert.IsDBNull(command.Parameters["@ItemNameEn"].Value) ? null : (string)command.Parameters["@ItemNameEn"].Value;
				_itemNameAr					 = Convert.IsDBNull(command.Parameters["@ItemNameAr"].Value) ? null : (string)command.Parameters["@ItemNameAr"].Value;
				_publicPrice					 = Convert.IsDBNull(command.Parameters["@PublicPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PublicPrice"].Value;
				_clientPrice					 = Convert.IsDBNull(command.Parameters["@ClientPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ClientPrice"].Value;
				_returnPrice					 = Convert.IsDBNull(command.Parameters["@ReturnPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ReturnPrice"].Value;
				_costPrice					 = Convert.IsDBNull(command.Parameters["@CostPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CostPrice"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["@Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Discount"].Value;
				_isLocal					 = Convert.IsDBNull(command.Parameters["@IsLocal"].Value) ? (bool?)null : (bool?)command.Parameters["@IsLocal"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_hasPromotion					 = Convert.IsDBNull(command.Parameters["@HasPromotion"].Value) ? (bool?)null : (bool?)command.Parameters["@HasPromotion"].Value;
				_isNewAdded					 = Convert.IsDBNull(command.Parameters["@IsNewAdded"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNewAdded"].Value;
				_isNewStocked					 = Convert.IsDBNull(command.Parameters["@IsNewStocked"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNewStocked"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_productImage					 = Convert.IsDBNull(command.Parameters["@ProductImage"].Value) ? null : (string)command.Parameters["@ProductImage"].Value;
				_itemCategoryId					 = Convert.IsDBNull(command.Parameters["@ItemCategoryId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemCategoryId"].Value;
				_itemSourceId					 = Convert.IsDBNull(command.Parameters["@ItemSourceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemSourceId"].Value;
				_descriptionEn					 = Convert.IsDBNull(command.Parameters["@DescriptionEn"].Value) ? null : (string)command.Parameters["@DescriptionEn"].Value;
				_descriptionAr					 = Convert.IsDBNull(command.Parameters["@DescriptionAr"].Value) ? null : (string)command.Parameters["@DescriptionAr"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Item
		///</Summary>
		///<returns>
		///IList-DAOItem.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOItem> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItem> objList = new List<DAOItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItem retObj = new DAOItem();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._itemGroupId					 = Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"];
						retObj._acceptDays					 = Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._returnPrice					 = Convert.IsDBNull(row["ReturnPrice"]) ? (decimal?)null : (decimal?)row["ReturnPrice"];
						retObj._costPrice					 = Convert.IsDBNull(row["CostPrice"]) ? (decimal?)null : (decimal?)row["CostPrice"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._isLocal					 = Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._hasPromotion					 = Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"];
						retObj._isNewAdded					 = Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"];
						retObj._isNewStocked					 = Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._productImage					 = Convert.IsDBNull(row["ProductImage"]) ? null : (string)row["ProductImage"];
						retObj._itemCategoryId					 = Convert.IsDBNull(row["ItemCategoryId"]) ? (Int32?)null : (Int32?)row["ItemCategoryId"];
						retObj._itemSourceId					 = Convert.IsDBNull(row["ItemSourceId"]) ? (Int32?)null : (Int32?)row["ItemSourceId"];
						retObj._descriptionEn					 = Convert.IsDBNull(row["DescriptionEn"]) ? null : (string)row["DescriptionEn"];
						retObj._descriptionAr					 = Convert.IsDBNull(row["DescriptionAr"]) ? null : (string)row["DescriptionAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiItem
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ItemId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"]);
						if (string.Compare(projection.Member, "VendorId", true) == 0) lst.Add(Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"]);
						if (string.Compare(projection.Member, "ItemGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"]);
						if (string.Compare(projection.Member, "AcceptDays", true) == 0) lst.Add(Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"]);
						if (string.Compare(projection.Member, "UnitId", true) == 0) lst.Add(Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"]);
						if (string.Compare(projection.Member, "IsTaxable", true) == 0) lst.Add(Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"]);
						if (string.Compare(projection.Member, "ItemCode", true) == 0) lst.Add(Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"]);
						if (string.Compare(projection.Member, "ItemNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"]);
						if (string.Compare(projection.Member, "ItemNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"]);
						if (string.Compare(projection.Member, "PublicPrice", true) == 0) lst.Add(Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"]);
						if (string.Compare(projection.Member, "ClientPrice", true) == 0) lst.Add(Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"]);
						if (string.Compare(projection.Member, "ReturnPrice", true) == 0) lst.Add(Convert.IsDBNull(row["ReturnPrice"]) ? (decimal?)null : (decimal?)row["ReturnPrice"]);
						if (string.Compare(projection.Member, "CostPrice", true) == 0) lst.Add(Convert.IsDBNull(row["CostPrice"]) ? (decimal?)null : (decimal?)row["CostPrice"]);
						if (string.Compare(projection.Member, "Discount", true) == 0) lst.Add(Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"]);
						if (string.Compare(projection.Member, "IsLocal", true) == 0) lst.Add(Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "HasPromotion", true) == 0) lst.Add(Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"]);
						if (string.Compare(projection.Member, "IsNewAdded", true) == 0) lst.Add(Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"]);
						if (string.Compare(projection.Member, "IsNewStocked", true) == 0) lst.Add(Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"]);
						if (string.Compare(projection.Member, "CanEdit", true) == 0) lst.Add(Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"]);
						if (string.Compare(projection.Member, "CanDelete", true) == 0) lst.Add(Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "ProductImage", true) == 0) lst.Add(Convert.IsDBNull(row["ProductImage"]) ? null : (string)row["ProductImage"]);
						if (string.Compare(projection.Member, "ItemCategoryId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemCategoryId"]) ? (Int32?)null : (Int32?)row["ItemCategoryId"]);
						if (string.Compare(projection.Member, "ItemSourceId", true) == 0) lst.Add(Convert.IsDBNull(row["ItemSourceId"]) ? (Int32?)null : (Int32?)row["ItemSourceId"]);
						if (string.Compare(projection.Member, "DescriptionEn", true) == 0) lst.Add(Convert.IsDBNull(row["DescriptionEn"]) ? null : (string)row["DescriptionEn"]);
						if (string.Compare(projection.Member, "DescriptionAr", true) == 0) lst.Add(Convert.IsDBNull(row["DescriptionAr"]) ? null : (string)row["DescriptionAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Item
		///</Summary>
		///<returns>
		///IList-DAOItem.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOItem> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Item");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOItem> objList = new List<DAOItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOItem retObj = new DAOItem();
						retObj._itemId					 = Convert.IsDBNull(row["ItemId"]) ? (Int32?)null : (Int32?)row["ItemId"];
						retObj._vendorId					 = Convert.IsDBNull(row["VendorId"]) ? (Int32?)null : (Int32?)row["VendorId"];
						retObj._itemGroupId					 = Convert.IsDBNull(row["ItemGroupId"]) ? (Int32?)null : (Int32?)row["ItemGroupId"];
						retObj._acceptDays					 = Convert.IsDBNull(row["AcceptDays"]) ? (Int32?)null : (Int32?)row["AcceptDays"];
						retObj._unitId					 = Convert.IsDBNull(row["UnitId"]) ? (Int32?)null : (Int32?)row["UnitId"];
						retObj._isTaxable					 = Convert.IsDBNull(row["IsTaxable"]) ? (bool?)null : (bool?)row["IsTaxable"];
						retObj._itemCode					 = Convert.IsDBNull(row["ItemCode"]) ? null : (string)row["ItemCode"];
						retObj._itemNameEn					 = Convert.IsDBNull(row["ItemNameEn"]) ? null : (string)row["ItemNameEn"];
						retObj._itemNameAr					 = Convert.IsDBNull(row["ItemNameAr"]) ? null : (string)row["ItemNameAr"];
						retObj._publicPrice					 = Convert.IsDBNull(row["PublicPrice"]) ? (decimal?)null : (decimal?)row["PublicPrice"];
						retObj._clientPrice					 = Convert.IsDBNull(row["ClientPrice"]) ? (decimal?)null : (decimal?)row["ClientPrice"];
						retObj._returnPrice					 = Convert.IsDBNull(row["ReturnPrice"]) ? (decimal?)null : (decimal?)row["ReturnPrice"];
						retObj._costPrice					 = Convert.IsDBNull(row["CostPrice"]) ? (decimal?)null : (decimal?)row["CostPrice"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (decimal?)null : (decimal?)row["Discount"];
						retObj._isLocal					 = Convert.IsDBNull(row["IsLocal"]) ? (bool?)null : (bool?)row["IsLocal"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._hasPromotion					 = Convert.IsDBNull(row["HasPromotion"]) ? (bool?)null : (bool?)row["HasPromotion"];
						retObj._isNewAdded					 = Convert.IsDBNull(row["IsNewAdded"]) ? (bool?)null : (bool?)row["IsNewAdded"];
						retObj._isNewStocked					 = Convert.IsDBNull(row["IsNewStocked"]) ? (bool?)null : (bool?)row["IsNewStocked"];
						retObj._canEdit					 = Convert.IsDBNull(row["CanEdit"]) ? (bool?)null : (bool?)row["CanEdit"];
						retObj._canDelete					 = Convert.IsDBNull(row["CanDelete"]) ? (bool?)null : (bool?)row["CanDelete"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._productImage					 = Convert.IsDBNull(row["ProductImage"]) ? null : (string)row["ProductImage"];
						retObj._itemCategoryId					 = Convert.IsDBNull(row["ItemCategoryId"]) ? (Int32?)null : (Int32?)row["ItemCategoryId"];
						retObj._itemSourceId					 = Convert.IsDBNull(row["ItemSourceId"]) ? (Int32?)null : (Int32?)row["ItemSourceId"];
						retObj._descriptionEn					 = Convert.IsDBNull(row["DescriptionEn"]) ? null : (string)row["DescriptionEn"];
						retObj._descriptionAr					 = Convert.IsDBNull(row["DescriptionAr"]) ? null : (string)row["DescriptionAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Item
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprItem_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Item based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprItem_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ItemId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_itemId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VendorId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_vendorId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AcceptDays", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_acceptDays?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_unitId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsTaxable", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isTaxable?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemNameEn", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemNameEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemNameAr", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_itemNameAr?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PublicPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_publicPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_clientPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReturnPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_returnPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CostPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_costPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discount", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 18, 3, "", DataRowVersion.Proposed, (object)_discount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsLocal", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isLocal?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HasPromotion", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_hasPromotion?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNewAdded", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNewAdded?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsNewStocked", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isNewStocked?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanEdit", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canEdit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CanDelete", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_canDelete?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductImage", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_productImage?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemCategoryId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemCategoryId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ItemSourceId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_itemSourceId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescriptionEn", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descriptionEn?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DescriptionAr", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_descriptionAr?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_itemId					 = Convert.IsDBNull(command.Parameters["@ItemId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemId"].Value;
				_vendorId					 = Convert.IsDBNull(command.Parameters["@VendorId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@VendorId"].Value;
				_itemGroupId					 = Convert.IsDBNull(command.Parameters["@ItemGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemGroupId"].Value;
				_acceptDays					 = Convert.IsDBNull(command.Parameters["@AcceptDays"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AcceptDays"].Value;
				_unitId					 = Convert.IsDBNull(command.Parameters["@UnitId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UnitId"].Value;
				_isTaxable					 = Convert.IsDBNull(command.Parameters["@IsTaxable"].Value) ? (bool?)null : (bool?)command.Parameters["@IsTaxable"].Value;
				_itemCode					 = Convert.IsDBNull(command.Parameters["@ItemCode"].Value) ? null : (string)command.Parameters["@ItemCode"].Value;
				_itemNameEn					 = Convert.IsDBNull(command.Parameters["@ItemNameEn"].Value) ? null : (string)command.Parameters["@ItemNameEn"].Value;
				_itemNameAr					 = Convert.IsDBNull(command.Parameters["@ItemNameAr"].Value) ? null : (string)command.Parameters["@ItemNameAr"].Value;
				_publicPrice					 = Convert.IsDBNull(command.Parameters["@PublicPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@PublicPrice"].Value;
				_clientPrice					 = Convert.IsDBNull(command.Parameters["@ClientPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ClientPrice"].Value;
				_returnPrice					 = Convert.IsDBNull(command.Parameters["@ReturnPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@ReturnPrice"].Value;
				_costPrice					 = Convert.IsDBNull(command.Parameters["@CostPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@CostPrice"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["@Discount"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Discount"].Value;
				_isLocal					 = Convert.IsDBNull(command.Parameters["@IsLocal"].Value) ? (bool?)null : (bool?)command.Parameters["@IsLocal"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_hasPromotion					 = Convert.IsDBNull(command.Parameters["@HasPromotion"].Value) ? (bool?)null : (bool?)command.Parameters["@HasPromotion"].Value;
				_isNewAdded					 = Convert.IsDBNull(command.Parameters["@IsNewAdded"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNewAdded"].Value;
				_isNewStocked					 = Convert.IsDBNull(command.Parameters["@IsNewStocked"].Value) ? (bool?)null : (bool?)command.Parameters["@IsNewStocked"].Value;
				_canEdit					 = Convert.IsDBNull(command.Parameters["@CanEdit"].Value) ? (bool?)null : (bool?)command.Parameters["@CanEdit"].Value;
				_canDelete					 = Convert.IsDBNull(command.Parameters["@CanDelete"].Value) ? (bool?)null : (bool?)command.Parameters["@CanDelete"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_productImage					 = Convert.IsDBNull(command.Parameters["@ProductImage"].Value) ? null : (string)command.Parameters["@ProductImage"].Value;
				_itemCategoryId					 = Convert.IsDBNull(command.Parameters["@ItemCategoryId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemCategoryId"].Value;
				_itemSourceId					 = Convert.IsDBNull(command.Parameters["@ItemSourceId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ItemSourceId"].Value;
				_descriptionEn					 = Convert.IsDBNull(command.Parameters["@DescriptionEn"].Value) ? null : (string)command.Parameters["@DescriptionEn"].Value;
				_descriptionAr					 = Convert.IsDBNull(command.Parameters["@DescriptionAr"].Value) ? null : (string)command.Parameters["@DescriptionAr"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ItemId
		{
			get
			{
				return _itemId;
			}
			set
			{
				_itemId = value;
			}
		}

		public Int32? VendorId
		{
			get
			{
				return _vendorId;
			}
			set
			{
				_vendorId = value;
			}
		}

		public Int32? ItemGroupId
		{
			get
			{
				return _itemGroupId;
			}
			set
			{
				_itemGroupId = value;
			}
		}

		public Int32? AcceptDays
		{
			get
			{
				return _acceptDays;
			}
			set
			{
				_acceptDays = value;
			}
		}

		public Int32? UnitId
		{
			get
			{
				return _unitId;
			}
			set
			{
				_unitId = value;
			}
		}

		public bool? IsTaxable
		{
			get
			{
				return _isTaxable;
			}
			set
			{
				_isTaxable = value;
			}
		}

		public string ItemCode
		{
			get
			{
				return _itemCode;
			}
			set
			{
				_itemCode = value;
			}
		}

		public string ItemNameEn
		{
			get
			{
				return _itemNameEn;
			}
			set
			{
				_itemNameEn = value;
			}
		}

		public string ItemNameAr
		{
			get
			{
				return _itemNameAr;
			}
			set
			{
				_itemNameAr = value;
			}
		}

		public decimal? PublicPrice
		{
			get
			{
				return _publicPrice;
			}
			set
			{
				_publicPrice = value;
			}
		}

		public decimal? ClientPrice
		{
			get
			{
				return _clientPrice;
			}
			set
			{
				_clientPrice = value;
			}
		}

		public decimal? ReturnPrice
		{
			get
			{
				return _returnPrice;
			}
			set
			{
				_returnPrice = value;
			}
		}

		public decimal? CostPrice
		{
			get
			{
				return _costPrice;
			}
			set
			{
				_costPrice = value;
			}
		}

		public decimal? Discount
		{
			get
			{
				return _discount;
			}
			set
			{
				_discount = value;
			}
		}

		public bool? IsLocal
		{
			get
			{
				return _isLocal;
			}
			set
			{
				_isLocal = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public bool? HasPromotion
		{
			get
			{
				return _hasPromotion;
			}
			set
			{
				_hasPromotion = value;
			}
		}

		public bool? IsNewAdded
		{
			get
			{
				return _isNewAdded;
			}
			set
			{
				_isNewAdded = value;
			}
		}

		public bool? IsNewStocked
		{
			get
			{
				return _isNewStocked;
			}
			set
			{
				_isNewStocked = value;
			}
		}

		public bool? CanEdit
		{
			get
			{
				return _canEdit;
			}
			set
			{
				_canEdit = value;
			}
		}

		public bool? CanDelete
		{
			get
			{
				return _canDelete;
			}
			set
			{
				_canDelete = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public string ProductImage
		{
			get
			{
				return _productImage;
			}
			set
			{
				_productImage = value;
			}
		}

		public Int32? ItemCategoryId
		{
			get
			{
				return _itemCategoryId;
			}
			set
			{
				_itemCategoryId = value;
			}
		}

		public Int32? ItemSourceId
		{
			get
			{
				return _itemSourceId;
			}
			set
			{
				_itemSourceId = value;
			}
		}

		public string DescriptionEn
		{
			get
			{
				return _descriptionEn;
			}
			set
			{
				_descriptionEn = value;
			}
		}

		public string DescriptionAr
		{
			get
			{
				return _descriptionAr;
			}
			set
			{
				_descriptionAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprItem_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ItemId]
			,[VendorId]
			,[ItemGroupId]
			,[AcceptDays]
			,[UnitId]
			,[IsTaxable]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[ReturnPrice]
			,[CostPrice]
			,[Discount]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[ProductImage]
			,[ItemCategoryId]
			,[ItemSourceId]
			,[DescriptionEn]
			,[DescriptionAr]
			FROM [dbo].[Item]
			WHERE 
			[ItemId] = @ItemId
			";

		internal static string ctprItem_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Item]
			WHERE 
			[ItemId] = @ItemId
			";

		internal static string ctprItem_SelectAllByVendorId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ItemId]
			,[VendorId]
			,[ItemGroupId]
			,[AcceptDays]
			,[UnitId]
			,[IsTaxable]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[ReturnPrice]
			,[CostPrice]
			,[Discount]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[ProductImage]
			,[ItemCategoryId]
			,[ItemSourceId]
			,[DescriptionEn]
			,[DescriptionAr]
			FROM [dbo].[Item]
			WHERE 
			[VendorId] = @VendorId OR ([VendorId] IS NULL AND @VendorId IS NULL)
			";

		internal static string ctprItem_SelectAllByVendorIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Item]
			WHERE 
			[VendorId] = @VendorId OR ([VendorId] IS NULL AND @VendorId IS NULL)
			";

		internal static string ctprItem_DeleteAllByVendorId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Item]
			WHERE 
			[VendorId] = @VendorId OR ([VendorId] IS NULL AND @VendorId IS NULL)
			";

		internal static string ctprItem_SelectAllByItemCategoryId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ItemId]
			,[VendorId]
			,[ItemGroupId]
			,[AcceptDays]
			,[UnitId]
			,[IsTaxable]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[ReturnPrice]
			,[CostPrice]
			,[Discount]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[ProductImage]
			,[ItemCategoryId]
			,[ItemSourceId]
			,[DescriptionEn]
			,[DescriptionAr]
			FROM [dbo].[Item]
			WHERE 
			[ItemCategoryId] = @ItemCategoryId OR ([ItemCategoryId] IS NULL AND @ItemCategoryId IS NULL)
			";

		internal static string ctprItem_SelectAllByItemCategoryIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Item]
			WHERE 
			[ItemCategoryId] = @ItemCategoryId OR ([ItemCategoryId] IS NULL AND @ItemCategoryId IS NULL)
			";

		internal static string ctprItem_DeleteAllByItemCategoryId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Item]
			WHERE 
			[ItemCategoryId] = @ItemCategoryId OR ([ItemCategoryId] IS NULL AND @ItemCategoryId IS NULL)
			";

		internal static string ctprItem_SelectAllByItemSourceId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ItemId]
			,[VendorId]
			,[ItemGroupId]
			,[AcceptDays]
			,[UnitId]
			,[IsTaxable]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[ReturnPrice]
			,[CostPrice]
			,[Discount]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[ProductImage]
			,[ItemCategoryId]
			,[ItemSourceId]
			,[DescriptionEn]
			,[DescriptionAr]
			FROM [dbo].[Item]
			WHERE 
			[ItemSourceId] = @ItemSourceId OR ([ItemSourceId] IS NULL AND @ItemSourceId IS NULL)
			";

		internal static string ctprItem_SelectAllByItemSourceIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Item]
			WHERE 
			[ItemSourceId] = @ItemSourceId OR ([ItemSourceId] IS NULL AND @ItemSourceId IS NULL)
			";

		internal static string ctprItem_DeleteAllByItemSourceId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Item]
			WHERE 
			[ItemSourceId] = @ItemSourceId OR ([ItemSourceId] IS NULL AND @ItemSourceId IS NULL)
			";

		internal static string ctprItem_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Item]
			(
			[VendorId]
			,[ItemGroupId]
			,[AcceptDays]
			,[UnitId]
			,[IsTaxable]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[ReturnPrice]
			,[CostPrice]
			,[Discount]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[ProductImage]
			,[ItemCategoryId]
			,[ItemSourceId]
			,[DescriptionEn]
			,[DescriptionAr]
			)
			VALUES
			(
			@VendorId
			,@ItemGroupId
			,@AcceptDays
			,@UnitId
			,@IsTaxable
			,@ItemCode
			,@ItemNameEn
			,@ItemNameAr
			,@PublicPrice
			,@ClientPrice
			,@ReturnPrice
			,@CostPrice
			,@Discount
			,@IsLocal
			,@IsActive
			,@DisplayOrder
			,@Color
			,@Icon
			,@HasPromotion
			,@IsNewAdded
			,@IsNewStocked
			,@CanEdit
			,@CanDelete
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@ProductImage
			,@ItemCategoryId
			,@ItemSourceId
			,@DescriptionEn
			,@DescriptionAr
			)
			SELECT 
			@ItemId = [ItemId]
			,@VendorId = [VendorId]
			,@ItemGroupId = [ItemGroupId]
			,@AcceptDays = [AcceptDays]
			,@UnitId = [UnitId]
			,@IsTaxable = [IsTaxable]
			,@ItemCode = [ItemCode]
			,@ItemNameEn = [ItemNameEn]
			,@ItemNameAr = [ItemNameAr]
			,@PublicPrice = [PublicPrice]
			,@ClientPrice = [ClientPrice]
			,@ReturnPrice = [ReturnPrice]
			,@CostPrice = [CostPrice]
			,@Discount = [Discount]
			,@IsLocal = [IsLocal]
			,@IsActive = [IsActive]
			,@DisplayOrder = [DisplayOrder]
			,@Color = [Color]
			,@Icon = [Icon]
			,@HasPromotion = [HasPromotion]
			,@IsNewAdded = [IsNewAdded]
			,@IsNewStocked = [IsNewStocked]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@ProductImage = [ProductImage]
			,@ItemCategoryId = [ItemCategoryId]
			,@ItemSourceId = [ItemSourceId]
			,@DescriptionEn = [DescriptionEn]
			,@DescriptionAr = [DescriptionAr]
			FROM [dbo].[Item]
			WHERE 
			[ItemId] = SCOPE_IDENTITY()
			";

		internal static string ctprItem_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ItemId]
			,[VendorId]
			,[ItemGroupId]
			,[AcceptDays]
			,[UnitId]
			,[IsTaxable]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[ReturnPrice]
			,[CostPrice]
			,[Discount]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[ProductImage]
			,[ItemCategoryId]
			,[ItemSourceId]
			,[DescriptionEn]
			,[DescriptionAr]
			FROM [dbo].[Item]
			";

		internal static string ctprItem_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Item]
			";

		internal static string ctprItem_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Item]
			##CRITERIA##
			";

		internal static string ctprItem_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ItemId]
			,[VendorId]
			,[ItemGroupId]
			,[AcceptDays]
			,[UnitId]
			,[IsTaxable]
			,[ItemCode]
			,[ItemNameEn]
			,[ItemNameAr]
			,[PublicPrice]
			,[ClientPrice]
			,[ReturnPrice]
			,[CostPrice]
			,[Discount]
			,[IsLocal]
			,[IsActive]
			,[DisplayOrder]
			,[Color]
			,[Icon]
			,[HasPromotion]
			,[IsNewAdded]
			,[IsNewStocked]
			,[CanEdit]
			,[CanDelete]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[ProductImage]
			,[ItemCategoryId]
			,[ItemSourceId]
			,[DescriptionEn]
			,[DescriptionAr]
			FROM [dbo].[Item]
			##CRITERIA##
			";

		internal static string ctprItem_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Item]
			##CRITERIA##
			";

		internal static string ctprItem_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Item]
			SET
			[VendorId] = @VendorId
			,[ItemGroupId] = @ItemGroupId
			,[AcceptDays] = @AcceptDays
			,[UnitId] = @UnitId
			,[IsTaxable] = @IsTaxable
			,[ItemCode] = @ItemCode
			,[ItemNameEn] = @ItemNameEn
			,[ItemNameAr] = @ItemNameAr
			,[PublicPrice] = @PublicPrice
			,[ClientPrice] = @ClientPrice
			,[ReturnPrice] = @ReturnPrice
			,[CostPrice] = @CostPrice
			,[Discount] = @Discount
			,[IsLocal] = @IsLocal
			,[IsActive] = @IsActive
			,[DisplayOrder] = @DisplayOrder
			,[Color] = @Color
			,[Icon] = @Icon
			,[HasPromotion] = @HasPromotion
			,[IsNewAdded] = @IsNewAdded
			,[IsNewStocked] = @IsNewStocked
			,[CanEdit] = @CanEdit
			,[CanDelete] = @CanDelete
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[ProductImage] = @ProductImage
			,[ItemCategoryId] = @ItemCategoryId
			,[ItemSourceId] = @ItemSourceId
			,[DescriptionEn] = @DescriptionEn
			,[DescriptionAr] = @DescriptionAr
			WHERE 
			[ItemId] = @ItemId
			SELECT 
			@ItemId = [ItemId]
			,@VendorId = [VendorId]
			,@ItemGroupId = [ItemGroupId]
			,@AcceptDays = [AcceptDays]
			,@UnitId = [UnitId]
			,@IsTaxable = [IsTaxable]
			,@ItemCode = [ItemCode]
			,@ItemNameEn = [ItemNameEn]
			,@ItemNameAr = [ItemNameAr]
			,@PublicPrice = [PublicPrice]
			,@ClientPrice = [ClientPrice]
			,@ReturnPrice = [ReturnPrice]
			,@CostPrice = [CostPrice]
			,@Discount = [Discount]
			,@IsLocal = [IsLocal]
			,@IsActive = [IsActive]
			,@DisplayOrder = [DisplayOrder]
			,@Color = [Color]
			,@Icon = [Icon]
			,@HasPromotion = [HasPromotion]
			,@IsNewAdded = [IsNewAdded]
			,@IsNewStocked = [IsNewStocked]
			,@CanEdit = [CanEdit]
			,@CanDelete = [CanDelete]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@ProductImage = [ProductImage]
			,@ItemCategoryId = [ItemCategoryId]
			,@ItemSourceId = [ItemSourceId]
			,@DescriptionEn = [DescriptionEn]
			,@DescriptionAr = [DescriptionAr]
			FROM [dbo].[Item]
			WHERE 
			[ItemId] = @ItemId
			";

	}
}
#endregion
