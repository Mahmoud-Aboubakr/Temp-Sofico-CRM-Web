/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientRoute : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _clientRouteId;
		protected Int32? _routeTypeId;
		protected Int32? _routeId;
		protected Int32? _clientId;
		protected bool? _day1;
		protected bool? _day2;
		protected bool? _day3;
		protected bool? _day4;
		protected bool? _day5;
		protected bool? _day6;
		protected bool? _day7;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		#endregion

		#region class methods
		public DAOClientRoute()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Client_Route based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOClientRoute
		///</returns>
		///<parameters>
		///Int32? clientRouteId
		///</parameters>
		public static DAOClientRoute SelectOne(Int32? clientRouteId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Route");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientRouteId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)clientRouteId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOClientRoute retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOClientRoute();
					retObj._clientRouteId					 = Convert.IsDBNull(dt.Rows[0]["ClientRouteId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientRouteId"];
					retObj._routeTypeId					 = Convert.IsDBNull(dt.Rows[0]["RouteTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RouteTypeId"];
					retObj._routeId					 = Convert.IsDBNull(dt.Rows[0]["RouteId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RouteId"];
					retObj._clientId					 = Convert.IsDBNull(dt.Rows[0]["ClientId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ClientId"];
					retObj._day1					 = Convert.IsDBNull(dt.Rows[0]["Day1"]) ? (bool?)null : (bool?)dt.Rows[0]["Day1"];
					retObj._day2					 = Convert.IsDBNull(dt.Rows[0]["Day2"]) ? (bool?)null : (bool?)dt.Rows[0]["Day2"];
					retObj._day3					 = Convert.IsDBNull(dt.Rows[0]["Day3"]) ? (bool?)null : (bool?)dt.Rows[0]["Day3"];
					retObj._day4					 = Convert.IsDBNull(dt.Rows[0]["Day4"]) ? (bool?)null : (bool?)dt.Rows[0]["Day4"];
					retObj._day5					 = Convert.IsDBNull(dt.Rows[0]["Day5"]) ? (bool?)null : (bool?)dt.Rows[0]["Day5"];
					retObj._day6					 = Convert.IsDBNull(dt.Rows[0]["Day6"]) ? (bool?)null : (bool?)dt.Rows[0]["Day6"];
					retObj._day7					 = Convert.IsDBNull(dt.Rows[0]["Day7"]) ? (bool?)null : (bool?)dt.Rows[0]["Day7"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Client_Route based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientRouteId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_clientRouteId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Route based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientRoute.
		///</returns>
		///<parameters>
		///Int32? routeTypeId
		///</parameters>
		public static IList<DAOClientRoute> SelectAllByRouteTypeId(Int32? routeTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAllByRouteTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Route");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RouteTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)routeTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientRoute> objList = new List<DAOClientRoute>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientRoute retObj = new DAOClientRoute();
						retObj._clientRouteId					 = Convert.IsDBNull(row["ClientRouteId"]) ? (Int32?)null : (Int32?)row["ClientRouteId"];
						retObj._routeTypeId					 = Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"];
						retObj._routeId					 = Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (bool?)null : (bool?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (bool?)null : (bool?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (bool?)null : (bool?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (bool?)null : (bool?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (bool?)null : (bool?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (bool?)null : (bool?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (bool?)null : (bool?)row["Day7"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? routeTypeId
		///</parameters>
		public static Int32 SelectAllByRouteTypeIdCount(Int32? routeTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAllByRouteTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RouteTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)routeTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Route with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? routeTypeId
		///</parameters>
		public static void DeleteAllByRouteTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? routeTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_DeleteAllByRouteTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RouteTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)routeTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Route based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientRoute.
		///</returns>
		///<parameters>
		///Int32? routeId
		///</parameters>
		public static IList<DAOClientRoute> SelectAllByRouteId(Int32? routeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAllByRouteId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Route");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RouteId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)routeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientRoute> objList = new List<DAOClientRoute>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientRoute retObj = new DAOClientRoute();
						retObj._clientRouteId					 = Convert.IsDBNull(row["ClientRouteId"]) ? (Int32?)null : (Int32?)row["ClientRouteId"];
						retObj._routeTypeId					 = Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"];
						retObj._routeId					 = Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (bool?)null : (bool?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (bool?)null : (bool?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (bool?)null : (bool?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (bool?)null : (bool?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (bool?)null : (bool?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (bool?)null : (bool?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (bool?)null : (bool?)row["Day7"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? routeId
		///</parameters>
		public static Int32 SelectAllByRouteIdCount(Int32? routeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAllByRouteIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RouteId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)routeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Route with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? routeId
		///</parameters>
		public static void DeleteAllByRouteId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? routeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_DeleteAllByRouteId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RouteId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)routeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Client_Route based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOClientRoute.
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static IList<DAOClientRoute> SelectAllByClientId(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAllByClientId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Route");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientRoute> objList = new List<DAOClientRoute>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientRoute retObj = new DAOClientRoute();
						retObj._clientRouteId					 = Convert.IsDBNull(row["ClientRouteId"]) ? (Int32?)null : (Int32?)row["ClientRouteId"];
						retObj._routeTypeId					 = Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"];
						retObj._routeId					 = Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (bool?)null : (bool?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (bool?)null : (bool?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (bool?)null : (bool?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (bool?)null : (bool?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (bool?)null : (bool?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (bool?)null : (bool?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (bool?)null : (bool?)row["Day7"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? clientId
		///</parameters>
		public static Int32 SelectAllByClientIdCount(Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAllByClientIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Client_Route with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId
		///</parameters>
		public static void DeleteAllByClientId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? clientId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_DeleteAllByClientId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)clientId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Client_Route
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientRouteId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _clientRouteId));
				command.Parameters.Add(CtSqlParameter.Get("@RouteTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_routeTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RouteId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_routeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day1", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day2", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day3", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day3?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day4", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day4?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day5", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day5?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day6", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day6?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day7", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day7?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_clientRouteId					 = Convert.IsDBNull(command.Parameters["@ClientRouteId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientRouteId"].Value;
				_routeTypeId					 = Convert.IsDBNull(command.Parameters["@RouteTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RouteTypeId"].Value;
				_routeId					 = Convert.IsDBNull(command.Parameters["@RouteId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RouteId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_day1					 = Convert.IsDBNull(command.Parameters["@Day1"].Value) ? (bool?)null : (bool?)command.Parameters["@Day1"].Value;
				_day2					 = Convert.IsDBNull(command.Parameters["@Day2"].Value) ? (bool?)null : (bool?)command.Parameters["@Day2"].Value;
				_day3					 = Convert.IsDBNull(command.Parameters["@Day3"].Value) ? (bool?)null : (bool?)command.Parameters["@Day3"].Value;
				_day4					 = Convert.IsDBNull(command.Parameters["@Day4"].Value) ? (bool?)null : (bool?)command.Parameters["@Day4"].Value;
				_day5					 = Convert.IsDBNull(command.Parameters["@Day5"].Value) ? (bool?)null : (bool?)command.Parameters["@Day5"].Value;
				_day6					 = Convert.IsDBNull(command.Parameters["@Day6"].Value) ? (bool?)null : (bool?)command.Parameters["@Day6"].Value;
				_day7					 = Convert.IsDBNull(command.Parameters["@Day7"].Value) ? (bool?)null : (bool?)command.Parameters["@Day7"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_Route
		///</Summary>
		///<returns>
		///IList-DAOClientRoute.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientRoute> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Route");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientRoute> objList = new List<DAOClientRoute>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientRoute retObj = new DAOClientRoute();
						retObj._clientRouteId					 = Convert.IsDBNull(row["ClientRouteId"]) ? (Int32?)null : (Int32?)row["ClientRouteId"];
						retObj._routeTypeId					 = Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"];
						retObj._routeId					 = Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (bool?)null : (bool?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (bool?)null : (bool?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (bool?)null : (bool?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (bool?)null : (bool?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (bool?)null : (bool?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (bool?)null : (bool?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (bool?)null : (bool?)row["Day7"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_Route
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Route_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Route");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientRouteId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientRouteId"]) ? (Int32?)null : (Int32?)row["ClientRouteId"]);
						if (string.Compare(projection.Member, "RouteTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"]);
						if (string.Compare(projection.Member, "RouteId", true) == 0) lst.Add(Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "Day1", true) == 0) lst.Add(Convert.IsDBNull(row["Day1"]) ? (bool?)null : (bool?)row["Day1"]);
						if (string.Compare(projection.Member, "Day2", true) == 0) lst.Add(Convert.IsDBNull(row["Day2"]) ? (bool?)null : (bool?)row["Day2"]);
						if (string.Compare(projection.Member, "Day3", true) == 0) lst.Add(Convert.IsDBNull(row["Day3"]) ? (bool?)null : (bool?)row["Day3"]);
						if (string.Compare(projection.Member, "Day4", true) == 0) lst.Add(Convert.IsDBNull(row["Day4"]) ? (bool?)null : (bool?)row["Day4"]);
						if (string.Compare(projection.Member, "Day5", true) == 0) lst.Add(Convert.IsDBNull(row["Day5"]) ? (bool?)null : (bool?)row["Day5"]);
						if (string.Compare(projection.Member, "Day6", true) == 0) lst.Add(Convert.IsDBNull(row["Day6"]) ? (bool?)null : (bool?)row["Day6"]);
						if (string.Compare(projection.Member, "Day7", true) == 0) lst.Add(Convert.IsDBNull(row["Day7"]) ? (bool?)null : (bool?)row["Day7"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_Route
		///</Summary>
		///<returns>
		///IList-DAOClientRoute.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientRoute> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Route_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_Route");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientRoute> objList = new List<DAOClientRoute>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientRoute retObj = new DAOClientRoute();
						retObj._clientRouteId					 = Convert.IsDBNull(row["ClientRouteId"]) ? (Int32?)null : (Int32?)row["ClientRouteId"];
						retObj._routeTypeId					 = Convert.IsDBNull(row["RouteTypeId"]) ? (Int32?)null : (Int32?)row["RouteTypeId"];
						retObj._routeId					 = Convert.IsDBNull(row["RouteId"]) ? (Int32?)null : (Int32?)row["RouteId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._day1					 = Convert.IsDBNull(row["Day1"]) ? (bool?)null : (bool?)row["Day1"];
						retObj._day2					 = Convert.IsDBNull(row["Day2"]) ? (bool?)null : (bool?)row["Day2"];
						retObj._day3					 = Convert.IsDBNull(row["Day3"]) ? (bool?)null : (bool?)row["Day3"];
						retObj._day4					 = Convert.IsDBNull(row["Day4"]) ? (bool?)null : (bool?)row["Day4"];
						retObj._day5					 = Convert.IsDBNull(row["Day5"]) ? (bool?)null : (bool?)row["Day5"];
						retObj._day6					 = Convert.IsDBNull(row["Day6"]) ? (bool?)null : (bool?)row["Day6"];
						retObj._day7					 = Convert.IsDBNull(row["Day7"]) ? (bool?)null : (bool?)row["Day7"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_Route
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_Route_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Client_Route based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_Route_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ClientRouteId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_clientRouteId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RouteTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_routeTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RouteId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_routeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ClientId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_clientId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day1", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day1?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day2", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day2?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day3", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day3?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day4", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day4?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day5", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day5?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day6", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day6?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Day7", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_day7?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_clientRouteId					 = Convert.IsDBNull(command.Parameters["@ClientRouteId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientRouteId"].Value;
				_routeTypeId					 = Convert.IsDBNull(command.Parameters["@RouteTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RouteTypeId"].Value;
				_routeId					 = Convert.IsDBNull(command.Parameters["@RouteId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RouteId"].Value;
				_clientId					 = Convert.IsDBNull(command.Parameters["@ClientId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ClientId"].Value;
				_day1					 = Convert.IsDBNull(command.Parameters["@Day1"].Value) ? (bool?)null : (bool?)command.Parameters["@Day1"].Value;
				_day2					 = Convert.IsDBNull(command.Parameters["@Day2"].Value) ? (bool?)null : (bool?)command.Parameters["@Day2"].Value;
				_day3					 = Convert.IsDBNull(command.Parameters["@Day3"].Value) ? (bool?)null : (bool?)command.Parameters["@Day3"].Value;
				_day4					 = Convert.IsDBNull(command.Parameters["@Day4"].Value) ? (bool?)null : (bool?)command.Parameters["@Day4"].Value;
				_day5					 = Convert.IsDBNull(command.Parameters["@Day5"].Value) ? (bool?)null : (bool?)command.Parameters["@Day5"].Value;
				_day6					 = Convert.IsDBNull(command.Parameters["@Day6"].Value) ? (bool?)null : (bool?)command.Parameters["@Day6"].Value;
				_day7					 = Convert.IsDBNull(command.Parameters["@Day7"].Value) ? (bool?)null : (bool?)command.Parameters["@Day7"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ClientRouteId
		{
			get
			{
				return _clientRouteId;
			}
			set
			{
				_clientRouteId = value;
			}
		}

		public Int32? RouteTypeId
		{
			get
			{
				return _routeTypeId;
			}
			set
			{
				_routeTypeId = value;
			}
		}

		public Int32? RouteId
		{
			get
			{
				return _routeId;
			}
			set
			{
				_routeId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public bool? Day1
		{
			get
			{
				return _day1;
			}
			set
			{
				_day1 = value;
			}
		}

		public bool? Day2
		{
			get
			{
				return _day2;
			}
			set
			{
				_day2 = value;
			}
		}

		public bool? Day3
		{
			get
			{
				return _day3;
			}
			set
			{
				_day3 = value;
			}
		}

		public bool? Day4
		{
			get
			{
				return _day4;
			}
			set
			{
				_day4 = value;
			}
		}

		public bool? Day5
		{
			get
			{
				return _day5;
			}
			set
			{
				_day5 = value;
			}
		}

		public bool? Day6
		{
			get
			{
				return _day6;
			}
			set
			{
				_day6 = value;
			}
		}

		public bool? Day7
		{
			get
			{
				return _day7;
			}
			set
			{
				_day7 = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_Route_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ClientRouteId]
			,[RouteTypeId]
			,[RouteId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Route]
			WHERE 
			[ClientRouteId] = @ClientRouteId
			";

		internal static string ctprClient_Route_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Client_Route]
			WHERE 
			[ClientRouteId] = @ClientRouteId
			";

		internal static string ctprClient_Route_SelectAllByRouteTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientRouteId]
			,[RouteTypeId]
			,[RouteId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Route]
			WHERE 
			[RouteTypeId] = @RouteTypeId OR ([RouteTypeId] IS NULL AND @RouteTypeId IS NULL)
			";

		internal static string ctprClient_Route_SelectAllByRouteTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Route]
			WHERE 
			[RouteTypeId] = @RouteTypeId OR ([RouteTypeId] IS NULL AND @RouteTypeId IS NULL)
			";

		internal static string ctprClient_Route_DeleteAllByRouteTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Route]
			WHERE 
			[RouteTypeId] = @RouteTypeId OR ([RouteTypeId] IS NULL AND @RouteTypeId IS NULL)
			";

		internal static string ctprClient_Route_SelectAllByRouteId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientRouteId]
			,[RouteTypeId]
			,[RouteId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Route]
			WHERE 
			[RouteId] = @RouteId OR ([RouteId] IS NULL AND @RouteId IS NULL)
			";

		internal static string ctprClient_Route_SelectAllByRouteIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Route]
			WHERE 
			[RouteId] = @RouteId OR ([RouteId] IS NULL AND @RouteId IS NULL)
			";

		internal static string ctprClient_Route_DeleteAllByRouteId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Route]
			WHERE 
			[RouteId] = @RouteId OR ([RouteId] IS NULL AND @RouteId IS NULL)
			";

		internal static string ctprClient_Route_SelectAllByClientId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ClientRouteId]
			,[RouteTypeId]
			,[RouteId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Route]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Route_SelectAllByClientIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Route]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Route_DeleteAllByClientId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Client_Route]
			WHERE 
			[ClientId] = @ClientId OR ([ClientId] IS NULL AND @ClientId IS NULL)
			";

		internal static string ctprClient_Route_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Client_Route]
			(
			[RouteTypeId]
			,[RouteId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			)
			VALUES
			(
			@RouteTypeId
			,@RouteId
			,@ClientId
			,@Day1
			,@Day2
			,@Day3
			,@Day4
			,@Day5
			,@Day6
			,@Day7
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			)
			SELECT 
			@ClientRouteId = [ClientRouteId]
			,@RouteTypeId = [RouteTypeId]
			,@RouteId = [RouteId]
			,@ClientId = [ClientId]
			,@Day1 = [Day1]
			,@Day2 = [Day2]
			,@Day3 = [Day3]
			,@Day4 = [Day4]
			,@Day5 = [Day5]
			,@Day6 = [Day6]
			,@Day7 = [Day7]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Route]
			WHERE 
			[ClientRouteId] = SCOPE_IDENTITY()
			";

		internal static string ctprClient_Route_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientRouteId]
			,[RouteTypeId]
			,[RouteId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Route]
			";

		internal static string ctprClient_Route_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_Route]
			";

		internal static string ctprClient_Route_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_Route]
			##CRITERIA##
			";

		internal static string ctprClient_Route_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientRouteId]
			,[RouteTypeId]
			,[RouteId]
			,[ClientId]
			,[Day1]
			,[Day2]
			,[Day3]
			,[Day4]
			,[Day5]
			,[Day6]
			,[Day7]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			FROM [dbo].[Client_Route]
			##CRITERIA##
			";

		internal static string ctprClient_Route_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_Route]
			##CRITERIA##
			";

		internal static string ctprClient_Route_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Client_Route]
			SET
			[RouteTypeId] = @RouteTypeId
			,[RouteId] = @RouteId
			,[ClientId] = @ClientId
			,[Day1] = @Day1
			,[Day2] = @Day2
			,[Day3] = @Day3
			,[Day4] = @Day4
			,[Day5] = @Day5
			,[Day6] = @Day6
			,[Day7] = @Day7
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			WHERE 
			[ClientRouteId] = @ClientRouteId
			SELECT 
			@ClientRouteId = [ClientRouteId]
			,@RouteTypeId = [RouteTypeId]
			,@RouteId = [RouteId]
			,@ClientId = [ClientId]
			,@Day1 = [Day1]
			,@Day2 = [Day2]
			,@Day3 = [Day3]
			,@Day4 = [Day4]
			,@Day5 = [Day5]
			,@Day6 = [Day6]
			,@Day7 = [Day7]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			FROM [dbo].[Client_Route]
			WHERE 
			[ClientRouteId] = @ClientRouteId
			";

	}
}
#endregion
