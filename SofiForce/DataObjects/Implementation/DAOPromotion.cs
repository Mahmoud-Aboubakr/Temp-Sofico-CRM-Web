/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPromotion : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _promotionId;
		protected string _promotionCode;
		protected string _vendorCode;
		protected Int32? _companyId;
		protected DateTime? _validFrom;
		protected DateTime? _validTo;
		protected bool? _isActive;
		protected Int32? _promotionTypeId;
		protected Int32? _priority;
		protected Int32? _repeats;
		protected string _icon;
		protected string _color;
		protected string _promotionDesc;
		protected Int32? _promotionGroupId;
		protected Int32? _displayOrder;
		protected bool? _enableNotification;
		protected DateTime? _notificationDate;
		protected bool? _notificationDone;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool? _isApproved;
		protected Int32? _promotionCategoryId;
		protected Int32? _repeatTypeId;
		#endregion

		#region class methods
		public DAOPromotion()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Promotion based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOPromotion
		///</returns>
		///<parameters>
		///Int32? promotionId
		///</parameters>
		public static DAOPromotion SelectOne(Int32? promotionId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)promotionId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOPromotion retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPromotion();
					retObj._promotionId					 = Convert.IsDBNull(dt.Rows[0]["PromotionId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PromotionId"];
					retObj._promotionCode					 = Convert.IsDBNull(dt.Rows[0]["PromotionCode"]) ? null : (string)dt.Rows[0]["PromotionCode"];
					retObj._vendorCode					 = Convert.IsDBNull(dt.Rows[0]["VendorCode"]) ? null : (string)dt.Rows[0]["VendorCode"];
					retObj._companyId					 = Convert.IsDBNull(dt.Rows[0]["CompanyId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CompanyId"];
					retObj._validFrom					 = Convert.IsDBNull(dt.Rows[0]["ValidFrom"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ValidFrom"];
					retObj._validTo					 = Convert.IsDBNull(dt.Rows[0]["ValidTo"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ValidTo"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)dt.Rows[0]["IsActive"];
					retObj._promotionTypeId					 = Convert.IsDBNull(dt.Rows[0]["PromotionTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PromotionTypeId"];
					retObj._priority					 = Convert.IsDBNull(dt.Rows[0]["Priority"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Priority"];
					retObj._repeats					 = Convert.IsDBNull(dt.Rows[0]["Repeats"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Repeats"];
					retObj._icon					 = Convert.IsDBNull(dt.Rows[0]["Icon"]) ? null : (string)dt.Rows[0]["Icon"];
					retObj._color					 = Convert.IsDBNull(dt.Rows[0]["Color"]) ? null : (string)dt.Rows[0]["Color"];
					retObj._promotionDesc					 = Convert.IsDBNull(dt.Rows[0]["PromotionDesc"]) ? null : (string)dt.Rows[0]["PromotionDesc"];
					retObj._promotionGroupId					 = Convert.IsDBNull(dt.Rows[0]["PromotionGroupId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PromotionGroupId"];
					retObj._displayOrder					 = Convert.IsDBNull(dt.Rows[0]["DisplayOrder"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DisplayOrder"];
					retObj._enableNotification					 = Convert.IsDBNull(dt.Rows[0]["EnableNotification"]) ? (bool?)null : (bool?)dt.Rows[0]["EnableNotification"];
					retObj._notificationDate					 = Convert.IsDBNull(dt.Rows[0]["NotificationDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["NotificationDate"];
					retObj._notificationDone					 = Convert.IsDBNull(dt.Rows[0]["NotificationDone"]) ? (bool?)null : (bool?)dt.Rows[0]["NotificationDone"];
					retObj._cBy					 = Convert.IsDBNull(dt.Rows[0]["CBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CBy"];
					retObj._cDate					 = Convert.IsDBNull(dt.Rows[0]["CDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["CDate"];
					retObj._eBy					 = Convert.IsDBNull(dt.Rows[0]["EBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EBy"];
					retObj._eDate					 = Convert.IsDBNull(dt.Rows[0]["EDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EDate"];
					retObj._isApproved					 = Convert.IsDBNull(dt.Rows[0]["IsApproved"]) ? (bool?)null : (bool?)dt.Rows[0]["IsApproved"];
					retObj._promotionCategoryId					 = Convert.IsDBNull(dt.Rows[0]["PromotionCategoryId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["PromotionCategoryId"];
					retObj._repeatTypeId					 = Convert.IsDBNull(dt.Rows[0]["RepeatTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RepeatTypeId"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Promotion based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Promotion based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotion.
		///</returns>
		///<parameters>
		///Int32? companyId
		///</parameters>
		public static IList<DAOPromotion> SelectAllByCompanyId(Int32? companyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByCompanyId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CompanyId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)companyId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotion> objList = new List<DAOPromotion>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotion retObj = new DAOPromotion();
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._companyId					 = Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"];
						retObj._validFrom					 = Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"];
						retObj._validTo					 = Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._priority					 = Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"];
						retObj._repeats					 = Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._promotionDesc					 = Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"];
						retObj._promotionGroupId					 = Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._enableNotification					 = Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._notificationDone					 = Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._promotionCategoryId					 = Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"];
						retObj._repeatTypeId					 = Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? companyId
		///</parameters>
		public static Int32 SelectAllByCompanyIdCount(Int32? companyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByCompanyIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CompanyId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)companyId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Promotion with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? companyId
		///</parameters>
		public static void DeleteAllByCompanyId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? companyId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_DeleteAllByCompanyId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CompanyId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)companyId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Promotion based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotion.
		///</returns>
		///<parameters>
		///Int32? promotionTypeId
		///</parameters>
		public static IList<DAOPromotion> SelectAllByPromotionTypeId(Int32? promotionTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByPromotionTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotion> objList = new List<DAOPromotion>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotion retObj = new DAOPromotion();
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._companyId					 = Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"];
						retObj._validFrom					 = Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"];
						retObj._validTo					 = Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._priority					 = Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"];
						retObj._repeats					 = Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._promotionDesc					 = Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"];
						retObj._promotionGroupId					 = Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._enableNotification					 = Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._notificationDone					 = Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._promotionCategoryId					 = Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"];
						retObj._repeatTypeId					 = Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? promotionTypeId
		///</parameters>
		public static Int32 SelectAllByPromotionTypeIdCount(Int32? promotionTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByPromotionTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Promotion with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionTypeId
		///</parameters>
		public static void DeleteAllByPromotionTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_DeleteAllByPromotionTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Promotion based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotion.
		///</returns>
		///<parameters>
		///Int32? promotionGroupId
		///</parameters>
		public static IList<DAOPromotion> SelectAllByPromotionGroupId(Int32? promotionGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByPromotionGroupId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotion> objList = new List<DAOPromotion>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotion retObj = new DAOPromotion();
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._companyId					 = Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"];
						retObj._validFrom					 = Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"];
						retObj._validTo					 = Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._priority					 = Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"];
						retObj._repeats					 = Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._promotionDesc					 = Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"];
						retObj._promotionGroupId					 = Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._enableNotification					 = Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._notificationDone					 = Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._promotionCategoryId					 = Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"];
						retObj._repeatTypeId					 = Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? promotionGroupId
		///</parameters>
		public static Int32 SelectAllByPromotionGroupIdCount(Int32? promotionGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByPromotionGroupIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionGroupId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Promotion with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionGroupId
		///</parameters>
		public static void DeleteAllByPromotionGroupId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionGroupId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_DeleteAllByPromotionGroupId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionGroupId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionGroupId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Promotion based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotion.
		///</returns>
		///<parameters>
		///Int32? promotionCategoryId
		///</parameters>
		public static IList<DAOPromotion> SelectAllByPromotionCategoryId(Int32? promotionCategoryId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByPromotionCategoryId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCategoryId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionCategoryId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotion> objList = new List<DAOPromotion>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotion retObj = new DAOPromotion();
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._companyId					 = Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"];
						retObj._validFrom					 = Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"];
						retObj._validTo					 = Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._priority					 = Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"];
						retObj._repeats					 = Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._promotionDesc					 = Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"];
						retObj._promotionGroupId					 = Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._enableNotification					 = Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._notificationDone					 = Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._promotionCategoryId					 = Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"];
						retObj._repeatTypeId					 = Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? promotionCategoryId
		///</parameters>
		public static Int32 SelectAllByPromotionCategoryIdCount(Int32? promotionCategoryId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByPromotionCategoryIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCategoryId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionCategoryId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Promotion with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionCategoryId
		///</parameters>
		public static void DeleteAllByPromotionCategoryId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? promotionCategoryId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_DeleteAllByPromotionCategoryId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCategoryId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)promotionCategoryId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Promotion based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOPromotion.
		///</returns>
		///<parameters>
		///Int32? repeatTypeId
		///</parameters>
		public static IList<DAOPromotion> SelectAllByRepeatTypeId(Int32? repeatTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByRepeatTypeId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepeatTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)repeatTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotion> objList = new List<DAOPromotion>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotion retObj = new DAOPromotion();
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._companyId					 = Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"];
						retObj._validFrom					 = Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"];
						retObj._validTo					 = Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._priority					 = Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"];
						retObj._repeats					 = Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._promotionDesc					 = Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"];
						retObj._promotionGroupId					 = Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._enableNotification					 = Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._notificationDone					 = Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._promotionCategoryId					 = Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"];
						retObj._repeatTypeId					 = Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? repeatTypeId
		///</parameters>
		public static Int32 SelectAllByRepeatTypeIdCount(Int32? repeatTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllByRepeatTypeIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepeatTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)repeatTypeId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Promotion with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zSofiForceConn_TxConnectionProvider connectionProvider, Int32? repeatTypeId
		///</parameters>
		public static void DeleteAllByRepeatTypeId(zSofiForceConn_TxConnectionProvider connectionProvider, Int32? repeatTypeId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_DeleteAllByRepeatTypeId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RepeatTypeId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)repeatTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Promotion
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _promotionId));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_promotionCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VendorCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vendorCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CompanyId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_companyId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ValidFrom", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_validFrom?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ValidTo", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_validTo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Priority", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priority?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Repeats", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_repeats?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionDesc", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_promotionDesc?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EnableNotification", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_enableNotification?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsApproved", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isApproved?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCategoryId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionCategoryId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepeatTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_repeatTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_promotionCode					 = Convert.IsDBNull(command.Parameters["@PromotionCode"].Value) ? null : (string)command.Parameters["@PromotionCode"].Value;
				_vendorCode					 = Convert.IsDBNull(command.Parameters["@VendorCode"].Value) ? null : (string)command.Parameters["@VendorCode"].Value;
				_companyId					 = Convert.IsDBNull(command.Parameters["@CompanyId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CompanyId"].Value;
				_validFrom					 = Convert.IsDBNull(command.Parameters["@ValidFrom"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ValidFrom"].Value;
				_validTo					 = Convert.IsDBNull(command.Parameters["@ValidTo"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ValidTo"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_promotionTypeId					 = Convert.IsDBNull(command.Parameters["@PromotionTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionTypeId"].Value;
				_priority					 = Convert.IsDBNull(command.Parameters["@Priority"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Priority"].Value;
				_repeats					 = Convert.IsDBNull(command.Parameters["@Repeats"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Repeats"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_promotionDesc					 = Convert.IsDBNull(command.Parameters["@PromotionDesc"].Value) ? null : (string)command.Parameters["@PromotionDesc"].Value;
				_promotionGroupId					 = Convert.IsDBNull(command.Parameters["@PromotionGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionGroupId"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_enableNotification					 = Convert.IsDBNull(command.Parameters["@EnableNotification"].Value) ? (bool?)null : (bool?)command.Parameters["@EnableNotification"].Value;
				_notificationDate					 = Convert.IsDBNull(command.Parameters["@NotificationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@NotificationDate"].Value;
				_notificationDone					 = Convert.IsDBNull(command.Parameters["@NotificationDone"].Value) ? (bool?)null : (bool?)command.Parameters["@NotificationDone"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_isApproved					 = Convert.IsDBNull(command.Parameters["@IsApproved"].Value) ? (bool?)null : (bool?)command.Parameters["@IsApproved"].Value;
				_promotionCategoryId					 = Convert.IsDBNull(command.Parameters["@PromotionCategoryId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionCategoryId"].Value;
				_repeatTypeId					 = Convert.IsDBNull(command.Parameters["@RepeatTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepeatTypeId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Promotion
		///</Summary>
		///<returns>
		///IList-DAOPromotion.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPromotion> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotion> objList = new List<DAOPromotion>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotion retObj = new DAOPromotion();
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._companyId					 = Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"];
						retObj._validFrom					 = Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"];
						retObj._validTo					 = Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._priority					 = Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"];
						retObj._repeats					 = Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._promotionDesc					 = Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"];
						retObj._promotionGroupId					 = Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._enableNotification					 = Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._notificationDone					 = Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._promotionCategoryId					 = Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"];
						retObj._repeatTypeId					 = Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPromotion
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotion_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "PromotionId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"]);
						if (string.Compare(projection.Member, "PromotionCode", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"]);
						if (string.Compare(projection.Member, "VendorCode", true) == 0) lst.Add(Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"]);
						if (string.Compare(projection.Member, "CompanyId", true) == 0) lst.Add(Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"]);
						if (string.Compare(projection.Member, "ValidFrom", true) == 0) lst.Add(Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"]);
						if (string.Compare(projection.Member, "ValidTo", true) == 0) lst.Add(Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"]);
						if (string.Compare(projection.Member, "PromotionTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"]);
						if (string.Compare(projection.Member, "Priority", true) == 0) lst.Add(Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"]);
						if (string.Compare(projection.Member, "Repeats", true) == 0) lst.Add(Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"]);
						if (string.Compare(projection.Member, "Icon", true) == 0) lst.Add(Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"]);
						if (string.Compare(projection.Member, "Color", true) == 0) lst.Add(Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"]);
						if (string.Compare(projection.Member, "PromotionDesc", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"]);
						if (string.Compare(projection.Member, "PromotionGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"]);
						if (string.Compare(projection.Member, "DisplayOrder", true) == 0) lst.Add(Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"]);
						if (string.Compare(projection.Member, "EnableNotification", true) == 0) lst.Add(Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"]);
						if (string.Compare(projection.Member, "NotificationDate", true) == 0) lst.Add(Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"]);
						if (string.Compare(projection.Member, "NotificationDone", true) == 0) lst.Add(Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"]);
						if (string.Compare(projection.Member, "CBy", true) == 0) lst.Add(Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"]);
						if (string.Compare(projection.Member, "CDate", true) == 0) lst.Add(Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"]);
						if (string.Compare(projection.Member, "EBy", true) == 0) lst.Add(Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"]);
						if (string.Compare(projection.Member, "EDate", true) == 0) lst.Add(Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"]);
						if (string.Compare(projection.Member, "IsApproved", true) == 0) lst.Add(Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"]);
						if (string.Compare(projection.Member, "PromotionCategoryId", true) == 0) lst.Add(Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"]);
						if (string.Compare(projection.Member, "RepeatTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Promotion
		///</Summary>
		///<returns>
		///IList-DAOPromotion.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPromotion> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotion_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Promotion");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromotion> objList = new List<DAOPromotion>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromotion retObj = new DAOPromotion();
						retObj._promotionId					 = Convert.IsDBNull(row["PromotionId"]) ? (Int32?)null : (Int32?)row["PromotionId"];
						retObj._promotionCode					 = Convert.IsDBNull(row["PromotionCode"]) ? null : (string)row["PromotionCode"];
						retObj._vendorCode					 = Convert.IsDBNull(row["VendorCode"]) ? null : (string)row["VendorCode"];
						retObj._companyId					 = Convert.IsDBNull(row["CompanyId"]) ? (Int32?)null : (Int32?)row["CompanyId"];
						retObj._validFrom					 = Convert.IsDBNull(row["ValidFrom"]) ? (DateTime?)null : (DateTime?)row["ValidFrom"];
						retObj._validTo					 = Convert.IsDBNull(row["ValidTo"]) ? (DateTime?)null : (DateTime?)row["ValidTo"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)row["IsActive"];
						retObj._promotionTypeId					 = Convert.IsDBNull(row["PromotionTypeId"]) ? (Int32?)null : (Int32?)row["PromotionTypeId"];
						retObj._priority					 = Convert.IsDBNull(row["Priority"]) ? (Int32?)null : (Int32?)row["Priority"];
						retObj._repeats					 = Convert.IsDBNull(row["Repeats"]) ? (Int32?)null : (Int32?)row["Repeats"];
						retObj._icon					 = Convert.IsDBNull(row["Icon"]) ? null : (string)row["Icon"];
						retObj._color					 = Convert.IsDBNull(row["Color"]) ? null : (string)row["Color"];
						retObj._promotionDesc					 = Convert.IsDBNull(row["PromotionDesc"]) ? null : (string)row["PromotionDesc"];
						retObj._promotionGroupId					 = Convert.IsDBNull(row["PromotionGroupId"]) ? (Int32?)null : (Int32?)row["PromotionGroupId"];
						retObj._displayOrder					 = Convert.IsDBNull(row["DisplayOrder"]) ? (Int32?)null : (Int32?)row["DisplayOrder"];
						retObj._enableNotification					 = Convert.IsDBNull(row["EnableNotification"]) ? (bool?)null : (bool?)row["EnableNotification"];
						retObj._notificationDate					 = Convert.IsDBNull(row["NotificationDate"]) ? (DateTime?)null : (DateTime?)row["NotificationDate"];
						retObj._notificationDone					 = Convert.IsDBNull(row["NotificationDone"]) ? (bool?)null : (bool?)row["NotificationDone"];
						retObj._cBy					 = Convert.IsDBNull(row["CBy"]) ? (Int32?)null : (Int32?)row["CBy"];
						retObj._cDate					 = Convert.IsDBNull(row["CDate"]) ? (DateTime?)null : (DateTime?)row["CDate"];
						retObj._eBy					 = Convert.IsDBNull(row["EBy"]) ? (Int32?)null : (Int32?)row["EBy"];
						retObj._eDate					 = Convert.IsDBNull(row["EDate"]) ? (DateTime?)null : (DateTime?)row["EDate"];
						retObj._isApproved					 = Convert.IsDBNull(row["IsApproved"]) ? (bool?)null : (bool?)row["IsApproved"];
						retObj._promotionCategoryId					 = Convert.IsDBNull(row["PromotionCategoryId"]) ? (Int32?)null : (Int32?)row["PromotionCategoryId"];
						retObj._repeatTypeId					 = Convert.IsDBNull(row["RepeatTypeId"]) ? (Int32?)null : (Int32?)row["RepeatTypeId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Promotion
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromotion_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Promotion based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromotion_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@PromotionId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_promotionId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_promotionCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@VendorCode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_vendorCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CompanyId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_companyId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ValidFrom", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_validFrom?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ValidTo", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_validTo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsActive", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isActive?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionTypeId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Priority", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_priority?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Repeats", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_repeats?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Icon", SqlDbType.NVarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_icon?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Color", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_color?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionDesc", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_promotionDesc?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionGroupId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionGroupId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@DisplayOrder", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_displayOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EnableNotification", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_enableNotification?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDate", SqlDbType.Date, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@NotificationDone", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_notificationDone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_cBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_cDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EBy", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_eBy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_eDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@IsApproved", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_isApproved?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PromotionCategoryId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_promotionCategoryId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RepeatTypeId", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_repeatTypeId?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_promotionId					 = Convert.IsDBNull(command.Parameters["@PromotionId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionId"].Value;
				_promotionCode					 = Convert.IsDBNull(command.Parameters["@PromotionCode"].Value) ? null : (string)command.Parameters["@PromotionCode"].Value;
				_vendorCode					 = Convert.IsDBNull(command.Parameters["@VendorCode"].Value) ? null : (string)command.Parameters["@VendorCode"].Value;
				_companyId					 = Convert.IsDBNull(command.Parameters["@CompanyId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CompanyId"].Value;
				_validFrom					 = Convert.IsDBNull(command.Parameters["@ValidFrom"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ValidFrom"].Value;
				_validTo					 = Convert.IsDBNull(command.Parameters["@ValidTo"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ValidTo"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["@IsActive"].Value) ? (bool?)null : (bool?)command.Parameters["@IsActive"].Value;
				_promotionTypeId					 = Convert.IsDBNull(command.Parameters["@PromotionTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionTypeId"].Value;
				_priority					 = Convert.IsDBNull(command.Parameters["@Priority"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Priority"].Value;
				_repeats					 = Convert.IsDBNull(command.Parameters["@Repeats"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Repeats"].Value;
				_icon					 = Convert.IsDBNull(command.Parameters["@Icon"].Value) ? null : (string)command.Parameters["@Icon"].Value;
				_color					 = Convert.IsDBNull(command.Parameters["@Color"].Value) ? null : (string)command.Parameters["@Color"].Value;
				_promotionDesc					 = Convert.IsDBNull(command.Parameters["@PromotionDesc"].Value) ? null : (string)command.Parameters["@PromotionDesc"].Value;
				_promotionGroupId					 = Convert.IsDBNull(command.Parameters["@PromotionGroupId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionGroupId"].Value;
				_displayOrder					 = Convert.IsDBNull(command.Parameters["@DisplayOrder"].Value) ? (Int32?)null : (Int32?)command.Parameters["@DisplayOrder"].Value;
				_enableNotification					 = Convert.IsDBNull(command.Parameters["@EnableNotification"].Value) ? (bool?)null : (bool?)command.Parameters["@EnableNotification"].Value;
				_notificationDate					 = Convert.IsDBNull(command.Parameters["@NotificationDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@NotificationDate"].Value;
				_notificationDone					 = Convert.IsDBNull(command.Parameters["@NotificationDone"].Value) ? (bool?)null : (bool?)command.Parameters["@NotificationDone"].Value;
				_cBy					 = Convert.IsDBNull(command.Parameters["@CBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CBy"].Value;
				_cDate					 = Convert.IsDBNull(command.Parameters["@CDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@CDate"].Value;
				_eBy					 = Convert.IsDBNull(command.Parameters["@EBy"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EBy"].Value;
				_eDate					 = Convert.IsDBNull(command.Parameters["@EDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@EDate"].Value;
				_isApproved					 = Convert.IsDBNull(command.Parameters["@IsApproved"].Value) ? (bool?)null : (bool?)command.Parameters["@IsApproved"].Value;
				_promotionCategoryId					 = Convert.IsDBNull(command.Parameters["@PromotionCategoryId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@PromotionCategoryId"].Value;
				_repeatTypeId					 = Convert.IsDBNull(command.Parameters["@RepeatTypeId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RepeatTypeId"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? PromotionId
		{
			get
			{
				return _promotionId;
			}
			set
			{
				_promotionId = value;
			}
		}

		public string PromotionCode
		{
			get
			{
				return _promotionCode;
			}
			set
			{
				_promotionCode = value;
			}
		}

		public string VendorCode
		{
			get
			{
				return _vendorCode;
			}
			set
			{
				_vendorCode = value;
			}
		}

		public Int32? CompanyId
		{
			get
			{
				return _companyId;
			}
			set
			{
				_companyId = value;
			}
		}

		public DateTime? ValidFrom
		{
			get
			{
				return _validFrom;
			}
			set
			{
				_validFrom = value;
			}
		}

		public DateTime? ValidTo
		{
			get
			{
				return _validTo;
			}
			set
			{
				_validTo = value;
			}
		}

		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}

		public Int32? PromotionTypeId
		{
			get
			{
				return _promotionTypeId;
			}
			set
			{
				_promotionTypeId = value;
			}
		}

		public Int32? Priority
		{
			get
			{
				return _priority;
			}
			set
			{
				_priority = value;
			}
		}

		public Int32? Repeats
		{
			get
			{
				return _repeats;
			}
			set
			{
				_repeats = value;
			}
		}

		public string Icon
		{
			get
			{
				return _icon;
			}
			set
			{
				_icon = value;
			}
		}

		public string Color
		{
			get
			{
				return _color;
			}
			set
			{
				_color = value;
			}
		}

		public string PromotionDesc
		{
			get
			{
				return _promotionDesc;
			}
			set
			{
				_promotionDesc = value;
			}
		}

		public Int32? PromotionGroupId
		{
			get
			{
				return _promotionGroupId;
			}
			set
			{
				_promotionGroupId = value;
			}
		}

		public Int32? DisplayOrder
		{
			get
			{
				return _displayOrder;
			}
			set
			{
				_displayOrder = value;
			}
		}

		public bool? EnableNotification
		{
			get
			{
				return _enableNotification;
			}
			set
			{
				_enableNotification = value;
			}
		}

		public DateTime? NotificationDate
		{
			get
			{
				return _notificationDate;
			}
			set
			{
				_notificationDate = value;
			}
		}

		public bool? NotificationDone
		{
			get
			{
				return _notificationDone;
			}
			set
			{
				_notificationDone = value;
			}
		}

		public Int32? CBy
		{
			get
			{
				return _cBy;
			}
			set
			{
				_cBy = value;
			}
		}

		public DateTime? CDate
		{
			get
			{
				return _cDate;
			}
			set
			{
				_cDate = value;
			}
		}

		public Int32? EBy
		{
			get
			{
				return _eBy;
			}
			set
			{
				_eBy = value;
			}
		}

		public DateTime? EDate
		{
			get
			{
				return _eDate;
			}
			set
			{
				_eDate = value;
			}
		}

		public bool? IsApproved
		{
			get
			{
				return _isApproved;
			}
			set
			{
				_isApproved = value;
			}
		}

		public Int32? PromotionCategoryId
		{
			get
			{
				return _promotionCategoryId;
			}
			set
			{
				_promotionCategoryId = value;
			}
		}

		public Int32? RepeatTypeId
		{
			get
			{
				return _repeatTypeId;
			}
			set
			{
				_repeatTypeId = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPromotion_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionId] = @PromotionId
			";

		internal static string ctprPromotion_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Promotion]
			WHERE 
			[PromotionId] = @PromotionId
			";

		internal static string ctprPromotion_SelectAllByCompanyId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[CompanyId] = @CompanyId OR ([CompanyId] IS NULL AND @CompanyId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByCompanyIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Promotion]
			WHERE 
			[CompanyId] = @CompanyId OR ([CompanyId] IS NULL AND @CompanyId IS NULL)
			";

		internal static string ctprPromotion_DeleteAllByCompanyId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Promotion]
			WHERE 
			[CompanyId] = @CompanyId OR ([CompanyId] IS NULL AND @CompanyId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByPromotionTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionTypeId] = @PromotionTypeId OR ([PromotionTypeId] IS NULL AND @PromotionTypeId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByPromotionTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionTypeId] = @PromotionTypeId OR ([PromotionTypeId] IS NULL AND @PromotionTypeId IS NULL)
			";

		internal static string ctprPromotion_DeleteAllByPromotionTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Promotion]
			WHERE 
			[PromotionTypeId] = @PromotionTypeId OR ([PromotionTypeId] IS NULL AND @PromotionTypeId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByPromotionGroupId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionGroupId] = @PromotionGroupId OR ([PromotionGroupId] IS NULL AND @PromotionGroupId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByPromotionGroupIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionGroupId] = @PromotionGroupId OR ([PromotionGroupId] IS NULL AND @PromotionGroupId IS NULL)
			";

		internal static string ctprPromotion_DeleteAllByPromotionGroupId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Promotion]
			WHERE 
			[PromotionGroupId] = @PromotionGroupId OR ([PromotionGroupId] IS NULL AND @PromotionGroupId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByPromotionCategoryId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionCategoryId] = @PromotionCategoryId OR ([PromotionCategoryId] IS NULL AND @PromotionCategoryId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByPromotionCategoryIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionCategoryId] = @PromotionCategoryId OR ([PromotionCategoryId] IS NULL AND @PromotionCategoryId IS NULL)
			";

		internal static string ctprPromotion_DeleteAllByPromotionCategoryId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Promotion]
			WHERE 
			[PromotionCategoryId] = @PromotionCategoryId OR ([PromotionCategoryId] IS NULL AND @PromotionCategoryId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByRepeatTypeId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[RepeatTypeId] = @RepeatTypeId OR ([RepeatTypeId] IS NULL AND @RepeatTypeId IS NULL)
			";

		internal static string ctprPromotion_SelectAllByRepeatTypeIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Promotion]
			WHERE 
			[RepeatTypeId] = @RepeatTypeId OR ([RepeatTypeId] IS NULL AND @RepeatTypeId IS NULL)
			";

		internal static string ctprPromotion_DeleteAllByRepeatTypeId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Promotion]
			WHERE 
			[RepeatTypeId] = @RepeatTypeId OR ([RepeatTypeId] IS NULL AND @RepeatTypeId IS NULL)
			";

		internal static string ctprPromotion_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Promotion]
			(
			[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			)
			VALUES
			(
			@PromotionCode
			,@VendorCode
			,@CompanyId
			,@ValidFrom
			,@ValidTo
			,@IsActive
			,@PromotionTypeId
			,@Priority
			,@Repeats
			,@Icon
			,@Color
			,@PromotionDesc
			,@PromotionGroupId
			,@DisplayOrder
			,@EnableNotification
			,@NotificationDate
			,@NotificationDone
			,@CBy
			,@CDate
			,@EBy
			,@EDate
			,@IsApproved
			,@PromotionCategoryId
			,@RepeatTypeId
			)
			SELECT 
			@PromotionId = [PromotionId]
			,@PromotionCode = [PromotionCode]
			,@VendorCode = [VendorCode]
			,@CompanyId = [CompanyId]
			,@ValidFrom = [ValidFrom]
			,@ValidTo = [ValidTo]
			,@IsActive = [IsActive]
			,@PromotionTypeId = [PromotionTypeId]
			,@Priority = [Priority]
			,@Repeats = [Repeats]
			,@Icon = [Icon]
			,@Color = [Color]
			,@PromotionDesc = [PromotionDesc]
			,@PromotionGroupId = [PromotionGroupId]
			,@DisplayOrder = [DisplayOrder]
			,@EnableNotification = [EnableNotification]
			,@NotificationDate = [NotificationDate]
			,@NotificationDone = [NotificationDone]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@IsApproved = [IsApproved]
			,@PromotionCategoryId = [PromotionCategoryId]
			,@RepeatTypeId = [RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionId] = SCOPE_IDENTITY()
			";

		internal static string ctprPromotion_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			";

		internal static string ctprPromotion_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Promotion]
			";

		internal static string ctprPromotion_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Promotion]
			##CRITERIA##
			";

		internal static string ctprPromotion_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[PromotionId]
			,[PromotionCode]
			,[VendorCode]
			,[CompanyId]
			,[ValidFrom]
			,[ValidTo]
			,[IsActive]
			,[PromotionTypeId]
			,[Priority]
			,[Repeats]
			,[Icon]
			,[Color]
			,[PromotionDesc]
			,[PromotionGroupId]
			,[DisplayOrder]
			,[EnableNotification]
			,[NotificationDate]
			,[NotificationDone]
			,[CBy]
			,[CDate]
			,[EBy]
			,[EDate]
			,[IsApproved]
			,[PromotionCategoryId]
			,[RepeatTypeId]
			FROM [dbo].[Promotion]
			##CRITERIA##
			";

		internal static string ctprPromotion_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Promotion]
			##CRITERIA##
			";

		internal static string ctprPromotion_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Promotion]
			SET
			[PromotionCode] = @PromotionCode
			,[VendorCode] = @VendorCode
			,[CompanyId] = @CompanyId
			,[ValidFrom] = @ValidFrom
			,[ValidTo] = @ValidTo
			,[IsActive] = @IsActive
			,[PromotionTypeId] = @PromotionTypeId
			,[Priority] = @Priority
			,[Repeats] = @Repeats
			,[Icon] = @Icon
			,[Color] = @Color
			,[PromotionDesc] = @PromotionDesc
			,[PromotionGroupId] = @PromotionGroupId
			,[DisplayOrder] = @DisplayOrder
			,[EnableNotification] = @EnableNotification
			,[NotificationDate] = @NotificationDate
			,[NotificationDone] = @NotificationDone
			,[CBy] = @CBy
			,[CDate] = @CDate
			,[EBy] = @EBy
			,[EDate] = @EDate
			,[IsApproved] = @IsApproved
			,[PromotionCategoryId] = @PromotionCategoryId
			,[RepeatTypeId] = @RepeatTypeId
			WHERE 
			[PromotionId] = @PromotionId
			SELECT 
			@PromotionId = [PromotionId]
			,@PromotionCode = [PromotionCode]
			,@VendorCode = [VendorCode]
			,@CompanyId = [CompanyId]
			,@ValidFrom = [ValidFrom]
			,@ValidTo = [ValidTo]
			,@IsActive = [IsActive]
			,@PromotionTypeId = [PromotionTypeId]
			,@Priority = [Priority]
			,@Repeats = [Repeats]
			,@Icon = [Icon]
			,@Color = [Color]
			,@PromotionDesc = [PromotionDesc]
			,@PromotionGroupId = [PromotionGroupId]
			,@DisplayOrder = [DisplayOrder]
			,@EnableNotification = [EnableNotification]
			,@NotificationDate = [NotificationDate]
			,@NotificationDone = [NotificationDone]
			,@CBy = [CBy]
			,@CDate = [CDate]
			,@EBy = [EBy]
			,@EDate = [EDate]
			,@IsApproved = [IsApproved]
			,@PromotionCategoryId = [PromotionCategoryId]
			,@RepeatTypeId = [RepeatTypeId]
			FROM [dbo].[Promotion]
			WHERE 
			[PromotionId] = @PromotionId
			";

	}
}
#endregion
