/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientPreferredTimeVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _preferredId;
		protected Int32? _clientId;
		protected Int32? _preferredOperationId;
		protected Int32? _weekDayId;
		protected TimeSpan? _fromTime;
		protected TimeSpan? _toTime;
		protected string _weekDayNameEn;
		protected string _weekDayNameAr;
		protected string _preferredOperationNameEn;
		protected string _preferredOperationNameAr;
		#endregion

		#region class methods
		public DAOClientPreferredTimeVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_PreferredTimeVw
		///</Summary>
		///<returns>
		///IList-DAOClientPreferredTimeVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientPreferredTimeVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_PreferredTimeVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_PreferredTimeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPreferredTimeVw> objList = new List<DAOClientPreferredTimeVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPreferredTimeVw retObj = new DAOClientPreferredTimeVw();
						retObj._preferredId					 = Convert.IsDBNull(row["PreferredId"]) ? (Int32?)null : (Int32?)row["PreferredId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._preferredOperationId					 = Convert.IsDBNull(row["PreferredOperationId"]) ? (Int32?)null : (Int32?)row["PreferredOperationId"];
						retObj._weekDayId					 = Convert.IsDBNull(row["WeekDayId"]) ? (Int32?)null : (Int32?)row["WeekDayId"];
						retObj._fromTime					 = Convert.IsDBNull(row["FromTime"]) ? (TimeSpan?)null : (TimeSpan?)row["FromTime"];
						retObj._toTime					 = Convert.IsDBNull(row["ToTime"]) ? (TimeSpan?)null : (TimeSpan?)row["ToTime"];
						retObj._weekDayNameEn					 = Convert.IsDBNull(row["WeekDayNameEn"]) ? null : (string)row["WeekDayNameEn"];
						retObj._weekDayNameAr					 = Convert.IsDBNull(row["WeekDayNameAr"]) ? null : (string)row["WeekDayNameAr"];
						retObj._preferredOperationNameEn					 = Convert.IsDBNull(row["PreferredOperationNameEn"]) ? null : (string)row["PreferredOperationNameEn"];
						retObj._preferredOperationNameAr					 = Convert.IsDBNull(row["PreferredOperationNameAr"]) ? null : (string)row["PreferredOperationNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_PreferredTimeVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_PreferredTimeVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_PreferredTimeVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_PreferredTimeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "PreferredId", true) == 0) lst.Add(Convert.IsDBNull(row["PreferredId"]) ? (Int32?)null : (Int32?)row["PreferredId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "PreferredOperationId", true) == 0) lst.Add(Convert.IsDBNull(row["PreferredOperationId"]) ? (Int32?)null : (Int32?)row["PreferredOperationId"]);
						if (string.Compare(projection.Member, "WeekDayId", true) == 0) lst.Add(Convert.IsDBNull(row["WeekDayId"]) ? (Int32?)null : (Int32?)row["WeekDayId"]);
						if (string.Compare(projection.Member, "FromTime", true) == 0) lst.Add(Convert.IsDBNull(row["FromTime"]) ? (TimeSpan?)null : (TimeSpan?)row["FromTime"]);
						if (string.Compare(projection.Member, "ToTime", true) == 0) lst.Add(Convert.IsDBNull(row["ToTime"]) ? (TimeSpan?)null : (TimeSpan?)row["ToTime"]);
						if (string.Compare(projection.Member, "WeekDayNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["WeekDayNameEn"]) ? null : (string)row["WeekDayNameEn"]);
						if (string.Compare(projection.Member, "WeekDayNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["WeekDayNameAr"]) ? null : (string)row["WeekDayNameAr"]);
						if (string.Compare(projection.Member, "PreferredOperationNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["PreferredOperationNameEn"]) ? null : (string)row["PreferredOperationNameEn"]);
						if (string.Compare(projection.Member, "PreferredOperationNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["PreferredOperationNameAr"]) ? null : (string)row["PreferredOperationNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_PreferredTimeVw
		///</Summary>
		///<returns>
		///IList-DAOClientPreferredTimeVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientPreferredTimeVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_PreferredTimeVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_PreferredTimeVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientPreferredTimeVw> objList = new List<DAOClientPreferredTimeVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientPreferredTimeVw retObj = new DAOClientPreferredTimeVw();
						retObj._preferredId					 = Convert.IsDBNull(row["PreferredId"]) ? (Int32?)null : (Int32?)row["PreferredId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._preferredOperationId					 = Convert.IsDBNull(row["PreferredOperationId"]) ? (Int32?)null : (Int32?)row["PreferredOperationId"];
						retObj._weekDayId					 = Convert.IsDBNull(row["WeekDayId"]) ? (Int32?)null : (Int32?)row["WeekDayId"];
						retObj._fromTime					 = Convert.IsDBNull(row["FromTime"]) ? (TimeSpan?)null : (TimeSpan?)row["FromTime"];
						retObj._toTime					 = Convert.IsDBNull(row["ToTime"]) ? (TimeSpan?)null : (TimeSpan?)row["ToTime"];
						retObj._weekDayNameEn					 = Convert.IsDBNull(row["WeekDayNameEn"]) ? null : (string)row["WeekDayNameEn"];
						retObj._weekDayNameAr					 = Convert.IsDBNull(row["WeekDayNameAr"]) ? null : (string)row["WeekDayNameAr"];
						retObj._preferredOperationNameEn					 = Convert.IsDBNull(row["PreferredOperationNameEn"]) ? null : (string)row["PreferredOperationNameEn"];
						retObj._preferredOperationNameAr					 = Convert.IsDBNull(row["PreferredOperationNameAr"]) ? null : (string)row["PreferredOperationNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_PreferredTimeVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_PreferredTimeVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? PreferredId
		{
			get
			{
				return _preferredId;
			}
			set
			{
				_preferredId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? PreferredOperationId
		{
			get
			{
				return _preferredOperationId;
			}
			set
			{
				_preferredOperationId = value;
			}
		}

		public Int32? WeekDayId
		{
			get
			{
				return _weekDayId;
			}
			set
			{
				_weekDayId = value;
			}
		}

		public TimeSpan? FromTime
		{
			get
			{
				return _fromTime;
			}
			set
			{
				_fromTime = value;
			}
		}

		public TimeSpan? ToTime
		{
			get
			{
				return _toTime;
			}
			set
			{
				_toTime = value;
			}
		}

		public string WeekDayNameEn
		{
			get
			{
				return _weekDayNameEn;
			}
			set
			{
				_weekDayNameEn = value;
			}
		}

		public string WeekDayNameAr
		{
			get
			{
				return _weekDayNameAr;
			}
			set
			{
				_weekDayNameAr = value;
			}
		}

		public string PreferredOperationNameEn
		{
			get
			{
				return _preferredOperationNameEn;
			}
			set
			{
				_preferredOperationNameEn = value;
			}
		}

		public string PreferredOperationNameAr
		{
			get
			{
				return _preferredOperationNameAr;
			}
			set
			{
				_preferredOperationNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_PreferredTimeVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[PreferredId]
			,[ClientId]
			,[PreferredOperationId]
			,[WeekDayId]
			,[FromTime]
			,[ToTime]
			,[WeekDayNameEn]
			,[WeekDayNameAr]
			,[PreferredOperationNameEn]
			,[PreferredOperationNameAr]
			FROM [dbo].[Client_PreferredTimeVw]
			";

		internal static string ctprClient_PreferredTimeVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_PreferredTimeVw]
			";

		internal static string ctprClient_PreferredTimeVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_PreferredTimeVw]
			##CRITERIA##
			";

		internal static string ctprClient_PreferredTimeVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[PreferredId]
			,[ClientId]
			,[PreferredOperationId]
			,[WeekDayId]
			,[FromTime]
			,[ToTime]
			,[WeekDayNameEn]
			,[WeekDayNameAr]
			,[PreferredOperationNameEn]
			,[PreferredOperationNameAr]
			FROM [dbo].[Client_PreferredTimeVw]
			##CRITERIA##
			";

		internal static string ctprClient_PreferredTimeVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_PreferredTimeVw]
			##CRITERIA##
			";

	}
}
#endregion
