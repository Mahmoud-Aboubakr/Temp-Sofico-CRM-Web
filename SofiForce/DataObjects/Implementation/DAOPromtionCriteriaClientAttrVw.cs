/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOPromtionCriteriaClientAttrVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected string _clientCode;
		protected Int32? _clientId;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _clientCustomId;
		protected Int32? _clientAttributeId;
		protected string _clientAttributeCode;
		protected string _clientAttributeNameEn;
		protected string _clientAttributeNameAr;
		protected bool? _isCustom;
		#endregion

		#region class methods
		public DAOPromtionCriteriaClientAttrVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table PromtionCriteriaClientAttrVw
		///</Summary>
		///<returns>
		///IList-DAOPromtionCriteriaClientAttrVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOPromtionCriteriaClientAttrVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromtionCriteriaClientAttrVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromtionCriteriaClientAttrVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromtionCriteriaClientAttrVw> objList = new List<DAOPromtionCriteriaClientAttrVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromtionCriteriaClientAttrVw retObj = new DAOPromtionCriteriaClientAttrVw();
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._clientCustomId					 = Convert.IsDBNull(row["ClientCustomId"]) ? (Int32?)null : (Int32?)row["ClientCustomId"];
						retObj._clientAttributeId					 = Convert.IsDBNull(row["ClientAttributeId"]) ? (Int32?)null : (Int32?)row["ClientAttributeId"];
						retObj._clientAttributeCode					 = Convert.IsDBNull(row["ClientAttributeCode"]) ? null : (string)row["ClientAttributeCode"];
						retObj._clientAttributeNameEn					 = Convert.IsDBNull(row["ClientAttributeNameEn"]) ? null : (string)row["ClientAttributeNameEn"];
						retObj._clientAttributeNameAr					 = Convert.IsDBNull(row["ClientAttributeNameAr"]) ? null : (string)row["ClientAttributeNameAr"];
						retObj._isCustom					 = Convert.IsDBNull(row["IsCustom"]) ? (bool?)null : (bool?)row["IsCustom"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPromtionCriteriaClientAttrVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiPromtionCriteriaClientAttrVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromtionCriteriaClientAttrVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromtionCriteriaClientAttrVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "ClientCustomId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCustomId"]) ? (Int32?)null : (Int32?)row["ClientCustomId"]);
						if (string.Compare(projection.Member, "ClientAttributeId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientAttributeId"]) ? (Int32?)null : (Int32?)row["ClientAttributeId"]);
						if (string.Compare(projection.Member, "ClientAttributeCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientAttributeCode"]) ? null : (string)row["ClientAttributeCode"]);
						if (string.Compare(projection.Member, "ClientAttributeNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientAttributeNameEn"]) ? null : (string)row["ClientAttributeNameEn"]);
						if (string.Compare(projection.Member, "ClientAttributeNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientAttributeNameAr"]) ? null : (string)row["ClientAttributeNameAr"]);
						if (string.Compare(projection.Member, "IsCustom", true) == 0) lst.Add(Convert.IsDBNull(row["IsCustom"]) ? (bool?)null : (bool?)row["IsCustom"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api PromtionCriteriaClientAttrVw
		///</Summary>
		///<returns>
		///IList-DAOPromtionCriteriaClientAttrVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOPromtionCriteriaClientAttrVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromtionCriteriaClientAttrVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("PromtionCriteriaClientAttrVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOPromtionCriteriaClientAttrVw> objList = new List<DAOPromtionCriteriaClientAttrVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPromtionCriteriaClientAttrVw retObj = new DAOPromtionCriteriaClientAttrVw();
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._clientCustomId					 = Convert.IsDBNull(row["ClientCustomId"]) ? (Int32?)null : (Int32?)row["ClientCustomId"];
						retObj._clientAttributeId					 = Convert.IsDBNull(row["ClientAttributeId"]) ? (Int32?)null : (Int32?)row["ClientAttributeId"];
						retObj._clientAttributeCode					 = Convert.IsDBNull(row["ClientAttributeCode"]) ? null : (string)row["ClientAttributeCode"];
						retObj._clientAttributeNameEn					 = Convert.IsDBNull(row["ClientAttributeNameEn"]) ? null : (string)row["ClientAttributeNameEn"];
						retObj._clientAttributeNameAr					 = Convert.IsDBNull(row["ClientAttributeNameAr"]) ? null : (string)row["ClientAttributeNameAr"];
						retObj._isCustom					 = Convert.IsDBNull(row["IsCustom"]) ? (bool?)null : (bool?)row["IsCustom"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api PromtionCriteriaClientAttrVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprPromtionCriteriaClientAttrVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int32? ClientCustomId
		{
			get
			{
				return _clientCustomId;
			}
			set
			{
				_clientCustomId = value;
			}
		}

		public Int32? ClientAttributeId
		{
			get
			{
				return _clientAttributeId;
			}
			set
			{
				_clientAttributeId = value;
			}
		}

		public string ClientAttributeCode
		{
			get
			{
				return _clientAttributeCode;
			}
			set
			{
				_clientAttributeCode = value;
			}
		}

		public string ClientAttributeNameEn
		{
			get
			{
				return _clientAttributeNameEn;
			}
			set
			{
				_clientAttributeNameEn = value;
			}
		}

		public string ClientAttributeNameAr
		{
			get
			{
				return _clientAttributeNameAr;
			}
			set
			{
				_clientAttributeNameAr = value;
			}
		}

		public bool? IsCustom
		{
			get
			{
				return _isCustom;
			}
			set
			{
				_isCustom = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPromtionCriteriaClientAttrVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientCode]
			,[ClientId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[ClientCustomId]
			,[ClientAttributeId]
			,[ClientAttributeCode]
			,[ClientAttributeNameEn]
			,[ClientAttributeNameAr]
			,[IsCustom]
			FROM [dbo].[PromtionCriteriaClientAttrVw]
			";

		internal static string ctprPromtionCriteriaClientAttrVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[PromtionCriteriaClientAttrVw]
			";

		internal static string ctprPromtionCriteriaClientAttrVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[PromtionCriteriaClientAttrVw]
			##CRITERIA##
			";

		internal static string ctprPromtionCriteriaClientAttrVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientCode]
			,[ClientId]
			,[ClientNameAr]
			,[ClientNameEn]
			,[ClientCustomId]
			,[ClientAttributeId]
			,[ClientAttributeCode]
			,[ClientAttributeNameEn]
			,[ClientAttributeNameAr]
			,[IsCustom]
			FROM [dbo].[PromtionCriteriaClientAttrVw]
			##CRITERIA##
			";

		internal static string ctprPromtionCriteriaClientAttrVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[PromtionCriteriaClientAttrVw]
			##CRITERIA##
			";

	}
}
#endregion
