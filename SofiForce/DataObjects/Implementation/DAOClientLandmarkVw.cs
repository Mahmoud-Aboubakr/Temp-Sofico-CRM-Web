/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOClientLandmarkVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int64? _detaillandId;
		protected Int32? _clientId;
		protected Int32? _landmarkId;
		protected string _landmarkNameEn;
		protected string _landmarkNameAr;
		#endregion

		#region class methods
		public DAOClientLandmarkVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Client_LandmarkVw
		///</Summary>
		///<returns>
		///IList-DAOClientLandmarkVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOClientLandmarkVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_LandmarkVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_LandmarkVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientLandmarkVw> objList = new List<DAOClientLandmarkVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientLandmarkVw retObj = new DAOClientLandmarkVw();
						retObj._detaillandId					 = Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._landmarkId					 = Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"];
						retObj._landmarkNameEn					 = Convert.IsDBNull(row["LandmarkNameEn"]) ? null : (string)row["LandmarkNameEn"];
						retObj._landmarkNameAr					 = Convert.IsDBNull(row["LandmarkNameAr"]) ? null : (string)row["LandmarkNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprClient_LandmarkVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiClient_LandmarkVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_LandmarkVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_LandmarkVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DetaillandId", true) == 0) lst.Add(Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "LandmarkId", true) == 0) lst.Add(Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"]);
						if (string.Compare(projection.Member, "LandmarkNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["LandmarkNameEn"]) ? null : (string)row["LandmarkNameEn"]);
						if (string.Compare(projection.Member, "LandmarkNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["LandmarkNameAr"]) ? null : (string)row["LandmarkNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Client_LandmarkVw
		///</Summary>
		///<returns>
		///IList-DAOClientLandmarkVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOClientLandmarkVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_LandmarkVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Client_LandmarkVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOClientLandmarkVw> objList = new List<DAOClientLandmarkVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOClientLandmarkVw retObj = new DAOClientLandmarkVw();
						retObj._detaillandId					 = Convert.IsDBNull(row["DetaillandId"]) ? (Int64?)null : (Int64?)row["DetaillandId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._landmarkId					 = Convert.IsDBNull(row["LandmarkId"]) ? (Int32?)null : (Int32?)row["LandmarkId"];
						retObj._landmarkNameEn					 = Convert.IsDBNull(row["LandmarkNameEn"]) ? null : (string)row["LandmarkNameEn"];
						retObj._landmarkNameAr					 = Convert.IsDBNull(row["LandmarkNameAr"]) ? null : (string)row["LandmarkNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Client_LandmarkVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprClient_LandmarkVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int64? DetaillandId
		{
			get
			{
				return _detaillandId;
			}
			set
			{
				_detaillandId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public Int32? LandmarkId
		{
			get
			{
				return _landmarkId;
			}
			set
			{
				_landmarkId = value;
			}
		}

		public string LandmarkNameEn
		{
			get
			{
				return _landmarkNameEn;
			}
			set
			{
				_landmarkNameEn = value;
			}
		}

		public string LandmarkNameAr
		{
			get
			{
				return _landmarkNameAr;
			}
			set
			{
				_landmarkNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprClient_LandmarkVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[DetaillandId]
			,[ClientId]
			,[LandmarkId]
			,[LandmarkNameEn]
			,[LandmarkNameAr]
			FROM [dbo].[Client_LandmarkVw]
			";

		internal static string ctprClient_LandmarkVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Client_LandmarkVw]
			";

		internal static string ctprClient_LandmarkVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Client_LandmarkVw]
			##CRITERIA##
			";

		internal static string ctprClient_LandmarkVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[DetaillandId]
			,[ClientId]
			,[LandmarkId]
			,[LandmarkNameEn]
			,[LandmarkNameAr]
			FROM [dbo].[Client_LandmarkVw]
			##CRITERIA##
			";

		internal static string ctprClient_LandmarkVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Client_LandmarkVw]
			##CRITERIA##
			";

	}
}
#endregion
