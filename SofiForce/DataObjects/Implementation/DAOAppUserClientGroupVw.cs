/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:38 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppUserClientGroupVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected Int32? _appUserGroupId;
		protected Int32? _userId;
		protected Int32? _clientGroupId;
		protected string _clientGroupCode;
		protected string _clientGroupNameEn;
		protected string _clientGroupNameAr;
		#endregion

		#region class methods
		public DAOAppUserClientGroupVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppUser_ClientGroupVw
		///</Summary>
		///<returns>
		///IList-DAOAppUserClientGroupVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppUserClientGroupVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_ClientGroupVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_ClientGroupVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserClientGroupVw> objList = new List<DAOAppUserClientGroupVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserClientGroupVw retObj = new DAOAppUserClientGroupVw();
						retObj._appUserGroupId					 = Convert.IsDBNull(row["AppUserGroupId"]) ? (Int32?)null : (Int32?)row["AppUserGroupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupCode					 = Convert.IsDBNull(row["ClientGroupCode"]) ? null : (string)row["ClientGroupCode"];
						retObj._clientGroupNameEn					 = Convert.IsDBNull(row["ClientGroupNameEn"]) ? null : (string)row["ClientGroupNameEn"];
						retObj._clientGroupNameAr					 = Convert.IsDBNull(row["ClientGroupNameAr"]) ? null : (string)row["ClientGroupNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_ClientGroupVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppUser_ClientGroupVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_ClientGroupVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_ClientGroupVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "AppUserGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["AppUserGroupId"]) ? (Int32?)null : (Int32?)row["AppUserGroupId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "ClientGroupId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"]);
						if (string.Compare(projection.Member, "ClientGroupCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupCode"]) ? null : (string)row["ClientGroupCode"]);
						if (string.Compare(projection.Member, "ClientGroupNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupNameEn"]) ? null : (string)row["ClientGroupNameEn"]);
						if (string.Compare(projection.Member, "ClientGroupNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientGroupNameAr"]) ? null : (string)row["ClientGroupNameAr"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppUser_ClientGroupVw
		///</Summary>
		///<returns>
		///IList-DAOAppUserClientGroupVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppUserClientGroupVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_ClientGroupVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_ClientGroupVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserClientGroupVw> objList = new List<DAOAppUserClientGroupVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserClientGroupVw retObj = new DAOAppUserClientGroupVw();
						retObj._appUserGroupId					 = Convert.IsDBNull(row["AppUserGroupId"]) ? (Int32?)null : (Int32?)row["AppUserGroupId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._clientGroupId					 = Convert.IsDBNull(row["ClientGroupId"]) ? (Int32?)null : (Int32?)row["ClientGroupId"];
						retObj._clientGroupCode					 = Convert.IsDBNull(row["ClientGroupCode"]) ? null : (string)row["ClientGroupCode"];
						retObj._clientGroupNameEn					 = Convert.IsDBNull(row["ClientGroupNameEn"]) ? null : (string)row["ClientGroupNameEn"];
						retObj._clientGroupNameAr					 = Convert.IsDBNull(row["ClientGroupNameAr"]) ? null : (string)row["ClientGroupNameAr"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppUser_ClientGroupVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_ClientGroupVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? AppUserGroupId
		{
			get
			{
				return _appUserGroupId;
			}
			set
			{
				_appUserGroupId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? ClientGroupId
		{
			get
			{
				return _clientGroupId;
			}
			set
			{
				_clientGroupId = value;
			}
		}

		public string ClientGroupCode
		{
			get
			{
				return _clientGroupCode;
			}
			set
			{
				_clientGroupCode = value;
			}
		}

		public string ClientGroupNameEn
		{
			get
			{
				return _clientGroupNameEn;
			}
			set
			{
				_clientGroupNameEn = value;
			}
		}

		public string ClientGroupNameAr
		{
			get
			{
				return _clientGroupNameAr;
			}
			set
			{
				_clientGroupNameAr = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppUser_ClientGroupVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[AppUserGroupId]
			,[UserId]
			,[ClientGroupId]
			,[ClientGroupCode]
			,[ClientGroupNameEn]
			,[ClientGroupNameAr]
			FROM [dbo].[AppUser_ClientGroupVw]
			";

		internal static string ctprAppUser_ClientGroupVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_ClientGroupVw]
			";

		internal static string ctprAppUser_ClientGroupVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppUser_ClientGroupVw]
			##CRITERIA##
			";

		internal static string ctprAppUser_ClientGroupVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[AppUserGroupId]
			,[UserId]
			,[ClientGroupId]
			,[ClientGroupCode]
			,[ClientGroupNameEn]
			,[ClientGroupNameAr]
			FROM [dbo].[AppUser_ClientGroupVw]
			##CRITERIA##
			";

		internal static string ctprAppUser_ClientGroupVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppUser_ClientGroupVw]
			##CRITERIA##
			";

	}
}
#endregion
