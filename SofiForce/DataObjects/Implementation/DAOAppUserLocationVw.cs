/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/28/2023 4:50:17 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SofiForce.DataObjects.Interfaces;

namespace SofiForce.DataObjects
{
	public partial class DAOAppUserLocationVw : zSofiForceConn_BaseData
	{
		#region member variables
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int64? _trackingId;
		protected Int32? _userId;
		protected Int32? _trackingTypeId;
		protected DateTime? _trackingDate;
		protected DateTime? _trackingTime;
		protected double? _latitude;
		protected double? _longitude;
		protected bool? _isPositive;
		protected Int64? _salesId;
		protected Int32? _clientId;
		protected bool? _inZone;
		protected Int32? _distance;
		#endregion

		#region class methods
		public DAOAppUserLocationVw()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table AppUser_LocationVw
		///</Summary>
		///<returns>
		///IList-DAOAppUserLocationVw.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOAppUserLocationVw> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_LocationVw_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_LocationVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserLocationVw> objList = new List<DAOAppUserLocationVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserLocationVw retObj = new DAOAppUserLocationVw();
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._trackingId					 = Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._trackingTypeId					 = Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"];
						retObj._trackingDate					 = Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"];
						retObj._trackingTime					 = Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAppUser_LocationVw_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAppUser_LocationVw
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_LocationVw_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_LocationVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ClientCode", true) == 0) lst.Add(Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"]);
						if (string.Compare(projection.Member, "ClientNameAr", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"]);
						if (string.Compare(projection.Member, "ClientNameEn", true) == 0) lst.Add(Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"]);
						if (string.Compare(projection.Member, "TrackingId", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"]);
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "TrackingTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"]);
						if (string.Compare(projection.Member, "TrackingDate", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"]);
						if (string.Compare(projection.Member, "TrackingTime", true) == 0) lst.Add(Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"]);
						if (string.Compare(projection.Member, "Latitude", true) == 0) lst.Add(Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"]);
						if (string.Compare(projection.Member, "Longitude", true) == 0) lst.Add(Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"]);
						if (string.Compare(projection.Member, "IsPositive", true) == 0) lst.Add(Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"]);
						if (string.Compare(projection.Member, "SalesId", true) == 0) lst.Add(Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"]);
						if (string.Compare(projection.Member, "ClientId", true) == 0) lst.Add(Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"]);
						if (string.Compare(projection.Member, "InZone", true) == 0) lst.Add(Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"]);
						if (string.Compare(projection.Member, "Distance", true) == 0) lst.Add(Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api AppUser_LocationVw
		///</Summary>
		///<returns>
		///IList-DAOAppUserLocationVw.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOAppUserLocationVw> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_LocationVw_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("AppUser_LocationVw");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOAppUserLocationVw> objList = new List<DAOAppUserLocationVw>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAppUserLocationVw retObj = new DAOAppUserLocationVw();
						retObj._clientCode					 = Convert.IsDBNull(row["ClientCode"]) ? null : (string)row["ClientCode"];
						retObj._clientNameAr					 = Convert.IsDBNull(row["ClientNameAr"]) ? null : (string)row["ClientNameAr"];
						retObj._clientNameEn					 = Convert.IsDBNull(row["ClientNameEn"]) ? null : (string)row["ClientNameEn"];
						retObj._trackingId					 = Convert.IsDBNull(row["TrackingId"]) ? (Int64?)null : (Int64?)row["TrackingId"];
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._trackingTypeId					 = Convert.IsDBNull(row["TrackingTypeId"]) ? (Int32?)null : (Int32?)row["TrackingTypeId"];
						retObj._trackingDate					 = Convert.IsDBNull(row["TrackingDate"]) ? (DateTime?)null : (DateTime?)row["TrackingDate"];
						retObj._trackingTime					 = Convert.IsDBNull(row["TrackingTime"]) ? (DateTime?)null : (DateTime?)row["TrackingTime"];
						retObj._latitude					 = Convert.IsDBNull(row["Latitude"]) ? (double?)null : (double?)row["Latitude"];
						retObj._longitude					 = Convert.IsDBNull(row["Longitude"]) ? (double?)null : (double?)row["Longitude"];
						retObj._isPositive					 = Convert.IsDBNull(row["IsPositive"]) ? (bool?)null : (bool?)row["IsPositive"];
						retObj._salesId					 = Convert.IsDBNull(row["SalesId"]) ? (Int64?)null : (Int64?)row["SalesId"];
						retObj._clientId					 = Convert.IsDBNull(row["ClientId"]) ? (Int32?)null : (Int32?)row["ClientId"];
						retObj._inZone					 = Convert.IsDBNull(row["InZone"]) ? (bool?)null : (bool?)row["InZone"];
						retObj._distance					 = Convert.IsDBNull(row["Distance"]) ? (Int32?)null : (Int32?)row["Distance"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api AppUser_LocationVw
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprAppUser_LocationVw_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string ClientCode
		{
			get
			{
				return _clientCode;
			}
			set
			{
				_clientCode = value;
			}
		}

		public string ClientNameAr
		{
			get
			{
				return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
			}
		}

		public string ClientNameEn
		{
			get
			{
				return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
			}
		}

		public Int64? TrackingId
		{
			get
			{
				return _trackingId;
			}
			set
			{
				_trackingId = value;
			}
		}

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public Int32? TrackingTypeId
		{
			get
			{
				return _trackingTypeId;
			}
			set
			{
				_trackingTypeId = value;
			}
		}

		public DateTime? TrackingDate
		{
			get
			{
				return _trackingDate;
			}
			set
			{
				_trackingDate = value;
			}
		}

		public DateTime? TrackingTime
		{
			get
			{
				return _trackingTime;
			}
			set
			{
				_trackingTime = value;
			}
		}

		public double? Latitude
		{
			get
			{
				return _latitude;
			}
			set
			{
				_latitude = value;
			}
		}

		public double? Longitude
		{
			get
			{
				return _longitude;
			}
			set
			{
				_longitude = value;
			}
		}

		public bool? IsPositive
		{
			get
			{
				return _isPositive;
			}
			set
			{
				_isPositive = value;
			}
		}

		public Int64? SalesId
		{
			get
			{
				return _salesId;
			}
			set
			{
				_salesId = value;
			}
		}

		public Int32? ClientId
		{
			get
			{
				return _clientId;
			}
			set
			{
				_clientId = value;
			}
		}

		public bool? InZone
		{
			get
			{
				return _inZone;
			}
			set
			{
				_inZone = value;
			}
		}

		public Int32? Distance
		{
			get
			{
				return _distance;
			}
			set
			{
				_distance = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace SofiForce.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAppUser_LocationVw_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[TrackingId]
			,[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			FROM [dbo].[AppUser_LocationVw]
			";

		internal static string ctprAppUser_LocationVw_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[AppUser_LocationVw]
			";

		internal static string ctprAppUser_LocationVw_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[AppUser_LocationVw]
			##CRITERIA##
			";

		internal static string ctprAppUser_LocationVw_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ClientCode]
			,[ClientNameAr]
			,[ClientNameEn]
			,[TrackingId]
			,[UserId]
			,[TrackingTypeId]
			,[TrackingDate]
			,[TrackingTime]
			,[Latitude]
			,[Longitude]
			,[IsPositive]
			,[SalesId]
			,[ClientId]
			,[InZone]
			,[Distance]
			FROM [dbo].[AppUser_LocationVw]
			##CRITERIA##
			";

		internal static string ctprAppUser_LocationVw_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[AppUser_LocationVw]
			##CRITERIA##
			";

	}
}
#endregion
