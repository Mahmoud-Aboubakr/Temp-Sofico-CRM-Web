/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOperationType.
	///It maintains a collection of BOOperationRequest objects.
	///</Summary>
	public partial class BOOperationType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _operationTypeId;
		protected string _operationTypeCode;
		protected string _operationTypeNameEn;
		protected string _operationTypeNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOOperationRequest> _boOperationRequestCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOperationType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 operationTypeId
		///</parameters>
		public BOOperationType(Int32 operationTypeId)
		{
			try
			{
				DAOOperationType daoOperationType = DAOOperationType.SelectOne(operationTypeId);
				_operationTypeId = daoOperationType.OperationTypeId;
				_operationTypeCode = daoOperationType.OperationTypeCode;
				_operationTypeNameEn = daoOperationType.OperationTypeNameEn;
				_operationTypeNameAr = daoOperationType.OperationTypeNameAr;
				_isActive = daoOperationType.IsActive;
				_canEdit = daoOperationType.CanEdit;
				_canDelete = daoOperationType.CanDelete;
				_displayOrder = daoOperationType.DisplayOrder;
				_color = daoOperationType.Color;
				_icon = daoOperationType.Icon;
				_cBy = daoOperationType.CBy;
				_eBy = daoOperationType.EBy;
				_cDate = daoOperationType.CDate;
				_eDate = daoOperationType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOperationType
		///</parameters>
		protected internal BOOperationType(DAOOperationType daoOperationType)
		{
			try
			{
				_operationTypeId = daoOperationType.OperationTypeId;
				_operationTypeCode = daoOperationType.OperationTypeCode;
				_operationTypeNameEn = daoOperationType.OperationTypeNameEn;
				_operationTypeNameAr = daoOperationType.OperationTypeNameAr;
				_isActive = daoOperationType.IsActive;
				_canEdit = daoOperationType.CanEdit;
				_canDelete = daoOperationType.CanDelete;
				_displayOrder = daoOperationType.DisplayOrder;
				_color = daoOperationType.Color;
				_icon = daoOperationType.Icon;
				_cBy = daoOperationType.CBy;
				_eBy = daoOperationType.EBy;
				_cDate = daoOperationType.CDate;
				_eDate = daoOperationType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OperationType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOOperationType daoOperationType = new DAOOperationType();
			RegisterDataObject(daoOperationType);
			BeginTransaction("savenewBOOperationType");
			try
			{
				daoOperationType.OperationTypeId = _operationTypeId;
				daoOperationType.OperationTypeCode = _operationTypeCode;
				daoOperationType.OperationTypeNameEn = _operationTypeNameEn;
				daoOperationType.OperationTypeNameAr = _operationTypeNameAr;
				daoOperationType.IsActive = _isActive;
				daoOperationType.CanEdit = _canEdit;
				daoOperationType.CanDelete = _canDelete;
				daoOperationType.DisplayOrder = _displayOrder;
				daoOperationType.Color = _color;
				daoOperationType.Icon = _icon;
				daoOperationType.CBy = _cBy;
				daoOperationType.EBy = _eBy;
				daoOperationType.CDate = _cDate;
				daoOperationType.EDate = _eDate;
				daoOperationType.Insert();
				CommitTransaction();
				
				_operationTypeId = daoOperationType.OperationTypeId;
				_operationTypeCode = daoOperationType.OperationTypeCode;
				_operationTypeNameEn = daoOperationType.OperationTypeNameEn;
				_operationTypeNameAr = daoOperationType.OperationTypeNameAr;
				_isActive = daoOperationType.IsActive;
				_canEdit = daoOperationType.CanEdit;
				_canDelete = daoOperationType.CanDelete;
				_displayOrder = daoOperationType.DisplayOrder;
				_color = daoOperationType.Color;
				_icon = daoOperationType.Icon;
				_cBy = daoOperationType.CBy;
				_eBy = daoOperationType.EBy;
				_cDate = daoOperationType.CDate;
				_eDate = daoOperationType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOOperationType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one OperationType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationType
		///</parameters>
		public virtual void Update()
		{
			DAOOperationType daoOperationType = new DAOOperationType();
			RegisterDataObject(daoOperationType);
			BeginTransaction("updateBOOperationType");
			try
			{
				daoOperationType.OperationTypeId = _operationTypeId;
				daoOperationType.OperationTypeCode = _operationTypeCode;
				daoOperationType.OperationTypeNameEn = _operationTypeNameEn;
				daoOperationType.OperationTypeNameAr = _operationTypeNameAr;
				daoOperationType.IsActive = _isActive;
				daoOperationType.CanEdit = _canEdit;
				daoOperationType.CanDelete = _canDelete;
				daoOperationType.DisplayOrder = _displayOrder;
				daoOperationType.Color = _color;
				daoOperationType.Icon = _icon;
				daoOperationType.CBy = _cBy;
				daoOperationType.EBy = _eBy;
				daoOperationType.CDate = _cDate;
				daoOperationType.EDate = _eDate;
				daoOperationType.Update();
				CommitTransaction();
				
				_operationTypeId = daoOperationType.OperationTypeId;
				_operationTypeCode = daoOperationType.OperationTypeCode;
				_operationTypeNameEn = daoOperationType.OperationTypeNameEn;
				_operationTypeNameAr = daoOperationType.OperationTypeNameAr;
				_isActive = daoOperationType.IsActive;
				_canEdit = daoOperationType.CanEdit;
				_canDelete = daoOperationType.CanDelete;
				_displayOrder = daoOperationType.DisplayOrder;
				_color = daoOperationType.Color;
				_icon = daoOperationType.Icon;
				_cBy = daoOperationType.CBy;
				_eBy = daoOperationType.EBy;
				_cDate = daoOperationType.CDate;
				_eDate = daoOperationType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOOperationType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OperationType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOOperationType daoOperationType = new DAOOperationType();
			RegisterDataObject(daoOperationType);
			BeginTransaction("deleteBOOperationType");
			try
			{
				daoOperationType.OperationTypeId = _operationTypeId;
				daoOperationType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOOperationType");
				throw;
			}
		}
		
		///<Summary>
		///OperationTypeCollection
		///This method returns the collection of BOOperationType objects
		///</Summary>
		///<returns>
		///List[BOOperationType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOOperationType> OperationTypeCollection()
		{
			try
			{
				IList<BOOperationType> boOperationTypeCollection = new List<BOOperationType>();
				IList<DAOOperationType> daoOperationTypeCollection = DAOOperationType.SelectAll();
			
				foreach(DAOOperationType daoOperationType in daoOperationTypeCollection)
					boOperationTypeCollection.Add(new BOOperationType(daoOperationType));
			
				return boOperationTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationTypeCollectionCount
		///This method returns the collection count of BOOperationType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OperationTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOOperationType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestCollection
		///This method returns its collection of BOOperationRequest objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequest]
		///</returns>
		///<parameters>
		///BOOperationType
		///</parameters>
		public virtual IList<BOOperationRequest> OperationRequestCollection()
		{
			try
			{
				if(_boOperationRequestCollection == null)
					LoadOperationRequestCollection();
				
				return _boOperationRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOOperationType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOOperationType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOOperationType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOperationTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOOperationType> daoOperationTypeCollection = DAOOperationType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOOperationType resdaoOperationType in daoOperationTypeCollection)
					boOperationTypeCollection.Add((T)(object)new BOOperationType(resdaoOperationType));
			
				return boOperationTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOOperationType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOOperationType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestCollection
		///This method loads the internal collection of BOOperationRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestCollection()
		{
			try
			{
				_boOperationRequestCollection = new List<BOOperationRequest>();
				IList<DAOOperationRequest> daoOperationRequestCollection = DAOOperationRequest.SelectAllByOperationTypeId(_operationTypeId.Value);
				
				foreach(DAOOperationRequest daoOperationRequest in daoOperationRequestCollection)
					_boOperationRequestCollection.Add(new BOOperationRequest(daoOperationRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequest
		///This method persists a BOOperationRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequest
		///</parameters>
		public virtual void AddOperationRequest(BOOperationRequest boOperationRequest)
		{
			DAOOperationRequest daoOperationRequest = new DAOOperationRequest();
			RegisterDataObject(daoOperationRequest);
			BeginTransaction("addOperationRequest");
			try
			{
				daoOperationRequest.OperationId = boOperationRequest.OperationId;
				daoOperationRequest.OperationCode = boOperationRequest.OperationCode;
				daoOperationRequest.AgentId = boOperationRequest.AgentId;
				daoOperationRequest.GovernerateId = boOperationRequest.GovernerateId;
				daoOperationRequest.RepresentativeId = boOperationRequest.RepresentativeId;
				daoOperationRequest.OperationDate = boOperationRequest.OperationDate;
				daoOperationRequest.StartDate = boOperationRequest.StartDate;
				daoOperationRequest.TargetDays = boOperationRequest.TargetDays;
				daoOperationRequest.ActualDays = boOperationRequest.ActualDays;
				daoOperationRequest.TargetClients = boOperationRequest.TargetClients;
				daoOperationRequest.ActualClients = boOperationRequest.ActualClients;
				daoOperationRequest.DaysPerformance = boOperationRequest.DaysPerformance;
				daoOperationRequest.ClientsPerformance = boOperationRequest.ClientsPerformance;
				daoOperationRequest.Accuracy = boOperationRequest.Accuracy;
				daoOperationRequest.MapPoints = boOperationRequest.MapPoints;
				daoOperationRequest.IsClosed = boOperationRequest.IsClosed;
				daoOperationRequest.CloseDate = boOperationRequest.CloseDate;
				daoOperationRequest.Notes = boOperationRequest.Notes;
				daoOperationRequest.CBy = boOperationRequest.CBy;
				daoOperationRequest.EBy = boOperationRequest.EBy;
				daoOperationRequest.CDate = boOperationRequest.CDate;
				daoOperationRequest.EDate = boOperationRequest.EDate;
				daoOperationRequest.OperationTypeId = _operationTypeId.Value;
				daoOperationRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequest = new BOOperationRequest(daoOperationRequest);
				if(_boOperationRequestCollection != null)
					_boOperationRequestCollection.Add(boOperationRequest);
			}
			catch
			{
				RollbackTransaction("addOperationRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequest
		///This method deletes all BOOperationRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequest");
			try
			{
				DAOOperationRequest.DeleteAllByOperationTypeId(ConnectionProvider, _operationTypeId.Value);
				CommitTransaction();
				if(_boOperationRequestCollection != null)
				{
					_boOperationRequestCollection.Clear();
					_boOperationRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequest");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? OperationTypeId
		{
			get
			{
				 return _operationTypeId;
			}
			set
			{
				_operationTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationTypeCode
		{
			get
			{
				 return _operationTypeCode;
			}
			set
			{
				_operationTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationTypeNameEn
		{
			get
			{
				 return _operationTypeNameEn;
			}
			set
			{
				_operationTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationTypeNameAr
		{
			get
			{
				 return _operationTypeNameAr;
			}
			set
			{
				_operationTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
