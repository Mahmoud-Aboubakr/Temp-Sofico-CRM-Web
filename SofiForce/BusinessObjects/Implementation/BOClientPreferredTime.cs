/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientPreferredTime.
	///</Summary>
	public partial class BOClientPreferredTime : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _preferredId;
		protected Int32? _clientId;
		protected Int32? _preferredOperationId;
		protected Int32? _weekDayId;
		protected TimeSpan? _fromTime;
		protected TimeSpan? _toTime;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientPreferredTime()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 preferredId
		///</parameters>
		public BOClientPreferredTime(Int64 preferredId)
		{
			try
			{
				DAOClientPreferredTime daoClientPreferredTime = DAOClientPreferredTime.SelectOne(preferredId);
				_preferredId = daoClientPreferredTime.PreferredId;
				_clientId = daoClientPreferredTime.ClientId;
				_preferredOperationId = daoClientPreferredTime.PreferredOperationId;
				_weekDayId = daoClientPreferredTime.WeekDayId;
				_fromTime = daoClientPreferredTime.FromTime;
				_toTime = daoClientPreferredTime.ToTime;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientPreferredTime
		///</parameters>
		protected internal BOClientPreferredTime(DAOClientPreferredTime daoClientPreferredTime)
		{
			try
			{
				_preferredId = daoClientPreferredTime.PreferredId;
				_clientId = daoClientPreferredTime.ClientId;
				_preferredOperationId = daoClientPreferredTime.PreferredOperationId;
				_weekDayId = daoClientPreferredTime.WeekDayId;
				_fromTime = daoClientPreferredTime.FromTime;
				_toTime = daoClientPreferredTime.ToTime;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientPreferredTime record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientPreferredTime daoClientPreferredTime = new DAOClientPreferredTime();
			RegisterDataObject(daoClientPreferredTime);
			BeginTransaction("savenewBOClientPreferredTime");
			try
			{
				daoClientPreferredTime.ClientId = _clientId;
				daoClientPreferredTime.PreferredOperationId = _preferredOperationId;
				daoClientPreferredTime.WeekDayId = _weekDayId;
				daoClientPreferredTime.FromTime = _fromTime;
				daoClientPreferredTime.ToTime = _toTime;
				daoClientPreferredTime.Insert();
				CommitTransaction();
				
				_preferredId = daoClientPreferredTime.PreferredId;
				_clientId = daoClientPreferredTime.ClientId;
				_preferredOperationId = daoClientPreferredTime.PreferredOperationId;
				_weekDayId = daoClientPreferredTime.WeekDayId;
				_fromTime = daoClientPreferredTime.FromTime;
				_toTime = daoClientPreferredTime.ToTime;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientPreferredTime");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientPreferredTime record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientPreferredTime
		///</parameters>
		public virtual void Update()
		{
			DAOClientPreferredTime daoClientPreferredTime = new DAOClientPreferredTime();
			RegisterDataObject(daoClientPreferredTime);
			BeginTransaction("updateBOClientPreferredTime");
			try
			{
				daoClientPreferredTime.PreferredId = _preferredId;
				daoClientPreferredTime.ClientId = _clientId;
				daoClientPreferredTime.PreferredOperationId = _preferredOperationId;
				daoClientPreferredTime.WeekDayId = _weekDayId;
				daoClientPreferredTime.FromTime = _fromTime;
				daoClientPreferredTime.ToTime = _toTime;
				daoClientPreferredTime.Update();
				CommitTransaction();
				
				_preferredId = daoClientPreferredTime.PreferredId;
				_clientId = daoClientPreferredTime.ClientId;
				_preferredOperationId = daoClientPreferredTime.PreferredOperationId;
				_weekDayId = daoClientPreferredTime.WeekDayId;
				_fromTime = daoClientPreferredTime.FromTime;
				_toTime = daoClientPreferredTime.ToTime;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientPreferredTime");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientPreferredTime record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientPreferredTime daoClientPreferredTime = new DAOClientPreferredTime();
			RegisterDataObject(daoClientPreferredTime);
			BeginTransaction("deleteBOClientPreferredTime");
			try
			{
				daoClientPreferredTime.PreferredId = _preferredId;
				daoClientPreferredTime.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientPreferredTime");
				throw;
			}
		}
		
		///<Summary>
		///ClientPreferredTimeCollection
		///This method returns the collection of BOClientPreferredTime objects
		///</Summary>
		///<returns>
		///List[BOClientPreferredTime]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientPreferredTime> ClientPreferredTimeCollection()
		{
			try
			{
				IList<BOClientPreferredTime> boClientPreferredTimeCollection = new List<BOClientPreferredTime>();
				IList<DAOClientPreferredTime> daoClientPreferredTimeCollection = DAOClientPreferredTime.SelectAll();
			
				foreach(DAOClientPreferredTime daoClientPreferredTime in daoClientPreferredTimeCollection)
					boClientPreferredTimeCollection.Add(new BOClientPreferredTime(daoClientPreferredTime));
			
				return boClientPreferredTimeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPreferredTimeCollectionCount
		///This method returns the collection count of BOClientPreferredTime objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientPreferredTimeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientPreferredTime.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientPreferredTime>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientPreferredTime.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPreferredTimeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientPreferredTime objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientPreferredTimeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientPreferredTime> daoClientPreferredTimeCollection = DAOClientPreferredTime.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientPreferredTime resdaoClientPreferredTime in daoClientPreferredTimeCollection)
					boClientPreferredTimeCollection.Add((T)(object)new BOClientPreferredTime(resdaoClientPreferredTime));
			
				return boClientPreferredTimeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPreferredTimeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientPreferredTime objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientPreferredTime.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? PreferredId
		{
			get
			{
				 return _preferredId;
			}
			set
			{
				_preferredId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PreferredOperationId
		{
			get
			{
				 return _preferredOperationId;
			}
			set
			{
				_preferredOperationId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? WeekDayId
		{
			get
			{
				 return _weekDayId;
			}
			set
			{
				_weekDayId = value;
				_isDirty = true;
			}
		}
		
		public virtual TimeSpan? FromTime
		{
			get
			{
				 return _fromTime;
			}
			set
			{
				_fromTime = value;
				_isDirty = true;
			}
		}
		
		public virtual TimeSpan? ToTime
		{
			get
			{
				 return _toTime;
			}
			set
			{
				_toTime = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
