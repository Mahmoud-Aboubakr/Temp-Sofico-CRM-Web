/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOArticleDetail.
	///</Summary>
	public partial class BOArticleDetail : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _detailId;
		protected Int32? _articleId;
		protected string _articleContentAr;
		protected string _articleContentEn;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOArticleDetail()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 detailId
		///</parameters>
		public BOArticleDetail(Int32 detailId)
		{
			try
			{
				DAOArticleDetail daoArticleDetail = DAOArticleDetail.SelectOne(detailId);
				_detailId = daoArticleDetail.DetailId;
				_articleId = daoArticleDetail.ArticleId;
				_articleContentAr = daoArticleDetail.ArticleContentAr;
				_articleContentEn = daoArticleDetail.ArticleContentEn;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOArticleDetail
		///</parameters>
		protected internal BOArticleDetail(DAOArticleDetail daoArticleDetail)
		{
			try
			{
				_detailId = daoArticleDetail.DetailId;
				_articleId = daoArticleDetail.ArticleId;
				_articleContentAr = daoArticleDetail.ArticleContentAr;
				_articleContentEn = daoArticleDetail.ArticleContentEn;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ArticleDetail record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOArticleDetail daoArticleDetail = new DAOArticleDetail();
			RegisterDataObject(daoArticleDetail);
			BeginTransaction("savenewBOArticleDetail");
			try
			{
				daoArticleDetail.ArticleId = _articleId;
				daoArticleDetail.ArticleContentAr = _articleContentAr;
				daoArticleDetail.ArticleContentEn = _articleContentEn;
				daoArticleDetail.Insert();
				CommitTransaction();
				
				_detailId = daoArticleDetail.DetailId;
				_articleId = daoArticleDetail.ArticleId;
				_articleContentAr = daoArticleDetail.ArticleContentAr;
				_articleContentEn = daoArticleDetail.ArticleContentEn;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOArticleDetail");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ArticleDetail record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOArticleDetail
		///</parameters>
		public virtual void Update()
		{
			DAOArticleDetail daoArticleDetail = new DAOArticleDetail();
			RegisterDataObject(daoArticleDetail);
			BeginTransaction("updateBOArticleDetail");
			try
			{
				daoArticleDetail.DetailId = _detailId;
				daoArticleDetail.ArticleId = _articleId;
				daoArticleDetail.ArticleContentAr = _articleContentAr;
				daoArticleDetail.ArticleContentEn = _articleContentEn;
				daoArticleDetail.Update();
				CommitTransaction();
				
				_detailId = daoArticleDetail.DetailId;
				_articleId = daoArticleDetail.ArticleId;
				_articleContentAr = daoArticleDetail.ArticleContentAr;
				_articleContentEn = daoArticleDetail.ArticleContentEn;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOArticleDetail");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ArticleDetail record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOArticleDetail daoArticleDetail = new DAOArticleDetail();
			RegisterDataObject(daoArticleDetail);
			BeginTransaction("deleteBOArticleDetail");
			try
			{
				daoArticleDetail.DetailId = _detailId;
				daoArticleDetail.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOArticleDetail");
				throw;
			}
		}
		
		///<Summary>
		///ArticleDetailCollection
		///This method returns the collection of BOArticleDetail objects
		///</Summary>
		///<returns>
		///List[BOArticleDetail]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOArticleDetail> ArticleDetailCollection()
		{
			try
			{
				IList<BOArticleDetail> boArticleDetailCollection = new List<BOArticleDetail>();
				IList<DAOArticleDetail> daoArticleDetailCollection = DAOArticleDetail.SelectAll();
			
				foreach(DAOArticleDetail daoArticleDetail in daoArticleDetailCollection)
					boArticleDetailCollection.Add(new BOArticleDetail(daoArticleDetail));
			
				return boArticleDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ArticleDetailCollectionCount
		///This method returns the collection count of BOArticleDetail objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ArticleDetailCollectionCount()
		{
			try
			{
				Int32 objCount = DAOArticleDetail.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOArticleDetail>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOArticleDetail.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ArticleDetailCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOArticleDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boArticleDetailCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOArticleDetail> daoArticleDetailCollection = DAOArticleDetail.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOArticleDetail resdaoArticleDetail in daoArticleDetailCollection)
					boArticleDetailCollection.Add((T)(object)new BOArticleDetail(resdaoArticleDetail));
			
				return boArticleDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ArticleDetailCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOArticleDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOArticleDetail.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? DetailId
		{
			get
			{
				 return _detailId;
			}
			set
			{
				_detailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ArticleId
		{
			get
			{
				 return _articleId;
			}
			set
			{
				_articleId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ArticleContentAr
		{
			get
			{
				 return _articleContentAr;
			}
			set
			{
				_articleContentAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ArticleContentEn
		{
			get
			{
				 return _articleContentEn;
			}
			set
			{
				_articleContentEn = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
