/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOItemStoreTotalVw.
	///</Summary>
	public partial class BOItemStoreTotalVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _itemId;
		protected Int32? _branchId;
		protected Int32? _storeId;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected string _branchCode;
		protected string _storeCode;
		protected string _storeNameAr;
		protected string _storeNameEn;
		protected string _storeTypeNameAr;
		protected string _storeTypeNameEn;
		protected Int32? _storeTypeId;
		protected Int32? _quantity;
		protected Int32? _vendorId;
		protected string _itemNameAr;
		protected string _itemNameEn;
		protected string _vendorCode;
		protected string _vendorNameEn;
		protected string _vendorNameAr;
		protected Int32? _quota;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOItemStoreTotalVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOItemStoreTotalVw
		///</parameters>
		protected internal BOItemStoreTotalVw(DAOItemStoreTotalVw daoItemStoreTotalVw)
		{
			try
			{
				_itemId = daoItemStoreTotalVw.ItemId;
				_branchId = daoItemStoreTotalVw.BranchId;
				_storeId = daoItemStoreTotalVw.StoreId;
				_branchNameAr = daoItemStoreTotalVw.BranchNameAr;
				_branchNameEn = daoItemStoreTotalVw.BranchNameEn;
				_branchCode = daoItemStoreTotalVw.BranchCode;
				_storeCode = daoItemStoreTotalVw.StoreCode;
				_storeNameAr = daoItemStoreTotalVw.StoreNameAr;
				_storeNameEn = daoItemStoreTotalVw.StoreNameEn;
				_storeTypeNameAr = daoItemStoreTotalVw.StoreTypeNameAr;
				_storeTypeNameEn = daoItemStoreTotalVw.StoreTypeNameEn;
				_storeTypeId = daoItemStoreTotalVw.StoreTypeId;
				_quantity = daoItemStoreTotalVw.Quantity;
				_vendorId = daoItemStoreTotalVw.VendorId;
				_itemNameAr = daoItemStoreTotalVw.ItemNameAr;
				_itemNameEn = daoItemStoreTotalVw.ItemNameEn;
				_vendorCode = daoItemStoreTotalVw.VendorCode;
				_vendorNameEn = daoItemStoreTotalVw.VendorNameEn;
				_vendorNameAr = daoItemStoreTotalVw.VendorNameAr;
				_quota = daoItemStoreTotalVw.Quota;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ItemStoreTotalVwCollection
		///This method returns the collection of BOItemStoreTotalVw objects
		///</Summary>
		///<returns>
		///List[BOItemStoreTotalVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOItemStoreTotalVw> ItemStoreTotalVwCollection()
		{
			try
			{
				IList<BOItemStoreTotalVw> boItemStoreTotalVwCollection = new List<BOItemStoreTotalVw>();
				IList<DAOItemStoreTotalVw> daoItemStoreTotalVwCollection = DAOItemStoreTotalVw.SelectAll();
			
				foreach(DAOItemStoreTotalVw daoItemStoreTotalVw in daoItemStoreTotalVwCollection)
					boItemStoreTotalVwCollection.Add(new BOItemStoreTotalVw(daoItemStoreTotalVw));
			
				return boItemStoreTotalVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemStoreTotalVwCollectionCount
		///This method returns the collection count of BOItemStoreTotalVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ItemStoreTotalVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOItemStoreTotalVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOItemStoreTotalVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOItemStoreTotalVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemStoreTotalVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOItemStoreTotalVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boItemStoreTotalVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOItemStoreTotalVw> daoItemStoreTotalVwCollection = DAOItemStoreTotalVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOItemStoreTotalVw resdaoItemStoreTotalVw in daoItemStoreTotalVwCollection)
					boItemStoreTotalVwCollection.Add((T)(object)new BOItemStoreTotalVw(resdaoItemStoreTotalVw));
			
				return boItemStoreTotalVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemStoreTotalVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOItemStoreTotalVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOItemStoreTotalVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ItemId
		{
			get
			{
				 return _itemId;
			}
			set
			{
				_itemId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreId
		{
			get
			{
				 return _storeId;
			}
			set
			{
				_storeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreCode
		{
			get
			{
				 return _storeCode;
			}
			set
			{
				_storeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreNameAr
		{
			get
			{
				 return _storeNameAr;
			}
			set
			{
				_storeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreNameEn
		{
			get
			{
				 return _storeNameEn;
			}
			set
			{
				_storeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreTypeNameAr
		{
			get
			{
				 return _storeTypeNameAr;
			}
			set
			{
				_storeTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreTypeNameEn
		{
			get
			{
				 return _storeTypeNameEn;
			}
			set
			{
				_storeTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreTypeId
		{
			get
			{
				 return _storeTypeId;
			}
			set
			{
				_storeTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VendorId
		{
			get
			{
				 return _vendorId;
			}
			set
			{
				_vendorId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemNameAr
		{
			get
			{
				 return _itemNameAr;
			}
			set
			{
				_itemNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemNameEn
		{
			get
			{
				 return _itemNameEn;
			}
			set
			{
				_itemNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorCode
		{
			get
			{
				 return _vendorCode;
			}
			set
			{
				_vendorCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorNameEn
		{
			get
			{
				 return _vendorNameEn;
			}
			set
			{
				_vendorNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorNameAr
		{
			get
			{
				 return _vendorNameAr;
			}
			set
			{
				_vendorNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Quota
		{
			get
			{
				 return _quota;
			}
			set
			{
				_quota = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
