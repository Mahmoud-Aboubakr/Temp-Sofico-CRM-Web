/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BONotificationType.
	///It maintains a collection of BONotification objects.
	///</Summary>
	public partial class BONotificationType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _notificationTypeId;
		protected string _notificationTypeCode;
		protected string _notificationTypeNameEn;
		protected string _notificationTypeNameAr;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cby;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BONotification> _boNotificationCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BONotificationType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 notificationTypeId
		///</parameters>
		public BONotificationType(Int32 notificationTypeId)
		{
			try
			{
				DAONotificationType daoNotificationType = DAONotificationType.SelectOne(notificationTypeId);
				_notificationTypeId = daoNotificationType.NotificationTypeId;
				_notificationTypeCode = daoNotificationType.NotificationTypeCode;
				_notificationTypeNameEn = daoNotificationType.NotificationTypeNameEn;
				_notificationTypeNameAr = daoNotificationType.NotificationTypeNameAr;
				_icon = daoNotificationType.Icon;
				_color = daoNotificationType.Color;
				_displayOrder = daoNotificationType.DisplayOrder;
				_isActive = daoNotificationType.IsActive;
				_canEdit = daoNotificationType.CanEdit;
				_canDelete = daoNotificationType.CanDelete;
				_cby = daoNotificationType.Cby;
				_cDate = daoNotificationType.CDate;
				_eBy = daoNotificationType.EBy;
				_eDate = daoNotificationType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAONotificationType
		///</parameters>
		protected internal BONotificationType(DAONotificationType daoNotificationType)
		{
			try
			{
				_notificationTypeId = daoNotificationType.NotificationTypeId;
				_notificationTypeCode = daoNotificationType.NotificationTypeCode;
				_notificationTypeNameEn = daoNotificationType.NotificationTypeNameEn;
				_notificationTypeNameAr = daoNotificationType.NotificationTypeNameAr;
				_icon = daoNotificationType.Icon;
				_color = daoNotificationType.Color;
				_displayOrder = daoNotificationType.DisplayOrder;
				_isActive = daoNotificationType.IsActive;
				_canEdit = daoNotificationType.CanEdit;
				_canDelete = daoNotificationType.CanDelete;
				_cby = daoNotificationType.Cby;
				_cDate = daoNotificationType.CDate;
				_eBy = daoNotificationType.EBy;
				_eDate = daoNotificationType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new NotificationType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAONotificationType daoNotificationType = new DAONotificationType();
			RegisterDataObject(daoNotificationType);
			BeginTransaction("savenewBONotificationType");
			try
			{
				daoNotificationType.NotificationTypeCode = _notificationTypeCode;
				daoNotificationType.NotificationTypeNameEn = _notificationTypeNameEn;
				daoNotificationType.NotificationTypeNameAr = _notificationTypeNameAr;
				daoNotificationType.Icon = _icon;
				daoNotificationType.Color = _color;
				daoNotificationType.DisplayOrder = _displayOrder;
				daoNotificationType.IsActive = _isActive;
				daoNotificationType.CanEdit = _canEdit;
				daoNotificationType.CanDelete = _canDelete;
				daoNotificationType.Cby = _cby;
				daoNotificationType.CDate = _cDate;
				daoNotificationType.EBy = _eBy;
				daoNotificationType.EDate = _eDate;
				daoNotificationType.Insert();
				CommitTransaction();
				
				_notificationTypeId = daoNotificationType.NotificationTypeId;
				_notificationTypeCode = daoNotificationType.NotificationTypeCode;
				_notificationTypeNameEn = daoNotificationType.NotificationTypeNameEn;
				_notificationTypeNameAr = daoNotificationType.NotificationTypeNameAr;
				_icon = daoNotificationType.Icon;
				_color = daoNotificationType.Color;
				_displayOrder = daoNotificationType.DisplayOrder;
				_isActive = daoNotificationType.IsActive;
				_canEdit = daoNotificationType.CanEdit;
				_canDelete = daoNotificationType.CanDelete;
				_cby = daoNotificationType.Cby;
				_cDate = daoNotificationType.CDate;
				_eBy = daoNotificationType.EBy;
				_eDate = daoNotificationType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBONotificationType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one NotificationType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BONotificationType
		///</parameters>
		public virtual void Update()
		{
			DAONotificationType daoNotificationType = new DAONotificationType();
			RegisterDataObject(daoNotificationType);
			BeginTransaction("updateBONotificationType");
			try
			{
				daoNotificationType.NotificationTypeId = _notificationTypeId;
				daoNotificationType.NotificationTypeCode = _notificationTypeCode;
				daoNotificationType.NotificationTypeNameEn = _notificationTypeNameEn;
				daoNotificationType.NotificationTypeNameAr = _notificationTypeNameAr;
				daoNotificationType.Icon = _icon;
				daoNotificationType.Color = _color;
				daoNotificationType.DisplayOrder = _displayOrder;
				daoNotificationType.IsActive = _isActive;
				daoNotificationType.CanEdit = _canEdit;
				daoNotificationType.CanDelete = _canDelete;
				daoNotificationType.Cby = _cby;
				daoNotificationType.CDate = _cDate;
				daoNotificationType.EBy = _eBy;
				daoNotificationType.EDate = _eDate;
				daoNotificationType.Update();
				CommitTransaction();
				
				_notificationTypeId = daoNotificationType.NotificationTypeId;
				_notificationTypeCode = daoNotificationType.NotificationTypeCode;
				_notificationTypeNameEn = daoNotificationType.NotificationTypeNameEn;
				_notificationTypeNameAr = daoNotificationType.NotificationTypeNameAr;
				_icon = daoNotificationType.Icon;
				_color = daoNotificationType.Color;
				_displayOrder = daoNotificationType.DisplayOrder;
				_isActive = daoNotificationType.IsActive;
				_canEdit = daoNotificationType.CanEdit;
				_canDelete = daoNotificationType.CanDelete;
				_cby = daoNotificationType.Cby;
				_cDate = daoNotificationType.CDate;
				_eBy = daoNotificationType.EBy;
				_eDate = daoNotificationType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBONotificationType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one NotificationType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAONotificationType daoNotificationType = new DAONotificationType();
			RegisterDataObject(daoNotificationType);
			BeginTransaction("deleteBONotificationType");
			try
			{
				daoNotificationType.NotificationTypeId = _notificationTypeId;
				daoNotificationType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBONotificationType");
				throw;
			}
		}
		
		///<Summary>
		///NotificationTypeCollection
		///This method returns the collection of BONotificationType objects
		///</Summary>
		///<returns>
		///List[BONotificationType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BONotificationType> NotificationTypeCollection()
		{
			try
			{
				IList<BONotificationType> boNotificationTypeCollection = new List<BONotificationType>();
				IList<DAONotificationType> daoNotificationTypeCollection = DAONotificationType.SelectAll();
			
				foreach(DAONotificationType daoNotificationType in daoNotificationTypeCollection)
					boNotificationTypeCollection.Add(new BONotificationType(daoNotificationType));
			
				return boNotificationTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationTypeCollectionCount
		///This method returns the collection count of BONotificationType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 NotificationTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAONotificationType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///NotificationCollection
		///This method returns its collection of BONotification objects
		///</Summary>
		///<returns>
		///IList[BONotification]
		///</returns>
		///<parameters>
		///BONotificationType
		///</parameters>
		public virtual IList<BONotification> NotificationCollection()
		{
			try
			{
				if(_boNotificationCollection == null)
					LoadNotificationCollection();
				
				return _boNotificationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BONotificationType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAONotificationType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BONotificationType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boNotificationTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAONotificationType> daoNotificationTypeCollection = DAONotificationType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAONotificationType resdaoNotificationType in daoNotificationTypeCollection)
					boNotificationTypeCollection.Add((T)(object)new BONotificationType(resdaoNotificationType));
			
				return boNotificationTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BONotificationType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAONotificationType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadNotificationCollection
		///This method loads the internal collection of BONotification objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadNotificationCollection()
		{
			try
			{
				_boNotificationCollection = new List<BONotification>();
				IList<DAONotification> daoNotificationCollection = DAONotification.SelectAllByNotificationTypeId(_notificationTypeId.Value);
				
				foreach(DAONotification daoNotification in daoNotificationCollection)
					_boNotificationCollection.Add(new BONotification(daoNotification));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddNotification
		///This method persists a BONotification object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BONotification
		///</parameters>
		public virtual void AddNotification(BONotification boNotification)
		{
			DAONotification daoNotification = new DAONotification();
			RegisterDataObject(daoNotification);
			BeginTransaction("addNotification");
			try
			{
				daoNotification.NotificationId = boNotification.NotificationId;
				daoNotification.NotificationDate = boNotification.NotificationDate;
				daoNotification.ScheduleTime = boNotification.ScheduleTime;
				daoNotification.NotificationDateTime = boNotification.NotificationDateTime;
				daoNotification.PriorityId = boNotification.PriorityId;
				daoNotification.Message = boNotification.Message;
				daoNotification.UserGroupId = boNotification.UserGroupId;
				daoNotification.UserId = boNotification.UserId;
				daoNotification.CBy = boNotification.CBy;
				daoNotification.CDate = boNotification.CDate;
				daoNotification.EBy = boNotification.EBy;
				daoNotification.EDate = boNotification.EDate;
				daoNotification.NotificationTypeId = _notificationTypeId.Value;
				daoNotification.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boNotification = new BONotification(daoNotification);
				if(_boNotificationCollection != null)
					_boNotificationCollection.Add(boNotification);
			}
			catch
			{
				RollbackTransaction("addNotification");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllNotification
		///This method deletes all BONotification objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllNotification()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllNotification");
			try
			{
				DAONotification.DeleteAllByNotificationTypeId(ConnectionProvider, _notificationTypeId.Value);
				CommitTransaction();
				if(_boNotificationCollection != null)
				{
					_boNotificationCollection.Clear();
					_boNotificationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllNotification");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? NotificationTypeId
		{
			get
			{
				 return _notificationTypeId;
			}
			set
			{
				_notificationTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string NotificationTypeCode
		{
			get
			{
				 return _notificationTypeCode;
			}
			set
			{
				_notificationTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string NotificationTypeNameEn
		{
			get
			{
				 return _notificationTypeNameEn;
			}
			set
			{
				_notificationTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string NotificationTypeNameAr
		{
			get
			{
				 return _notificationTypeNameAr;
			}
			set
			{
				_notificationTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Cby
		{
			get
			{
				 return _cby;
			}
			set
			{
				_cby = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
