/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOActivityDirection.
	///</Summary>
	public partial class BOActivityDirection : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _activityDirectionId;
		protected string _activityDirectionCode;
		protected string _activityDirectionNameEn;
		protected string _activityDirectionNameAr;
		protected bool? _isActive;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOActivityDirection()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 activityDirectionId
		///</parameters>
		public BOActivityDirection(Int32 activityDirectionId)
		{
			try
			{
				DAOActivityDirection daoActivityDirection = DAOActivityDirection.SelectOne(activityDirectionId);
				_activityDirectionId = daoActivityDirection.ActivityDirectionId;
				_activityDirectionCode = daoActivityDirection.ActivityDirectionCode;
				_activityDirectionNameEn = daoActivityDirection.ActivityDirectionNameEn;
				_activityDirectionNameAr = daoActivityDirection.ActivityDirectionNameAr;
				_isActive = daoActivityDirection.IsActive;
				_canDelete = daoActivityDirection.CanDelete;
				_canEdit = daoActivityDirection.CanEdit;
				_displayOrder = daoActivityDirection.DisplayOrder;
				_color = daoActivityDirection.Color;
				_icon = daoActivityDirection.Icon;
				_cBy = daoActivityDirection.CBy;
				_eBy = daoActivityDirection.EBy;
				_cDate = daoActivityDirection.CDate;
				_eDate = daoActivityDirection.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOActivityDirection
		///</parameters>
		protected internal BOActivityDirection(DAOActivityDirection daoActivityDirection)
		{
			try
			{
				_activityDirectionId = daoActivityDirection.ActivityDirectionId;
				_activityDirectionCode = daoActivityDirection.ActivityDirectionCode;
				_activityDirectionNameEn = daoActivityDirection.ActivityDirectionNameEn;
				_activityDirectionNameAr = daoActivityDirection.ActivityDirectionNameAr;
				_isActive = daoActivityDirection.IsActive;
				_canDelete = daoActivityDirection.CanDelete;
				_canEdit = daoActivityDirection.CanEdit;
				_displayOrder = daoActivityDirection.DisplayOrder;
				_color = daoActivityDirection.Color;
				_icon = daoActivityDirection.Icon;
				_cBy = daoActivityDirection.CBy;
				_eBy = daoActivityDirection.EBy;
				_cDate = daoActivityDirection.CDate;
				_eDate = daoActivityDirection.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ActivityDirection record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOActivityDirection daoActivityDirection = new DAOActivityDirection();
			RegisterDataObject(daoActivityDirection);
			BeginTransaction("savenewBOActivityDirection");
			try
			{
				daoActivityDirection.ActivityDirectionId = _activityDirectionId;
				daoActivityDirection.ActivityDirectionCode = _activityDirectionCode;
				daoActivityDirection.ActivityDirectionNameEn = _activityDirectionNameEn;
				daoActivityDirection.ActivityDirectionNameAr = _activityDirectionNameAr;
				daoActivityDirection.IsActive = _isActive;
				daoActivityDirection.CanDelete = _canDelete;
				daoActivityDirection.CanEdit = _canEdit;
				daoActivityDirection.DisplayOrder = _displayOrder;
				daoActivityDirection.Color = _color;
				daoActivityDirection.Icon = _icon;
				daoActivityDirection.CBy = _cBy;
				daoActivityDirection.EBy = _eBy;
				daoActivityDirection.CDate = _cDate;
				daoActivityDirection.EDate = _eDate;
				daoActivityDirection.Insert();
				CommitTransaction();
				
				_activityDirectionId = daoActivityDirection.ActivityDirectionId;
				_activityDirectionCode = daoActivityDirection.ActivityDirectionCode;
				_activityDirectionNameEn = daoActivityDirection.ActivityDirectionNameEn;
				_activityDirectionNameAr = daoActivityDirection.ActivityDirectionNameAr;
				_isActive = daoActivityDirection.IsActive;
				_canDelete = daoActivityDirection.CanDelete;
				_canEdit = daoActivityDirection.CanEdit;
				_displayOrder = daoActivityDirection.DisplayOrder;
				_color = daoActivityDirection.Color;
				_icon = daoActivityDirection.Icon;
				_cBy = daoActivityDirection.CBy;
				_eBy = daoActivityDirection.EBy;
				_cDate = daoActivityDirection.CDate;
				_eDate = daoActivityDirection.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOActivityDirection");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ActivityDirection record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOActivityDirection
		///</parameters>
		public virtual void Update()
		{
			DAOActivityDirection daoActivityDirection = new DAOActivityDirection();
			RegisterDataObject(daoActivityDirection);
			BeginTransaction("updateBOActivityDirection");
			try
			{
				daoActivityDirection.ActivityDirectionId = _activityDirectionId;
				daoActivityDirection.ActivityDirectionCode = _activityDirectionCode;
				daoActivityDirection.ActivityDirectionNameEn = _activityDirectionNameEn;
				daoActivityDirection.ActivityDirectionNameAr = _activityDirectionNameAr;
				daoActivityDirection.IsActive = _isActive;
				daoActivityDirection.CanDelete = _canDelete;
				daoActivityDirection.CanEdit = _canEdit;
				daoActivityDirection.DisplayOrder = _displayOrder;
				daoActivityDirection.Color = _color;
				daoActivityDirection.Icon = _icon;
				daoActivityDirection.CBy = _cBy;
				daoActivityDirection.EBy = _eBy;
				daoActivityDirection.CDate = _cDate;
				daoActivityDirection.EDate = _eDate;
				daoActivityDirection.Update();
				CommitTransaction();
				
				_activityDirectionId = daoActivityDirection.ActivityDirectionId;
				_activityDirectionCode = daoActivityDirection.ActivityDirectionCode;
				_activityDirectionNameEn = daoActivityDirection.ActivityDirectionNameEn;
				_activityDirectionNameAr = daoActivityDirection.ActivityDirectionNameAr;
				_isActive = daoActivityDirection.IsActive;
				_canDelete = daoActivityDirection.CanDelete;
				_canEdit = daoActivityDirection.CanEdit;
				_displayOrder = daoActivityDirection.DisplayOrder;
				_color = daoActivityDirection.Color;
				_icon = daoActivityDirection.Icon;
				_cBy = daoActivityDirection.CBy;
				_eBy = daoActivityDirection.EBy;
				_cDate = daoActivityDirection.CDate;
				_eDate = daoActivityDirection.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOActivityDirection");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ActivityDirection record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOActivityDirection daoActivityDirection = new DAOActivityDirection();
			RegisterDataObject(daoActivityDirection);
			BeginTransaction("deleteBOActivityDirection");
			try
			{
				daoActivityDirection.ActivityDirectionId = _activityDirectionId;
				daoActivityDirection.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOActivityDirection");
				throw;
			}
		}
		
		///<Summary>
		///ActivityDirectionCollection
		///This method returns the collection of BOActivityDirection objects
		///</Summary>
		///<returns>
		///List[BOActivityDirection]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOActivityDirection> ActivityDirectionCollection()
		{
			try
			{
				IList<BOActivityDirection> boActivityDirectionCollection = new List<BOActivityDirection>();
				IList<DAOActivityDirection> daoActivityDirectionCollection = DAOActivityDirection.SelectAll();
			
				foreach(DAOActivityDirection daoActivityDirection in daoActivityDirectionCollection)
					boActivityDirectionCollection.Add(new BOActivityDirection(daoActivityDirection));
			
				return boActivityDirectionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityDirectionCollectionCount
		///This method returns the collection count of BOActivityDirection objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ActivityDirectionCollectionCount()
		{
			try
			{
				Int32 objCount = DAOActivityDirection.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOActivityDirection>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOActivityDirection.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityDirectionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOActivityDirection objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boActivityDirectionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOActivityDirection> daoActivityDirectionCollection = DAOActivityDirection.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOActivityDirection resdaoActivityDirection in daoActivityDirectionCollection)
					boActivityDirectionCollection.Add((T)(object)new BOActivityDirection(resdaoActivityDirection));
			
				return boActivityDirectionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityDirectionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOActivityDirection objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOActivityDirection.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ActivityDirectionId
		{
			get
			{
				 return _activityDirectionId;
			}
			set
			{
				_activityDirectionId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityDirectionCode
		{
			get
			{
				 return _activityDirectionCode;
			}
			set
			{
				_activityDirectionCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityDirectionNameEn
		{
			get
			{
				 return _activityDirectionNameEn;
			}
			set
			{
				_activityDirectionNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityDirectionNameAr
		{
			get
			{
				 return _activityDirectionNameAr;
			}
			set
			{
				_activityDirectionNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
