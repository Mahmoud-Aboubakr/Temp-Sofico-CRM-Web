/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BONotificationVw.
	///</Summary>
	public partial class BONotificationVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _notificationId;
		protected DateTime? _notificationDate;
		protected DateTime? _scheduleTime;
		protected DateTime? _notificationDateTime;
		protected Int32? _priorityId;
		protected Int32? _notificationTypeId;
		protected string _notificationTypeNameEn;
		protected string _notificationTypeNameAr;
		protected Int32? _userCount;
		protected Int32? _readed;
		protected Int32? _notReaded;
		protected string _priorityNameAr;
		protected string _priorityNameEn;
		protected Int32? _userGroupId;
		protected Int32? _userId;
		protected string _userGroupNameEn;
		protected string _userGroupNameAr;
		protected string _priorityColor;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BONotificationVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAONotificationVw
		///</parameters>
		protected internal BONotificationVw(DAONotificationVw daoNotificationVw)
		{
			try
			{
				_notificationId = daoNotificationVw.NotificationId;
				_notificationDate = daoNotificationVw.NotificationDate;
				_scheduleTime = daoNotificationVw.ScheduleTime;
				_notificationDateTime = daoNotificationVw.NotificationDateTime;
				_priorityId = daoNotificationVw.PriorityId;
				_notificationTypeId = daoNotificationVw.NotificationTypeId;
				_notificationTypeNameEn = daoNotificationVw.NotificationTypeNameEn;
				_notificationTypeNameAr = daoNotificationVw.NotificationTypeNameAr;
				_userCount = daoNotificationVw.UserCount;
				_readed = daoNotificationVw.Readed;
				_notReaded = daoNotificationVw.NotReaded;
				_priorityNameAr = daoNotificationVw.PriorityNameAr;
				_priorityNameEn = daoNotificationVw.PriorityNameEn;
				_userGroupId = daoNotificationVw.UserGroupId;
				_userId = daoNotificationVw.UserId;
				_userGroupNameEn = daoNotificationVw.UserGroupNameEn;
				_userGroupNameAr = daoNotificationVw.UserGroupNameAr;
				_priorityColor = daoNotificationVw.PriorityColor;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///NotificationVwCollection
		///This method returns the collection of BONotificationVw objects
		///</Summary>
		///<returns>
		///List[BONotificationVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BONotificationVw> NotificationVwCollection()
		{
			try
			{
				IList<BONotificationVw> boNotificationVwCollection = new List<BONotificationVw>();
				IList<DAONotificationVw> daoNotificationVwCollection = DAONotificationVw.SelectAll();
			
				foreach(DAONotificationVw daoNotificationVw in daoNotificationVwCollection)
					boNotificationVwCollection.Add(new BONotificationVw(daoNotificationVw));
			
				return boNotificationVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationVwCollectionCount
		///This method returns the collection count of BONotificationVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 NotificationVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAONotificationVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BONotificationVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAONotificationVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BONotificationVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boNotificationVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAONotificationVw> daoNotificationVwCollection = DAONotificationVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAONotificationVw resdaoNotificationVw in daoNotificationVwCollection)
					boNotificationVwCollection.Add((T)(object)new BONotificationVw(resdaoNotificationVw));
			
				return boNotificationVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BONotificationVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAONotificationVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? NotificationId
		{
			get
			{
				 return _notificationId;
			}
			set
			{
				_notificationId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? NotificationDate
		{
			get
			{
				 return _notificationDate;
			}
			set
			{
				_notificationDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ScheduleTime
		{
			get
			{
				 return _scheduleTime;
			}
			set
			{
				_scheduleTime = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? NotificationDateTime
		{
			get
			{
				 return _notificationDateTime;
			}
			set
			{
				_notificationDateTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PriorityId
		{
			get
			{
				 return _priorityId;
			}
			set
			{
				_priorityId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? NotificationTypeId
		{
			get
			{
				 return _notificationTypeId;
			}
			set
			{
				_notificationTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string NotificationTypeNameEn
		{
			get
			{
				 return _notificationTypeNameEn;
			}
			set
			{
				_notificationTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string NotificationTypeNameAr
		{
			get
			{
				 return _notificationTypeNameAr;
			}
			set
			{
				_notificationTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserCount
		{
			get
			{
				 return _userCount;
			}
			set
			{
				_userCount = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Readed
		{
			get
			{
				 return _readed;
			}
			set
			{
				_readed = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? NotReaded
		{
			get
			{
				 return _notReaded;
			}
			set
			{
				_notReaded = value;
				_isDirty = true;
			}
		}
		
		public virtual string PriorityNameAr
		{
			get
			{
				 return _priorityNameAr;
			}
			set
			{
				_priorityNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string PriorityNameEn
		{
			get
			{
				 return _priorityNameEn;
			}
			set
			{
				_priorityNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserGroupId
		{
			get
			{
				 return _userGroupId;
			}
			set
			{
				_userGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual string UserGroupNameEn
		{
			get
			{
				 return _userGroupNameEn;
			}
			set
			{
				_userGroupNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string UserGroupNameAr
		{
			get
			{
				 return _userGroupNameAr;
			}
			set
			{
				_userGroupNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string PriorityColor
		{
			get
			{
				 return _priorityColor;
			}
			set
			{
				_priorityColor = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
