/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientServiceRequest.
	///It maintains a collection of BOClientServiceRequestDocument,BOClientServiceRequestTimline objects.
	///</Summary>
	public partial class BOClientServiceRequest : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _requestId;
		protected string _requestCode;
		protected Int32? _branchId;
		protected Int32? _representativeId;
		protected Int32? _clientId;
		protected DateTime? _requestDate;
		protected DateTime? _requestTime;
		protected Int32? _requestTypeId;
		protected Int32? _requestTypeDetailId;
		protected string _phone;
		protected string _phoneAlternative;
		protected Int32? _priorityId;
		protected Int32? _requestStatusId;
		protected bool? _isClosed;
		protected DateTime? _closeDate;
		protected Int32? _duration;
		protected double? _latitude;
		protected double? _longitude;
		protected bool? _inZone;
		protected double? _distance;
		protected string _notes;
		protected Int32? _departmentId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _replay;
		protected string _requestTitle;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientServiceRequestDocument> _boClientServiceRequestDocumentCollection;
		List<BOClientServiceRequestTimline> _boClientServiceRequestTimlineCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientServiceRequest()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 requestId
		///</parameters>
		public BOClientServiceRequest(Int64 requestId)
		{
			try
			{
				DAOClientServiceRequest daoClientServiceRequest = DAOClientServiceRequest.SelectOne(requestId);
				_requestId = daoClientServiceRequest.RequestId;
				_requestCode = daoClientServiceRequest.RequestCode;
				_branchId = daoClientServiceRequest.BranchId;
				_representativeId = daoClientServiceRequest.RepresentativeId;
				_clientId = daoClientServiceRequest.ClientId;
				_requestDate = daoClientServiceRequest.RequestDate;
				_requestTime = daoClientServiceRequest.RequestTime;
				_requestTypeId = daoClientServiceRequest.RequestTypeId;
				_requestTypeDetailId = daoClientServiceRequest.RequestTypeDetailId;
				_phone = daoClientServiceRequest.Phone;
				_phoneAlternative = daoClientServiceRequest.PhoneAlternative;
				_priorityId = daoClientServiceRequest.PriorityId;
				_requestStatusId = daoClientServiceRequest.RequestStatusId;
				_isClosed = daoClientServiceRequest.IsClosed;
				_closeDate = daoClientServiceRequest.CloseDate;
				_duration = daoClientServiceRequest.Duration;
				_latitude = daoClientServiceRequest.Latitude;
				_longitude = daoClientServiceRequest.Longitude;
				_inZone = daoClientServiceRequest.InZone;
				_distance = daoClientServiceRequest.Distance;
				_notes = daoClientServiceRequest.Notes;
				_departmentId = daoClientServiceRequest.DepartmentId;
				_cBy = daoClientServiceRequest.CBy;
				_cDate = daoClientServiceRequest.CDate;
				_eBy = daoClientServiceRequest.EBy;
				_eDate = daoClientServiceRequest.EDate;
				_replay = daoClientServiceRequest.Replay;
				_requestTitle = daoClientServiceRequest.RequestTitle;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientServiceRequest
		///</parameters>
		protected internal BOClientServiceRequest(DAOClientServiceRequest daoClientServiceRequest)
		{
			try
			{
				_requestId = daoClientServiceRequest.RequestId;
				_requestCode = daoClientServiceRequest.RequestCode;
				_branchId = daoClientServiceRequest.BranchId;
				_representativeId = daoClientServiceRequest.RepresentativeId;
				_clientId = daoClientServiceRequest.ClientId;
				_requestDate = daoClientServiceRequest.RequestDate;
				_requestTime = daoClientServiceRequest.RequestTime;
				_requestTypeId = daoClientServiceRequest.RequestTypeId;
				_requestTypeDetailId = daoClientServiceRequest.RequestTypeDetailId;
				_phone = daoClientServiceRequest.Phone;
				_phoneAlternative = daoClientServiceRequest.PhoneAlternative;
				_priorityId = daoClientServiceRequest.PriorityId;
				_requestStatusId = daoClientServiceRequest.RequestStatusId;
				_isClosed = daoClientServiceRequest.IsClosed;
				_closeDate = daoClientServiceRequest.CloseDate;
				_duration = daoClientServiceRequest.Duration;
				_latitude = daoClientServiceRequest.Latitude;
				_longitude = daoClientServiceRequest.Longitude;
				_inZone = daoClientServiceRequest.InZone;
				_distance = daoClientServiceRequest.Distance;
				_notes = daoClientServiceRequest.Notes;
				_departmentId = daoClientServiceRequest.DepartmentId;
				_cBy = daoClientServiceRequest.CBy;
				_cDate = daoClientServiceRequest.CDate;
				_eBy = daoClientServiceRequest.EBy;
				_eDate = daoClientServiceRequest.EDate;
				_replay = daoClientServiceRequest.Replay;
				_requestTitle = daoClientServiceRequest.RequestTitle;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientServiceRequest record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("savenewBOClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestCode = _requestCode;
				daoClientServiceRequest.BranchId = _branchId;
				daoClientServiceRequest.RepresentativeId = _representativeId;
				daoClientServiceRequest.ClientId = _clientId;
				daoClientServiceRequest.RequestDate = _requestDate;
				daoClientServiceRequest.RequestTime = _requestTime;
				daoClientServiceRequest.RequestTypeId = _requestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = _requestTypeDetailId;
				daoClientServiceRequest.Phone = _phone;
				daoClientServiceRequest.PhoneAlternative = _phoneAlternative;
				daoClientServiceRequest.PriorityId = _priorityId;
				daoClientServiceRequest.RequestStatusId = _requestStatusId;
				daoClientServiceRequest.IsClosed = _isClosed;
				daoClientServiceRequest.CloseDate = _closeDate;
				daoClientServiceRequest.Duration = _duration;
				daoClientServiceRequest.Latitude = _latitude;
				daoClientServiceRequest.Longitude = _longitude;
				daoClientServiceRequest.InZone = _inZone;
				daoClientServiceRequest.Distance = _distance;
				daoClientServiceRequest.Notes = _notes;
				daoClientServiceRequest.DepartmentId = _departmentId;
				daoClientServiceRequest.CBy = _cBy;
				daoClientServiceRequest.CDate = _cDate;
				daoClientServiceRequest.EBy = _eBy;
				daoClientServiceRequest.EDate = _eDate;
				daoClientServiceRequest.Replay = _replay;
				daoClientServiceRequest.RequestTitle = _requestTitle;
				daoClientServiceRequest.Insert();
				CommitTransaction();
				
				_requestId = daoClientServiceRequest.RequestId;
				_requestCode = daoClientServiceRequest.RequestCode;
				_branchId = daoClientServiceRequest.BranchId;
				_representativeId = daoClientServiceRequest.RepresentativeId;
				_clientId = daoClientServiceRequest.ClientId;
				_requestDate = daoClientServiceRequest.RequestDate;
				_requestTime = daoClientServiceRequest.RequestTime;
				_requestTypeId = daoClientServiceRequest.RequestTypeId;
				_requestTypeDetailId = daoClientServiceRequest.RequestTypeDetailId;
				_phone = daoClientServiceRequest.Phone;
				_phoneAlternative = daoClientServiceRequest.PhoneAlternative;
				_priorityId = daoClientServiceRequest.PriorityId;
				_requestStatusId = daoClientServiceRequest.RequestStatusId;
				_isClosed = daoClientServiceRequest.IsClosed;
				_closeDate = daoClientServiceRequest.CloseDate;
				_duration = daoClientServiceRequest.Duration;
				_latitude = daoClientServiceRequest.Latitude;
				_longitude = daoClientServiceRequest.Longitude;
				_inZone = daoClientServiceRequest.InZone;
				_distance = daoClientServiceRequest.Distance;
				_notes = daoClientServiceRequest.Notes;
				_departmentId = daoClientServiceRequest.DepartmentId;
				_cBy = daoClientServiceRequest.CBy;
				_cDate = daoClientServiceRequest.CDate;
				_eBy = daoClientServiceRequest.EBy;
				_eDate = daoClientServiceRequest.EDate;
				_replay = daoClientServiceRequest.Replay;
				_requestTitle = daoClientServiceRequest.RequestTitle;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientServiceRequest record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual void Update()
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("updateBOClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = _requestId;
				daoClientServiceRequest.RequestCode = _requestCode;
				daoClientServiceRequest.BranchId = _branchId;
				daoClientServiceRequest.RepresentativeId = _representativeId;
				daoClientServiceRequest.ClientId = _clientId;
				daoClientServiceRequest.RequestDate = _requestDate;
				daoClientServiceRequest.RequestTime = _requestTime;
				daoClientServiceRequest.RequestTypeId = _requestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = _requestTypeDetailId;
				daoClientServiceRequest.Phone = _phone;
				daoClientServiceRequest.PhoneAlternative = _phoneAlternative;
				daoClientServiceRequest.PriorityId = _priorityId;
				daoClientServiceRequest.RequestStatusId = _requestStatusId;
				daoClientServiceRequest.IsClosed = _isClosed;
				daoClientServiceRequest.CloseDate = _closeDate;
				daoClientServiceRequest.Duration = _duration;
				daoClientServiceRequest.Latitude = _latitude;
				daoClientServiceRequest.Longitude = _longitude;
				daoClientServiceRequest.InZone = _inZone;
				daoClientServiceRequest.Distance = _distance;
				daoClientServiceRequest.Notes = _notes;
				daoClientServiceRequest.DepartmentId = _departmentId;
				daoClientServiceRequest.CBy = _cBy;
				daoClientServiceRequest.CDate = _cDate;
				daoClientServiceRequest.EBy = _eBy;
				daoClientServiceRequest.EDate = _eDate;
				daoClientServiceRequest.Replay = _replay;
				daoClientServiceRequest.RequestTitle = _requestTitle;
				daoClientServiceRequest.Update();
				CommitTransaction();
				
				_requestId = daoClientServiceRequest.RequestId;
				_requestCode = daoClientServiceRequest.RequestCode;
				_branchId = daoClientServiceRequest.BranchId;
				_representativeId = daoClientServiceRequest.RepresentativeId;
				_clientId = daoClientServiceRequest.ClientId;
				_requestDate = daoClientServiceRequest.RequestDate;
				_requestTime = daoClientServiceRequest.RequestTime;
				_requestTypeId = daoClientServiceRequest.RequestTypeId;
				_requestTypeDetailId = daoClientServiceRequest.RequestTypeDetailId;
				_phone = daoClientServiceRequest.Phone;
				_phoneAlternative = daoClientServiceRequest.PhoneAlternative;
				_priorityId = daoClientServiceRequest.PriorityId;
				_requestStatusId = daoClientServiceRequest.RequestStatusId;
				_isClosed = daoClientServiceRequest.IsClosed;
				_closeDate = daoClientServiceRequest.CloseDate;
				_duration = daoClientServiceRequest.Duration;
				_latitude = daoClientServiceRequest.Latitude;
				_longitude = daoClientServiceRequest.Longitude;
				_inZone = daoClientServiceRequest.InZone;
				_distance = daoClientServiceRequest.Distance;
				_notes = daoClientServiceRequest.Notes;
				_departmentId = daoClientServiceRequest.DepartmentId;
				_cBy = daoClientServiceRequest.CBy;
				_cDate = daoClientServiceRequest.CDate;
				_eBy = daoClientServiceRequest.EBy;
				_eDate = daoClientServiceRequest.EDate;
				_replay = daoClientServiceRequest.Replay;
				_requestTitle = daoClientServiceRequest.RequestTitle;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientServiceRequest");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientServiceRequest record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("deleteBOClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = _requestId;
				daoClientServiceRequest.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestCollection
		///This method returns the collection of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///List[BOClientServiceRequest]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientServiceRequest> ClientServiceRequestCollection()
		{
			try
			{
				IList<BOClientServiceRequest> boClientServiceRequestCollection = new List<BOClientServiceRequest>();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAll();
			
				foreach(DAOClientServiceRequest daoClientServiceRequest in daoClientServiceRequestCollection)
					boClientServiceRequestCollection.Add(new BOClientServiceRequest(daoClientServiceRequest));
			
				return boClientServiceRequestCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServiceRequestCollectionCount
		///This method returns the collection count of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientServiceRequestCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientServiceRequest.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestDocumentCollection
		///This method returns its collection of BOClientServiceRequestDocument objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequestDocument]
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual IList<BOClientServiceRequestDocument> ClientServiceRequestDocumentCollection()
		{
			try
			{
				if(_boClientServiceRequestDocumentCollection == null)
					LoadClientServiceRequestDocumentCollection();
				
				return _boClientServiceRequestDocumentCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestTimlineCollection
		///This method returns its collection of BOClientServiceRequestTimline objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequestTimline]
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual IList<BOClientServiceRequestTimline> ClientServiceRequestTimlineCollection()
		{
			try
			{
				if(_boClientServiceRequestTimlineCollection == null)
					LoadClientServiceRequestTimlineCollection();
				
				return _boClientServiceRequestTimlineCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientServiceRequest>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientServiceRequest.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServiceRequestCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientServiceRequest objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientServiceRequestCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientServiceRequest resdaoClientServiceRequest in daoClientServiceRequestCollection)
					boClientServiceRequestCollection.Add((T)(object)new BOClientServiceRequest(resdaoClientServiceRequest));
			
				return boClientServiceRequestCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServiceRequestCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientServiceRequest objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientServiceRequest.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestDocumentCollection
		///This method loads the internal collection of BOClientServiceRequestDocument objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestDocumentCollection()
		{
			try
			{
				_boClientServiceRequestDocumentCollection = new List<BOClientServiceRequestDocument>();
				IList<DAOClientServiceRequestDocument> daoClientServiceRequestDocumentCollection = DAOClientServiceRequestDocument.SelectAllByRequestId(_requestId.Value);
				
				foreach(DAOClientServiceRequestDocument daoClientServiceRequestDocument in daoClientServiceRequestDocumentCollection)
					_boClientServiceRequestDocumentCollection.Add(new BOClientServiceRequestDocument(daoClientServiceRequestDocument));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequestDocument
		///This method persists a BOClientServiceRequestDocument object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequestDocument
		///</parameters>
		public virtual void AddClientServiceRequestDocument(BOClientServiceRequestDocument boClientServiceRequestDocument)
		{
			DAOClientServiceRequestDocument daoClientServiceRequestDocument = new DAOClientServiceRequestDocument();
			RegisterDataObject(daoClientServiceRequestDocument);
			BeginTransaction("addClientServiceRequestDocument");
			try
			{
				daoClientServiceRequestDocument.RequestDocumentId = boClientServiceRequestDocument.RequestDocumentId;
				daoClientServiceRequestDocument.DocumentPath = boClientServiceRequestDocument.DocumentPath;
				daoClientServiceRequestDocument.UploadDate = boClientServiceRequestDocument.UploadDate;
				daoClientServiceRequestDocument.DocumentExt = boClientServiceRequestDocument.DocumentExt;
				daoClientServiceRequestDocument.DocumentSize = boClientServiceRequestDocument.DocumentSize;
				daoClientServiceRequestDocument.RequestId = _requestId.Value;
				daoClientServiceRequestDocument.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequestDocument = new BOClientServiceRequestDocument(daoClientServiceRequestDocument);
				if(_boClientServiceRequestDocumentCollection != null)
					_boClientServiceRequestDocumentCollection.Add(boClientServiceRequestDocument);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequestDocument");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequestDocument
		///This method deletes all BOClientServiceRequestDocument objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequestDocument()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceReques6406");
			try
			{
				DAOClientServiceRequestDocument.DeleteAllByRequestId(ConnectionProvider, _requestId.Value);
				CommitTransaction();
				if(_boClientServiceRequestDocumentCollection != null)
				{
					_boClientServiceRequestDocumentCollection.Clear();
					_boClientServiceRequestDocumentCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceReques6406");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestTimlineCollection
		///This method loads the internal collection of BOClientServiceRequestTimline objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestTimlineCollection()
		{
			try
			{
				_boClientServiceRequestTimlineCollection = new List<BOClientServiceRequestTimline>();
				IList<DAOClientServiceRequestTimline> daoClientServiceRequestTimlineCollection = DAOClientServiceRequestTimline.SelectAllByRequestId(_requestId.Value);
				
				foreach(DAOClientServiceRequestTimline daoClientServiceRequestTimline in daoClientServiceRequestTimlineCollection)
					_boClientServiceRequestTimlineCollection.Add(new BOClientServiceRequestTimline(daoClientServiceRequestTimline));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequestTimline
		///This method persists a BOClientServiceRequestTimline object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequestTimline
		///</parameters>
		public virtual void AddClientServiceRequestTimline(BOClientServiceRequestTimline boClientServiceRequestTimline)
		{
			DAOClientServiceRequestTimline daoClientServiceRequestTimline = new DAOClientServiceRequestTimline();
			RegisterDataObject(daoClientServiceRequestTimline);
			BeginTransaction("addClientServiceRequestTimline");
			try
			{
				daoClientServiceRequestTimline.TimelineId = boClientServiceRequestTimline.TimelineId;
				daoClientServiceRequestTimline.RequestStatusId = boClientServiceRequestTimline.RequestStatusId;
				daoClientServiceRequestTimline.UserId = boClientServiceRequestTimline.UserId;
				daoClientServiceRequestTimline.TimelineDate = boClientServiceRequestTimline.TimelineDate;
				daoClientServiceRequestTimline.Notes = boClientServiceRequestTimline.Notes;
				daoClientServiceRequestTimline.RequestId = _requestId.Value;
				daoClientServiceRequestTimline.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequestTimline = new BOClientServiceRequestTimline(daoClientServiceRequestTimline);
				if(_boClientServiceRequestTimlineCollection != null)
					_boClientServiceRequestTimlineCollection.Add(boClientServiceRequestTimline);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequestTimline");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequestTimline
		///This method deletes all BOClientServiceRequestTimline objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequestTimline()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceReques6406");
			try
			{
				DAOClientServiceRequestTimline.DeleteAllByRequestId(ConnectionProvider, _requestId.Value);
				CommitTransaction();
				if(_boClientServiceRequestTimlineCollection != null)
				{
					_boClientServiceRequestTimlineCollection.Clear();
					_boClientServiceRequestTimlineCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceReques6406");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? RequestId
		{
			get
			{
				 return _requestId;
			}
			set
			{
				_requestId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RequestCode
		{
			get
			{
				 return _requestCode;
			}
			set
			{
				_requestCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? RequestDate
		{
			get
			{
				 return _requestDate;
			}
			set
			{
				_requestDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? RequestTime
		{
			get
			{
				 return _requestTime;
			}
			set
			{
				_requestTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RequestTypeId
		{
			get
			{
				 return _requestTypeId;
			}
			set
			{
				_requestTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RequestTypeDetailId
		{
			get
			{
				 return _requestTypeDetailId;
			}
			set
			{
				_requestTypeDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string PhoneAlternative
		{
			get
			{
				 return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PriorityId
		{
			get
			{
				 return _priorityId;
			}
			set
			{
				_priorityId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RequestStatusId
		{
			get
			{
				 return _requestStatusId;
			}
			set
			{
				_requestStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsClosed
		{
			get
			{
				 return _isClosed;
			}
			set
			{
				_isClosed = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CloseDate
		{
			get
			{
				 return _closeDate;
			}
			set
			{
				_closeDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Duration
		{
			get
			{
				 return _duration;
			}
			set
			{
				_duration = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? InZone
		{
			get
			{
				 return _inZone;
			}
			set
			{
				_inZone = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Distance
		{
			get
			{
				 return _distance;
			}
			set
			{
				_distance = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DepartmentId
		{
			get
			{
				 return _departmentId;
			}
			set
			{
				_departmentId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Replay
		{
			get
			{
				 return _replay;
			}
			set
			{
				_replay = value;
				_isDirty = true;
			}
		}
		
		public virtual string RequestTitle
		{
			get
			{
				 return _requestTitle;
			}
			set
			{
				_requestTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
