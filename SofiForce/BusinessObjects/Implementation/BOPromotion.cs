/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPromotion.
	///It maintains a collection of BOPromotionItem,BOPromotionItemBundle,BOPromotionOrderHistory,BOPromotionOutcome,BOSalesOrderDetail,BOSalesOrderLinePromotion objects.
	///</Summary>
	public partial class BOPromotion : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _promotionId;
		protected string _promotionCode;
		protected string _vendorCode;
		protected Int32? _companyId;
		protected DateTime? _validFrom;
		protected DateTime? _validTo;
		protected bool? _isActive;
		protected Int32? _promotionTypeId;
		protected Int32? _priority;
		protected Int32? _repeats;
		protected string _icon;
		protected string _color;
		protected string _promotionDesc;
		protected Int32? _promotionGroupId;
		protected Int32? _displayOrder;
		protected bool? _enableNotification;
		protected DateTime? _notificationDate;
		protected bool? _notificationDone;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool? _isApproved;
		protected Int32? _promotionCategoryId;
		protected Int32? _repeatTypeId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOPromotionItem> _boPromotionItemCollection;
		List<BOPromotionItemBundle> _boPromotionItemBundleCollection;
		List<BOPromotionOrderHistory> _boPromotionOrderHistoryCollection;
		List<BOPromotionOutcome> _boPromotionOutcomeCollection;
		List<BOSalesOrderDetail> _boSalesOrderDetailCollection;
		List<BOSalesOrderLinePromotion> _boSalesOrderLinePromotionCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPromotion()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 promotionId
		///</parameters>
		public BOPromotion(Int32 promotionId)
		{
			try
			{
				DAOPromotion daoPromotion = DAOPromotion.SelectOne(promotionId);
				_promotionId = daoPromotion.PromotionId;
				_promotionCode = daoPromotion.PromotionCode;
				_vendorCode = daoPromotion.VendorCode;
				_companyId = daoPromotion.CompanyId;
				_validFrom = daoPromotion.ValidFrom;
				_validTo = daoPromotion.ValidTo;
				_isActive = daoPromotion.IsActive;
				_promotionTypeId = daoPromotion.PromotionTypeId;
				_priority = daoPromotion.Priority;
				_repeats = daoPromotion.Repeats;
				_icon = daoPromotion.Icon;
				_color = daoPromotion.Color;
				_promotionDesc = daoPromotion.PromotionDesc;
				_promotionGroupId = daoPromotion.PromotionGroupId;
				_displayOrder = daoPromotion.DisplayOrder;
				_enableNotification = daoPromotion.EnableNotification;
				_notificationDate = daoPromotion.NotificationDate;
				_notificationDone = daoPromotion.NotificationDone;
				_cBy = daoPromotion.CBy;
				_cDate = daoPromotion.CDate;
				_eBy = daoPromotion.EBy;
				_eDate = daoPromotion.EDate;
				_isApproved = daoPromotion.IsApproved;
				_promotionCategoryId = daoPromotion.PromotionCategoryId;
				_repeatTypeId = daoPromotion.RepeatTypeId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPromotion
		///</parameters>
		protected internal BOPromotion(DAOPromotion daoPromotion)
		{
			try
			{
				_promotionId = daoPromotion.PromotionId;
				_promotionCode = daoPromotion.PromotionCode;
				_vendorCode = daoPromotion.VendorCode;
				_companyId = daoPromotion.CompanyId;
				_validFrom = daoPromotion.ValidFrom;
				_validTo = daoPromotion.ValidTo;
				_isActive = daoPromotion.IsActive;
				_promotionTypeId = daoPromotion.PromotionTypeId;
				_priority = daoPromotion.Priority;
				_repeats = daoPromotion.Repeats;
				_icon = daoPromotion.Icon;
				_color = daoPromotion.Color;
				_promotionDesc = daoPromotion.PromotionDesc;
				_promotionGroupId = daoPromotion.PromotionGroupId;
				_displayOrder = daoPromotion.DisplayOrder;
				_enableNotification = daoPromotion.EnableNotification;
				_notificationDate = daoPromotion.NotificationDate;
				_notificationDone = daoPromotion.NotificationDone;
				_cBy = daoPromotion.CBy;
				_cDate = daoPromotion.CDate;
				_eBy = daoPromotion.EBy;
				_eDate = daoPromotion.EDate;
				_isApproved = daoPromotion.IsApproved;
				_promotionCategoryId = daoPromotion.PromotionCategoryId;
				_repeatTypeId = daoPromotion.RepeatTypeId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Promotion record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOPromotion daoPromotion = new DAOPromotion();
			RegisterDataObject(daoPromotion);
			BeginTransaction("savenewBOPromotion");
			try
			{
				daoPromotion.PromotionCode = _promotionCode;
				daoPromotion.VendorCode = _vendorCode;
				daoPromotion.CompanyId = _companyId;
				daoPromotion.ValidFrom = _validFrom;
				daoPromotion.ValidTo = _validTo;
				daoPromotion.IsActive = _isActive;
				daoPromotion.PromotionTypeId = _promotionTypeId;
				daoPromotion.Priority = _priority;
				daoPromotion.Repeats = _repeats;
				daoPromotion.Icon = _icon;
				daoPromotion.Color = _color;
				daoPromotion.PromotionDesc = _promotionDesc;
				daoPromotion.PromotionGroupId = _promotionGroupId;
				daoPromotion.DisplayOrder = _displayOrder;
				daoPromotion.EnableNotification = _enableNotification;
				daoPromotion.NotificationDate = _notificationDate;
				daoPromotion.NotificationDone = _notificationDone;
				daoPromotion.CBy = _cBy;
				daoPromotion.CDate = _cDate;
				daoPromotion.EBy = _eBy;
				daoPromotion.EDate = _eDate;
				daoPromotion.IsApproved = _isApproved;
				daoPromotion.PromotionCategoryId = _promotionCategoryId;
				daoPromotion.RepeatTypeId = _repeatTypeId;
				daoPromotion.Insert();
				CommitTransaction();
				
				_promotionId = daoPromotion.PromotionId;
				_promotionCode = daoPromotion.PromotionCode;
				_vendorCode = daoPromotion.VendorCode;
				_companyId = daoPromotion.CompanyId;
				_validFrom = daoPromotion.ValidFrom;
				_validTo = daoPromotion.ValidTo;
				_isActive = daoPromotion.IsActive;
				_promotionTypeId = daoPromotion.PromotionTypeId;
				_priority = daoPromotion.Priority;
				_repeats = daoPromotion.Repeats;
				_icon = daoPromotion.Icon;
				_color = daoPromotion.Color;
				_promotionDesc = daoPromotion.PromotionDesc;
				_promotionGroupId = daoPromotion.PromotionGroupId;
				_displayOrder = daoPromotion.DisplayOrder;
				_enableNotification = daoPromotion.EnableNotification;
				_notificationDate = daoPromotion.NotificationDate;
				_notificationDone = daoPromotion.NotificationDone;
				_cBy = daoPromotion.CBy;
				_cDate = daoPromotion.CDate;
				_eBy = daoPromotion.EBy;
				_eDate = daoPromotion.EDate;
				_isApproved = daoPromotion.IsApproved;
				_promotionCategoryId = daoPromotion.PromotionCategoryId;
				_repeatTypeId = daoPromotion.RepeatTypeId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOPromotion");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Promotion record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual void Update()
		{
			DAOPromotion daoPromotion = new DAOPromotion();
			RegisterDataObject(daoPromotion);
			BeginTransaction("updateBOPromotion");
			try
			{
				daoPromotion.PromotionId = _promotionId;
				daoPromotion.PromotionCode = _promotionCode;
				daoPromotion.VendorCode = _vendorCode;
				daoPromotion.CompanyId = _companyId;
				daoPromotion.ValidFrom = _validFrom;
				daoPromotion.ValidTo = _validTo;
				daoPromotion.IsActive = _isActive;
				daoPromotion.PromotionTypeId = _promotionTypeId;
				daoPromotion.Priority = _priority;
				daoPromotion.Repeats = _repeats;
				daoPromotion.Icon = _icon;
				daoPromotion.Color = _color;
				daoPromotion.PromotionDesc = _promotionDesc;
				daoPromotion.PromotionGroupId = _promotionGroupId;
				daoPromotion.DisplayOrder = _displayOrder;
				daoPromotion.EnableNotification = _enableNotification;
				daoPromotion.NotificationDate = _notificationDate;
				daoPromotion.NotificationDone = _notificationDone;
				daoPromotion.CBy = _cBy;
				daoPromotion.CDate = _cDate;
				daoPromotion.EBy = _eBy;
				daoPromotion.EDate = _eDate;
				daoPromotion.IsApproved = _isApproved;
				daoPromotion.PromotionCategoryId = _promotionCategoryId;
				daoPromotion.RepeatTypeId = _repeatTypeId;
				daoPromotion.Update();
				CommitTransaction();
				
				_promotionId = daoPromotion.PromotionId;
				_promotionCode = daoPromotion.PromotionCode;
				_vendorCode = daoPromotion.VendorCode;
				_companyId = daoPromotion.CompanyId;
				_validFrom = daoPromotion.ValidFrom;
				_validTo = daoPromotion.ValidTo;
				_isActive = daoPromotion.IsActive;
				_promotionTypeId = daoPromotion.PromotionTypeId;
				_priority = daoPromotion.Priority;
				_repeats = daoPromotion.Repeats;
				_icon = daoPromotion.Icon;
				_color = daoPromotion.Color;
				_promotionDesc = daoPromotion.PromotionDesc;
				_promotionGroupId = daoPromotion.PromotionGroupId;
				_displayOrder = daoPromotion.DisplayOrder;
				_enableNotification = daoPromotion.EnableNotification;
				_notificationDate = daoPromotion.NotificationDate;
				_notificationDone = daoPromotion.NotificationDone;
				_cBy = daoPromotion.CBy;
				_cDate = daoPromotion.CDate;
				_eBy = daoPromotion.EBy;
				_eDate = daoPromotion.EDate;
				_isApproved = daoPromotion.IsApproved;
				_promotionCategoryId = daoPromotion.PromotionCategoryId;
				_repeatTypeId = daoPromotion.RepeatTypeId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOPromotion");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Promotion record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOPromotion daoPromotion = new DAOPromotion();
			RegisterDataObject(daoPromotion);
			BeginTransaction("deleteBOPromotion");
			try
			{
				daoPromotion.PromotionId = _promotionId;
				daoPromotion.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOPromotion");
				throw;
			}
		}
		
		///<Summary>
		///PromotionCollection
		///This method returns the collection of BOPromotion objects
		///</Summary>
		///<returns>
		///List[BOPromotion]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOPromotion> PromotionCollection()
		{
			try
			{
				IList<BOPromotion> boPromotionCollection = new List<BOPromotion>();
				IList<DAOPromotion> daoPromotionCollection = DAOPromotion.SelectAll();
			
				foreach(DAOPromotion daoPromotion in daoPromotionCollection)
					boPromotionCollection.Add(new BOPromotion(daoPromotion));
			
				return boPromotionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionCollectionCount
		///This method returns the collection count of BOPromotion objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PromotionCollectionCount()
		{
			try
			{
				Int32 objCount = DAOPromotion.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PromotionItemCollection
		///This method returns its collection of BOPromotionItem objects
		///</Summary>
		///<returns>
		///IList[BOPromotionItem]
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual IList<BOPromotionItem> PromotionItemCollection()
		{
			try
			{
				if(_boPromotionItemCollection == null)
					LoadPromotionItemCollection();
				
				return _boPromotionItemCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PromotionItemBundleCollection
		///This method returns its collection of BOPromotionItemBundle objects
		///</Summary>
		///<returns>
		///IList[BOPromotionItemBundle]
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual IList<BOPromotionItemBundle> PromotionItemBundleCollection()
		{
			try
			{
				if(_boPromotionItemBundleCollection == null)
					LoadPromotionItemBundleCollection();
				
				return _boPromotionItemBundleCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PromotionOrderHistoryCollection
		///This method returns its collection of BOPromotionOrderHistory objects
		///</Summary>
		///<returns>
		///IList[BOPromotionOrderHistory]
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual IList<BOPromotionOrderHistory> PromotionOrderHistoryCollection()
		{
			try
			{
				if(_boPromotionOrderHistoryCollection == null)
					LoadPromotionOrderHistoryCollection();
				
				return _boPromotionOrderHistoryCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PromotionOutcomeCollection
		///This method returns its collection of BOPromotionOutcome objects
		///</Summary>
		///<returns>
		///IList[BOPromotionOutcome]
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual IList<BOPromotionOutcome> PromotionOutcomeCollection()
		{
			try
			{
				if(_boPromotionOutcomeCollection == null)
					LoadPromotionOutcomeCollection();
				
				return _boPromotionOutcomeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderDetailCollection
		///This method returns its collection of BOSalesOrderDetail objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderDetail]
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual IList<BOSalesOrderDetail> SalesOrderDetailCollection()
		{
			try
			{
				if(_boSalesOrderDetailCollection == null)
					LoadSalesOrderDetailCollection();
				
				return _boSalesOrderDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderLinePromotionCollection
		///This method returns its collection of BOSalesOrderLinePromotion objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderLinePromotion]
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual IList<BOSalesOrderLinePromotion> SalesOrderLinePromotionCollection()
		{
			try
			{
				if(_boSalesOrderLinePromotionCollection == null)
					LoadSalesOrderLinePromotionCollection();
				
				return _boSalesOrderLinePromotionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOPromotion>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOPromotion.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOPromotion objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPromotionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOPromotion> daoPromotionCollection = DAOPromotion.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOPromotion resdaoPromotion in daoPromotionCollection)
					boPromotionCollection.Add((T)(object)new BOPromotion(resdaoPromotion));
			
				return boPromotionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOPromotion objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOPromotion.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadPromotionItemCollection
		///This method loads the internal collection of BOPromotionItem objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPromotionItemCollection()
		{
			try
			{
				_boPromotionItemCollection = new List<BOPromotionItem>();
				IList<DAOPromotionItem> daoPromotionItemCollection = DAOPromotionItem.SelectAllByPromotionId(_promotionId.Value);
				
				foreach(DAOPromotionItem daoPromotionItem in daoPromotionItemCollection)
					_boPromotionItemCollection.Add(new BOPromotionItem(daoPromotionItem));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPromotionItem
		///This method persists a BOPromotionItem object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionItem
		///</parameters>
		public virtual void AddPromotionItem(BOPromotionItem boPromotionItem)
		{
			DAOPromotionItem daoPromotionItem = new DAOPromotionItem();
			RegisterDataObject(daoPromotionItem);
			BeginTransaction("addPromotionItem");
			try
			{
				daoPromotionItem.PromotionItemId = boPromotionItem.PromotionItemId;
				daoPromotionItem.ItemCode = boPromotionItem.ItemCode;
				daoPromotionItem.GroupId = boPromotionItem.GroupId;
				daoPromotionItem.PromotionId = _promotionId.Value;
				daoPromotionItem.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPromotionItem = new BOPromotionItem(daoPromotionItem);
				if(_boPromotionItemCollection != null)
					_boPromotionItemCollection.Add(boPromotionItem);
			}
			catch
			{
				RollbackTransaction("addPromotionItem");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPromotionItem
		///This method deletes all BOPromotionItem objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPromotionItem()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPromotionItem");
			try
			{
				DAOPromotionItem.DeleteAllByPromotionId(ConnectionProvider, _promotionId.Value);
				CommitTransaction();
				if(_boPromotionItemCollection != null)
				{
					_boPromotionItemCollection.Clear();
					_boPromotionItemCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPromotionItem");
				throw;
			}
		}
		
		///<Summary>
		///LoadPromotionItemBundleCollection
		///This method loads the internal collection of BOPromotionItemBundle objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPromotionItemBundleCollection()
		{
			try
			{
				_boPromotionItemBundleCollection = new List<BOPromotionItemBundle>();
				IList<DAOPromotionItemBundle> daoPromotionItemBundleCollection = DAOPromotionItemBundle.SelectAllByPromotionId(_promotionId.Value);
				
				foreach(DAOPromotionItemBundle daoPromotionItemBundle in daoPromotionItemBundleCollection)
					_boPromotionItemBundleCollection.Add(new BOPromotionItemBundle(daoPromotionItemBundle));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPromotionItemBundle
		///This method persists a BOPromotionItemBundle object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionItemBundle
		///</parameters>
		public virtual void AddPromotionItemBundle(BOPromotionItemBundle boPromotionItemBundle)
		{
			DAOPromotionItemBundle daoPromotionItemBundle = new DAOPromotionItemBundle();
			RegisterDataObject(daoPromotionItemBundle);
			BeginTransaction("addPromotionItemBundle");
			try
			{
				daoPromotionItemBundle.BundleId = boPromotionItemBundle.BundleId;
				daoPromotionItemBundle.ItemId = boPromotionItemBundle.ItemId;
				daoPromotionItemBundle.Quantity = boPromotionItemBundle.Quantity;
				daoPromotionItemBundle.IsMandatory = boPromotionItemBundle.IsMandatory;
				daoPromotionItemBundle.CBy = boPromotionItemBundle.CBy;
				daoPromotionItemBundle.CDate = boPromotionItemBundle.CDate;
				daoPromotionItemBundle.EBy = boPromotionItemBundle.EBy;
				daoPromotionItemBundle.EDate = boPromotionItemBundle.EDate;
				daoPromotionItemBundle.PromotionId = _promotionId.Value;
				daoPromotionItemBundle.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPromotionItemBundle = new BOPromotionItemBundle(daoPromotionItemBundle);
				if(_boPromotionItemBundleCollection != null)
					_boPromotionItemBundleCollection.Add(boPromotionItemBundle);
			}
			catch
			{
				RollbackTransaction("addPromotionItemBundle");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPromotionItemBundle
		///This method deletes all BOPromotionItemBundle objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPromotionItemBundle()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPromotionItemBundle");
			try
			{
				DAOPromotionItemBundle.DeleteAllByPromotionId(ConnectionProvider, _promotionId.Value);
				CommitTransaction();
				if(_boPromotionItemBundleCollection != null)
				{
					_boPromotionItemBundleCollection.Clear();
					_boPromotionItemBundleCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPromotionItemBundle");
				throw;
			}
		}
		
		///<Summary>
		///LoadPromotionOrderHistoryCollection
		///This method loads the internal collection of BOPromotionOrderHistory objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPromotionOrderHistoryCollection()
		{
			try
			{
				_boPromotionOrderHistoryCollection = new List<BOPromotionOrderHistory>();
				IList<DAOPromotionOrderHistory> daoPromotionOrderHistoryCollection = DAOPromotionOrderHistory.SelectAllByPromotionId(_promotionId.Value);
				
				foreach(DAOPromotionOrderHistory daoPromotionOrderHistory in daoPromotionOrderHistoryCollection)
					_boPromotionOrderHistoryCollection.Add(new BOPromotionOrderHistory(daoPromotionOrderHistory));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPromotionOrderHistory
		///This method persists a BOPromotionOrderHistory object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionOrderHistory
		///</parameters>
		public virtual void AddPromotionOrderHistory(BOPromotionOrderHistory boPromotionOrderHistory)
		{
			DAOPromotionOrderHistory daoPromotionOrderHistory = new DAOPromotionOrderHistory();
			RegisterDataObject(daoPromotionOrderHistory);
			BeginTransaction("addPromotionOrderHistory");
			try
			{
				daoPromotionOrderHistory.HistoryId = boPromotionOrderHistory.HistoryId;
				daoPromotionOrderHistory.ClientId = boPromotionOrderHistory.ClientId;
				daoPromotionOrderHistory.InvoiceCode = boPromotionOrderHistory.InvoiceCode;
				daoPromotionOrderHistory.InvoiceDate = boPromotionOrderHistory.InvoiceDate;
				daoPromotionOrderHistory.PromotionId = _promotionId.Value;
				daoPromotionOrderHistory.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPromotionOrderHistory = new BOPromotionOrderHistory(daoPromotionOrderHistory);
				if(_boPromotionOrderHistoryCollection != null)
					_boPromotionOrderHistoryCollection.Add(boPromotionOrderHistory);
			}
			catch
			{
				RollbackTransaction("addPromotionOrderHistory");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPromotionOrderHistory
		///This method deletes all BOPromotionOrderHistory objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPromotionOrderHistory()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPromotionOrderHistory");
			try
			{
				DAOPromotionOrderHistory.DeleteAllByPromotionId(ConnectionProvider, _promotionId.Value);
				CommitTransaction();
				if(_boPromotionOrderHistoryCollection != null)
				{
					_boPromotionOrderHistoryCollection.Clear();
					_boPromotionOrderHistoryCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPromotionOrderHistory");
				throw;
			}
		}
		
		///<Summary>
		///LoadPromotionOutcomeCollection
		///This method loads the internal collection of BOPromotionOutcome objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPromotionOutcomeCollection()
		{
			try
			{
				_boPromotionOutcomeCollection = new List<BOPromotionOutcome>();
				IList<DAOPromotionOutcome> daoPromotionOutcomeCollection = DAOPromotionOutcome.SelectAllByPromotionId(_promotionId.Value);
				
				foreach(DAOPromotionOutcome daoPromotionOutcome in daoPromotionOutcomeCollection)
					_boPromotionOutcomeCollection.Add(new BOPromotionOutcome(daoPromotionOutcome));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPromotionOutcome
		///This method persists a BOPromotionOutcome object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionOutcome
		///</parameters>
		public virtual void AddPromotionOutcome(BOPromotionOutcome boPromotionOutcome)
		{
			DAOPromotionOutcome daoPromotionOutcome = new DAOPromotionOutcome();
			RegisterDataObject(daoPromotionOutcome);
			BeginTransaction("addPromotionOutcome");
			try
			{
				daoPromotionOutcome.OutcomeId = boPromotionOutcome.OutcomeId;
				daoPromotionOutcome.IsActive = boPromotionOutcome.IsActive;
				daoPromotionOutcome.Count = boPromotionOutcome.Count;
				daoPromotionOutcome.DisplayOrder = boPromotionOutcome.DisplayOrder;
				daoPromotionOutcome.ItemCode = boPromotionOutcome.ItemCode;
				daoPromotionOutcome.Slice = boPromotionOutcome.Slice;
				daoPromotionOutcome.Value = boPromotionOutcome.Value;
				daoPromotionOutcome.CBy = boPromotionOutcome.CBy;
				daoPromotionOutcome.CDate = boPromotionOutcome.CDate;
				daoPromotionOutcome.EBy = boPromotionOutcome.EBy;
				daoPromotionOutcome.EDate = boPromotionOutcome.EDate;
				daoPromotionOutcome.PromotionId = _promotionId.Value;
				daoPromotionOutcome.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPromotionOutcome = new BOPromotionOutcome(daoPromotionOutcome);
				if(_boPromotionOutcomeCollection != null)
					_boPromotionOutcomeCollection.Add(boPromotionOutcome);
			}
			catch
			{
				RollbackTransaction("addPromotionOutcome");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPromotionOutcome
		///This method deletes all BOPromotionOutcome objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPromotionOutcome()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPromotionOutcome");
			try
			{
				DAOPromotionOutcome.DeleteAllByPromotionId(ConnectionProvider, _promotionId.Value);
				CommitTransaction();
				if(_boPromotionOutcomeCollection != null)
				{
					_boPromotionOutcomeCollection.Clear();
					_boPromotionOutcomeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPromotionOutcome");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderDetailCollection
		///This method loads the internal collection of BOSalesOrderDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderDetailCollection()
		{
			try
			{
				_boSalesOrderDetailCollection = new List<BOSalesOrderDetail>();
				IList<DAOSalesOrderDetail> daoSalesOrderDetailCollection = DAOSalesOrderDetail.SelectAllByPromotionId(_promotionId.Value);
				
				foreach(DAOSalesOrderDetail daoSalesOrderDetail in daoSalesOrderDetailCollection)
					_boSalesOrderDetailCollection.Add(new BOSalesOrderDetail(daoSalesOrderDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderDetail
		///This method persists a BOSalesOrderDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderDetail
		///</parameters>
		public virtual void AddSalesOrderDetail(BOSalesOrderDetail boSalesOrderDetail)
		{
			DAOSalesOrderDetail daoSalesOrderDetail = new DAOSalesOrderDetail();
			RegisterDataObject(daoSalesOrderDetail);
			BeginTransaction("addSalesOrderDetail");
			try
			{
				daoSalesOrderDetail.DetailId = boSalesOrderDetail.DetailId;
				daoSalesOrderDetail.SalesId = boSalesOrderDetail.SalesId;
				daoSalesOrderDetail.ItemId = boSalesOrderDetail.ItemId;
				daoSalesOrderDetail.PublicPrice = boSalesOrderDetail.PublicPrice;
				daoSalesOrderDetail.ClientPrice = boSalesOrderDetail.ClientPrice;
				daoSalesOrderDetail.Quantity = boSalesOrderDetail.Quantity;
				daoSalesOrderDetail.LineValue = boSalesOrderDetail.LineValue;
				daoSalesOrderDetail.Discount = boSalesOrderDetail.Discount;
				daoSalesOrderDetail.CustomDiscount = boSalesOrderDetail.CustomDiscount;
				daoSalesOrderDetail.TaxValue = boSalesOrderDetail.TaxValue;
				daoSalesOrderDetail.IsBouns = boSalesOrderDetail.IsBouns;
				daoSalesOrderDetail.PromotionCode = boSalesOrderDetail.PromotionCode;
				daoSalesOrderDetail.ItemStoreId = boSalesOrderDetail.ItemStoreId;
				daoSalesOrderDetail.Batch = boSalesOrderDetail.Batch;
				daoSalesOrderDetail.Expiration = boSalesOrderDetail.Expiration;
				daoSalesOrderDetail.RecId = boSalesOrderDetail.RecId;
				daoSalesOrderDetail.UnitId = boSalesOrderDetail.UnitId;
				daoSalesOrderDetail.ReturnReasonId = boSalesOrderDetail.ReturnReasonId;
				daoSalesOrderDetail.ReturnQuantity = boSalesOrderDetail.ReturnQuantity;
				daoSalesOrderDetail.TotalReturn = boSalesOrderDetail.TotalReturn;
				daoSalesOrderDetail.PromotionId = _promotionId.Value;
				daoSalesOrderDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderDetail = new BOSalesOrderDetail(daoSalesOrderDetail);
				if(_boSalesOrderDetailCollection != null)
					_boSalesOrderDetailCollection.Add(boSalesOrderDetail);
			}
			catch
			{
				RollbackTransaction("addSalesOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderDetail
		///This method deletes all BOSalesOrderDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderDetail");
			try
			{
				DAOSalesOrderDetail.DeleteAllByPromotionId(ConnectionProvider, _promotionId.Value);
				CommitTransaction();
				if(_boSalesOrderDetailCollection != null)
				{
					_boSalesOrderDetailCollection.Clear();
					_boSalesOrderDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderLinePromotionCollection
		///This method loads the internal collection of BOSalesOrderLinePromotion objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderLinePromotionCollection()
		{
			try
			{
				_boSalesOrderLinePromotionCollection = new List<BOSalesOrderLinePromotion>();
				IList<DAOSalesOrderLinePromotion> daoSalesOrderLinePromotionCollection = DAOSalesOrderLinePromotion.SelectAllByPromotionId(_promotionId.Value);
				
				foreach(DAOSalesOrderLinePromotion daoSalesOrderLinePromotion in daoSalesOrderLinePromotionCollection)
					_boSalesOrderLinePromotionCollection.Add(new BOSalesOrderLinePromotion(daoSalesOrderLinePromotion));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderLinePromotion
		///This method persists a BOSalesOrderLinePromotion object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderLinePromotion
		///</parameters>
		public virtual void AddSalesOrderLinePromotion(BOSalesOrderLinePromotion boSalesOrderLinePromotion)
		{
			DAOSalesOrderLinePromotion daoSalesOrderLinePromotion = new DAOSalesOrderLinePromotion();
			RegisterDataObject(daoSalesOrderLinePromotion);
			BeginTransaction("addSalesOrderLinePromotion");
			try
			{
				daoSalesOrderLinePromotion.LineId = boSalesOrderLinePromotion.LineId;
				daoSalesOrderLinePromotion.SalesId = boSalesOrderLinePromotion.SalesId;
				daoSalesOrderLinePromotion.ItemId = boSalesOrderLinePromotion.ItemId;
				daoSalesOrderLinePromotion.Outcome = boSalesOrderLinePromotion.Outcome;
				daoSalesOrderLinePromotion.ItemStoreId = boSalesOrderLinePromotion.ItemStoreId;
				daoSalesOrderLinePromotion.OutcomeType = boSalesOrderLinePromotion.OutcomeType;
				daoSalesOrderLinePromotion.PromotionId = _promotionId.Value;
				daoSalesOrderLinePromotion.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderLinePromotion = new BOSalesOrderLinePromotion(daoSalesOrderLinePromotion);
				if(_boSalesOrderLinePromotionCollection != null)
					_boSalesOrderLinePromotionCollection.Add(boSalesOrderLinePromotion);
			}
			catch
			{
				RollbackTransaction("addSalesOrderLinePromotion");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderLinePromotion
		///This method deletes all BOSalesOrderLinePromotion objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderLinePromotion()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderLinePromotion");
			try
			{
				DAOSalesOrderLinePromotion.DeleteAllByPromotionId(ConnectionProvider, _promotionId.Value);
				CommitTransaction();
				if(_boSalesOrderLinePromotionCollection != null)
				{
					_boSalesOrderLinePromotionCollection.Clear();
					_boSalesOrderLinePromotionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderLinePromotion");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? PromotionId
		{
			get
			{
				 return _promotionId;
			}
			set
			{
				_promotionId = value;
				_isDirty = true;
			}
		}
		
		public virtual string PromotionCode
		{
			get
			{
				 return _promotionCode;
			}
			set
			{
				_promotionCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorCode
		{
			get
			{
				 return _vendorCode;
			}
			set
			{
				_vendorCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CompanyId
		{
			get
			{
				 return _companyId;
			}
			set
			{
				_companyId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ValidFrom
		{
			get
			{
				 return _validFrom;
			}
			set
			{
				_validFrom = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ValidTo
		{
			get
			{
				 return _validTo;
			}
			set
			{
				_validTo = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PromotionTypeId
		{
			get
			{
				 return _promotionTypeId;
			}
			set
			{
				_promotionTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Priority
		{
			get
			{
				 return _priority;
			}
			set
			{
				_priority = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Repeats
		{
			get
			{
				 return _repeats;
			}
			set
			{
				_repeats = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string PromotionDesc
		{
			get
			{
				 return _promotionDesc;
			}
			set
			{
				_promotionDesc = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PromotionGroupId
		{
			get
			{
				 return _promotionGroupId;
			}
			set
			{
				_promotionGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? EnableNotification
		{
			get
			{
				 return _enableNotification;
			}
			set
			{
				_enableNotification = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? NotificationDate
		{
			get
			{
				 return _notificationDate;
			}
			set
			{
				_notificationDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? NotificationDone
		{
			get
			{
				 return _notificationDone;
			}
			set
			{
				_notificationDone = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsApproved
		{
			get
			{
				 return _isApproved;
			}
			set
			{
				_isApproved = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PromotionCategoryId
		{
			get
			{
				 return _promotionCategoryId;
			}
			set
			{
				_promotionCategoryId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepeatTypeId
		{
			get
			{
				 return _repeatTypeId;
			}
			set
			{
				_repeatTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
