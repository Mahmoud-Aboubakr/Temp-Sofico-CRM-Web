/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOGovernerate.
	///It maintains a collection of BOCity,BOClientAddress,BOClient,BOOperationRequestDetail,BOOperationRequest,BORegister,BOSalesOrderAddress objects.
	///</Summary>
	public partial class BOGovernerate : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _governerateId;
		protected Int32? _regionId;
		protected string _governerateCode;
		protected string _governerateNameAr;
		protected string _governerateNameEn;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOCity> _boCityCollection;
		List<BOClientAddress> _boClientAddressCollection;
		List<BOClient> _boClientCollection;
		List<BOOperationRequestDetail> _boOperationRequestDetailCollection;
		List<BOOperationRequest> _boOperationRequestCollection;
		List<BORegister> _boRegisterCollection;
		List<BOSalesOrderAddress> _boSalesOrderAddressCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOGovernerate()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 governerateId
		///</parameters>
		public BOGovernerate(Int32 governerateId)
		{
			try
			{
				DAOGovernerate daoGovernerate = DAOGovernerate.SelectOne(governerateId);
				_governerateId = daoGovernerate.GovernerateId;
				_regionId = daoGovernerate.RegionId;
				_governerateCode = daoGovernerate.GovernerateCode;
				_governerateNameAr = daoGovernerate.GovernerateNameAr;
				_governerateNameEn = daoGovernerate.GovernerateNameEn;
				_isActive = daoGovernerate.IsActive;
				_displayOrder = daoGovernerate.DisplayOrder;
				_canEdit = daoGovernerate.CanEdit;
				_canDelete = daoGovernerate.CanDelete;
				_color = daoGovernerate.Color;
				_icon = daoGovernerate.Icon;
				_cBy = daoGovernerate.CBy;
				_cDate = daoGovernerate.CDate;
				_eBy = daoGovernerate.EBy;
				_eDate = daoGovernerate.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOGovernerate
		///</parameters>
		protected internal BOGovernerate(DAOGovernerate daoGovernerate)
		{
			try
			{
				_governerateId = daoGovernerate.GovernerateId;
				_regionId = daoGovernerate.RegionId;
				_governerateCode = daoGovernerate.GovernerateCode;
				_governerateNameAr = daoGovernerate.GovernerateNameAr;
				_governerateNameEn = daoGovernerate.GovernerateNameEn;
				_isActive = daoGovernerate.IsActive;
				_displayOrder = daoGovernerate.DisplayOrder;
				_canEdit = daoGovernerate.CanEdit;
				_canDelete = daoGovernerate.CanDelete;
				_color = daoGovernerate.Color;
				_icon = daoGovernerate.Icon;
				_cBy = daoGovernerate.CBy;
				_cDate = daoGovernerate.CDate;
				_eBy = daoGovernerate.EBy;
				_eDate = daoGovernerate.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Governerate record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOGovernerate daoGovernerate = new DAOGovernerate();
			RegisterDataObject(daoGovernerate);
			BeginTransaction("savenewBOGovernerate");
			try
			{
				daoGovernerate.RegionId = _regionId;
				daoGovernerate.GovernerateCode = _governerateCode;
				daoGovernerate.GovernerateNameAr = _governerateNameAr;
				daoGovernerate.GovernerateNameEn = _governerateNameEn;
				daoGovernerate.IsActive = _isActive;
				daoGovernerate.DisplayOrder = _displayOrder;
				daoGovernerate.CanEdit = _canEdit;
				daoGovernerate.CanDelete = _canDelete;
				daoGovernerate.Color = _color;
				daoGovernerate.Icon = _icon;
				daoGovernerate.CBy = _cBy;
				daoGovernerate.CDate = _cDate;
				daoGovernerate.EBy = _eBy;
				daoGovernerate.EDate = _eDate;
				daoGovernerate.Insert();
				CommitTransaction();
				
				_governerateId = daoGovernerate.GovernerateId;
				_regionId = daoGovernerate.RegionId;
				_governerateCode = daoGovernerate.GovernerateCode;
				_governerateNameAr = daoGovernerate.GovernerateNameAr;
				_governerateNameEn = daoGovernerate.GovernerateNameEn;
				_isActive = daoGovernerate.IsActive;
				_displayOrder = daoGovernerate.DisplayOrder;
				_canEdit = daoGovernerate.CanEdit;
				_canDelete = daoGovernerate.CanDelete;
				_color = daoGovernerate.Color;
				_icon = daoGovernerate.Icon;
				_cBy = daoGovernerate.CBy;
				_cDate = daoGovernerate.CDate;
				_eBy = daoGovernerate.EBy;
				_eDate = daoGovernerate.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOGovernerate");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Governerate record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual void Update()
		{
			DAOGovernerate daoGovernerate = new DAOGovernerate();
			RegisterDataObject(daoGovernerate);
			BeginTransaction("updateBOGovernerate");
			try
			{
				daoGovernerate.GovernerateId = _governerateId;
				daoGovernerate.RegionId = _regionId;
				daoGovernerate.GovernerateCode = _governerateCode;
				daoGovernerate.GovernerateNameAr = _governerateNameAr;
				daoGovernerate.GovernerateNameEn = _governerateNameEn;
				daoGovernerate.IsActive = _isActive;
				daoGovernerate.DisplayOrder = _displayOrder;
				daoGovernerate.CanEdit = _canEdit;
				daoGovernerate.CanDelete = _canDelete;
				daoGovernerate.Color = _color;
				daoGovernerate.Icon = _icon;
				daoGovernerate.CBy = _cBy;
				daoGovernerate.CDate = _cDate;
				daoGovernerate.EBy = _eBy;
				daoGovernerate.EDate = _eDate;
				daoGovernerate.Update();
				CommitTransaction();
				
				_governerateId = daoGovernerate.GovernerateId;
				_regionId = daoGovernerate.RegionId;
				_governerateCode = daoGovernerate.GovernerateCode;
				_governerateNameAr = daoGovernerate.GovernerateNameAr;
				_governerateNameEn = daoGovernerate.GovernerateNameEn;
				_isActive = daoGovernerate.IsActive;
				_displayOrder = daoGovernerate.DisplayOrder;
				_canEdit = daoGovernerate.CanEdit;
				_canDelete = daoGovernerate.CanDelete;
				_color = daoGovernerate.Color;
				_icon = daoGovernerate.Icon;
				_cBy = daoGovernerate.CBy;
				_cDate = daoGovernerate.CDate;
				_eBy = daoGovernerate.EBy;
				_eDate = daoGovernerate.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOGovernerate");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Governerate record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOGovernerate daoGovernerate = new DAOGovernerate();
			RegisterDataObject(daoGovernerate);
			BeginTransaction("deleteBOGovernerate");
			try
			{
				daoGovernerate.GovernerateId = _governerateId;
				daoGovernerate.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOGovernerate");
				throw;
			}
		}
		
		///<Summary>
		///GovernerateCollection
		///This method returns the collection of BOGovernerate objects
		///</Summary>
		///<returns>
		///List[BOGovernerate]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOGovernerate> GovernerateCollection()
		{
			try
			{
				IList<BOGovernerate> boGovernerateCollection = new List<BOGovernerate>();
				IList<DAOGovernerate> daoGovernerateCollection = DAOGovernerate.SelectAll();
			
				foreach(DAOGovernerate daoGovernerate in daoGovernerateCollection)
					boGovernerateCollection.Add(new BOGovernerate(daoGovernerate));
			
				return boGovernerateCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///GovernerateCollectionCount
		///This method returns the collection count of BOGovernerate objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 GovernerateCollectionCount()
		{
			try
			{
				Int32 objCount = DAOGovernerate.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///CityCollection
		///This method returns its collection of BOCity objects
		///</Summary>
		///<returns>
		///IList[BOCity]
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual IList<BOCity> CityCollection()
		{
			try
			{
				if(_boCityCollection == null)
					LoadCityCollection();
				
				return _boCityCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientAddressCollection
		///This method returns its collection of BOClientAddress objects
		///</Summary>
		///<returns>
		///IList[BOClientAddress]
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual IList<BOClientAddress> ClientAddressCollection()
		{
			try
			{
				if(_boClientAddressCollection == null)
					LoadClientAddressCollection();
				
				return _boClientAddressCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientCollection
		///This method returns its collection of BOClient objects
		///</Summary>
		///<returns>
		///IList[BOClient]
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual IList<BOClient> ClientCollection()
		{
			try
			{
				if(_boClientCollection == null)
					LoadClientCollection();
				
				return _boClientCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailCollection
		///This method returns its collection of BOOperationRequestDetail objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequestDetail]
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual IList<BOOperationRequestDetail> OperationRequestDetailCollection()
		{
			try
			{
				if(_boOperationRequestDetailCollection == null)
					LoadOperationRequestDetailCollection();
				
				return _boOperationRequestDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestCollection
		///This method returns its collection of BOOperationRequest objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequest]
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual IList<BOOperationRequest> OperationRequestCollection()
		{
			try
			{
				if(_boOperationRequestCollection == null)
					LoadOperationRequestCollection();
				
				return _boOperationRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RegisterCollection
		///This method returns its collection of BORegister objects
		///</Summary>
		///<returns>
		///IList[BORegister]
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual IList<BORegister> RegisterCollection()
		{
			try
			{
				if(_boRegisterCollection == null)
					LoadRegisterCollection();
				
				return _boRegisterCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderAddressCollection
		///This method returns its collection of BOSalesOrderAddress objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderAddress]
		///</returns>
		///<parameters>
		///BOGovernerate
		///</parameters>
		public virtual IList<BOSalesOrderAddress> SalesOrderAddressCollection()
		{
			try
			{
				if(_boSalesOrderAddressCollection == null)
					LoadSalesOrderAddressCollection();
				
				return _boSalesOrderAddressCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOGovernerate>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOGovernerate.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///GovernerateCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOGovernerate objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boGovernerateCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOGovernerate> daoGovernerateCollection = DAOGovernerate.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOGovernerate resdaoGovernerate in daoGovernerateCollection)
					boGovernerateCollection.Add((T)(object)new BOGovernerate(resdaoGovernerate));
			
				return boGovernerateCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///GovernerateCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOGovernerate objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOGovernerate.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadCityCollection
		///This method loads the internal collection of BOCity objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadCityCollection()
		{
			try
			{
				_boCityCollection = new List<BOCity>();
				IList<DAOCity> daoCityCollection = DAOCity.SelectAllByGovernerateId(_governerateId.Value);
				
				foreach(DAOCity daoCity in daoCityCollection)
					_boCityCollection.Add(new BOCity(daoCity));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddCity
		///This method persists a BOCity object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCity
		///</parameters>
		public virtual void AddCity(BOCity boCity)
		{
			DAOCity daoCity = new DAOCity();
			RegisterDataObject(daoCity);
			BeginTransaction("addCity");
			try
			{
				daoCity.CityId = boCity.CityId;
				daoCity.CityNameAr = boCity.CityNameAr;
				daoCity.CityNameEn = boCity.CityNameEn;
				daoCity.CityCode = boCity.CityCode;
				daoCity.IsActive = boCity.IsActive;
				daoCity.CanEdit = boCity.CanEdit;
				daoCity.CanDelete = boCity.CanDelete;
				daoCity.DisplayOrder = boCity.DisplayOrder;
				daoCity.Color = boCity.Color;
				daoCity.Icon = boCity.Icon;
				daoCity.CBy = boCity.CBy;
				daoCity.CDate = boCity.CDate;
				daoCity.EBy = boCity.EBy;
				daoCity.EDate = boCity.EDate;
				daoCity.GovernerateId = _governerateId.Value;
				daoCity.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boCity = new BOCity(daoCity);
				if(_boCityCollection != null)
					_boCityCollection.Add(boCity);
			}
			catch
			{
				RollbackTransaction("addCity");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllCity
		///This method deletes all BOCity objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllCity()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllCity");
			try
			{
				DAOCity.DeleteAllByGovernerateId(ConnectionProvider, _governerateId.Value);
				CommitTransaction();
				if(_boCityCollection != null)
				{
					_boCityCollection.Clear();
					_boCityCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllCity");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientAddressCollection
		///This method loads the internal collection of BOClientAddress objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientAddressCollection()
		{
			try
			{
				_boClientAddressCollection = new List<BOClientAddress>();
				IList<DAOClientAddress> daoClientAddressCollection = DAOClientAddress.SelectAllByGovernerateId(_governerateId.Value);
				
				foreach(DAOClientAddress daoClientAddress in daoClientAddressCollection)
					_boClientAddressCollection.Add(new BOClientAddress(daoClientAddress));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientAddress
		///This method persists a BOClientAddress object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientAddress
		///</parameters>
		public virtual void AddClientAddress(BOClientAddress boClientAddress)
		{
			DAOClientAddress daoClientAddress = new DAOClientAddress();
			RegisterDataObject(daoClientAddress);
			BeginTransaction("addClientAddress");
			try
			{
				daoClientAddress.AddressId = boClientAddress.AddressId;
				daoClientAddress.ClientId = boClientAddress.ClientId;
				daoClientAddress.IsDefault = boClientAddress.IsDefault;
				daoClientAddress.CityId = boClientAddress.CityId;
				daoClientAddress.Address = boClientAddress.Address;
				daoClientAddress.Landmark = boClientAddress.Landmark;
				daoClientAddress.Building = boClientAddress.Building;
				daoClientAddress.Floor = boClientAddress.Floor;
				daoClientAddress.Property = boClientAddress.Property;
				daoClientAddress.Email = boClientAddress.Email;
				daoClientAddress.Phone = boClientAddress.Phone;
				daoClientAddress.Lat = boClientAddress.Lat;
				daoClientAddress.Lng = boClientAddress.Lng;
				daoClientAddress.NeedValidation = boClientAddress.NeedValidation;
				daoClientAddress.CBy = boClientAddress.CBy;
				daoClientAddress.CDate = boClientAddress.CDate;
				daoClientAddress.EBy = boClientAddress.EBy;
				daoClientAddress.EDate = boClientAddress.EDate;
				daoClientAddress.GovernerateId = _governerateId.Value;
				daoClientAddress.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientAddress = new BOClientAddress(daoClientAddress);
				if(_boClientAddressCollection != null)
					_boClientAddressCollection.Add(boClientAddress);
			}
			catch
			{
				RollbackTransaction("addClientAddress");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientAddress
		///This method deletes all BOClientAddress objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientAddress()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientAddress");
			try
			{
				DAOClientAddress.DeleteAllByGovernerateId(ConnectionProvider, _governerateId.Value);
				CommitTransaction();
				if(_boClientAddressCollection != null)
				{
					_boClientAddressCollection.Clear();
					_boClientAddressCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientAddress");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientCollection
		///This method loads the internal collection of BOClient objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientCollection()
		{
			try
			{
				_boClientCollection = new List<BOClient>();
				IList<DAOClient> daoClientCollection = DAOClient.SelectAllByGovernerateId(_governerateId.Value);
				
				foreach(DAOClient daoClient in daoClientCollection)
					_boClientCollection.Add(new BOClient(daoClient));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClient
		///This method persists a BOClient object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual void AddClient(BOClient boClient)
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("addClient");
			try
			{
				daoClient.ClientId = boClient.ClientId;
				daoClient.ClientAccountId = boClient.ClientAccountId;
				daoClient.ClientTypeId = boClient.ClientTypeId;
				daoClient.ClientCode = boClient.ClientCode;
				daoClient.ClientNameAr = boClient.ClientNameAr;
				daoClient.ClientNameEn = boClient.ClientNameEn;
				daoClient.BusinessUnitId = boClient.BusinessUnitId;
				daoClient.BranchId = boClient.BranchId;
				daoClient.RegionId = boClient.RegionId;
				daoClient.CityId = boClient.CityId;
				daoClient.LocationLevelId = boClient.LocationLevelId;
				daoClient.ClientGroupId = boClient.ClientGroupId;
				daoClient.ClientGroupSubId = boClient.ClientGroupSubId;
				daoClient.ClientClassificationId = boClient.ClientClassificationId;
				daoClient.CreditLimit = boClient.CreditLimit;
				daoClient.CreditBalance = boClient.CreditBalance;
				daoClient.PaymentTermId = boClient.PaymentTermId;
				daoClient.IsChain = boClient.IsChain;
				daoClient.Building = boClient.Building;
				daoClient.Floor = boClient.Floor;
				daoClient.Property = boClient.Property;
				daoClient.Address = boClient.Address;
				daoClient.Landmark = boClient.Landmark;
				daoClient.Phone = boClient.Phone;
				daoClient.Mobile = boClient.Mobile;
				daoClient.WhatsApp = boClient.WhatsApp;
				daoClient.IsActive = boClient.IsActive;
				daoClient.Latitude = boClient.Latitude;
				daoClient.Longitude = boClient.Longitude;
				daoClient.CBy = boClient.CBy;
				daoClient.CDate = boClient.CDate;
				daoClient.EBy = boClient.EBy;
				daoClient.EDate = boClient.EDate;
				daoClient.IsTaxable = boClient.IsTaxable;
				daoClient.IsCashDiscount = boClient.IsCashDiscount;
				daoClient.ResponsibleNameAr = boClient.ResponsibleNameAr;
				daoClient.ResponsibleNameEn = boClient.ResponsibleNameEn;
				daoClient.TaxCode = boClient.TaxCode;
				daoClient.CommercialCode = boClient.CommercialCode;
				daoClient.IsNew = boClient.IsNew;
				daoClient.NeedValidation = boClient.NeedValidation;
				daoClient.CashGroupId = boClient.CashGroupId;
				daoClient.InRoute = boClient.InRoute;
				daoClient.SalesChannelId = boClient.SalesChannelId;
				daoClient.SalesPoolId = boClient.SalesPoolId;
				daoClient.UserId = boClient.UserId;
				daoClient.Points = boClient.Points;
				daoClient.Wallet = boClient.Wallet;
				daoClient.DealId = boClient.DealId;
				daoClient.GovernerateId = _governerateId.Value;
				daoClient.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClient = new BOClient(daoClient);
				if(_boClientCollection != null)
					_boClientCollection.Add(boClient);
			}
			catch
			{
				RollbackTransaction("addClient");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClient
		///This method deletes all BOClient objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClient()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClient");
			try
			{
				DAOClient.DeleteAllByGovernerateId(ConnectionProvider, _governerateId.Value);
				CommitTransaction();
				if(_boClientCollection != null)
				{
					_boClientCollection.Clear();
					_boClientCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClient");
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestDetailCollection
		///This method loads the internal collection of BOOperationRequestDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestDetailCollection()
		{
			try
			{
				_boOperationRequestDetailCollection = new List<BOOperationRequestDetail>();
				IList<DAOOperationRequestDetail> daoOperationRequestDetailCollection = DAOOperationRequestDetail.SelectAllByGovernerateId(_governerateId.Value);
				
				foreach(DAOOperationRequestDetail daoOperationRequestDetail in daoOperationRequestDetailCollection)
					_boOperationRequestDetailCollection.Add(new BOOperationRequestDetail(daoOperationRequestDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequestDetail
		///This method persists a BOOperationRequestDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetail
		///</parameters>
		public virtual void AddOperationRequestDetail(BOOperationRequestDetail boOperationRequestDetail)
		{
			DAOOperationRequestDetail daoOperationRequestDetail = new DAOOperationRequestDetail();
			RegisterDataObject(daoOperationRequestDetail);
			BeginTransaction("addOperationRequestDetail");
			try
			{
				daoOperationRequestDetail.DetailId = boOperationRequestDetail.DetailId;
				daoOperationRequestDetail.OperationId = boOperationRequestDetail.OperationId;
				daoOperationRequestDetail.OperationDate = boOperationRequestDetail.OperationDate;
				daoOperationRequestDetail.ClientId = boOperationRequestDetail.ClientId;
				daoOperationRequestDetail.ClientTypeId = boOperationRequestDetail.ClientTypeId;
				daoOperationRequestDetail.ClientNameAr = boOperationRequestDetail.ClientNameAr;
				daoOperationRequestDetail.ClientNameEn = boOperationRequestDetail.ClientNameEn;
				daoOperationRequestDetail.RegionId = boOperationRequestDetail.RegionId;
				daoOperationRequestDetail.CityId = boOperationRequestDetail.CityId;
				daoOperationRequestDetail.LocationLevelId = boOperationRequestDetail.LocationLevelId;
				daoOperationRequestDetail.IsChain = boOperationRequestDetail.IsChain;
				daoOperationRequestDetail.ResponsibleNameEn = boOperationRequestDetail.ResponsibleNameEn;
				daoOperationRequestDetail.ResponsibleNameAr = boOperationRequestDetail.ResponsibleNameAr;
				daoOperationRequestDetail.Building = boOperationRequestDetail.Building;
				daoOperationRequestDetail.Floor = boOperationRequestDetail.Floor;
				daoOperationRequestDetail.Property = boOperationRequestDetail.Property;
				daoOperationRequestDetail.Address = boOperationRequestDetail.Address;
				daoOperationRequestDetail.Landmark = boOperationRequestDetail.Landmark;
				daoOperationRequestDetail.Phone = boOperationRequestDetail.Phone;
				daoOperationRequestDetail.Mobile = boOperationRequestDetail.Mobile;
				daoOperationRequestDetail.WhatsApp = boOperationRequestDetail.WhatsApp;
				daoOperationRequestDetail.Latitude = boOperationRequestDetail.Latitude;
				daoOperationRequestDetail.Longitude = boOperationRequestDetail.Longitude;
				daoOperationRequestDetail.Accuracy = boOperationRequestDetail.Accuracy;
				daoOperationRequestDetail.InZone = boOperationRequestDetail.InZone;
				daoOperationRequestDetail.OperationStatusId = boOperationRequestDetail.OperationStatusId;
				daoOperationRequestDetail.CBy = boOperationRequestDetail.CBy;
				daoOperationRequestDetail.CDate = boOperationRequestDetail.CDate;
				daoOperationRequestDetail.EBy = boOperationRequestDetail.EBy;
				daoOperationRequestDetail.EDate = boOperationRequestDetail.EDate;
				daoOperationRequestDetail.TaxCode = boOperationRequestDetail.TaxCode;
				daoOperationRequestDetail.CommercialCode = boOperationRequestDetail.CommercialCode;
				daoOperationRequestDetail.OperationRejectReasonId = boOperationRequestDetail.OperationRejectReasonId;
				daoOperationRequestDetail.GovernerateId = _governerateId.Value;
				daoOperationRequestDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequestDetail = new BOOperationRequestDetail(daoOperationRequestDetail);
				if(_boOperationRequestDetailCollection != null)
					_boOperationRequestDetailCollection.Add(boOperationRequestDetail);
			}
			catch
			{
				RollbackTransaction("addOperationRequestDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequestDetail
		///This method deletes all BOOperationRequestDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequestDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequestDetail");
			try
			{
				DAOOperationRequestDetail.DeleteAllByGovernerateId(ConnectionProvider, _governerateId.Value);
				CommitTransaction();
				if(_boOperationRequestDetailCollection != null)
				{
					_boOperationRequestDetailCollection.Clear();
					_boOperationRequestDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequestDetail");
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestCollection
		///This method loads the internal collection of BOOperationRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestCollection()
		{
			try
			{
				_boOperationRequestCollection = new List<BOOperationRequest>();
				IList<DAOOperationRequest> daoOperationRequestCollection = DAOOperationRequest.SelectAllByGovernerateId(_governerateId.Value);
				
				foreach(DAOOperationRequest daoOperationRequest in daoOperationRequestCollection)
					_boOperationRequestCollection.Add(new BOOperationRequest(daoOperationRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequest
		///This method persists a BOOperationRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequest
		///</parameters>
		public virtual void AddOperationRequest(BOOperationRequest boOperationRequest)
		{
			DAOOperationRequest daoOperationRequest = new DAOOperationRequest();
			RegisterDataObject(daoOperationRequest);
			BeginTransaction("addOperationRequest");
			try
			{
				daoOperationRequest.OperationId = boOperationRequest.OperationId;
				daoOperationRequest.OperationCode = boOperationRequest.OperationCode;
				daoOperationRequest.AgentId = boOperationRequest.AgentId;
				daoOperationRequest.OperationTypeId = boOperationRequest.OperationTypeId;
				daoOperationRequest.RepresentativeId = boOperationRequest.RepresentativeId;
				daoOperationRequest.OperationDate = boOperationRequest.OperationDate;
				daoOperationRequest.StartDate = boOperationRequest.StartDate;
				daoOperationRequest.TargetDays = boOperationRequest.TargetDays;
				daoOperationRequest.ActualDays = boOperationRequest.ActualDays;
				daoOperationRequest.TargetClients = boOperationRequest.TargetClients;
				daoOperationRequest.ActualClients = boOperationRequest.ActualClients;
				daoOperationRequest.DaysPerformance = boOperationRequest.DaysPerformance;
				daoOperationRequest.ClientsPerformance = boOperationRequest.ClientsPerformance;
				daoOperationRequest.Accuracy = boOperationRequest.Accuracy;
				daoOperationRequest.MapPoints = boOperationRequest.MapPoints;
				daoOperationRequest.IsClosed = boOperationRequest.IsClosed;
				daoOperationRequest.CloseDate = boOperationRequest.CloseDate;
				daoOperationRequest.Notes = boOperationRequest.Notes;
				daoOperationRequest.CBy = boOperationRequest.CBy;
				daoOperationRequest.EBy = boOperationRequest.EBy;
				daoOperationRequest.CDate = boOperationRequest.CDate;
				daoOperationRequest.EDate = boOperationRequest.EDate;
				daoOperationRequest.GovernerateId = _governerateId.Value;
				daoOperationRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequest = new BOOperationRequest(daoOperationRequest);
				if(_boOperationRequestCollection != null)
					_boOperationRequestCollection.Add(boOperationRequest);
			}
			catch
			{
				RollbackTransaction("addOperationRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequest
		///This method deletes all BOOperationRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequest");
			try
			{
				DAOOperationRequest.DeleteAllByGovernerateId(ConnectionProvider, _governerateId.Value);
				CommitTransaction();
				if(_boOperationRequestCollection != null)
				{
					_boOperationRequestCollection.Clear();
					_boOperationRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequest");
				throw;
			}
		}
		
		///<Summary>
		///LoadRegisterCollection
		///This method loads the internal collection of BORegister objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRegisterCollection()
		{
			try
			{
				_boRegisterCollection = new List<BORegister>();
				IList<DAORegister> daoRegisterCollection = DAORegister.SelectAllByGovernerateId(_governerateId.Value);
				
				foreach(DAORegister daoRegister in daoRegisterCollection)
					_boRegisterCollection.Add(new BORegister(daoRegister));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRegister
		///This method persists a BORegister object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORegister
		///</parameters>
		public virtual void AddRegister(BORegister boRegister)
		{
			DAORegister daoRegister = new DAORegister();
			RegisterDataObject(daoRegister);
			BeginTransaction("addRegister");
			try
			{
				daoRegister.RegisterId = boRegister.RegisterId;
				daoRegister.RegisterType = boRegister.RegisterType;
				daoRegister.RegisterName = boRegister.RegisterName;
				daoRegister.Phone = boRegister.Phone;
				daoRegister.CityId = boRegister.CityId;
				daoRegister.Lat = boRegister.Lat;
				daoRegister.Lng = boRegister.Lng;
				daoRegister.Address = boRegister.Address;
				daoRegister.VisitDay = boRegister.VisitDay;
				daoRegister.FromTime = boRegister.FromTime;
				daoRegister.ToTime = boRegister.ToTime;
				daoRegister.RegisterStatusId = boRegister.RegisterStatusId;
				daoRegister.EBy = boRegister.EBy;
				daoRegister.EDate = boRegister.EDate;
				daoRegister.GovernerateId = _governerateId.Value;
				daoRegister.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRegister = new BORegister(daoRegister);
				if(_boRegisterCollection != null)
					_boRegisterCollection.Add(boRegister);
			}
			catch
			{
				RollbackTransaction("addRegister");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRegister
		///This method deletes all BORegister objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRegister()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRegister");
			try
			{
				DAORegister.DeleteAllByGovernerateId(ConnectionProvider, _governerateId.Value);
				CommitTransaction();
				if(_boRegisterCollection != null)
				{
					_boRegisterCollection.Clear();
					_boRegisterCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRegister");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderAddressCollection
		///This method loads the internal collection of BOSalesOrderAddress objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderAddressCollection()
		{
			try
			{
				_boSalesOrderAddressCollection = new List<BOSalesOrderAddress>();
				IList<DAOSalesOrderAddress> daoSalesOrderAddressCollection = DAOSalesOrderAddress.SelectAllByGovernerateId(_governerateId.Value);
				
				foreach(DAOSalesOrderAddress daoSalesOrderAddress in daoSalesOrderAddressCollection)
					_boSalesOrderAddressCollection.Add(new BOSalesOrderAddress(daoSalesOrderAddress));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderAddress
		///This method persists a BOSalesOrderAddress object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderAddress
		///</parameters>
		public virtual void AddSalesOrderAddress(BOSalesOrderAddress boSalesOrderAddress)
		{
			DAOSalesOrderAddress daoSalesOrderAddress = new DAOSalesOrderAddress();
			RegisterDataObject(daoSalesOrderAddress);
			BeginTransaction("addSalesOrderAddress");
			try
			{
				daoSalesOrderAddress.SalesAddressId = boSalesOrderAddress.SalesAddressId;
				daoSalesOrderAddress.SalesId = boSalesOrderAddress.SalesId;
				daoSalesOrderAddress.RegionId = boSalesOrderAddress.RegionId;
				daoSalesOrderAddress.CityId = boSalesOrderAddress.CityId;
				daoSalesOrderAddress.Address = boSalesOrderAddress.Address;
				daoSalesOrderAddress.Landmark = boSalesOrderAddress.Landmark;
				daoSalesOrderAddress.Latitude = boSalesOrderAddress.Latitude;
				daoSalesOrderAddress.Longitude = boSalesOrderAddress.Longitude;
				daoSalesOrderAddress.Building = boSalesOrderAddress.Building;
				daoSalesOrderAddress.Floor = boSalesOrderAddress.Floor;
				daoSalesOrderAddress.Property = boSalesOrderAddress.Property;
				daoSalesOrderAddress.Mobile = boSalesOrderAddress.Mobile;
				daoSalesOrderAddress.WhatsApp = boSalesOrderAddress.WhatsApp;
				daoSalesOrderAddress.Phone = boSalesOrderAddress.Phone;
				daoSalesOrderAddress.EBy = boSalesOrderAddress.EBy;
				daoSalesOrderAddress.EDate = boSalesOrderAddress.EDate;
				daoSalesOrderAddress.GovernerateId = _governerateId.Value;
				daoSalesOrderAddress.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderAddress = new BOSalesOrderAddress(daoSalesOrderAddress);
				if(_boSalesOrderAddressCollection != null)
					_boSalesOrderAddressCollection.Add(boSalesOrderAddress);
			}
			catch
			{
				RollbackTransaction("addSalesOrderAddress");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderAddress
		///This method deletes all BOSalesOrderAddress objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderAddress()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderAddress");
			try
			{
				DAOSalesOrderAddress.DeleteAllByGovernerateId(ConnectionProvider, _governerateId.Value);
				CommitTransaction();
				if(_boSalesOrderAddressCollection != null)
				{
					_boSalesOrderAddressCollection.Clear();
					_boSalesOrderAddressCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderAddress");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? GovernerateId
		{
			get
			{
				 return _governerateId;
			}
			set
			{
				_governerateId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RegionId
		{
			get
			{
				 return _regionId;
			}
			set
			{
				_regionId = value;
				_isDirty = true;
			}
		}
		
		public virtual string GovernerateCode
		{
			get
			{
				 return _governerateCode;
			}
			set
			{
				_governerateCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string GovernerateNameAr
		{
			get
			{
				 return _governerateNameAr;
			}
			set
			{
				_governerateNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string GovernerateNameEn
		{
			get
			{
				 return _governerateNameEn;
			}
			set
			{
				_governerateNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
