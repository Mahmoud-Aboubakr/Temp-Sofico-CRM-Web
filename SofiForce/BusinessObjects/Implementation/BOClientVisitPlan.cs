/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/19/2022 5:43:31 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientVisitPlan.
	///</Summary>
	public partial class BOClientVisitPlan : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _visitPlanId;
		protected Int32? _clientId;
		protected Int32? _day1;
		protected Int32? _day2;
		protected Int32? _day3;
		protected Int32? _day4;
		protected Int32? _day5;
		protected Int32? _day6;
		protected Int32? _day7;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientVisitPlan()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 visitPlanId
		///</parameters>
		public BOClientVisitPlan(Int32 visitPlanId)
		{
			try
			{
				DAOClientVisitPlan daoClientVisitPlan = DAOClientVisitPlan.SelectOne(visitPlanId);
				_visitPlanId = daoClientVisitPlan.VisitPlanId;
				_clientId = daoClientVisitPlan.ClientId;
				_day1 = daoClientVisitPlan.Day1;
				_day2 = daoClientVisitPlan.Day2;
				_day3 = daoClientVisitPlan.Day3;
				_day4 = daoClientVisitPlan.Day4;
				_day5 = daoClientVisitPlan.Day5;
				_day6 = daoClientVisitPlan.Day6;
				_day7 = daoClientVisitPlan.Day7;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientVisitPlan
		///</parameters>
		protected internal BOClientVisitPlan(DAOClientVisitPlan daoClientVisitPlan)
		{
			try
			{
				_visitPlanId = daoClientVisitPlan.VisitPlanId;
				_clientId = daoClientVisitPlan.ClientId;
				_day1 = daoClientVisitPlan.Day1;
				_day2 = daoClientVisitPlan.Day2;
				_day3 = daoClientVisitPlan.Day3;
				_day4 = daoClientVisitPlan.Day4;
				_day5 = daoClientVisitPlan.Day5;
				_day6 = daoClientVisitPlan.Day6;
				_day7 = daoClientVisitPlan.Day7;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientVisitPlan record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientVisitPlan daoClientVisitPlan = new DAOClientVisitPlan();
			RegisterDataObject(daoClientVisitPlan);
			BeginTransaction("savenewBOClientVisitPlan");
			try
			{
				daoClientVisitPlan.ClientId = _clientId;
				daoClientVisitPlan.Day1 = _day1;
				daoClientVisitPlan.Day2 = _day2;
				daoClientVisitPlan.Day3 = _day3;
				daoClientVisitPlan.Day4 = _day4;
				daoClientVisitPlan.Day5 = _day5;
				daoClientVisitPlan.Day6 = _day6;
				daoClientVisitPlan.Day7 = _day7;
				daoClientVisitPlan.Insert();
				CommitTransaction();
				
				_visitPlanId = daoClientVisitPlan.VisitPlanId;
				_clientId = daoClientVisitPlan.ClientId;
				_day1 = daoClientVisitPlan.Day1;
				_day2 = daoClientVisitPlan.Day2;
				_day3 = daoClientVisitPlan.Day3;
				_day4 = daoClientVisitPlan.Day4;
				_day5 = daoClientVisitPlan.Day5;
				_day6 = daoClientVisitPlan.Day6;
				_day7 = daoClientVisitPlan.Day7;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientVisitPlan");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientVisitPlan record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientVisitPlan
		///</parameters>
		public virtual void Update()
		{
			DAOClientVisitPlan daoClientVisitPlan = new DAOClientVisitPlan();
			RegisterDataObject(daoClientVisitPlan);
			BeginTransaction("updateBOClientVisitPlan");
			try
			{
				daoClientVisitPlan.VisitPlanId = _visitPlanId;
				daoClientVisitPlan.ClientId = _clientId;
				daoClientVisitPlan.Day1 = _day1;
				daoClientVisitPlan.Day2 = _day2;
				daoClientVisitPlan.Day3 = _day3;
				daoClientVisitPlan.Day4 = _day4;
				daoClientVisitPlan.Day5 = _day5;
				daoClientVisitPlan.Day6 = _day6;
				daoClientVisitPlan.Day7 = _day7;
				daoClientVisitPlan.Update();
				CommitTransaction();
				
				_visitPlanId = daoClientVisitPlan.VisitPlanId;
				_clientId = daoClientVisitPlan.ClientId;
				_day1 = daoClientVisitPlan.Day1;
				_day2 = daoClientVisitPlan.Day2;
				_day3 = daoClientVisitPlan.Day3;
				_day4 = daoClientVisitPlan.Day4;
				_day5 = daoClientVisitPlan.Day5;
				_day6 = daoClientVisitPlan.Day6;
				_day7 = daoClientVisitPlan.Day7;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientVisitPlan");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientVisitPlan record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientVisitPlan daoClientVisitPlan = new DAOClientVisitPlan();
			RegisterDataObject(daoClientVisitPlan);
			BeginTransaction("deleteBOClientVisitPlan");
			try
			{
				daoClientVisitPlan.VisitPlanId = _visitPlanId;
				daoClientVisitPlan.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientVisitPlan");
				throw;
			}
		}
		
		///<Summary>
		///ClientVisitPlanCollection
		///This method returns the collection of BOClientVisitPlan objects
		///</Summary>
		///<returns>
		///List[BOClientVisitPlan]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientVisitPlan> ClientVisitPlanCollection()
		{
			try
			{
				IList<BOClientVisitPlan> boClientVisitPlanCollection = new List<BOClientVisitPlan>();
				IList<DAOClientVisitPlan> daoClientVisitPlanCollection = DAOClientVisitPlan.SelectAll();
			
				foreach(DAOClientVisitPlan daoClientVisitPlan in daoClientVisitPlanCollection)
					boClientVisitPlanCollection.Add(new BOClientVisitPlan(daoClientVisitPlan));
			
				return boClientVisitPlanCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientVisitPlanCollectionCount
		///This method returns the collection count of BOClientVisitPlan objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientVisitPlanCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientVisitPlan.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientVisitPlan>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientVisitPlan.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientVisitPlanCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientVisitPlan objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientVisitPlanCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientVisitPlan> daoClientVisitPlanCollection = DAOClientVisitPlan.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientVisitPlan resdaoClientVisitPlan in daoClientVisitPlanCollection)
					boClientVisitPlanCollection.Add((T)(object)new BOClientVisitPlan(resdaoClientVisitPlan));
			
				return boClientVisitPlanCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientVisitPlanCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientVisitPlan objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientVisitPlan.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? VisitPlanId
		{
			get
			{
				 return _visitPlanId;
			}
			set
			{
				_visitPlanId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day1
		{
			get
			{
				 return _day1;
			}
			set
			{
				_day1 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day2
		{
			get
			{
				 return _day2;
			}
			set
			{
				_day2 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day3
		{
			get
			{
				 return _day3;
			}
			set
			{
				_day3 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day4
		{
			get
			{
				 return _day4;
			}
			set
			{
				_day4 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day5
		{
			get
			{
				 return _day5;
			}
			set
			{
				_day5 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day6
		{
			get
			{
				 return _day6;
			}
			set
			{
				_day6 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day7
		{
			get
			{
				 return _day7;
			}
			set
			{
				_day7 = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
