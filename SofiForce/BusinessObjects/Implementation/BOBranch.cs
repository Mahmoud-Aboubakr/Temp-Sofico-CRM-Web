/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOBranch.
	///It maintains a collection of BOAppUserBranch,BOBranchInvoiceingOrder,BOBusinessUnit,BOCar,BOClient,BOClientComplain,BOClientServiceRequest,BOClientSurvey,BOItemStore,BOPurchaseOrder,BORepresentative,BORouteSetup,BOSalesOrder,BOStore,BOSupervisor objects.
	///</Summary>
	public partial class BOBranch : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _branchId;
		protected string _branchNameEn;
		protected string _branchNameAr;
		protected string _branchCode;
		protected bool? _isActive;
		protected string _color;
		protected string _icon;
		protected Int32? _displayOrder;
		protected decimal? _expenseRate;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected double? _latitude;
		protected double? _longitude;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppUserBranch> _boAppUserBranchCollection;
		List<BOBranchInvoiceingOrder> _boBranchInvoiceingOrderCollection;
		List<BOBusinessUnit> _boBusinessUnitCollection;
		List<BOCar> _boCarCollection;
		List<BOClient> _boClientCollection;
		List<BOClientComplain> _boClientComplainCollection;
		List<BOClientServiceRequest> _boClientServiceRequestCollection;
		List<BOClientSurvey> _boClientSurveyCollection;
		List<BOItemStore> _boItemStoreCollection;
		List<BOPurchaseOrder> _boPurchaseOrderCollection;
		List<BORepresentative> _boRepresentativeCollection;
		List<BORouteSetup> _boRouteSetupCollection;
		List<BOSalesOrder> _boSalesOrderCollection;
		List<BOStore> _boStoreCollection;
		List<BOSupervisor> _boSupervisorCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOBranch()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 branchId
		///</parameters>
		public BOBranch(Int32 branchId)
		{
			try
			{
				DAOBranch daoBranch = DAOBranch.SelectOne(branchId);
				_branchId = daoBranch.BranchId;
				_branchNameEn = daoBranch.BranchNameEn;
				_branchNameAr = daoBranch.BranchNameAr;
				_branchCode = daoBranch.BranchCode;
				_isActive = daoBranch.IsActive;
				_color = daoBranch.Color;
				_icon = daoBranch.Icon;
				_displayOrder = daoBranch.DisplayOrder;
				_expenseRate = daoBranch.ExpenseRate;
				_canEdit = daoBranch.CanEdit;
				_canDelete = daoBranch.CanDelete;
				_latitude = daoBranch.Latitude;
				_longitude = daoBranch.Longitude;
				_cBy = daoBranch.CBy;
				_cDate = daoBranch.CDate;
				_eBy = daoBranch.EBy;
				_eDate = daoBranch.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOBranch
		///</parameters>
		protected internal BOBranch(DAOBranch daoBranch)
		{
			try
			{
				_branchId = daoBranch.BranchId;
				_branchNameEn = daoBranch.BranchNameEn;
				_branchNameAr = daoBranch.BranchNameAr;
				_branchCode = daoBranch.BranchCode;
				_isActive = daoBranch.IsActive;
				_color = daoBranch.Color;
				_icon = daoBranch.Icon;
				_displayOrder = daoBranch.DisplayOrder;
				_expenseRate = daoBranch.ExpenseRate;
				_canEdit = daoBranch.CanEdit;
				_canDelete = daoBranch.CanDelete;
				_latitude = daoBranch.Latitude;
				_longitude = daoBranch.Longitude;
				_cBy = daoBranch.CBy;
				_cDate = daoBranch.CDate;
				_eBy = daoBranch.EBy;
				_eDate = daoBranch.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Branch record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOBranch daoBranch = new DAOBranch();
			RegisterDataObject(daoBranch);
			BeginTransaction("savenewBOBranch");
			try
			{
				daoBranch.BranchNameEn = _branchNameEn;
				daoBranch.BranchNameAr = _branchNameAr;
				daoBranch.BranchCode = _branchCode;
				daoBranch.IsActive = _isActive;
				daoBranch.Color = _color;
				daoBranch.Icon = _icon;
				daoBranch.DisplayOrder = _displayOrder;
				daoBranch.ExpenseRate = _expenseRate;
				daoBranch.CanEdit = _canEdit;
				daoBranch.CanDelete = _canDelete;
				daoBranch.Latitude = _latitude;
				daoBranch.Longitude = _longitude;
				daoBranch.CBy = _cBy;
				daoBranch.CDate = _cDate;
				daoBranch.EBy = _eBy;
				daoBranch.EDate = _eDate;
				daoBranch.Insert();
				CommitTransaction();
				
				_branchId = daoBranch.BranchId;
				_branchNameEn = daoBranch.BranchNameEn;
				_branchNameAr = daoBranch.BranchNameAr;
				_branchCode = daoBranch.BranchCode;
				_isActive = daoBranch.IsActive;
				_color = daoBranch.Color;
				_icon = daoBranch.Icon;
				_displayOrder = daoBranch.DisplayOrder;
				_expenseRate = daoBranch.ExpenseRate;
				_canEdit = daoBranch.CanEdit;
				_canDelete = daoBranch.CanDelete;
				_latitude = daoBranch.Latitude;
				_longitude = daoBranch.Longitude;
				_cBy = daoBranch.CBy;
				_cDate = daoBranch.CDate;
				_eBy = daoBranch.EBy;
				_eDate = daoBranch.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOBranch");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Branch record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual void Update()
		{
			DAOBranch daoBranch = new DAOBranch();
			RegisterDataObject(daoBranch);
			BeginTransaction("updateBOBranch");
			try
			{
				daoBranch.BranchId = _branchId;
				daoBranch.BranchNameEn = _branchNameEn;
				daoBranch.BranchNameAr = _branchNameAr;
				daoBranch.BranchCode = _branchCode;
				daoBranch.IsActive = _isActive;
				daoBranch.Color = _color;
				daoBranch.Icon = _icon;
				daoBranch.DisplayOrder = _displayOrder;
				daoBranch.ExpenseRate = _expenseRate;
				daoBranch.CanEdit = _canEdit;
				daoBranch.CanDelete = _canDelete;
				daoBranch.Latitude = _latitude;
				daoBranch.Longitude = _longitude;
				daoBranch.CBy = _cBy;
				daoBranch.CDate = _cDate;
				daoBranch.EBy = _eBy;
				daoBranch.EDate = _eDate;
				daoBranch.Update();
				CommitTransaction();
				
				_branchId = daoBranch.BranchId;
				_branchNameEn = daoBranch.BranchNameEn;
				_branchNameAr = daoBranch.BranchNameAr;
				_branchCode = daoBranch.BranchCode;
				_isActive = daoBranch.IsActive;
				_color = daoBranch.Color;
				_icon = daoBranch.Icon;
				_displayOrder = daoBranch.DisplayOrder;
				_expenseRate = daoBranch.ExpenseRate;
				_canEdit = daoBranch.CanEdit;
				_canDelete = daoBranch.CanDelete;
				_latitude = daoBranch.Latitude;
				_longitude = daoBranch.Longitude;
				_cBy = daoBranch.CBy;
				_cDate = daoBranch.CDate;
				_eBy = daoBranch.EBy;
				_eDate = daoBranch.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOBranch");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Branch record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOBranch daoBranch = new DAOBranch();
			RegisterDataObject(daoBranch);
			BeginTransaction("deleteBOBranch");
			try
			{
				daoBranch.BranchId = _branchId;
				daoBranch.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOBranch");
				throw;
			}
		}
		
		///<Summary>
		///BranchCollection
		///This method returns the collection of BOBranch objects
		///</Summary>
		///<returns>
		///List[BOBranch]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOBranch> BranchCollection()
		{
			try
			{
				IList<BOBranch> boBranchCollection = new List<BOBranch>();
				IList<DAOBranch> daoBranchCollection = DAOBranch.SelectAll();
			
				foreach(DAOBranch daoBranch in daoBranchCollection)
					boBranchCollection.Add(new BOBranch(daoBranch));
			
				return boBranchCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchCollectionCount
		///This method returns the collection count of BOBranch objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 BranchCollectionCount()
		{
			try
			{
				Int32 objCount = DAOBranch.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserBranchCollection
		///This method returns its collection of BOAppUserBranch objects
		///</Summary>
		///<returns>
		///IList[BOAppUserBranch]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOAppUserBranch> AppUserBranchCollection()
		{
			try
			{
				if(_boAppUserBranchCollection == null)
					LoadAppUserBranchCollection();
				
				return _boAppUserBranchCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///BranchInvoiceingOrderCollection
		///This method returns its collection of BOBranchInvoiceingOrder objects
		///</Summary>
		///<returns>
		///IList[BOBranchInvoiceingOrder]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOBranchInvoiceingOrder> BranchInvoiceingOrderCollection()
		{
			try
			{
				if(_boBranchInvoiceingOrderCollection == null)
					LoadBranchInvoiceingOrderCollection();
				
				return _boBranchInvoiceingOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///BusinessUnitCollection
		///This method returns its collection of BOBusinessUnit objects
		///</Summary>
		///<returns>
		///IList[BOBusinessUnit]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOBusinessUnit> BusinessUnitCollection()
		{
			try
			{
				if(_boBusinessUnitCollection == null)
					LoadBusinessUnitCollection();
				
				return _boBusinessUnitCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///CarCollection
		///This method returns its collection of BOCar objects
		///</Summary>
		///<returns>
		///IList[BOCar]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOCar> CarCollection()
		{
			try
			{
				if(_boCarCollection == null)
					LoadCarCollection();
				
				return _boCarCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientCollection
		///This method returns its collection of BOClient objects
		///</Summary>
		///<returns>
		///IList[BOClient]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOClient> ClientCollection()
		{
			try
			{
				if(_boClientCollection == null)
					LoadClientCollection();
				
				return _boClientCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestCollection
		///This method returns its collection of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequest]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOClientServiceRequest> ClientServiceRequestCollection()
		{
			try
			{
				if(_boClientServiceRequestCollection == null)
					LoadClientServiceRequestCollection();
				
				return _boClientServiceRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientSurveyCollection
		///This method returns its collection of BOClientSurvey objects
		///</Summary>
		///<returns>
		///IList[BOClientSurvey]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOClientSurvey> ClientSurveyCollection()
		{
			try
			{
				if(_boClientSurveyCollection == null)
					LoadClientSurveyCollection();
				
				return _boClientSurveyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ItemStoreCollection
		///This method returns its collection of BOItemStore objects
		///</Summary>
		///<returns>
		///IList[BOItemStore]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOItemStore> ItemStoreCollection()
		{
			try
			{
				if(_boItemStoreCollection == null)
					LoadItemStoreCollection();
				
				return _boItemStoreCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PurchaseOrderCollection
		///This method returns its collection of BOPurchaseOrder objects
		///</Summary>
		///<returns>
		///IList[BOPurchaseOrder]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOPurchaseOrder> PurchaseOrderCollection()
		{
			try
			{
				if(_boPurchaseOrderCollection == null)
					LoadPurchaseOrderCollection();
				
				return _boPurchaseOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeCollection
		///This method returns its collection of BORepresentative objects
		///</Summary>
		///<returns>
		///IList[BORepresentative]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BORepresentative> RepresentativeCollection()
		{
			try
			{
				if(_boRepresentativeCollection == null)
					LoadRepresentativeCollection();
				
				return _boRepresentativeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RouteSetupCollection
		///This method returns its collection of BORouteSetup objects
		///</Summary>
		///<returns>
		///IList[BORouteSetup]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BORouteSetup> RouteSetupCollection()
		{
			try
			{
				if(_boRouteSetupCollection == null)
					LoadRouteSetupCollection();
				
				return _boRouteSetupCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderCollection
		///This method returns its collection of BOSalesOrder objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrder]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOSalesOrder> SalesOrderCollection()
		{
			try
			{
				if(_boSalesOrderCollection == null)
					LoadSalesOrderCollection();
				
				return _boSalesOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///StoreCollection
		///This method returns its collection of BOStore objects
		///</Summary>
		///<returns>
		///IList[BOStore]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOStore> StoreCollection()
		{
			try
			{
				if(_boStoreCollection == null)
					LoadStoreCollection();
				
				return _boStoreCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SupervisorCollection
		///This method returns its collection of BOSupervisor objects
		///</Summary>
		///<returns>
		///IList[BOSupervisor]
		///</returns>
		///<parameters>
		///BOBranch
		///</parameters>
		public virtual IList<BOSupervisor> SupervisorCollection()
		{
			try
			{
				if(_boSupervisorCollection == null)
					LoadSupervisorCollection();
				
				return _boSupervisorCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOBranch>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOBranch.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOBranch objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boBranchCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOBranch> daoBranchCollection = DAOBranch.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOBranch resdaoBranch in daoBranchCollection)
					boBranchCollection.Add((T)(object)new BOBranch(resdaoBranch));
			
				return boBranchCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOBranch objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOBranch.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserBranchCollection
		///This method loads the internal collection of BOAppUserBranch objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserBranchCollection()
		{
			try
			{
				_boAppUserBranchCollection = new List<BOAppUserBranch>();
				IList<DAOAppUserBranch> daoAppUserBranchCollection = DAOAppUserBranch.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOAppUserBranch daoAppUserBranch in daoAppUserBranchCollection)
					_boAppUserBranchCollection.Add(new BOAppUserBranch(daoAppUserBranch));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserBranch
		///This method persists a BOAppUserBranch object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserBranch
		///</parameters>
		public virtual void AddAppUserBranch(BOAppUserBranch boAppUserBranch)
		{
			DAOAppUserBranch daoAppUserBranch = new DAOAppUserBranch();
			RegisterDataObject(daoAppUserBranch);
			BeginTransaction("addAppUserBranch");
			try
			{
				daoAppUserBranch.UserBranchId = boAppUserBranch.UserBranchId;
				daoAppUserBranch.UserId = boAppUserBranch.UserId;
				daoAppUserBranch.BranchId = _branchId.Value;
				daoAppUserBranch.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserBranch = new BOAppUserBranch(daoAppUserBranch);
				if(_boAppUserBranchCollection != null)
					_boAppUserBranchCollection.Add(boAppUserBranch);
			}
			catch
			{
				RollbackTransaction("addAppUserBranch");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserBranch
		///This method deletes all BOAppUserBranch objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserBranch()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserBranch");
			try
			{
				DAOAppUserBranch.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boAppUserBranchCollection != null)
				{
					_boAppUserBranchCollection.Clear();
					_boAppUserBranchCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserBranch");
				throw;
			}
		}
		
		///<Summary>
		///LoadBranchInvoiceingOrderCollection
		///This method loads the internal collection of BOBranchInvoiceingOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadBranchInvoiceingOrderCollection()
		{
			try
			{
				_boBranchInvoiceingOrderCollection = new List<BOBranchInvoiceingOrder>();
				IList<DAOBranchInvoiceingOrder> daoBranchInvoiceingOrderCollection = DAOBranchInvoiceingOrder.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOBranchInvoiceingOrder daoBranchInvoiceingOrder in daoBranchInvoiceingOrderCollection)
					_boBranchInvoiceingOrderCollection.Add(new BOBranchInvoiceingOrder(daoBranchInvoiceingOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddBranchInvoiceingOrder
		///This method persists a BOBranchInvoiceingOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOBranchInvoiceingOrder
		///</parameters>
		public virtual void AddBranchInvoiceingOrder(BOBranchInvoiceingOrder boBranchInvoiceingOrder)
		{
			DAOBranchInvoiceingOrder daoBranchInvoiceingOrder = new DAOBranchInvoiceingOrder();
			RegisterDataObject(daoBranchInvoiceingOrder);
			BeginTransaction("addBranchInvoiceingOrder");
			try
			{
				daoBranchInvoiceingOrder.SortOrderId = boBranchInvoiceingOrder.SortOrderId;
				daoBranchInvoiceingOrder.SortOrder = boBranchInvoiceingOrder.SortOrder;
				daoBranchInvoiceingOrder.SortProperty = boBranchInvoiceingOrder.SortProperty;
				daoBranchInvoiceingOrder.SortDirection = boBranchInvoiceingOrder.SortDirection;
				daoBranchInvoiceingOrder.CBy = boBranchInvoiceingOrder.CBy;
				daoBranchInvoiceingOrder.CDate = boBranchInvoiceingOrder.CDate;
				daoBranchInvoiceingOrder.EBy = boBranchInvoiceingOrder.EBy;
				daoBranchInvoiceingOrder.EDate = boBranchInvoiceingOrder.EDate;
				daoBranchInvoiceingOrder.BranchId = _branchId.Value;
				daoBranchInvoiceingOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boBranchInvoiceingOrder = new BOBranchInvoiceingOrder(daoBranchInvoiceingOrder);
				if(_boBranchInvoiceingOrderCollection != null)
					_boBranchInvoiceingOrderCollection.Add(boBranchInvoiceingOrder);
			}
			catch
			{
				RollbackTransaction("addBranchInvoiceingOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllBranchInvoiceingOrder
		///This method deletes all BOBranchInvoiceingOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllBranchInvoiceingOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllBranchInvoiceingOrder");
			try
			{
				DAOBranchInvoiceingOrder.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boBranchInvoiceingOrderCollection != null)
				{
					_boBranchInvoiceingOrderCollection.Clear();
					_boBranchInvoiceingOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllBranchInvoiceingOrder");
				throw;
			}
		}
		
		///<Summary>
		///LoadBusinessUnitCollection
		///This method loads the internal collection of BOBusinessUnit objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadBusinessUnitCollection()
		{
			try
			{
				_boBusinessUnitCollection = new List<BOBusinessUnit>();
				IList<DAOBusinessUnit> daoBusinessUnitCollection = DAOBusinessUnit.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOBusinessUnit daoBusinessUnit in daoBusinessUnitCollection)
					_boBusinessUnitCollection.Add(new BOBusinessUnit(daoBusinessUnit));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddBusinessUnit
		///This method persists a BOBusinessUnit object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOBusinessUnit
		///</parameters>
		public virtual void AddBusinessUnit(BOBusinessUnit boBusinessUnit)
		{
			DAOBusinessUnit daoBusinessUnit = new DAOBusinessUnit();
			RegisterDataObject(daoBusinessUnit);
			BeginTransaction("addBusinessUnit");
			try
			{
				daoBusinessUnit.BusinessUnitId = boBusinessUnit.BusinessUnitId;
				daoBusinessUnit.BusinessUnitCode = boBusinessUnit.BusinessUnitCode;
				daoBusinessUnit.BusinessUnitNameEn = boBusinessUnit.BusinessUnitNameEn;
				daoBusinessUnit.BusinessUnitNameAr = boBusinessUnit.BusinessUnitNameAr;
				daoBusinessUnit.Icon = boBusinessUnit.Icon;
				daoBusinessUnit.Color = boBusinessUnit.Color;
				daoBusinessUnit.DisplayOrder = boBusinessUnit.DisplayOrder;
				daoBusinessUnit.IsActive = boBusinessUnit.IsActive;
				daoBusinessUnit.CanEdit = boBusinessUnit.CanEdit;
				daoBusinessUnit.CanDelete = boBusinessUnit.CanDelete;
				daoBusinessUnit.Notes = boBusinessUnit.Notes;
				daoBusinessUnit.CBy = boBusinessUnit.CBy;
				daoBusinessUnit.CDate = boBusinessUnit.CDate;
				daoBusinessUnit.EBy = boBusinessUnit.EBy;
				daoBusinessUnit.EDate = boBusinessUnit.EDate;
				daoBusinessUnit.BranchId = _branchId.Value;
				daoBusinessUnit.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boBusinessUnit = new BOBusinessUnit(daoBusinessUnit);
				if(_boBusinessUnitCollection != null)
					_boBusinessUnitCollection.Add(boBusinessUnit);
			}
			catch
			{
				RollbackTransaction("addBusinessUnit");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllBusinessUnit
		///This method deletes all BOBusinessUnit objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllBusinessUnit()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllBusinessUnit");
			try
			{
				DAOBusinessUnit.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boBusinessUnitCollection != null)
				{
					_boBusinessUnitCollection.Clear();
					_boBusinessUnitCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllBusinessUnit");
				throw;
			}
		}
		
		///<Summary>
		///LoadCarCollection
		///This method loads the internal collection of BOCar objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadCarCollection()
		{
			try
			{
				_boCarCollection = new List<BOCar>();
				IList<DAOCar> daoCarCollection = DAOCar.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOCar daoCar in daoCarCollection)
					_boCarCollection.Add(new BOCar(daoCar));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddCar
		///This method persists a BOCar object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCar
		///</parameters>
		public virtual void AddCar(BOCar boCar)
		{
			DAOCar daoCar = new DAOCar();
			RegisterDataObject(daoCar);
			BeginTransaction("addCar");
			try
			{
				daoCar.CarId = boCar.CarId;
				daoCar.CarTypeId = boCar.CarTypeId;
				daoCar.CarCode = boCar.CarCode;
				daoCar.CarNo = boCar.CarNo;
				daoCar.Model = boCar.Model;
				daoCar.ManufacturerId = boCar.ManufacturerId;
				daoCar.YearManufactur = boCar.YearManufactur;
				daoCar.IsActive = boCar.IsActive;
				daoCar.Color = boCar.Color;
				daoCar.Icon = boCar.Icon;
				daoCar.DisplayOrder = boCar.DisplayOrder;
				daoCar.CanEdit = boCar.CanEdit;
				daoCar.CanDelete = boCar.CanDelete;
				daoCar.Latitude = boCar.Latitude;
				daoCar.Longitude = boCar.Longitude;
				daoCar.CBy = boCar.CBy;
				daoCar.CDate = boCar.CDate;
				daoCar.EBy = boCar.EBy;
				daoCar.EDate = boCar.EDate;
				daoCar.BranchId = _branchId.Value;
				daoCar.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boCar = new BOCar(daoCar);
				if(_boCarCollection != null)
					_boCarCollection.Add(boCar);
			}
			catch
			{
				RollbackTransaction("addCar");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllCar
		///This method deletes all BOCar objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllCar()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllCar");
			try
			{
				DAOCar.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boCarCollection != null)
				{
					_boCarCollection.Clear();
					_boCarCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllCar");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientCollection
		///This method loads the internal collection of BOClient objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientCollection()
		{
			try
			{
				_boClientCollection = new List<BOClient>();
				IList<DAOClient> daoClientCollection = DAOClient.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOClient daoClient in daoClientCollection)
					_boClientCollection.Add(new BOClient(daoClient));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClient
		///This method persists a BOClient object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual void AddClient(BOClient boClient)
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("addClient");
			try
			{
				daoClient.ClientId = boClient.ClientId;
				daoClient.ClientAccountId = boClient.ClientAccountId;
				daoClient.ClientTypeId = boClient.ClientTypeId;
				daoClient.ClientCode = boClient.ClientCode;
				daoClient.ClientNameAr = boClient.ClientNameAr;
				daoClient.ClientNameEn = boClient.ClientNameEn;
				daoClient.BusinessUnitId = boClient.BusinessUnitId;
				daoClient.RegionId = boClient.RegionId;
				daoClient.GovernerateId = boClient.GovernerateId;
				daoClient.CityId = boClient.CityId;
				daoClient.LocationLevelId = boClient.LocationLevelId;
				daoClient.ClientGroupId = boClient.ClientGroupId;
				daoClient.ClientGroupSubId = boClient.ClientGroupSubId;
				daoClient.ClientClassificationId = boClient.ClientClassificationId;
				daoClient.CreditLimit = boClient.CreditLimit;
				daoClient.CreditBalance = boClient.CreditBalance;
				daoClient.PaymentTermId = boClient.PaymentTermId;
				daoClient.IsChain = boClient.IsChain;
				daoClient.Building = boClient.Building;
				daoClient.Floor = boClient.Floor;
				daoClient.Property = boClient.Property;
				daoClient.Address = boClient.Address;
				daoClient.Landmark = boClient.Landmark;
				daoClient.Phone = boClient.Phone;
				daoClient.Mobile = boClient.Mobile;
				daoClient.WhatsApp = boClient.WhatsApp;
				daoClient.IsActive = boClient.IsActive;
				daoClient.Latitude = boClient.Latitude;
				daoClient.Longitude = boClient.Longitude;
				daoClient.CBy = boClient.CBy;
				daoClient.CDate = boClient.CDate;
				daoClient.EBy = boClient.EBy;
				daoClient.EDate = boClient.EDate;
				daoClient.IsTaxable = boClient.IsTaxable;
				daoClient.IsCashDiscount = boClient.IsCashDiscount;
				daoClient.ResponsibleNameAr = boClient.ResponsibleNameAr;
				daoClient.ResponsibleNameEn = boClient.ResponsibleNameEn;
				daoClient.TaxCode = boClient.TaxCode;
				daoClient.CommercialCode = boClient.CommercialCode;
				daoClient.IsNew = boClient.IsNew;
				daoClient.NeedValidation = boClient.NeedValidation;
				daoClient.CashGroupId = boClient.CashGroupId;
				daoClient.InRoute = boClient.InRoute;
				daoClient.SalesChannelId = boClient.SalesChannelId;
				daoClient.SalesPoolId = boClient.SalesPoolId;
				daoClient.UserId = boClient.UserId;
				daoClient.Points = boClient.Points;
				daoClient.Wallet = boClient.Wallet;
				daoClient.DealId = boClient.DealId;
				daoClient.BranchId = _branchId.Value;
				daoClient.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClient = new BOClient(daoClient);
				if(_boClientCollection != null)
					_boClientCollection.Add(boClient);
			}
			catch
			{
				RollbackTransaction("addClient");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClient
		///This method deletes all BOClient objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClient()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClient");
			try
			{
				DAOClient.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boClientCollection != null)
				{
					_boClientCollection.Clear();
					_boClientCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClient");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.RepresentativeId = boClientComplain.RepresentativeId;
				daoClientComplain.ClientId = boClientComplain.ClientId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeId = boClientComplain.ComplainTypeId;
				daoClientComplain.ComplainTypeDetailId = boClientComplain.ComplainTypeDetailId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.PriorityId = boClientComplain.PriorityId;
				daoClientComplain.ComplainStatusId = boClientComplain.ComplainStatusId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.DepartmentId = boClientComplain.DepartmentId;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.BranchId = _branchId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestCollection
		///This method loads the internal collection of BOClientServiceRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestCollection()
		{
			try
			{
				_boClientServiceRequestCollection = new List<BOClientServiceRequest>();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOClientServiceRequest daoClientServiceRequest in daoClientServiceRequestCollection)
					_boClientServiceRequestCollection.Add(new BOClientServiceRequest(daoClientServiceRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequest
		///This method persists a BOClientServiceRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual void AddClientServiceRequest(BOClientServiceRequest boClientServiceRequest)
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("addClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = boClientServiceRequest.RequestId;
				daoClientServiceRequest.RequestCode = boClientServiceRequest.RequestCode;
				daoClientServiceRequest.RepresentativeId = boClientServiceRequest.RepresentativeId;
				daoClientServiceRequest.ClientId = boClientServiceRequest.ClientId;
				daoClientServiceRequest.RequestDate = boClientServiceRequest.RequestDate;
				daoClientServiceRequest.RequestTime = boClientServiceRequest.RequestTime;
				daoClientServiceRequest.RequestTypeId = boClientServiceRequest.RequestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = boClientServiceRequest.RequestTypeDetailId;
				daoClientServiceRequest.Phone = boClientServiceRequest.Phone;
				daoClientServiceRequest.PhoneAlternative = boClientServiceRequest.PhoneAlternative;
				daoClientServiceRequest.PriorityId = boClientServiceRequest.PriorityId;
				daoClientServiceRequest.RequestStatusId = boClientServiceRequest.RequestStatusId;
				daoClientServiceRequest.IsClosed = boClientServiceRequest.IsClosed;
				daoClientServiceRequest.CloseDate = boClientServiceRequest.CloseDate;
				daoClientServiceRequest.Duration = boClientServiceRequest.Duration;
				daoClientServiceRequest.Latitude = boClientServiceRequest.Latitude;
				daoClientServiceRequest.Longitude = boClientServiceRequest.Longitude;
				daoClientServiceRequest.InZone = boClientServiceRequest.InZone;
				daoClientServiceRequest.Distance = boClientServiceRequest.Distance;
				daoClientServiceRequest.Notes = boClientServiceRequest.Notes;
				daoClientServiceRequest.DepartmentId = boClientServiceRequest.DepartmentId;
				daoClientServiceRequest.CBy = boClientServiceRequest.CBy;
				daoClientServiceRequest.CDate = boClientServiceRequest.CDate;
				daoClientServiceRequest.EBy = boClientServiceRequest.EBy;
				daoClientServiceRequest.EDate = boClientServiceRequest.EDate;
				daoClientServiceRequest.Replay = boClientServiceRequest.Replay;
				daoClientServiceRequest.RequestTitle = boClientServiceRequest.RequestTitle;
				daoClientServiceRequest.BranchId = _branchId.Value;
				daoClientServiceRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequest = new BOClientServiceRequest(daoClientServiceRequest);
				if(_boClientServiceRequestCollection != null)
					_boClientServiceRequestCollection.Add(boClientServiceRequest);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequest
		///This method deletes all BOClientServiceRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceRequest");
			try
			{
				DAOClientServiceRequest.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boClientServiceRequestCollection != null)
				{
					_boClientServiceRequestCollection.Clear();
					_boClientServiceRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientSurveyCollection
		///This method loads the internal collection of BOClientSurvey objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientSurveyCollection()
		{
			try
			{
				_boClientSurveyCollection = new List<BOClientSurvey>();
				IList<DAOClientSurvey> daoClientSurveyCollection = DAOClientSurvey.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOClientSurvey daoClientSurvey in daoClientSurveyCollection)
					_boClientSurveyCollection.Add(new BOClientSurvey(daoClientSurvey));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientSurvey
		///This method persists a BOClientSurvey object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientSurvey
		///</parameters>
		public virtual void AddClientSurvey(BOClientSurvey boClientSurvey)
		{
			DAOClientSurvey daoClientSurvey = new DAOClientSurvey();
			RegisterDataObject(daoClientSurvey);
			BeginTransaction("addClientSurvey");
			try
			{
				daoClientSurvey.ClientServeyId = boClientSurvey.ClientServeyId;
				daoClientSurvey.SurveyId = boClientSurvey.SurveyId;
				daoClientSurvey.ClientId = boClientSurvey.ClientId;
				daoClientSurvey.RepresentativeId = boClientSurvey.RepresentativeId;
				daoClientSurvey.ServeyStatusId = boClientSurvey.ServeyStatusId;
				daoClientSurvey.CreateDate = boClientSurvey.CreateDate;
				daoClientSurvey.CreateTime = boClientSurvey.CreateTime;
				daoClientSurvey.StartDate = boClientSurvey.StartDate;
				daoClientSurvey.StartTime = boClientSurvey.StartTime;
				daoClientSurvey.IsClosed = boClientSurvey.IsClosed;
				daoClientSurvey.Notes = boClientSurvey.Notes;
				daoClientSurvey.Latitude = boClientSurvey.Latitude;
				daoClientSurvey.Longitude = boClientSurvey.Longitude;
				daoClientSurvey.InZone = boClientSurvey.InZone;
				daoClientSurvey.Distance = boClientSurvey.Distance;
				daoClientSurvey.CanDelete = boClientSurvey.CanDelete;
				daoClientSurvey.CBy = boClientSurvey.CBy;
				daoClientSurvey.CDate = boClientSurvey.CDate;
				daoClientSurvey.EBy = boClientSurvey.EBy;
				daoClientSurvey.EDate = boClientSurvey.EDate;
				daoClientSurvey.BranchId = _branchId.Value;
				daoClientSurvey.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientSurvey = new BOClientSurvey(daoClientSurvey);
				if(_boClientSurveyCollection != null)
					_boClientSurveyCollection.Add(boClientSurvey);
			}
			catch
			{
				RollbackTransaction("addClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientSurvey
		///This method deletes all BOClientSurvey objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientSurvey()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientSurvey");
			try
			{
				DAOClientSurvey.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boClientSurveyCollection != null)
				{
					_boClientSurveyCollection.Clear();
					_boClientSurveyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///LoadItemStoreCollection
		///This method loads the internal collection of BOItemStore objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadItemStoreCollection()
		{
			try
			{
				_boItemStoreCollection = new List<BOItemStore>();
				IList<DAOItemStore> daoItemStoreCollection = DAOItemStore.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOItemStore daoItemStore in daoItemStoreCollection)
					_boItemStoreCollection.Add(new BOItemStore(daoItemStore));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddItemStore
		///This method persists a BOItemStore object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOItemStore
		///</parameters>
		public virtual void AddItemStore(BOItemStore boItemStore)
		{
			DAOItemStore daoItemStore = new DAOItemStore();
			RegisterDataObject(daoItemStore);
			BeginTransaction("addItemStore");
			try
			{
				daoItemStore.ItemStoreId = boItemStore.ItemStoreId;
				daoItemStore.ItemId = boItemStore.ItemId;
				daoItemStore.StoreId = boItemStore.StoreId;
				daoItemStore.Quantity = boItemStore.Quantity;
				daoItemStore.OnHand = boItemStore.OnHand;
				daoItemStore.ExpireDate = boItemStore.ExpireDate;
				daoItemStore.BatchNo = boItemStore.BatchNo;
				daoItemStore.IsActive = boItemStore.IsActive;
				daoItemStore.CBy = boItemStore.CBy;
				daoItemStore.CDate = boItemStore.CDate;
				daoItemStore.EBy = boItemStore.EBy;
				daoItemStore.EDate = boItemStore.EDate;
				daoItemStore.BranchId = _branchId.Value;
				daoItemStore.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boItemStore = new BOItemStore(daoItemStore);
				if(_boItemStoreCollection != null)
					_boItemStoreCollection.Add(boItemStore);
			}
			catch
			{
				RollbackTransaction("addItemStore");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllItemStore
		///This method deletes all BOItemStore objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllItemStore()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllItemStore");
			try
			{
				DAOItemStore.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boItemStoreCollection != null)
				{
					_boItemStoreCollection.Clear();
					_boItemStoreCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllItemStore");
				throw;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderCollection
		///This method loads the internal collection of BOPurchaseOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderCollection()
		{
			try
			{
				_boPurchaseOrderCollection = new List<BOPurchaseOrder>();
				IList<DAOPurchaseOrder> daoPurchaseOrderCollection = DAOPurchaseOrder.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOPurchaseOrder daoPurchaseOrder in daoPurchaseOrderCollection)
					_boPurchaseOrderCollection.Add(new BOPurchaseOrder(daoPurchaseOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPurchaseOrder
		///This method persists a BOPurchaseOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrder
		///</parameters>
		public virtual void AddPurchaseOrder(BOPurchaseOrder boPurchaseOrder)
		{
			DAOPurchaseOrder daoPurchaseOrder = new DAOPurchaseOrder();
			RegisterDataObject(daoPurchaseOrder);
			BeginTransaction("addPurchaseOrder");
			try
			{
				daoPurchaseOrder.PurchaseId = boPurchaseOrder.PurchaseId;
				daoPurchaseOrder.PurchaseCode = boPurchaseOrder.PurchaseCode;
				daoPurchaseOrder.StoreId = boPurchaseOrder.StoreId;
				daoPurchaseOrder.VendorId = boPurchaseOrder.VendorId;
				daoPurchaseOrder.InvoiceCode = boPurchaseOrder.InvoiceCode;
				daoPurchaseOrder.InvoiceDate = boPurchaseOrder.InvoiceDate;
				daoPurchaseOrder.InvoiceAmount = boPurchaseOrder.InvoiceAmount;
				daoPurchaseOrder.Currency = boPurchaseOrder.Currency;
				daoPurchaseOrder.ExchangeRate = boPurchaseOrder.ExchangeRate;
				daoPurchaseOrder.InvoiceAmountLocal = boPurchaseOrder.InvoiceAmountLocal;
				daoPurchaseOrder.SumTax = boPurchaseOrder.SumTax;
				daoPurchaseOrder.SumExpense = boPurchaseOrder.SumExpense;
				daoPurchaseOrder.OpenValue = boPurchaseOrder.OpenValue;
				daoPurchaseOrder.RecId = boPurchaseOrder.RecId;
				daoPurchaseOrder.CBy = boPurchaseOrder.CBy;
				daoPurchaseOrder.CDate = boPurchaseOrder.CDate;
				daoPurchaseOrder.EBy = boPurchaseOrder.EBy;
				daoPurchaseOrder.EDate = boPurchaseOrder.EDate;
				daoPurchaseOrder.BranchId = _branchId.Value;
				daoPurchaseOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrder = new BOPurchaseOrder(daoPurchaseOrder);
				if(_boPurchaseOrderCollection != null)
					_boPurchaseOrderCollection.Add(boPurchaseOrder);
			}
			catch
			{
				RollbackTransaction("addPurchaseOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrder
		///This method deletes all BOPurchaseOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPurchaseOrder");
			try
			{
				DAOPurchaseOrder.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boPurchaseOrderCollection != null)
				{
					_boPurchaseOrderCollection.Clear();
					_boPurchaseOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPurchaseOrder");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeCollection
		///This method loads the internal collection of BORepresentative objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeCollection()
		{
			try
			{
				_boRepresentativeCollection = new List<BORepresentative>();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAORepresentative daoRepresentative in daoRepresentativeCollection)
					_boRepresentativeCollection.Add(new BORepresentative(daoRepresentative));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentative
		///This method persists a BORepresentative object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual void AddRepresentative(BORepresentative boRepresentative)
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("addRepresentative");
			try
			{
				daoRepresentative.RepresentativeId = boRepresentative.RepresentativeId;
				daoRepresentative.UserId = boRepresentative.UserId;
				daoRepresentative.SupervisorId = boRepresentative.SupervisorId;
				daoRepresentative.KindId = boRepresentative.KindId;
				daoRepresentative.BusinessUnitId = boRepresentative.BusinessUnitId;
				daoRepresentative.CompanyCode = boRepresentative.CompanyCode;
				daoRepresentative.RepresentativeCode = boRepresentative.RepresentativeCode;
				daoRepresentative.RepresentativeNameAr = boRepresentative.RepresentativeNameAr;
				daoRepresentative.RepresentativeNameEn = boRepresentative.RepresentativeNameEn;
				daoRepresentative.Phone = boRepresentative.Phone;
				daoRepresentative.PhoneAlternative = boRepresentative.PhoneAlternative;
				daoRepresentative.IsActive = boRepresentative.IsActive;
				daoRepresentative.DisplayOrder = boRepresentative.DisplayOrder;
				daoRepresentative.CanEdit = boRepresentative.CanEdit;
				daoRepresentative.CanDelete = boRepresentative.CanDelete;
				daoRepresentative.JoinDate = boRepresentative.JoinDate;
				daoRepresentative.Notes = boRepresentative.Notes;
				daoRepresentative.Icon = boRepresentative.Icon;
				daoRepresentative.Color = boRepresentative.Color;
				daoRepresentative.IsTerminated = boRepresentative.IsTerminated;
				daoRepresentative.TerminationDate = boRepresentative.TerminationDate;
				daoRepresentative.TerminationReasonId = boRepresentative.TerminationReasonId;
				daoRepresentative.CBy = boRepresentative.CBy;
				daoRepresentative.CDate = boRepresentative.CDate;
				daoRepresentative.EBy = boRepresentative.EBy;
				daoRepresentative.EDate = boRepresentative.EDate;
				daoRepresentative.BranchId = _branchId.Value;
				daoRepresentative.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentative = new BORepresentative(daoRepresentative);
				if(_boRepresentativeCollection != null)
					_boRepresentativeCollection.Add(boRepresentative);
			}
			catch
			{
				RollbackTransaction("addRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentative
		///This method deletes all BORepresentative objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentative()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentative");
			try
			{
				DAORepresentative.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boRepresentativeCollection != null)
				{
					_boRepresentativeCollection.Clear();
					_boRepresentativeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///LoadRouteSetupCollection
		///This method loads the internal collection of BORouteSetup objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRouteSetupCollection()
		{
			try
			{
				_boRouteSetupCollection = new List<BORouteSetup>();
				IList<DAORouteSetup> daoRouteSetupCollection = DAORouteSetup.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAORouteSetup daoRouteSetup in daoRouteSetupCollection)
					_boRouteSetupCollection.Add(new BORouteSetup(daoRouteSetup));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRouteSetup
		///This method persists a BORouteSetup object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORouteSetup
		///</parameters>
		public virtual void AddRouteSetup(BORouteSetup boRouteSetup)
		{
			DAORouteSetup daoRouteSetup = new DAORouteSetup();
			RegisterDataObject(daoRouteSetup);
			BeginTransaction("addRouteSetup");
			try
			{
				daoRouteSetup.RouteId = boRouteSetup.RouteId;
				daoRouteSetup.RouteTypeId = boRouteSetup.RouteTypeId;
				daoRouteSetup.RouteCode = boRouteSetup.RouteCode;
				daoRouteSetup.RouteNameEn = boRouteSetup.RouteNameEn;
				daoRouteSetup.RouteNameAr = boRouteSetup.RouteNameAr;
				daoRouteSetup.IsActive = boRouteSetup.IsActive;
				daoRouteSetup.Color = boRouteSetup.Color;
				daoRouteSetup.Icon = boRouteSetup.Icon;
				daoRouteSetup.CanEdit = boRouteSetup.CanEdit;
				daoRouteSetup.CanDelete = boRouteSetup.CanDelete;
				daoRouteSetup.Notes = boRouteSetup.Notes;
				daoRouteSetup.CBy = boRouteSetup.CBy;
				daoRouteSetup.CDate = boRouteSetup.CDate;
				daoRouteSetup.EBy = boRouteSetup.EBy;
				daoRouteSetup.EDate = boRouteSetup.EDate;
				daoRouteSetup.BranchId = _branchId.Value;
				daoRouteSetup.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRouteSetup = new BORouteSetup(daoRouteSetup);
				if(_boRouteSetupCollection != null)
					_boRouteSetupCollection.Add(boRouteSetup);
			}
			catch
			{
				RollbackTransaction("addRouteSetup");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRouteSetup
		///This method deletes all BORouteSetup objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRouteSetup()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRouteSetup");
			try
			{
				DAORouteSetup.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boRouteSetupCollection != null)
				{
					_boRouteSetupCollection.Clear();
					_boRouteSetupCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRouteSetup");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderCollection
		///This method loads the internal collection of BOSalesOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderCollection()
		{
			try
			{
				_boSalesOrderCollection = new List<BOSalesOrder>();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOSalesOrder daoSalesOrder in daoSalesOrderCollection)
					_boSalesOrderCollection.Add(new BOSalesOrder(daoSalesOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrder
		///This method persists a BOSalesOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual void AddSalesOrder(BOSalesOrder boSalesOrder)
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("addSalesOrder");
			try
			{
				daoSalesOrder.SalesId = boSalesOrder.SalesId;
				daoSalesOrder.SalesCode = boSalesOrder.SalesCode;
				daoSalesOrder.SalesOrderTypeId = boSalesOrder.SalesOrderTypeId;
				daoSalesOrder.ClientId = boSalesOrder.ClientId;
				daoSalesOrder.AgentId = boSalesOrder.AgentId;
				daoSalesOrder.RepresentativeId = boSalesOrder.RepresentativeId;
				daoSalesOrder.StoreId = boSalesOrder.StoreId;
				daoSalesOrder.PriorityTypeId = boSalesOrder.PriorityTypeId;
				daoSalesOrder.PaymentTermId = boSalesOrder.PaymentTermId;
				daoSalesOrder.SalesDate = boSalesOrder.SalesDate;
				daoSalesOrder.SalesTime = boSalesOrder.SalesTime;
				daoSalesOrder.SalesOrderStatusId = boSalesOrder.SalesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = boSalesOrder.SalesOrderSourceId;
				daoSalesOrder.SalesChannelId = boSalesOrder.SalesChannelId;
				daoSalesOrder.SalesPoolId = boSalesOrder.SalesPoolId;
				daoSalesOrder.IsOpened = boSalesOrder.IsOpened;
				daoSalesOrder.OpenValue = boSalesOrder.OpenValue;
				daoSalesOrder.Latitude = boSalesOrder.Latitude;
				daoSalesOrder.Longitude = boSalesOrder.Longitude;
				daoSalesOrder.ItemTotal = boSalesOrder.ItemTotal;
				daoSalesOrder.ItemDiscountTotal = boSalesOrder.ItemDiscountTotal;
				daoSalesOrder.TaxTotal = boSalesOrder.TaxTotal;
				daoSalesOrder.CashDiscountTotal = boSalesOrder.CashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = boSalesOrder.CustomDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = boSalesOrder.CustomDiscountValue;
				daoSalesOrder.CustomDiscountTotal = boSalesOrder.CustomDiscountTotal;
				daoSalesOrder.DeliveryTotal = boSalesOrder.DeliveryTotal;
				daoSalesOrder.NetTotal = boSalesOrder.NetTotal;
				daoSalesOrder.Notes = boSalesOrder.Notes;
				daoSalesOrder.InvoiceRetry = boSalesOrder.InvoiceRetry;
				daoSalesOrder.HasError = boSalesOrder.HasError;
				daoSalesOrder.IsInvoiced = boSalesOrder.IsInvoiced;
				daoSalesOrder.InvoiceCode = boSalesOrder.InvoiceCode;
				daoSalesOrder.InvoiceDate = boSalesOrder.InvoiceDate;
				daoSalesOrder.CreateDate = boSalesOrder.CreateDate;
				daoSalesOrder.RecId = boSalesOrder.RecId;
				daoSalesOrder.CBy = boSalesOrder.CBy;
				daoSalesOrder.CDate = boSalesOrder.CDate;
				daoSalesOrder.EBy = boSalesOrder.EBy;
				daoSalesOrder.EDate = boSalesOrder.EDate;
				daoSalesOrder.SalesPerenId = boSalesOrder.SalesPerenId;
				daoSalesOrder.Inprogress = boSalesOrder.Inprogress;
				daoSalesOrder.IsBackoffice = boSalesOrder.IsBackoffice;
				daoSalesOrder.IsDeleted = boSalesOrder.IsDeleted;
				daoSalesOrder.BranchId = _branchId.Value;
				daoSalesOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrder = new BOSalesOrder(daoSalesOrder);
				if(_boSalesOrderCollection != null)
					_boSalesOrderCollection.Add(boSalesOrder);
			}
			catch
			{
				RollbackTransaction("addSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrder
		///This method deletes all BOSalesOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrder");
			try
			{
				DAOSalesOrder.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boSalesOrderCollection != null)
				{
					_boSalesOrderCollection.Clear();
					_boSalesOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///LoadStoreCollection
		///This method loads the internal collection of BOStore objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadStoreCollection()
		{
			try
			{
				_boStoreCollection = new List<BOStore>();
				IList<DAOStore> daoStoreCollection = DAOStore.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOStore daoStore in daoStoreCollection)
					_boStoreCollection.Add(new BOStore(daoStore));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddStore
		///This method persists a BOStore object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOStore
		///</parameters>
		public virtual void AddStore(BOStore boStore)
		{
			DAOStore daoStore = new DAOStore();
			RegisterDataObject(daoStore);
			BeginTransaction("addStore");
			try
			{
				daoStore.StoreId = boStore.StoreId;
				daoStore.StoreTypeId = boStore.StoreTypeId;
				daoStore.StoreNameEn = boStore.StoreNameEn;
				daoStore.StoreNameAr = boStore.StoreNameAr;
				daoStore.StoreCode = boStore.StoreCode;
				daoStore.IsActive = boStore.IsActive;
				daoStore.Icon = boStore.Icon;
				daoStore.Color = boStore.Color;
				daoStore.DisplayOrder = boStore.DisplayOrder;
				daoStore.CanDelete = boStore.CanDelete;
				daoStore.CanEdit = boStore.CanEdit;
				daoStore.CBy = boStore.CBy;
				daoStore.CDate = boStore.CDate;
				daoStore.EBy = boStore.EBy;
				daoStore.EDate = boStore.EDate;
				daoStore.RecId = boStore.RecId;
				daoStore.BranchId = _branchId.Value;
				daoStore.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boStore = new BOStore(daoStore);
				if(_boStoreCollection != null)
					_boStoreCollection.Add(boStore);
			}
			catch
			{
				RollbackTransaction("addStore");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllStore
		///This method deletes all BOStore objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllStore()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllStore");
			try
			{
				DAOStore.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boStoreCollection != null)
				{
					_boStoreCollection.Clear();
					_boStoreCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllStore");
				throw;
			}
		}
		
		///<Summary>
		///LoadSupervisorCollection
		///This method loads the internal collection of BOSupervisor objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSupervisorCollection()
		{
			try
			{
				_boSupervisorCollection = new List<BOSupervisor>();
				IList<DAOSupervisor> daoSupervisorCollection = DAOSupervisor.SelectAllByBranchId(_branchId.Value);
				
				foreach(DAOSupervisor daoSupervisor in daoSupervisorCollection)
					_boSupervisorCollection.Add(new BOSupervisor(daoSupervisor));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSupervisor
		///This method persists a BOSupervisor object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupervisor
		///</parameters>
		public virtual void AddSupervisor(BOSupervisor boSupervisor)
		{
			DAOSupervisor daoSupervisor = new DAOSupervisor();
			RegisterDataObject(daoSupervisor);
			BeginTransaction("addSupervisor");
			try
			{
				daoSupervisor.SupervisorId = boSupervisor.SupervisorId;
				daoSupervisor.SupervisorTypeId = boSupervisor.SupervisorTypeId;
				daoSupervisor.BusinessUnitId = boSupervisor.BusinessUnitId;
				daoSupervisor.CompanyCode = boSupervisor.CompanyCode;
				daoSupervisor.SupervisorCode = boSupervisor.SupervisorCode;
				daoSupervisor.SupervisorNameEn = boSupervisor.SupervisorNameEn;
				daoSupervisor.SupervisorNameAr = boSupervisor.SupervisorNameAr;
				daoSupervisor.Phone = boSupervisor.Phone;
				daoSupervisor.PhoneAlternative = boSupervisor.PhoneAlternative;
				daoSupervisor.JoinDate = boSupervisor.JoinDate;
				daoSupervisor.UserId = boSupervisor.UserId;
				daoSupervisor.IsActive = boSupervisor.IsActive;
				daoSupervisor.Color = boSupervisor.Color;
				daoSupervisor.DisplayOrder = boSupervisor.DisplayOrder;
				daoSupervisor.Icon = boSupervisor.Icon;
				daoSupervisor.CanEdit = boSupervisor.CanEdit;
				daoSupervisor.CanDelete = boSupervisor.CanDelete;
				daoSupervisor.Notes = boSupervisor.Notes;
				daoSupervisor.IsTerminated = boSupervisor.IsTerminated;
				daoSupervisor.TerminationDate = boSupervisor.TerminationDate;
				daoSupervisor.TerminationReasonId = boSupervisor.TerminationReasonId;
				daoSupervisor.CBy = boSupervisor.CBy;
				daoSupervisor.CDate = boSupervisor.CDate;
				daoSupervisor.EBy = boSupervisor.EBy;
				daoSupervisor.EDate = boSupervisor.EDate;
				daoSupervisor.BranchId = _branchId.Value;
				daoSupervisor.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSupervisor = new BOSupervisor(daoSupervisor);
				if(_boSupervisorCollection != null)
					_boSupervisorCollection.Add(boSupervisor);
			}
			catch
			{
				RollbackTransaction("addSupervisor");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSupervisor
		///This method deletes all BOSupervisor objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSupervisor()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSupervisor");
			try
			{
				DAOSupervisor.DeleteAllByBranchId(ConnectionProvider, _branchId.Value);
				CommitTransaction();
				if(_boSupervisorCollection != null)
				{
					_boSupervisorCollection.Clear();
					_boSupervisorCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSupervisor");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ExpenseRate
		{
			get
			{
				 return _expenseRate;
			}
			set
			{
				_expenseRate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
