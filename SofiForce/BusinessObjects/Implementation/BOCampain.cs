/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOCampain.
	///</Summary>
	public partial class BOCampain : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _campainId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOCampain()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 campainId
		///</parameters>
		public BOCampain(Int32 campainId)
		{
			try
			{
				DAOCampain daoCampain = DAOCampain.SelectOne(campainId);
				_campainId = daoCampain.CampainId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOCampain
		///</parameters>
		protected internal BOCampain(DAOCampain daoCampain)
		{
			try
			{
				_campainId = daoCampain.CampainId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Campain record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOCampain daoCampain = new DAOCampain();
			RegisterDataObject(daoCampain);
			BeginTransaction("savenewBOCampain");
			try
			{
				daoCampain.CampainId = _campainId;
				daoCampain.Insert();
				CommitTransaction();
				
				_campainId = daoCampain.CampainId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOCampain");
				throw;
			}
		}
		
		///<Summary>
		///Delete
		///This method deletes one Campain record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOCampain daoCampain = new DAOCampain();
			RegisterDataObject(daoCampain);
			BeginTransaction("deleteBOCampain");
			try
			{
				daoCampain.CampainId = _campainId;
				daoCampain.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOCampain");
				throw;
			}
		}
		
		///<Summary>
		///CampainCollection
		///This method returns the collection of BOCampain objects
		///</Summary>
		///<returns>
		///List[BOCampain]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOCampain> CampainCollection()
		{
			try
			{
				IList<BOCampain> boCampainCollection = new List<BOCampain>();
				IList<DAOCampain> daoCampainCollection = DAOCampain.SelectAll();
			
				foreach(DAOCampain daoCampain in daoCampainCollection)
					boCampainCollection.Add(new BOCampain(daoCampain));
			
				return boCampainCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CampainCollectionCount
		///This method returns the collection count of BOCampain objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 CampainCollectionCount()
		{
			try
			{
				Int32 objCount = DAOCampain.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOCampain>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOCampain.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CampainCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOCampain objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boCampainCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOCampain> daoCampainCollection = DAOCampain.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOCampain resdaoCampain in daoCampainCollection)
					boCampainCollection.Add((T)(object)new BOCampain(resdaoCampain));
			
				return boCampainCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CampainCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOCampain objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOCampain.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? CampainId
		{
			get
			{
				 return _campainId;
			}
			set
			{
				_campainId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
