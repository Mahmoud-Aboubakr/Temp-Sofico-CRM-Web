/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:38:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientDocumentVw.
	///</Summary>
	public partial class BOClientDocumentVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _clientDocumentId;
		protected Int32? _clientId;
		protected Int32? _documentTypeId;
		protected string _documentPath;
		protected DateTime? _uploadDate;
		protected string _documentExt;
		protected string _documentTypeNameEn;
		protected string _documentTypeNameAr;
		protected Int32? _documentSize;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientDocumentVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientDocumentVw
		///</parameters>
		protected internal BOClientDocumentVw(DAOClientDocumentVw daoClientDocumentVw)
		{
			try
			{
				_clientDocumentId = daoClientDocumentVw.ClientDocumentId;
				_clientId = daoClientDocumentVw.ClientId;
				_documentTypeId = daoClientDocumentVw.DocumentTypeId;
				_documentPath = daoClientDocumentVw.DocumentPath;
				_uploadDate = daoClientDocumentVw.UploadDate;
				_documentExt = daoClientDocumentVw.DocumentExt;
				_documentTypeNameEn = daoClientDocumentVw.DocumentTypeNameEn;
				_documentTypeNameAr = daoClientDocumentVw.DocumentTypeNameAr;
				_documentSize = daoClientDocumentVw.DocumentSize;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ClientDocumentVwCollection
		///This method returns the collection of BOClientDocumentVw objects
		///</Summary>
		///<returns>
		///List[BOClientDocumentVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientDocumentVw> ClientDocumentVwCollection()
		{
			try
			{
				IList<BOClientDocumentVw> boClientDocumentVwCollection = new List<BOClientDocumentVw>();
				IList<DAOClientDocumentVw> daoClientDocumentVwCollection = DAOClientDocumentVw.SelectAll();
			
				foreach(DAOClientDocumentVw daoClientDocumentVw in daoClientDocumentVwCollection)
					boClientDocumentVwCollection.Add(new BOClientDocumentVw(daoClientDocumentVw));
			
				return boClientDocumentVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientDocumentVwCollectionCount
		///This method returns the collection count of BOClientDocumentVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientDocumentVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientDocumentVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientDocumentVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientDocumentVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientDocumentVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientDocumentVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientDocumentVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientDocumentVw> daoClientDocumentVwCollection = DAOClientDocumentVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientDocumentVw resdaoClientDocumentVw in daoClientDocumentVwCollection)
					boClientDocumentVwCollection.Add((T)(object)new BOClientDocumentVw(resdaoClientDocumentVw));
			
				return boClientDocumentVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientDocumentVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientDocumentVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientDocumentVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ClientDocumentId
		{
			get
			{
				 return _clientDocumentId;
			}
			set
			{
				_clientDocumentId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DocumentTypeId
		{
			get
			{
				 return _documentTypeId;
			}
			set
			{
				_documentTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentPath
		{
			get
			{
				 return _documentPath;
			}
			set
			{
				_documentPath = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UploadDate
		{
			get
			{
				 return _uploadDate;
			}
			set
			{
				_uploadDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentExt
		{
			get
			{
				 return _documentExt;
			}
			set
			{
				_documentExt = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentTypeNameEn
		{
			get
			{
				 return _documentTypeNameEn;
			}
			set
			{
				_documentTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentTypeNameAr
		{
			get
			{
				 return _documentTypeNameAr;
			}
			set
			{
				_documentTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DocumentSize
		{
			get
			{
				 return _documentSize;
			}
			set
			{
				_documentSize = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
