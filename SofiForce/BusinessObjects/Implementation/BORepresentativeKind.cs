/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORepresentativeKind.
	///It maintains a collection of BORepresentative objects.
	///</Summary>
	public partial class BORepresentativeKind : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _kindId;
		protected string _kindNameEn;
		protected string _kindNameAr;
		protected string _kindCode;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BORepresentative> _boRepresentativeCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORepresentativeKind()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 kindId
		///</parameters>
		public BORepresentativeKind(Int32 kindId)
		{
			try
			{
				DAORepresentativeKind daoRepresentativeKind = DAORepresentativeKind.SelectOne(kindId);
				_kindId = daoRepresentativeKind.KindId;
				_kindNameEn = daoRepresentativeKind.KindNameEn;
				_kindNameAr = daoRepresentativeKind.KindNameAr;
				_kindCode = daoRepresentativeKind.KindCode;
				_icon = daoRepresentativeKind.Icon;
				_color = daoRepresentativeKind.Color;
				_displayOrder = daoRepresentativeKind.DisplayOrder;
				_isActive = daoRepresentativeKind.IsActive;
				_canEdit = daoRepresentativeKind.CanEdit;
				_canDelete = daoRepresentativeKind.CanDelete;
				_cBy = daoRepresentativeKind.CBy;
				_cDate = daoRepresentativeKind.CDate;
				_eBy = daoRepresentativeKind.EBy;
				_eDate = daoRepresentativeKind.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORepresentativeKind
		///</parameters>
		protected internal BORepresentativeKind(DAORepresentativeKind daoRepresentativeKind)
		{
			try
			{
				_kindId = daoRepresentativeKind.KindId;
				_kindNameEn = daoRepresentativeKind.KindNameEn;
				_kindNameAr = daoRepresentativeKind.KindNameAr;
				_kindCode = daoRepresentativeKind.KindCode;
				_icon = daoRepresentativeKind.Icon;
				_color = daoRepresentativeKind.Color;
				_displayOrder = daoRepresentativeKind.DisplayOrder;
				_isActive = daoRepresentativeKind.IsActive;
				_canEdit = daoRepresentativeKind.CanEdit;
				_canDelete = daoRepresentativeKind.CanDelete;
				_cBy = daoRepresentativeKind.CBy;
				_cDate = daoRepresentativeKind.CDate;
				_eBy = daoRepresentativeKind.EBy;
				_eDate = daoRepresentativeKind.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new RepresentativeKind record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORepresentativeKind daoRepresentativeKind = new DAORepresentativeKind();
			RegisterDataObject(daoRepresentativeKind);
			BeginTransaction("savenewBORepresentativeKind");
			try
			{
				daoRepresentativeKind.KindNameEn = _kindNameEn;
				daoRepresentativeKind.KindNameAr = _kindNameAr;
				daoRepresentativeKind.KindCode = _kindCode;
				daoRepresentativeKind.Icon = _icon;
				daoRepresentativeKind.Color = _color;
				daoRepresentativeKind.DisplayOrder = _displayOrder;
				daoRepresentativeKind.IsActive = _isActive;
				daoRepresentativeKind.CanEdit = _canEdit;
				daoRepresentativeKind.CanDelete = _canDelete;
				daoRepresentativeKind.CBy = _cBy;
				daoRepresentativeKind.CDate = _cDate;
				daoRepresentativeKind.EBy = _eBy;
				daoRepresentativeKind.EDate = _eDate;
				daoRepresentativeKind.Insert();
				CommitTransaction();
				
				_kindId = daoRepresentativeKind.KindId;
				_kindNameEn = daoRepresentativeKind.KindNameEn;
				_kindNameAr = daoRepresentativeKind.KindNameAr;
				_kindCode = daoRepresentativeKind.KindCode;
				_icon = daoRepresentativeKind.Icon;
				_color = daoRepresentativeKind.Color;
				_displayOrder = daoRepresentativeKind.DisplayOrder;
				_isActive = daoRepresentativeKind.IsActive;
				_canEdit = daoRepresentativeKind.CanEdit;
				_canDelete = daoRepresentativeKind.CanDelete;
				_cBy = daoRepresentativeKind.CBy;
				_cDate = daoRepresentativeKind.CDate;
				_eBy = daoRepresentativeKind.EBy;
				_eDate = daoRepresentativeKind.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORepresentativeKind");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one RepresentativeKind record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeKind
		///</parameters>
		public virtual void Update()
		{
			DAORepresentativeKind daoRepresentativeKind = new DAORepresentativeKind();
			RegisterDataObject(daoRepresentativeKind);
			BeginTransaction("updateBORepresentativeKind");
			try
			{
				daoRepresentativeKind.KindId = _kindId;
				daoRepresentativeKind.KindNameEn = _kindNameEn;
				daoRepresentativeKind.KindNameAr = _kindNameAr;
				daoRepresentativeKind.KindCode = _kindCode;
				daoRepresentativeKind.Icon = _icon;
				daoRepresentativeKind.Color = _color;
				daoRepresentativeKind.DisplayOrder = _displayOrder;
				daoRepresentativeKind.IsActive = _isActive;
				daoRepresentativeKind.CanEdit = _canEdit;
				daoRepresentativeKind.CanDelete = _canDelete;
				daoRepresentativeKind.CBy = _cBy;
				daoRepresentativeKind.CDate = _cDate;
				daoRepresentativeKind.EBy = _eBy;
				daoRepresentativeKind.EDate = _eDate;
				daoRepresentativeKind.Update();
				CommitTransaction();
				
				_kindId = daoRepresentativeKind.KindId;
				_kindNameEn = daoRepresentativeKind.KindNameEn;
				_kindNameAr = daoRepresentativeKind.KindNameAr;
				_kindCode = daoRepresentativeKind.KindCode;
				_icon = daoRepresentativeKind.Icon;
				_color = daoRepresentativeKind.Color;
				_displayOrder = daoRepresentativeKind.DisplayOrder;
				_isActive = daoRepresentativeKind.IsActive;
				_canEdit = daoRepresentativeKind.CanEdit;
				_canDelete = daoRepresentativeKind.CanDelete;
				_cBy = daoRepresentativeKind.CBy;
				_cDate = daoRepresentativeKind.CDate;
				_eBy = daoRepresentativeKind.EBy;
				_eDate = daoRepresentativeKind.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORepresentativeKind");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one RepresentativeKind record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORepresentativeKind daoRepresentativeKind = new DAORepresentativeKind();
			RegisterDataObject(daoRepresentativeKind);
			BeginTransaction("deleteBORepresentativeKind");
			try
			{
				daoRepresentativeKind.KindId = _kindId;
				daoRepresentativeKind.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORepresentativeKind");
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeKindCollection
		///This method returns the collection of BORepresentativeKind objects
		///</Summary>
		///<returns>
		///List[BORepresentativeKind]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORepresentativeKind> RepresentativeKindCollection()
		{
			try
			{
				IList<BORepresentativeKind> boRepresentativeKindCollection = new List<BORepresentativeKind>();
				IList<DAORepresentativeKind> daoRepresentativeKindCollection = DAORepresentativeKind.SelectAll();
			
				foreach(DAORepresentativeKind daoRepresentativeKind in daoRepresentativeKindCollection)
					boRepresentativeKindCollection.Add(new BORepresentativeKind(daoRepresentativeKind));
			
				return boRepresentativeKindCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeKindCollectionCount
		///This method returns the collection count of BORepresentativeKind objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RepresentativeKindCollectionCount()
		{
			try
			{
				Int32 objCount = DAORepresentativeKind.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeCollection
		///This method returns its collection of BORepresentative objects
		///</Summary>
		///<returns>
		///IList[BORepresentative]
		///</returns>
		///<parameters>
		///BORepresentativeKind
		///</parameters>
		public virtual IList<BORepresentative> RepresentativeCollection()
		{
			try
			{
				if(_boRepresentativeCollection == null)
					LoadRepresentativeCollection();
				
				return _boRepresentativeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORepresentativeKind>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORepresentativeKind.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeKindCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORepresentativeKind objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRepresentativeKindCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORepresentativeKind> daoRepresentativeKindCollection = DAORepresentativeKind.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORepresentativeKind resdaoRepresentativeKind in daoRepresentativeKindCollection)
					boRepresentativeKindCollection.Add((T)(object)new BORepresentativeKind(resdaoRepresentativeKind));
			
				return boRepresentativeKindCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeKindCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORepresentativeKind objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORepresentativeKind.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeCollection
		///This method loads the internal collection of BORepresentative objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeCollection()
		{
			try
			{
				_boRepresentativeCollection = new List<BORepresentative>();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAllByKindId(_kindId.Value);
				
				foreach(DAORepresentative daoRepresentative in daoRepresentativeCollection)
					_boRepresentativeCollection.Add(new BORepresentative(daoRepresentative));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentative
		///This method persists a BORepresentative object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual void AddRepresentative(BORepresentative boRepresentative)
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("addRepresentative");
			try
			{
				daoRepresentative.RepresentativeId = boRepresentative.RepresentativeId;
				daoRepresentative.BranchId = boRepresentative.BranchId;
				daoRepresentative.UserId = boRepresentative.UserId;
				daoRepresentative.SupervisorId = boRepresentative.SupervisorId;
				daoRepresentative.BusinessUnitId = boRepresentative.BusinessUnitId;
				daoRepresentative.CompanyCode = boRepresentative.CompanyCode;
				daoRepresentative.RepresentativeCode = boRepresentative.RepresentativeCode;
				daoRepresentative.RepresentativeNameAr = boRepresentative.RepresentativeNameAr;
				daoRepresentative.RepresentativeNameEn = boRepresentative.RepresentativeNameEn;
				daoRepresentative.Phone = boRepresentative.Phone;
				daoRepresentative.PhoneAlternative = boRepresentative.PhoneAlternative;
				daoRepresentative.IsActive = boRepresentative.IsActive;
				daoRepresentative.DisplayOrder = boRepresentative.DisplayOrder;
				daoRepresentative.CanEdit = boRepresentative.CanEdit;
				daoRepresentative.CanDelete = boRepresentative.CanDelete;
				daoRepresentative.JoinDate = boRepresentative.JoinDate;
				daoRepresentative.Notes = boRepresentative.Notes;
				daoRepresentative.Icon = boRepresentative.Icon;
				daoRepresentative.Color = boRepresentative.Color;
				daoRepresentative.IsTerminated = boRepresentative.IsTerminated;
				daoRepresentative.TerminationDate = boRepresentative.TerminationDate;
				daoRepresentative.TerminationReasonId = boRepresentative.TerminationReasonId;
				daoRepresentative.CBy = boRepresentative.CBy;
				daoRepresentative.CDate = boRepresentative.CDate;
				daoRepresentative.EBy = boRepresentative.EBy;
				daoRepresentative.EDate = boRepresentative.EDate;
				daoRepresentative.KindId = _kindId.Value;
				daoRepresentative.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentative = new BORepresentative(daoRepresentative);
				if(_boRepresentativeCollection != null)
					_boRepresentativeCollection.Add(boRepresentative);
			}
			catch
			{
				RollbackTransaction("addRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentative
		///This method deletes all BORepresentative objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentative()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentative");
			try
			{
				DAORepresentative.DeleteAllByKindId(ConnectionProvider, _kindId.Value);
				CommitTransaction();
				if(_boRepresentativeCollection != null)
				{
					_boRepresentativeCollection.Clear();
					_boRepresentativeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentative");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? KindId
		{
			get
			{
				 return _kindId;
			}
			set
			{
				_kindId = value;
				_isDirty = true;
			}
		}
		
		public virtual string KindNameEn
		{
			get
			{
				 return _kindNameEn;
			}
			set
			{
				_kindNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string KindNameAr
		{
			get
			{
				 return _kindNameAr;
			}
			set
			{
				_kindNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string KindCode
		{
			get
			{
				 return _kindCode;
			}
			set
			{
				_kindCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
