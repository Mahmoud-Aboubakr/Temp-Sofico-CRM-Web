/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientComplain.
	///It maintains a collection of BOClientComplainDocument,BOClientComplainTimeline objects.
	///</Summary>
	public partial class BOClientComplain : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _complainId;
		protected string _complainCode;
		protected Int32? _branchId;
		protected Int32? _representativeId;
		protected Int32? _clientId;
		protected DateTime? _complainDate;
		protected DateTime? _complainTime;
		protected Int32? _complainTypeId;
		protected Int32? _complainTypeDetailId;
		protected string _phone;
		protected string _phoneAlternative;
		protected Int32? _priorityId;
		protected Int32? _complainStatusId;
		protected bool? _isClosed;
		protected DateTime? _closeDate;
		protected Int32? _duration;
		protected double? _latitude;
		protected double? _longitude;
		protected bool? _inZone;
		protected double? _distance;
		protected string _notes;
		protected Int32? _departmentId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _replay;
		protected string _complainTitle;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientComplainDocument> _boClientComplainDocumentCollection;
		List<BOClientComplainTimeline> _boClientComplainTimelineCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientComplain()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 complainId
		///</parameters>
		public BOClientComplain(Int64 complainId)
		{
			try
			{
				DAOClientComplain daoClientComplain = DAOClientComplain.SelectOne(complainId);
				_complainId = daoClientComplain.ComplainId;
				_complainCode = daoClientComplain.ComplainCode;
				_branchId = daoClientComplain.BranchId;
				_representativeId = daoClientComplain.RepresentativeId;
				_clientId = daoClientComplain.ClientId;
				_complainDate = daoClientComplain.ComplainDate;
				_complainTime = daoClientComplain.ComplainTime;
				_complainTypeId = daoClientComplain.ComplainTypeId;
				_complainTypeDetailId = daoClientComplain.ComplainTypeDetailId;
				_phone = daoClientComplain.Phone;
				_phoneAlternative = daoClientComplain.PhoneAlternative;
				_priorityId = daoClientComplain.PriorityId;
				_complainStatusId = daoClientComplain.ComplainStatusId;
				_isClosed = daoClientComplain.IsClosed;
				_closeDate = daoClientComplain.CloseDate;
				_duration = daoClientComplain.Duration;
				_latitude = daoClientComplain.Latitude;
				_longitude = daoClientComplain.Longitude;
				_inZone = daoClientComplain.InZone;
				_distance = daoClientComplain.Distance;
				_notes = daoClientComplain.Notes;
				_departmentId = daoClientComplain.DepartmentId;
				_cBy = daoClientComplain.CBy;
				_cDate = daoClientComplain.CDate;
				_eBy = daoClientComplain.EBy;
				_eDate = daoClientComplain.EDate;
				_replay = daoClientComplain.Replay;
				_complainTitle = daoClientComplain.ComplainTitle;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientComplain
		///</parameters>
		protected internal BOClientComplain(DAOClientComplain daoClientComplain)
		{
			try
			{
				_complainId = daoClientComplain.ComplainId;
				_complainCode = daoClientComplain.ComplainCode;
				_branchId = daoClientComplain.BranchId;
				_representativeId = daoClientComplain.RepresentativeId;
				_clientId = daoClientComplain.ClientId;
				_complainDate = daoClientComplain.ComplainDate;
				_complainTime = daoClientComplain.ComplainTime;
				_complainTypeId = daoClientComplain.ComplainTypeId;
				_complainTypeDetailId = daoClientComplain.ComplainTypeDetailId;
				_phone = daoClientComplain.Phone;
				_phoneAlternative = daoClientComplain.PhoneAlternative;
				_priorityId = daoClientComplain.PriorityId;
				_complainStatusId = daoClientComplain.ComplainStatusId;
				_isClosed = daoClientComplain.IsClosed;
				_closeDate = daoClientComplain.CloseDate;
				_duration = daoClientComplain.Duration;
				_latitude = daoClientComplain.Latitude;
				_longitude = daoClientComplain.Longitude;
				_inZone = daoClientComplain.InZone;
				_distance = daoClientComplain.Distance;
				_notes = daoClientComplain.Notes;
				_departmentId = daoClientComplain.DepartmentId;
				_cBy = daoClientComplain.CBy;
				_cDate = daoClientComplain.CDate;
				_eBy = daoClientComplain.EBy;
				_eDate = daoClientComplain.EDate;
				_replay = daoClientComplain.Replay;
				_complainTitle = daoClientComplain.ComplainTitle;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientComplain record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("savenewBOClientComplain");
			try
			{
				daoClientComplain.ComplainCode = _complainCode;
				daoClientComplain.BranchId = _branchId;
				daoClientComplain.RepresentativeId = _representativeId;
				daoClientComplain.ClientId = _clientId;
				daoClientComplain.ComplainDate = _complainDate;
				daoClientComplain.ComplainTime = _complainTime;
				daoClientComplain.ComplainTypeId = _complainTypeId;
				daoClientComplain.ComplainTypeDetailId = _complainTypeDetailId;
				daoClientComplain.Phone = _phone;
				daoClientComplain.PhoneAlternative = _phoneAlternative;
				daoClientComplain.PriorityId = _priorityId;
				daoClientComplain.ComplainStatusId = _complainStatusId;
				daoClientComplain.IsClosed = _isClosed;
				daoClientComplain.CloseDate = _closeDate;
				daoClientComplain.Duration = _duration;
				daoClientComplain.Latitude = _latitude;
				daoClientComplain.Longitude = _longitude;
				daoClientComplain.InZone = _inZone;
				daoClientComplain.Distance = _distance;
				daoClientComplain.Notes = _notes;
				daoClientComplain.DepartmentId = _departmentId;
				daoClientComplain.CBy = _cBy;
				daoClientComplain.CDate = _cDate;
				daoClientComplain.EBy = _eBy;
				daoClientComplain.EDate = _eDate;
				daoClientComplain.Replay = _replay;
				daoClientComplain.ComplainTitle = _complainTitle;
				daoClientComplain.Insert();
				CommitTransaction();
				
				_complainId = daoClientComplain.ComplainId;
				_complainCode = daoClientComplain.ComplainCode;
				_branchId = daoClientComplain.BranchId;
				_representativeId = daoClientComplain.RepresentativeId;
				_clientId = daoClientComplain.ClientId;
				_complainDate = daoClientComplain.ComplainDate;
				_complainTime = daoClientComplain.ComplainTime;
				_complainTypeId = daoClientComplain.ComplainTypeId;
				_complainTypeDetailId = daoClientComplain.ComplainTypeDetailId;
				_phone = daoClientComplain.Phone;
				_phoneAlternative = daoClientComplain.PhoneAlternative;
				_priorityId = daoClientComplain.PriorityId;
				_complainStatusId = daoClientComplain.ComplainStatusId;
				_isClosed = daoClientComplain.IsClosed;
				_closeDate = daoClientComplain.CloseDate;
				_duration = daoClientComplain.Duration;
				_latitude = daoClientComplain.Latitude;
				_longitude = daoClientComplain.Longitude;
				_inZone = daoClientComplain.InZone;
				_distance = daoClientComplain.Distance;
				_notes = daoClientComplain.Notes;
				_departmentId = daoClientComplain.DepartmentId;
				_cBy = daoClientComplain.CBy;
				_cDate = daoClientComplain.CDate;
				_eBy = daoClientComplain.EBy;
				_eDate = daoClientComplain.EDate;
				_replay = daoClientComplain.Replay;
				_complainTitle = daoClientComplain.ComplainTitle;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientComplain record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void Update()
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("updateBOClientComplain");
			try
			{
				daoClientComplain.ComplainId = _complainId;
				daoClientComplain.ComplainCode = _complainCode;
				daoClientComplain.BranchId = _branchId;
				daoClientComplain.RepresentativeId = _representativeId;
				daoClientComplain.ClientId = _clientId;
				daoClientComplain.ComplainDate = _complainDate;
				daoClientComplain.ComplainTime = _complainTime;
				daoClientComplain.ComplainTypeId = _complainTypeId;
				daoClientComplain.ComplainTypeDetailId = _complainTypeDetailId;
				daoClientComplain.Phone = _phone;
				daoClientComplain.PhoneAlternative = _phoneAlternative;
				daoClientComplain.PriorityId = _priorityId;
				daoClientComplain.ComplainStatusId = _complainStatusId;
				daoClientComplain.IsClosed = _isClosed;
				daoClientComplain.CloseDate = _closeDate;
				daoClientComplain.Duration = _duration;
				daoClientComplain.Latitude = _latitude;
				daoClientComplain.Longitude = _longitude;
				daoClientComplain.InZone = _inZone;
				daoClientComplain.Distance = _distance;
				daoClientComplain.Notes = _notes;
				daoClientComplain.DepartmentId = _departmentId;
				daoClientComplain.CBy = _cBy;
				daoClientComplain.CDate = _cDate;
				daoClientComplain.EBy = _eBy;
				daoClientComplain.EDate = _eDate;
				daoClientComplain.Replay = _replay;
				daoClientComplain.ComplainTitle = _complainTitle;
				daoClientComplain.Update();
				CommitTransaction();
				
				_complainId = daoClientComplain.ComplainId;
				_complainCode = daoClientComplain.ComplainCode;
				_branchId = daoClientComplain.BranchId;
				_representativeId = daoClientComplain.RepresentativeId;
				_clientId = daoClientComplain.ClientId;
				_complainDate = daoClientComplain.ComplainDate;
				_complainTime = daoClientComplain.ComplainTime;
				_complainTypeId = daoClientComplain.ComplainTypeId;
				_complainTypeDetailId = daoClientComplain.ComplainTypeDetailId;
				_phone = daoClientComplain.Phone;
				_phoneAlternative = daoClientComplain.PhoneAlternative;
				_priorityId = daoClientComplain.PriorityId;
				_complainStatusId = daoClientComplain.ComplainStatusId;
				_isClosed = daoClientComplain.IsClosed;
				_closeDate = daoClientComplain.CloseDate;
				_duration = daoClientComplain.Duration;
				_latitude = daoClientComplain.Latitude;
				_longitude = daoClientComplain.Longitude;
				_inZone = daoClientComplain.InZone;
				_distance = daoClientComplain.Distance;
				_notes = daoClientComplain.Notes;
				_departmentId = daoClientComplain.DepartmentId;
				_cBy = daoClientComplain.CBy;
				_cDate = daoClientComplain.CDate;
				_eBy = daoClientComplain.EBy;
				_eDate = daoClientComplain.EDate;
				_replay = daoClientComplain.Replay;
				_complainTitle = daoClientComplain.ComplainTitle;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientComplain");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientComplain record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("deleteBOClientComplain");
			try
			{
				daoClientComplain.ComplainId = _complainId;
				daoClientComplain.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns the collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///List[BOClientComplain]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				IList<BOClientComplain> boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAll();
			
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			
				return boClientComplainCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientComplainCollectionCount
		///This method returns the collection count of BOClientComplain objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientComplainCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientComplain.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainDocumentCollection
		///This method returns its collection of BOClientComplainDocument objects
		///</Summary>
		///<returns>
		///IList[BOClientComplainDocument]
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual IList<BOClientComplainDocument> ClientComplainDocumentCollection()
		{
			try
			{
				if(_boClientComplainDocumentCollection == null)
					LoadClientComplainDocumentCollection();
				
				return _boClientComplainDocumentCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainTimelineCollection
		///This method returns its collection of BOClientComplainTimeline objects
		///</Summary>
		///<returns>
		///IList[BOClientComplainTimeline]
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual IList<BOClientComplainTimeline> ClientComplainTimelineCollection()
		{
			try
			{
				if(_boClientComplainTimelineCollection == null)
					LoadClientComplainTimelineCollection();
				
				return _boClientComplainTimelineCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientComplain>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientComplain.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientComplainCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientComplain objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientComplainCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientComplain resdaoClientComplain in daoClientComplainCollection)
					boClientComplainCollection.Add((T)(object)new BOClientComplain(resdaoClientComplain));
			
				return boClientComplainCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientComplainCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientComplain objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientComplain.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainDocumentCollection
		///This method loads the internal collection of BOClientComplainDocument objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainDocumentCollection()
		{
			try
			{
				_boClientComplainDocumentCollection = new List<BOClientComplainDocument>();
				IList<DAOClientComplainDocument> daoClientComplainDocumentCollection = DAOClientComplainDocument.SelectAllByComplainId(_complainId.Value);
				
				foreach(DAOClientComplainDocument daoClientComplainDocument in daoClientComplainDocumentCollection)
					_boClientComplainDocumentCollection.Add(new BOClientComplainDocument(daoClientComplainDocument));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplainDocument
		///This method persists a BOClientComplainDocument object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplainDocument
		///</parameters>
		public virtual void AddClientComplainDocument(BOClientComplainDocument boClientComplainDocument)
		{
			DAOClientComplainDocument daoClientComplainDocument = new DAOClientComplainDocument();
			RegisterDataObject(daoClientComplainDocument);
			BeginTransaction("addClientComplainDocument");
			try
			{
				daoClientComplainDocument.ComplainDocumentId = boClientComplainDocument.ComplainDocumentId;
				daoClientComplainDocument.DocumentPath = boClientComplainDocument.DocumentPath;
				daoClientComplainDocument.UploadDate = boClientComplainDocument.UploadDate;
				daoClientComplainDocument.DocumentExt = boClientComplainDocument.DocumentExt;
				daoClientComplainDocument.DocumentSize = boClientComplainDocument.DocumentSize;
				daoClientComplainDocument.ComplainId = _complainId.Value;
				daoClientComplainDocument.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplainDocument = new BOClientComplainDocument(daoClientComplainDocument);
				if(_boClientComplainDocumentCollection != null)
					_boClientComplainDocumentCollection.Add(boClientComplainDocument);
			}
			catch
			{
				RollbackTransaction("addClientComplainDocument");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplainDocument
		///This method deletes all BOClientComplainDocument objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplainDocument()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplainDocument");
			try
			{
				DAOClientComplainDocument.DeleteAllByComplainId(ConnectionProvider, _complainId.Value);
				CommitTransaction();
				if(_boClientComplainDocumentCollection != null)
				{
					_boClientComplainDocumentCollection.Clear();
					_boClientComplainDocumentCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplainDocument");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainTimelineCollection
		///This method loads the internal collection of BOClientComplainTimeline objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainTimelineCollection()
		{
			try
			{
				_boClientComplainTimelineCollection = new List<BOClientComplainTimeline>();
				IList<DAOClientComplainTimeline> daoClientComplainTimelineCollection = DAOClientComplainTimeline.SelectAllByComplainId(_complainId.Value);
				
				foreach(DAOClientComplainTimeline daoClientComplainTimeline in daoClientComplainTimelineCollection)
					_boClientComplainTimelineCollection.Add(new BOClientComplainTimeline(daoClientComplainTimeline));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplainTimeline
		///This method persists a BOClientComplainTimeline object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplainTimeline
		///</parameters>
		public virtual void AddClientComplainTimeline(BOClientComplainTimeline boClientComplainTimeline)
		{
			DAOClientComplainTimeline daoClientComplainTimeline = new DAOClientComplainTimeline();
			RegisterDataObject(daoClientComplainTimeline);
			BeginTransaction("addClientComplainTimeline");
			try
			{
				daoClientComplainTimeline.TimelineId = boClientComplainTimeline.TimelineId;
				daoClientComplainTimeline.ComplainStatusId = boClientComplainTimeline.ComplainStatusId;
				daoClientComplainTimeline.UserId = boClientComplainTimeline.UserId;
				daoClientComplainTimeline.TimelineDate = boClientComplainTimeline.TimelineDate;
				daoClientComplainTimeline.Notes = boClientComplainTimeline.Notes;
				daoClientComplainTimeline.ComplainId = _complainId.Value;
				daoClientComplainTimeline.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplainTimeline = new BOClientComplainTimeline(daoClientComplainTimeline);
				if(_boClientComplainTimelineCollection != null)
					_boClientComplainTimelineCollection.Add(boClientComplainTimeline);
			}
			catch
			{
				RollbackTransaction("addClientComplainTimeline");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplainTimeline
		///This method deletes all BOClientComplainTimeline objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplainTimeline()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplainTimeline");
			try
			{
				DAOClientComplainTimeline.DeleteAllByComplainId(ConnectionProvider, _complainId.Value);
				CommitTransaction();
				if(_boClientComplainTimelineCollection != null)
				{
					_boClientComplainTimelineCollection.Clear();
					_boClientComplainTimelineCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplainTimeline");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? ComplainId
		{
			get
			{
				 return _complainId;
			}
			set
			{
				_complainId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainCode
		{
			get
			{
				 return _complainCode;
			}
			set
			{
				_complainCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ComplainDate
		{
			get
			{
				 return _complainDate;
			}
			set
			{
				_complainDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ComplainTime
		{
			get
			{
				 return _complainTime;
			}
			set
			{
				_complainTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ComplainTypeId
		{
			get
			{
				 return _complainTypeId;
			}
			set
			{
				_complainTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ComplainTypeDetailId
		{
			get
			{
				 return _complainTypeDetailId;
			}
			set
			{
				_complainTypeDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string PhoneAlternative
		{
			get
			{
				 return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PriorityId
		{
			get
			{
				 return _priorityId;
			}
			set
			{
				_priorityId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ComplainStatusId
		{
			get
			{
				 return _complainStatusId;
			}
			set
			{
				_complainStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsClosed
		{
			get
			{
				 return _isClosed;
			}
			set
			{
				_isClosed = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CloseDate
		{
			get
			{
				 return _closeDate;
			}
			set
			{
				_closeDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Duration
		{
			get
			{
				 return _duration;
			}
			set
			{
				_duration = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? InZone
		{
			get
			{
				 return _inZone;
			}
			set
			{
				_inZone = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Distance
		{
			get
			{
				 return _distance;
			}
			set
			{
				_distance = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DepartmentId
		{
			get
			{
				 return _departmentId;
			}
			set
			{
				_departmentId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Replay
		{
			get
			{
				 return _replay;
			}
			set
			{
				_replay = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainTitle
		{
			get
			{
				 return _complainTitle;
			}
			set
			{
				_complainTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
