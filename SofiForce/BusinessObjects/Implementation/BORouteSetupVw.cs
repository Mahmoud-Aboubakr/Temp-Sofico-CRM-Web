/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORouteSetupVw.
	///</Summary>
	public partial class BORouteSetupVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _routeId;
		protected Int32? _routeTypeId;
		protected Int32? _branchId;
		protected string _routeCode;
		protected string _routeNameEn;
		protected string _routeNameAr;
		protected bool? _isActive;
		protected string _color;
		protected string _icon;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected string _routeTypeCode;
		protected string _routeTypeNameEn;
		protected string _routeTypeNameAr;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORouteSetupVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORouteSetupVw
		///</parameters>
		protected internal BORouteSetupVw(DAORouteSetupVw daoRouteSetupVw)
		{
			try
			{
				_routeId = daoRouteSetupVw.RouteId;
				_routeTypeId = daoRouteSetupVw.RouteTypeId;
				_branchId = daoRouteSetupVw.BranchId;
				_routeCode = daoRouteSetupVw.RouteCode;
				_routeNameEn = daoRouteSetupVw.RouteNameEn;
				_routeNameAr = daoRouteSetupVw.RouteNameAr;
				_isActive = daoRouteSetupVw.IsActive;
				_color = daoRouteSetupVw.Color;
				_icon = daoRouteSetupVw.Icon;
				_canEdit = daoRouteSetupVw.CanEdit;
				_canDelete = daoRouteSetupVw.CanDelete;
				_branchCode = daoRouteSetupVw.BranchCode;
				_branchNameAr = daoRouteSetupVw.BranchNameAr;
				_branchNameEn = daoRouteSetupVw.BranchNameEn;
				_routeTypeCode = daoRouteSetupVw.RouteTypeCode;
				_routeTypeNameEn = daoRouteSetupVw.RouteTypeNameEn;
				_routeTypeNameAr = daoRouteSetupVw.RouteTypeNameAr;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///RouteSetupVwCollection
		///This method returns the collection of BORouteSetupVw objects
		///</Summary>
		///<returns>
		///List[BORouteSetupVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORouteSetupVw> RouteSetupVwCollection()
		{
			try
			{
				IList<BORouteSetupVw> boRouteSetupVwCollection = new List<BORouteSetupVw>();
				IList<DAORouteSetupVw> daoRouteSetupVwCollection = DAORouteSetupVw.SelectAll();
			
				foreach(DAORouteSetupVw daoRouteSetupVw in daoRouteSetupVwCollection)
					boRouteSetupVwCollection.Add(new BORouteSetupVw(daoRouteSetupVw));
			
				return boRouteSetupVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RouteSetupVwCollectionCount
		///This method returns the collection count of BORouteSetupVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RouteSetupVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAORouteSetupVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORouteSetupVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORouteSetupVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RouteSetupVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORouteSetupVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRouteSetupVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORouteSetupVw> daoRouteSetupVwCollection = DAORouteSetupVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORouteSetupVw resdaoRouteSetupVw in daoRouteSetupVwCollection)
					boRouteSetupVwCollection.Add((T)(object)new BORouteSetupVw(resdaoRouteSetupVw));
			
				return boRouteSetupVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RouteSetupVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORouteSetupVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORouteSetupVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RouteId
		{
			get
			{
				 return _routeId;
			}
			set
			{
				_routeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RouteTypeId
		{
			get
			{
				 return _routeTypeId;
			}
			set
			{
				_routeTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteCode
		{
			get
			{
				 return _routeCode;
			}
			set
			{
				_routeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteNameEn
		{
			get
			{
				 return _routeNameEn;
			}
			set
			{
				_routeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteNameAr
		{
			get
			{
				 return _routeNameAr;
			}
			set
			{
				_routeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteTypeCode
		{
			get
			{
				 return _routeTypeCode;
			}
			set
			{
				_routeTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteTypeNameEn
		{
			get
			{
				 return _routeTypeNameEn;
			}
			set
			{
				_routeTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteTypeNameAr
		{
			get
			{
				 return _routeTypeNameAr;
			}
			set
			{
				_routeTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
