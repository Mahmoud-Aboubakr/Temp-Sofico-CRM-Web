/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOBranchInvoiceingOrderVw.
	///</Summary>
	public partial class BOBranchInvoiceingOrderVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected string _sortDirection;
		protected string _sortProperty;
		protected Int32? _sortOrder;
		protected Int32? _branchId;
		protected Int32? _sortOrderId;
		protected string _branchNameEn;
		protected string _branchNameAr;
		protected string _branchCode;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOBranchInvoiceingOrderVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOBranchInvoiceingOrderVw
		///</parameters>
		protected internal BOBranchInvoiceingOrderVw(DAOBranchInvoiceingOrderVw daoBranchInvoiceingOrderVw)
		{
			try
			{
				_sortDirection = daoBranchInvoiceingOrderVw.SortDirection;
				_sortProperty = daoBranchInvoiceingOrderVw.SortProperty;
				_sortOrder = daoBranchInvoiceingOrderVw.SortOrder;
				_branchId = daoBranchInvoiceingOrderVw.BranchId;
				_sortOrderId = daoBranchInvoiceingOrderVw.SortOrderId;
				_branchNameEn = daoBranchInvoiceingOrderVw.BranchNameEn;
				_branchNameAr = daoBranchInvoiceingOrderVw.BranchNameAr;
				_branchCode = daoBranchInvoiceingOrderVw.BranchCode;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///BranchInvoiceingOrderVwCollection
		///This method returns the collection of BOBranchInvoiceingOrderVw objects
		///</Summary>
		///<returns>
		///List[BOBranchInvoiceingOrderVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOBranchInvoiceingOrderVw> BranchInvoiceingOrderVwCollection()
		{
			try
			{
				IList<BOBranchInvoiceingOrderVw> boBranchInvoiceingOrderVwCollection = new List<BOBranchInvoiceingOrderVw>();
				IList<DAOBranchInvoiceingOrderVw> daoBranchInvoiceingOrderVwCollection = DAOBranchInvoiceingOrderVw.SelectAll();
			
				foreach(DAOBranchInvoiceingOrderVw daoBranchInvoiceingOrderVw in daoBranchInvoiceingOrderVwCollection)
					boBranchInvoiceingOrderVwCollection.Add(new BOBranchInvoiceingOrderVw(daoBranchInvoiceingOrderVw));
			
				return boBranchInvoiceingOrderVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchInvoiceingOrderVwCollectionCount
		///This method returns the collection count of BOBranchInvoiceingOrderVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 BranchInvoiceingOrderVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOBranchInvoiceingOrderVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOBranchInvoiceingOrderVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOBranchInvoiceingOrderVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchInvoiceingOrderVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOBranchInvoiceingOrderVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boBranchInvoiceingOrderVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOBranchInvoiceingOrderVw> daoBranchInvoiceingOrderVwCollection = DAOBranchInvoiceingOrderVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOBranchInvoiceingOrderVw resdaoBranchInvoiceingOrderVw in daoBranchInvoiceingOrderVwCollection)
					boBranchInvoiceingOrderVwCollection.Add((T)(object)new BOBranchInvoiceingOrderVw(resdaoBranchInvoiceingOrderVw));
			
				return boBranchInvoiceingOrderVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchInvoiceingOrderVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOBranchInvoiceingOrderVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOBranchInvoiceingOrderVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string SortDirection
		{
			get
			{
				 return _sortDirection;
			}
			set
			{
				_sortDirection = value;
				_isDirty = true;
			}
		}
		
		public virtual string SortProperty
		{
			get
			{
				 return _sortProperty;
			}
			set
			{
				_sortProperty = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SortOrder
		{
			get
			{
				 return _sortOrder;
			}
			set
			{
				_sortOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SortOrderId
		{
			get
			{
				 return _sortOrderId;
			}
			set
			{
				_sortOrderId = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
