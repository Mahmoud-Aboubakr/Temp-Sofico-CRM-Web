/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORegister.
	///</Summary>
	public partial class BORegister : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _registerId;
		protected Int32? _registerType;
		protected string _registerName;
		protected string _phone;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected double? _lat;
		protected double? _lng;
		protected string _address;
		protected Int32? _visitDay;
		protected string _fromTime;
		protected string _toTime;
		protected Int32? _registerStatusId;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORegister()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 registerId
		///</parameters>
		public BORegister(Int64 registerId)
		{
			try
			{
				DAORegister daoRegister = DAORegister.SelectOne(registerId);
				_registerId = daoRegister.RegisterId;
				_registerType = daoRegister.RegisterType;
				_registerName = daoRegister.RegisterName;
				_phone = daoRegister.Phone;
				_governerateId = daoRegister.GovernerateId;
				_cityId = daoRegister.CityId;
				_lat = daoRegister.Lat;
				_lng = daoRegister.Lng;
				_address = daoRegister.Address;
				_visitDay = daoRegister.VisitDay;
				_fromTime = daoRegister.FromTime;
				_toTime = daoRegister.ToTime;
				_registerStatusId = daoRegister.RegisterStatusId;
				_eBy = daoRegister.EBy;
				_eDate = daoRegister.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORegister
		///</parameters>
		protected internal BORegister(DAORegister daoRegister)
		{
			try
			{
				_registerId = daoRegister.RegisterId;
				_registerType = daoRegister.RegisterType;
				_registerName = daoRegister.RegisterName;
				_phone = daoRegister.Phone;
				_governerateId = daoRegister.GovernerateId;
				_cityId = daoRegister.CityId;
				_lat = daoRegister.Lat;
				_lng = daoRegister.Lng;
				_address = daoRegister.Address;
				_visitDay = daoRegister.VisitDay;
				_fromTime = daoRegister.FromTime;
				_toTime = daoRegister.ToTime;
				_registerStatusId = daoRegister.RegisterStatusId;
				_eBy = daoRegister.EBy;
				_eDate = daoRegister.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Register record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORegister daoRegister = new DAORegister();
			RegisterDataObject(daoRegister);
			BeginTransaction("savenewBORegister");
			try
			{
				daoRegister.RegisterType = _registerType;
				daoRegister.RegisterName = _registerName;
				daoRegister.Phone = _phone;
				daoRegister.GovernerateId = _governerateId;
				daoRegister.CityId = _cityId;
				daoRegister.Lat = _lat;
				daoRegister.Lng = _lng;
				daoRegister.Address = _address;
				daoRegister.VisitDay = _visitDay;
				daoRegister.FromTime = _fromTime;
				daoRegister.ToTime = _toTime;
				daoRegister.RegisterStatusId = _registerStatusId;
				daoRegister.EBy = _eBy;
				daoRegister.EDate = _eDate;
				daoRegister.Insert();
				CommitTransaction();
				
				_registerId = daoRegister.RegisterId;
				_registerType = daoRegister.RegisterType;
				_registerName = daoRegister.RegisterName;
				_phone = daoRegister.Phone;
				_governerateId = daoRegister.GovernerateId;
				_cityId = daoRegister.CityId;
				_lat = daoRegister.Lat;
				_lng = daoRegister.Lng;
				_address = daoRegister.Address;
				_visitDay = daoRegister.VisitDay;
				_fromTime = daoRegister.FromTime;
				_toTime = daoRegister.ToTime;
				_registerStatusId = daoRegister.RegisterStatusId;
				_eBy = daoRegister.EBy;
				_eDate = daoRegister.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORegister");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Register record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORegister
		///</parameters>
		public virtual void Update()
		{
			DAORegister daoRegister = new DAORegister();
			RegisterDataObject(daoRegister);
			BeginTransaction("updateBORegister");
			try
			{
				daoRegister.RegisterId = _registerId;
				daoRegister.RegisterType = _registerType;
				daoRegister.RegisterName = _registerName;
				daoRegister.Phone = _phone;
				daoRegister.GovernerateId = _governerateId;
				daoRegister.CityId = _cityId;
				daoRegister.Lat = _lat;
				daoRegister.Lng = _lng;
				daoRegister.Address = _address;
				daoRegister.VisitDay = _visitDay;
				daoRegister.FromTime = _fromTime;
				daoRegister.ToTime = _toTime;
				daoRegister.RegisterStatusId = _registerStatusId;
				daoRegister.EBy = _eBy;
				daoRegister.EDate = _eDate;
				daoRegister.Update();
				CommitTransaction();
				
				_registerId = daoRegister.RegisterId;
				_registerType = daoRegister.RegisterType;
				_registerName = daoRegister.RegisterName;
				_phone = daoRegister.Phone;
				_governerateId = daoRegister.GovernerateId;
				_cityId = daoRegister.CityId;
				_lat = daoRegister.Lat;
				_lng = daoRegister.Lng;
				_address = daoRegister.Address;
				_visitDay = daoRegister.VisitDay;
				_fromTime = daoRegister.FromTime;
				_toTime = daoRegister.ToTime;
				_registerStatusId = daoRegister.RegisterStatusId;
				_eBy = daoRegister.EBy;
				_eDate = daoRegister.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORegister");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Register record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORegister daoRegister = new DAORegister();
			RegisterDataObject(daoRegister);
			BeginTransaction("deleteBORegister");
			try
			{
				daoRegister.RegisterId = _registerId;
				daoRegister.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORegister");
				throw;
			}
		}
		
		///<Summary>
		///RegisterCollection
		///This method returns the collection of BORegister objects
		///</Summary>
		///<returns>
		///List[BORegister]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORegister> RegisterCollection()
		{
			try
			{
				IList<BORegister> boRegisterCollection = new List<BORegister>();
				IList<DAORegister> daoRegisterCollection = DAORegister.SelectAll();
			
				foreach(DAORegister daoRegister in daoRegisterCollection)
					boRegisterCollection.Add(new BORegister(daoRegister));
			
				return boRegisterCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RegisterCollectionCount
		///This method returns the collection count of BORegister objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RegisterCollectionCount()
		{
			try
			{
				Int32 objCount = DAORegister.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORegister>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORegister.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RegisterCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORegister objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRegisterCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORegister> daoRegisterCollection = DAORegister.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORegister resdaoRegister in daoRegisterCollection)
					boRegisterCollection.Add((T)(object)new BORegister(resdaoRegister));
			
				return boRegisterCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RegisterCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORegister objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORegister.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? RegisterId
		{
			get
			{
				 return _registerId;
			}
			set
			{
				_registerId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RegisterType
		{
			get
			{
				 return _registerType;
			}
			set
			{
				_registerType = value;
				_isDirty = true;
			}
		}
		
		public virtual string RegisterName
		{
			get
			{
				 return _registerName;
			}
			set
			{
				_registerName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? GovernerateId
		{
			get
			{
				 return _governerateId;
			}
			set
			{
				_governerateId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CityId
		{
			get
			{
				 return _cityId;
			}
			set
			{
				_cityId = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Lat
		{
			get
			{
				 return _lat;
			}
			set
			{
				_lat = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Lng
		{
			get
			{
				 return _lng;
			}
			set
			{
				_lng = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VisitDay
		{
			get
			{
				 return _visitDay;
			}
			set
			{
				_visitDay = value;
				_isDirty = true;
			}
		}
		
		public virtual string FromTime
		{
			get
			{
				 return _fromTime;
			}
			set
			{
				_fromTime = value;
				_isDirty = true;
			}
		}
		
		public virtual string ToTime
		{
			get
			{
				 return _toTime;
			}
			set
			{
				_toTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RegisterStatusId
		{
			get
			{
				 return _registerStatusId;
			}
			set
			{
				_registerStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
