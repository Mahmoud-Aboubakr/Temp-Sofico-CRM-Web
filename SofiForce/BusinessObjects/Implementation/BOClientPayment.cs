/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientPayment.
	///</Summary>
	public partial class BOClientPayment : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _paymentId;
		protected Int32? _clientId;
		protected DateTime? _paymentDate;
		protected Int32? _paymentMethodId;
		protected decimal? _paymentValue;
		protected string _paymentCode;
		protected Int32? _representativeId;
		protected Int32? _bankId;
		protected DateTime? _dueDate;
		protected bool? _isRejected;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientPayment()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 paymentId
		///</parameters>
		public BOClientPayment(Int64 paymentId)
		{
			try
			{
				DAOClientPayment daoClientPayment = DAOClientPayment.SelectOne(paymentId);
				_paymentId = daoClientPayment.PaymentId;
				_clientId = daoClientPayment.ClientId;
				_paymentDate = daoClientPayment.PaymentDate;
				_paymentMethodId = daoClientPayment.PaymentMethodId;
				_paymentValue = daoClientPayment.PaymentValue;
				_paymentCode = daoClientPayment.PaymentCode;
				_representativeId = daoClientPayment.RepresentativeId;
				_bankId = daoClientPayment.BankId;
				_dueDate = daoClientPayment.DueDate;
				_isRejected = daoClientPayment.IsRejected;
				_cBy = daoClientPayment.CBy;
				_cDate = daoClientPayment.CDate;
				_eBy = daoClientPayment.EBy;
				_eDate = daoClientPayment.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientPayment
		///</parameters>
		protected internal BOClientPayment(DAOClientPayment daoClientPayment)
		{
			try
			{
				_paymentId = daoClientPayment.PaymentId;
				_clientId = daoClientPayment.ClientId;
				_paymentDate = daoClientPayment.PaymentDate;
				_paymentMethodId = daoClientPayment.PaymentMethodId;
				_paymentValue = daoClientPayment.PaymentValue;
				_paymentCode = daoClientPayment.PaymentCode;
				_representativeId = daoClientPayment.RepresentativeId;
				_bankId = daoClientPayment.BankId;
				_dueDate = daoClientPayment.DueDate;
				_isRejected = daoClientPayment.IsRejected;
				_cBy = daoClientPayment.CBy;
				_cDate = daoClientPayment.CDate;
				_eBy = daoClientPayment.EBy;
				_eDate = daoClientPayment.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientPayment record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientPayment daoClientPayment = new DAOClientPayment();
			RegisterDataObject(daoClientPayment);
			BeginTransaction("savenewBOClientPayment");
			try
			{
				daoClientPayment.ClientId = _clientId;
				daoClientPayment.PaymentDate = _paymentDate;
				daoClientPayment.PaymentMethodId = _paymentMethodId;
				daoClientPayment.PaymentValue = _paymentValue;
				daoClientPayment.PaymentCode = _paymentCode;
				daoClientPayment.RepresentativeId = _representativeId;
				daoClientPayment.BankId = _bankId;
				daoClientPayment.DueDate = _dueDate;
				daoClientPayment.IsRejected = _isRejected;
				daoClientPayment.CBy = _cBy;
				daoClientPayment.CDate = _cDate;
				daoClientPayment.EBy = _eBy;
				daoClientPayment.EDate = _eDate;
				daoClientPayment.Insert();
				CommitTransaction();
				
				_paymentId = daoClientPayment.PaymentId;
				_clientId = daoClientPayment.ClientId;
				_paymentDate = daoClientPayment.PaymentDate;
				_paymentMethodId = daoClientPayment.PaymentMethodId;
				_paymentValue = daoClientPayment.PaymentValue;
				_paymentCode = daoClientPayment.PaymentCode;
				_representativeId = daoClientPayment.RepresentativeId;
				_bankId = daoClientPayment.BankId;
				_dueDate = daoClientPayment.DueDate;
				_isRejected = daoClientPayment.IsRejected;
				_cBy = daoClientPayment.CBy;
				_cDate = daoClientPayment.CDate;
				_eBy = daoClientPayment.EBy;
				_eDate = daoClientPayment.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientPayment");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientPayment record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientPayment
		///</parameters>
		public virtual void Update()
		{
			DAOClientPayment daoClientPayment = new DAOClientPayment();
			RegisterDataObject(daoClientPayment);
			BeginTransaction("updateBOClientPayment");
			try
			{
				daoClientPayment.PaymentId = _paymentId;
				daoClientPayment.ClientId = _clientId;
				daoClientPayment.PaymentDate = _paymentDate;
				daoClientPayment.PaymentMethodId = _paymentMethodId;
				daoClientPayment.PaymentValue = _paymentValue;
				daoClientPayment.PaymentCode = _paymentCode;
				daoClientPayment.RepresentativeId = _representativeId;
				daoClientPayment.BankId = _bankId;
				daoClientPayment.DueDate = _dueDate;
				daoClientPayment.IsRejected = _isRejected;
				daoClientPayment.CBy = _cBy;
				daoClientPayment.CDate = _cDate;
				daoClientPayment.EBy = _eBy;
				daoClientPayment.EDate = _eDate;
				daoClientPayment.Update();
				CommitTransaction();
				
				_paymentId = daoClientPayment.PaymentId;
				_clientId = daoClientPayment.ClientId;
				_paymentDate = daoClientPayment.PaymentDate;
				_paymentMethodId = daoClientPayment.PaymentMethodId;
				_paymentValue = daoClientPayment.PaymentValue;
				_paymentCode = daoClientPayment.PaymentCode;
				_representativeId = daoClientPayment.RepresentativeId;
				_bankId = daoClientPayment.BankId;
				_dueDate = daoClientPayment.DueDate;
				_isRejected = daoClientPayment.IsRejected;
				_cBy = daoClientPayment.CBy;
				_cDate = daoClientPayment.CDate;
				_eBy = daoClientPayment.EBy;
				_eDate = daoClientPayment.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientPayment");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientPayment record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientPayment daoClientPayment = new DAOClientPayment();
			RegisterDataObject(daoClientPayment);
			BeginTransaction("deleteBOClientPayment");
			try
			{
				daoClientPayment.PaymentId = _paymentId;
				daoClientPayment.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientPayment");
				throw;
			}
		}
		
		///<Summary>
		///ClientPaymentCollection
		///This method returns the collection of BOClientPayment objects
		///</Summary>
		///<returns>
		///List[BOClientPayment]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientPayment> ClientPaymentCollection()
		{
			try
			{
				IList<BOClientPayment> boClientPaymentCollection = new List<BOClientPayment>();
				IList<DAOClientPayment> daoClientPaymentCollection = DAOClientPayment.SelectAll();
			
				foreach(DAOClientPayment daoClientPayment in daoClientPaymentCollection)
					boClientPaymentCollection.Add(new BOClientPayment(daoClientPayment));
			
				return boClientPaymentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPaymentCollectionCount
		///This method returns the collection count of BOClientPayment objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientPaymentCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientPayment.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientPayment>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientPayment.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPaymentCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientPayment objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientPaymentCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientPayment> daoClientPaymentCollection = DAOClientPayment.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientPayment resdaoClientPayment in daoClientPaymentCollection)
					boClientPaymentCollection.Add((T)(object)new BOClientPayment(resdaoClientPayment));
			
				return boClientPaymentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPaymentCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientPayment objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientPayment.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? PaymentId
		{
			get
			{
				 return _paymentId;
			}
			set
			{
				_paymentId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? PaymentDate
		{
			get
			{
				 return _paymentDate;
			}
			set
			{
				_paymentDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PaymentMethodId
		{
			get
			{
				 return _paymentMethodId;
			}
			set
			{
				_paymentMethodId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? PaymentValue
		{
			get
			{
				 return _paymentValue;
			}
			set
			{
				_paymentValue = value;
				_isDirty = true;
			}
		}
		
		public virtual string PaymentCode
		{
			get
			{
				 return _paymentCode;
			}
			set
			{
				_paymentCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BankId
		{
			get
			{
				 return _bankId;
			}
			set
			{
				_bankId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? DueDate
		{
			get
			{
				 return _dueDate;
			}
			set
			{
				_dueDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsRejected
		{
			get
			{
				 return _isRejected;
			}
			set
			{
				_isRejected = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
