/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientComplainTimeline.
	///</Summary>
	public partial class BOClientComplainTimeline : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _timelineId;
		protected Int64? _complainId;
		protected Int32? _complainStatusId;
		protected Int32? _userId;
		protected DateTime? _timelineDate;
		protected string _notes;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientComplainTimeline()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 timelineId
		///</parameters>
		public BOClientComplainTimeline(Int64 timelineId)
		{
			try
			{
				DAOClientComplainTimeline daoClientComplainTimeline = DAOClientComplainTimeline.SelectOne(timelineId);
				_timelineId = daoClientComplainTimeline.TimelineId;
				_complainId = daoClientComplainTimeline.ComplainId;
				_complainStatusId = daoClientComplainTimeline.ComplainStatusId;
				_userId = daoClientComplainTimeline.UserId;
				_timelineDate = daoClientComplainTimeline.TimelineDate;
				_notes = daoClientComplainTimeline.Notes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientComplainTimeline
		///</parameters>
		protected internal BOClientComplainTimeline(DAOClientComplainTimeline daoClientComplainTimeline)
		{
			try
			{
				_timelineId = daoClientComplainTimeline.TimelineId;
				_complainId = daoClientComplainTimeline.ComplainId;
				_complainStatusId = daoClientComplainTimeline.ComplainStatusId;
				_userId = daoClientComplainTimeline.UserId;
				_timelineDate = daoClientComplainTimeline.TimelineDate;
				_notes = daoClientComplainTimeline.Notes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientComplainTimeline record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientComplainTimeline daoClientComplainTimeline = new DAOClientComplainTimeline();
			RegisterDataObject(daoClientComplainTimeline);
			BeginTransaction("savenewBOClientComplainTimeline");
			try
			{
				daoClientComplainTimeline.ComplainId = _complainId;
				daoClientComplainTimeline.ComplainStatusId = _complainStatusId;
				daoClientComplainTimeline.UserId = _userId;
				daoClientComplainTimeline.TimelineDate = _timelineDate;
				daoClientComplainTimeline.Notes = _notes;
				daoClientComplainTimeline.Insert();
				CommitTransaction();
				
				_timelineId = daoClientComplainTimeline.TimelineId;
				_complainId = daoClientComplainTimeline.ComplainId;
				_complainStatusId = daoClientComplainTimeline.ComplainStatusId;
				_userId = daoClientComplainTimeline.UserId;
				_timelineDate = daoClientComplainTimeline.TimelineDate;
				_notes = daoClientComplainTimeline.Notes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientComplainTimeline");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientComplainTimeline record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplainTimeline
		///</parameters>
		public virtual void Update()
		{
			DAOClientComplainTimeline daoClientComplainTimeline = new DAOClientComplainTimeline();
			RegisterDataObject(daoClientComplainTimeline);
			BeginTransaction("updateBOClientComplainTimeline");
			try
			{
				daoClientComplainTimeline.TimelineId = _timelineId;
				daoClientComplainTimeline.ComplainId = _complainId;
				daoClientComplainTimeline.ComplainStatusId = _complainStatusId;
				daoClientComplainTimeline.UserId = _userId;
				daoClientComplainTimeline.TimelineDate = _timelineDate;
				daoClientComplainTimeline.Notes = _notes;
				daoClientComplainTimeline.Update();
				CommitTransaction();
				
				_timelineId = daoClientComplainTimeline.TimelineId;
				_complainId = daoClientComplainTimeline.ComplainId;
				_complainStatusId = daoClientComplainTimeline.ComplainStatusId;
				_userId = daoClientComplainTimeline.UserId;
				_timelineDate = daoClientComplainTimeline.TimelineDate;
				_notes = daoClientComplainTimeline.Notes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientComplainTimeline");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientComplainTimeline record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientComplainTimeline daoClientComplainTimeline = new DAOClientComplainTimeline();
			RegisterDataObject(daoClientComplainTimeline);
			BeginTransaction("deleteBOClientComplainTimeline");
			try
			{
				daoClientComplainTimeline.TimelineId = _timelineId;
				daoClientComplainTimeline.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientComplainTimeline");
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainTimelineCollection
		///This method returns the collection of BOClientComplainTimeline objects
		///</Summary>
		///<returns>
		///List[BOClientComplainTimeline]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientComplainTimeline> ClientComplainTimelineCollection()
		{
			try
			{
				IList<BOClientComplainTimeline> boClientComplainTimelineCollection = new List<BOClientComplainTimeline>();
				IList<DAOClientComplainTimeline> daoClientComplainTimelineCollection = DAOClientComplainTimeline.SelectAll();
			
				foreach(DAOClientComplainTimeline daoClientComplainTimeline in daoClientComplainTimelineCollection)
					boClientComplainTimelineCollection.Add(new BOClientComplainTimeline(daoClientComplainTimeline));
			
				return boClientComplainTimelineCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientComplainTimelineCollectionCount
		///This method returns the collection count of BOClientComplainTimeline objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientComplainTimelineCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientComplainTimeline.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientComplainTimeline>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientComplainTimeline.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientComplainTimelineCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientComplainTimeline objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientComplainTimelineCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientComplainTimeline> daoClientComplainTimelineCollection = DAOClientComplainTimeline.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientComplainTimeline resdaoClientComplainTimeline in daoClientComplainTimelineCollection)
					boClientComplainTimelineCollection.Add((T)(object)new BOClientComplainTimeline(resdaoClientComplainTimeline));
			
				return boClientComplainTimelineCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientComplainTimelineCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientComplainTimeline objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientComplainTimeline.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? TimelineId
		{
			get
			{
				 return _timelineId;
			}
			set
			{
				_timelineId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? ComplainId
		{
			get
			{
				 return _complainId;
			}
			set
			{
				_complainId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ComplainStatusId
		{
			get
			{
				 return _complainStatusId;
			}
			set
			{
				_complainStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TimelineDate
		{
			get
			{
				 return _timelineDate;
			}
			set
			{
				_timelineDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
