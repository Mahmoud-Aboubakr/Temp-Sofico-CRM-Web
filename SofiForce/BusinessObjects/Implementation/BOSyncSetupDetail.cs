/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSyncSetupDetail.
	///</Summary>
	public partial class BOSyncSetupDetail : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _detailId;
		protected Int32? _setupId;
		protected Int32? _userId;
		protected DateTime? _syncDate;
		protected string _payload1;
		protected string _payload2;
		protected string _payload3;
		protected string _payload4;
		protected bool? _isDone;
		protected bool? _inprogress;
		protected string _message;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSyncSetupDetail()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 detailId
		///</parameters>
		public BOSyncSetupDetail(Int64 detailId)
		{
			try
			{
				DAOSyncSetupDetail daoSyncSetupDetail = DAOSyncSetupDetail.SelectOne(detailId);
				_detailId = daoSyncSetupDetail.DetailId;
				_setupId = daoSyncSetupDetail.SetupId;
				_userId = daoSyncSetupDetail.UserId;
				_syncDate = daoSyncSetupDetail.SyncDate;
				_payload1 = daoSyncSetupDetail.Payload1;
				_payload2 = daoSyncSetupDetail.Payload2;
				_payload3 = daoSyncSetupDetail.Payload3;
				_payload4 = daoSyncSetupDetail.Payload4;
				_isDone = daoSyncSetupDetail.IsDone;
				_inprogress = daoSyncSetupDetail.Inprogress;
				_message = daoSyncSetupDetail.Message;
				_cBy = daoSyncSetupDetail.CBy;
				_cDate = daoSyncSetupDetail.CDate;
				_eBy = daoSyncSetupDetail.EBy;
				_eDate = daoSyncSetupDetail.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSyncSetupDetail
		///</parameters>
		protected internal BOSyncSetupDetail(DAOSyncSetupDetail daoSyncSetupDetail)
		{
			try
			{
				_detailId = daoSyncSetupDetail.DetailId;
				_setupId = daoSyncSetupDetail.SetupId;
				_userId = daoSyncSetupDetail.UserId;
				_syncDate = daoSyncSetupDetail.SyncDate;
				_payload1 = daoSyncSetupDetail.Payload1;
				_payload2 = daoSyncSetupDetail.Payload2;
				_payload3 = daoSyncSetupDetail.Payload3;
				_payload4 = daoSyncSetupDetail.Payload4;
				_isDone = daoSyncSetupDetail.IsDone;
				_inprogress = daoSyncSetupDetail.Inprogress;
				_message = daoSyncSetupDetail.Message;
				_cBy = daoSyncSetupDetail.CBy;
				_cDate = daoSyncSetupDetail.CDate;
				_eBy = daoSyncSetupDetail.EBy;
				_eDate = daoSyncSetupDetail.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SyncSetupDetail record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSyncSetupDetail daoSyncSetupDetail = new DAOSyncSetupDetail();
			RegisterDataObject(daoSyncSetupDetail);
			BeginTransaction("savenewBOSyncSetupDetail");
			try
			{
				daoSyncSetupDetail.SetupId = _setupId;
				daoSyncSetupDetail.UserId = _userId;
				daoSyncSetupDetail.SyncDate = _syncDate;
				daoSyncSetupDetail.Payload1 = _payload1;
				daoSyncSetupDetail.Payload2 = _payload2;
				daoSyncSetupDetail.Payload3 = _payload3;
				daoSyncSetupDetail.Payload4 = _payload4;
				daoSyncSetupDetail.IsDone = _isDone;
				daoSyncSetupDetail.Inprogress = _inprogress;
				daoSyncSetupDetail.Message = _message;
				daoSyncSetupDetail.CBy = _cBy;
				daoSyncSetupDetail.CDate = _cDate;
				daoSyncSetupDetail.EBy = _eBy;
				daoSyncSetupDetail.EDate = _eDate;
				daoSyncSetupDetail.Insert();
				CommitTransaction();
				
				_detailId = daoSyncSetupDetail.DetailId;
				_setupId = daoSyncSetupDetail.SetupId;
				_userId = daoSyncSetupDetail.UserId;
				_syncDate = daoSyncSetupDetail.SyncDate;
				_payload1 = daoSyncSetupDetail.Payload1;
				_payload2 = daoSyncSetupDetail.Payload2;
				_payload3 = daoSyncSetupDetail.Payload3;
				_payload4 = daoSyncSetupDetail.Payload4;
				_isDone = daoSyncSetupDetail.IsDone;
				_inprogress = daoSyncSetupDetail.Inprogress;
				_message = daoSyncSetupDetail.Message;
				_cBy = daoSyncSetupDetail.CBy;
				_cDate = daoSyncSetupDetail.CDate;
				_eBy = daoSyncSetupDetail.EBy;
				_eDate = daoSyncSetupDetail.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSyncSetupDetail");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SyncSetupDetail record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSyncSetupDetail
		///</parameters>
		public virtual void Update()
		{
			DAOSyncSetupDetail daoSyncSetupDetail = new DAOSyncSetupDetail();
			RegisterDataObject(daoSyncSetupDetail);
			BeginTransaction("updateBOSyncSetupDetail");
			try
			{
				daoSyncSetupDetail.DetailId = _detailId;
				daoSyncSetupDetail.SetupId = _setupId;
				daoSyncSetupDetail.UserId = _userId;
				daoSyncSetupDetail.SyncDate = _syncDate;
				daoSyncSetupDetail.Payload1 = _payload1;
				daoSyncSetupDetail.Payload2 = _payload2;
				daoSyncSetupDetail.Payload3 = _payload3;
				daoSyncSetupDetail.Payload4 = _payload4;
				daoSyncSetupDetail.IsDone = _isDone;
				daoSyncSetupDetail.Inprogress = _inprogress;
				daoSyncSetupDetail.Message = _message;
				daoSyncSetupDetail.CBy = _cBy;
				daoSyncSetupDetail.CDate = _cDate;
				daoSyncSetupDetail.EBy = _eBy;
				daoSyncSetupDetail.EDate = _eDate;
				daoSyncSetupDetail.Update();
				CommitTransaction();
				
				_detailId = daoSyncSetupDetail.DetailId;
				_setupId = daoSyncSetupDetail.SetupId;
				_userId = daoSyncSetupDetail.UserId;
				_syncDate = daoSyncSetupDetail.SyncDate;
				_payload1 = daoSyncSetupDetail.Payload1;
				_payload2 = daoSyncSetupDetail.Payload2;
				_payload3 = daoSyncSetupDetail.Payload3;
				_payload4 = daoSyncSetupDetail.Payload4;
				_isDone = daoSyncSetupDetail.IsDone;
				_inprogress = daoSyncSetupDetail.Inprogress;
				_message = daoSyncSetupDetail.Message;
				_cBy = daoSyncSetupDetail.CBy;
				_cDate = daoSyncSetupDetail.CDate;
				_eBy = daoSyncSetupDetail.EBy;
				_eDate = daoSyncSetupDetail.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSyncSetupDetail");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SyncSetupDetail record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSyncSetupDetail daoSyncSetupDetail = new DAOSyncSetupDetail();
			RegisterDataObject(daoSyncSetupDetail);
			BeginTransaction("deleteBOSyncSetupDetail");
			try
			{
				daoSyncSetupDetail.DetailId = _detailId;
				daoSyncSetupDetail.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSyncSetupDetail");
				throw;
			}
		}
		
		///<Summary>
		///SyncSetupDetailCollection
		///This method returns the collection of BOSyncSetupDetail objects
		///</Summary>
		///<returns>
		///List[BOSyncSetupDetail]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSyncSetupDetail> SyncSetupDetailCollection()
		{
			try
			{
				IList<BOSyncSetupDetail> boSyncSetupDetailCollection = new List<BOSyncSetupDetail>();
				IList<DAOSyncSetupDetail> daoSyncSetupDetailCollection = DAOSyncSetupDetail.SelectAll();
			
				foreach(DAOSyncSetupDetail daoSyncSetupDetail in daoSyncSetupDetailCollection)
					boSyncSetupDetailCollection.Add(new BOSyncSetupDetail(daoSyncSetupDetail));
			
				return boSyncSetupDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SyncSetupDetailCollectionCount
		///This method returns the collection count of BOSyncSetupDetail objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SyncSetupDetailCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSyncSetupDetail.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSyncSetupDetail>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSyncSetupDetail.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SyncSetupDetailCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSyncSetupDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSyncSetupDetailCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSyncSetupDetail> daoSyncSetupDetailCollection = DAOSyncSetupDetail.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSyncSetupDetail resdaoSyncSetupDetail in daoSyncSetupDetailCollection)
					boSyncSetupDetailCollection.Add((T)(object)new BOSyncSetupDetail(resdaoSyncSetupDetail));
			
				return boSyncSetupDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SyncSetupDetailCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSyncSetupDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSyncSetupDetail.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? DetailId
		{
			get
			{
				 return _detailId;
			}
			set
			{
				_detailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SetupId
		{
			get
			{
				 return _setupId;
			}
			set
			{
				_setupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? SyncDate
		{
			get
			{
				 return _syncDate;
			}
			set
			{
				_syncDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Payload1
		{
			get
			{
				 return _payload1;
			}
			set
			{
				_payload1 = value;
				_isDirty = true;
			}
		}
		
		public virtual string Payload2
		{
			get
			{
				 return _payload2;
			}
			set
			{
				_payload2 = value;
				_isDirty = true;
			}
		}
		
		public virtual string Payload3
		{
			get
			{
				 return _payload3;
			}
			set
			{
				_payload3 = value;
				_isDirty = true;
			}
		}
		
		public virtual string Payload4
		{
			get
			{
				 return _payload4;
			}
			set
			{
				_payload4 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDone
		{
			get
			{
				 return _isDone;
			}
			set
			{
				_isDone = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Inprogress
		{
			get
			{
				 return _inprogress;
			}
			set
			{
				_inprogress = value;
				_isDirty = true;
			}
		}
		
		public virtual string Message
		{
			get
			{
				 return _message;
			}
			set
			{
				_message = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
