/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppUserWish.
	///</Summary>
	public partial class BOAppUserWish : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _wishId;
		protected Int32? _userId;
		protected Int32? _itemId;
		protected DateTime? _wishDate;
		protected DateTime? _wishTime;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppUserWish()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 wishId
		///</parameters>
		public BOAppUserWish(Int64 wishId)
		{
			try
			{
				DAOAppUserWish daoAppUserWish = DAOAppUserWish.SelectOne(wishId);
				_wishId = daoAppUserWish.WishId;
				_userId = daoAppUserWish.UserId;
				_itemId = daoAppUserWish.ItemId;
				_wishDate = daoAppUserWish.WishDate;
				_wishTime = daoAppUserWish.WishTime;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppUserWish
		///</parameters>
		protected internal BOAppUserWish(DAOAppUserWish daoAppUserWish)
		{
			try
			{
				_wishId = daoAppUserWish.WishId;
				_userId = daoAppUserWish.UserId;
				_itemId = daoAppUserWish.ItemId;
				_wishDate = daoAppUserWish.WishDate;
				_wishTime = daoAppUserWish.WishTime;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppUserWish record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppUserWish daoAppUserWish = new DAOAppUserWish();
			RegisterDataObject(daoAppUserWish);
			BeginTransaction("savenewBOAppUserWish");
			try
			{
				daoAppUserWish.UserId = _userId;
				daoAppUserWish.ItemId = _itemId;
				daoAppUserWish.WishDate = _wishDate;
				daoAppUserWish.WishTime = _wishTime;
				daoAppUserWish.Insert();
				CommitTransaction();
				
				_wishId = daoAppUserWish.WishId;
				_userId = daoAppUserWish.UserId;
				_itemId = daoAppUserWish.ItemId;
				_wishDate = daoAppUserWish.WishDate;
				_wishTime = daoAppUserWish.WishTime;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppUserWish");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppUserWish record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserWish
		///</parameters>
		public virtual void Update()
		{
			DAOAppUserWish daoAppUserWish = new DAOAppUserWish();
			RegisterDataObject(daoAppUserWish);
			BeginTransaction("updateBOAppUserWish");
			try
			{
				daoAppUserWish.WishId = _wishId;
				daoAppUserWish.UserId = _userId;
				daoAppUserWish.ItemId = _itemId;
				daoAppUserWish.WishDate = _wishDate;
				daoAppUserWish.WishTime = _wishTime;
				daoAppUserWish.Update();
				CommitTransaction();
				
				_wishId = daoAppUserWish.WishId;
				_userId = daoAppUserWish.UserId;
				_itemId = daoAppUserWish.ItemId;
				_wishDate = daoAppUserWish.WishDate;
				_wishTime = daoAppUserWish.WishTime;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppUserWish");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppUserWish record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppUserWish daoAppUserWish = new DAOAppUserWish();
			RegisterDataObject(daoAppUserWish);
			BeginTransaction("deleteBOAppUserWish");
			try
			{
				daoAppUserWish.WishId = _wishId;
				daoAppUserWish.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppUserWish");
				throw;
			}
		}
		
		///<Summary>
		///AppUserWishCollection
		///This method returns the collection of BOAppUserWish objects
		///</Summary>
		///<returns>
		///List[BOAppUserWish]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppUserWish> AppUserWishCollection()
		{
			try
			{
				IList<BOAppUserWish> boAppUserWishCollection = new List<BOAppUserWish>();
				IList<DAOAppUserWish> daoAppUserWishCollection = DAOAppUserWish.SelectAll();
			
				foreach(DAOAppUserWish daoAppUserWish in daoAppUserWishCollection)
					boAppUserWishCollection.Add(new BOAppUserWish(daoAppUserWish));
			
				return boAppUserWishCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserWishCollectionCount
		///This method returns the collection count of BOAppUserWish objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppUserWishCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppUserWish.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppUserWish>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppUserWish.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserWishCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppUserWish objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppUserWishCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppUserWish> daoAppUserWishCollection = DAOAppUserWish.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppUserWish resdaoAppUserWish in daoAppUserWishCollection)
					boAppUserWishCollection.Add((T)(object)new BOAppUserWish(resdaoAppUserWish));
			
				return boAppUserWishCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserWishCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppUserWish objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppUserWish.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? WishId
		{
			get
			{
				 return _wishId;
			}
			set
			{
				_wishId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ItemId
		{
			get
			{
				 return _itemId;
			}
			set
			{
				_itemId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? WishDate
		{
			get
			{
				 return _wishDate;
			}
			set
			{
				_wishDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? WishTime
		{
			get
			{
				 return _wishTime;
			}
			set
			{
				_wishTime = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
