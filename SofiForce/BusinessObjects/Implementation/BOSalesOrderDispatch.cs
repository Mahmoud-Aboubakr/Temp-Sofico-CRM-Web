/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderDispatch.
	///</Summary>
	public partial class BOSalesOrderDispatch : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _dispatchId;
		protected Int64? _salesId;
		protected string _dispatchCode;
		protected DateTime? _dispatchDate;
		protected DateTime? _dispatchTime;
		protected DateTime? _shiftDate;
		protected Int32? _distributorId;
		protected Int32? _carId;
		protected Int32? _driverId;
		protected bool? _inZone;
		protected decimal? _distance;
		protected double? _latitude;
		protected double? _longitude;
		protected Int32? _feedbackId;
		protected string _notes;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected Int32? _rejectReasonId;
		protected string _rejectReasonNotes;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderDispatch()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 dispatchId
		///</parameters>
		public BOSalesOrderDispatch(Int64 dispatchId)
		{
			try
			{
				DAOSalesOrderDispatch daoSalesOrderDispatch = DAOSalesOrderDispatch.SelectOne(dispatchId);
				_dispatchId = daoSalesOrderDispatch.DispatchId;
				_salesId = daoSalesOrderDispatch.SalesId;
				_dispatchCode = daoSalesOrderDispatch.DispatchCode;
				_dispatchDate = daoSalesOrderDispatch.DispatchDate;
				_dispatchTime = daoSalesOrderDispatch.DispatchTime;
				_shiftDate = daoSalesOrderDispatch.ShiftDate;
				_distributorId = daoSalesOrderDispatch.DistributorId;
				_carId = daoSalesOrderDispatch.CarId;
				_driverId = daoSalesOrderDispatch.DriverId;
				_inZone = daoSalesOrderDispatch.InZone;
				_distance = daoSalesOrderDispatch.Distance;
				_latitude = daoSalesOrderDispatch.Latitude;
				_longitude = daoSalesOrderDispatch.Longitude;
				_feedbackId = daoSalesOrderDispatch.FeedbackId;
				_notes = daoSalesOrderDispatch.Notes;
				_eBy = daoSalesOrderDispatch.EBy;
				_eDate = daoSalesOrderDispatch.EDate;
				_rejectReasonId = daoSalesOrderDispatch.RejectReasonId;
				_rejectReasonNotes = daoSalesOrderDispatch.RejectReasonNotes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderDispatch
		///</parameters>
		protected internal BOSalesOrderDispatch(DAOSalesOrderDispatch daoSalesOrderDispatch)
		{
			try
			{
				_dispatchId = daoSalesOrderDispatch.DispatchId;
				_salesId = daoSalesOrderDispatch.SalesId;
				_dispatchCode = daoSalesOrderDispatch.DispatchCode;
				_dispatchDate = daoSalesOrderDispatch.DispatchDate;
				_dispatchTime = daoSalesOrderDispatch.DispatchTime;
				_shiftDate = daoSalesOrderDispatch.ShiftDate;
				_distributorId = daoSalesOrderDispatch.DistributorId;
				_carId = daoSalesOrderDispatch.CarId;
				_driverId = daoSalesOrderDispatch.DriverId;
				_inZone = daoSalesOrderDispatch.InZone;
				_distance = daoSalesOrderDispatch.Distance;
				_latitude = daoSalesOrderDispatch.Latitude;
				_longitude = daoSalesOrderDispatch.Longitude;
				_feedbackId = daoSalesOrderDispatch.FeedbackId;
				_notes = daoSalesOrderDispatch.Notes;
				_eBy = daoSalesOrderDispatch.EBy;
				_eDate = daoSalesOrderDispatch.EDate;
				_rejectReasonId = daoSalesOrderDispatch.RejectReasonId;
				_rejectReasonNotes = daoSalesOrderDispatch.RejectReasonNotes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesOrderDispatch record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesOrderDispatch daoSalesOrderDispatch = new DAOSalesOrderDispatch();
			RegisterDataObject(daoSalesOrderDispatch);
			BeginTransaction("savenewBOSalesOrderDispatch");
			try
			{
				daoSalesOrderDispatch.SalesId = _salesId;
				daoSalesOrderDispatch.DispatchCode = _dispatchCode;
				daoSalesOrderDispatch.DispatchDate = _dispatchDate;
				daoSalesOrderDispatch.DispatchTime = _dispatchTime;
				daoSalesOrderDispatch.ShiftDate = _shiftDate;
				daoSalesOrderDispatch.DistributorId = _distributorId;
				daoSalesOrderDispatch.CarId = _carId;
				daoSalesOrderDispatch.DriverId = _driverId;
				daoSalesOrderDispatch.InZone = _inZone;
				daoSalesOrderDispatch.Distance = _distance;
				daoSalesOrderDispatch.Latitude = _latitude;
				daoSalesOrderDispatch.Longitude = _longitude;
				daoSalesOrderDispatch.FeedbackId = _feedbackId;
				daoSalesOrderDispatch.Notes = _notes;
				daoSalesOrderDispatch.EBy = _eBy;
				daoSalesOrderDispatch.EDate = _eDate;
				daoSalesOrderDispatch.RejectReasonId = _rejectReasonId;
				daoSalesOrderDispatch.RejectReasonNotes = _rejectReasonNotes;
				daoSalesOrderDispatch.Insert();
				CommitTransaction();
				
				_dispatchId = daoSalesOrderDispatch.DispatchId;
				_salesId = daoSalesOrderDispatch.SalesId;
				_dispatchCode = daoSalesOrderDispatch.DispatchCode;
				_dispatchDate = daoSalesOrderDispatch.DispatchDate;
				_dispatchTime = daoSalesOrderDispatch.DispatchTime;
				_shiftDate = daoSalesOrderDispatch.ShiftDate;
				_distributorId = daoSalesOrderDispatch.DistributorId;
				_carId = daoSalesOrderDispatch.CarId;
				_driverId = daoSalesOrderDispatch.DriverId;
				_inZone = daoSalesOrderDispatch.InZone;
				_distance = daoSalesOrderDispatch.Distance;
				_latitude = daoSalesOrderDispatch.Latitude;
				_longitude = daoSalesOrderDispatch.Longitude;
				_feedbackId = daoSalesOrderDispatch.FeedbackId;
				_notes = daoSalesOrderDispatch.Notes;
				_eBy = daoSalesOrderDispatch.EBy;
				_eDate = daoSalesOrderDispatch.EDate;
				_rejectReasonId = daoSalesOrderDispatch.RejectReasonId;
				_rejectReasonNotes = daoSalesOrderDispatch.RejectReasonNotes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesOrderDispatch");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesOrderDispatch record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderDispatch
		///</parameters>
		public virtual void Update()
		{
			DAOSalesOrderDispatch daoSalesOrderDispatch = new DAOSalesOrderDispatch();
			RegisterDataObject(daoSalesOrderDispatch);
			BeginTransaction("updateBOSalesOrderDispatch");
			try
			{
				daoSalesOrderDispatch.DispatchId = _dispatchId;
				daoSalesOrderDispatch.SalesId = _salesId;
				daoSalesOrderDispatch.DispatchCode = _dispatchCode;
				daoSalesOrderDispatch.DispatchDate = _dispatchDate;
				daoSalesOrderDispatch.DispatchTime = _dispatchTime;
				daoSalesOrderDispatch.ShiftDate = _shiftDate;
				daoSalesOrderDispatch.DistributorId = _distributorId;
				daoSalesOrderDispatch.CarId = _carId;
				daoSalesOrderDispatch.DriverId = _driverId;
				daoSalesOrderDispatch.InZone = _inZone;
				daoSalesOrderDispatch.Distance = _distance;
				daoSalesOrderDispatch.Latitude = _latitude;
				daoSalesOrderDispatch.Longitude = _longitude;
				daoSalesOrderDispatch.FeedbackId = _feedbackId;
				daoSalesOrderDispatch.Notes = _notes;
				daoSalesOrderDispatch.EBy = _eBy;
				daoSalesOrderDispatch.EDate = _eDate;
				daoSalesOrderDispatch.RejectReasonId = _rejectReasonId;
				daoSalesOrderDispatch.RejectReasonNotes = _rejectReasonNotes;
				daoSalesOrderDispatch.Update();
				CommitTransaction();
				
				_dispatchId = daoSalesOrderDispatch.DispatchId;
				_salesId = daoSalesOrderDispatch.SalesId;
				_dispatchCode = daoSalesOrderDispatch.DispatchCode;
				_dispatchDate = daoSalesOrderDispatch.DispatchDate;
				_dispatchTime = daoSalesOrderDispatch.DispatchTime;
				_shiftDate = daoSalesOrderDispatch.ShiftDate;
				_distributorId = daoSalesOrderDispatch.DistributorId;
				_carId = daoSalesOrderDispatch.CarId;
				_driverId = daoSalesOrderDispatch.DriverId;
				_inZone = daoSalesOrderDispatch.InZone;
				_distance = daoSalesOrderDispatch.Distance;
				_latitude = daoSalesOrderDispatch.Latitude;
				_longitude = daoSalesOrderDispatch.Longitude;
				_feedbackId = daoSalesOrderDispatch.FeedbackId;
				_notes = daoSalesOrderDispatch.Notes;
				_eBy = daoSalesOrderDispatch.EBy;
				_eDate = daoSalesOrderDispatch.EDate;
				_rejectReasonId = daoSalesOrderDispatch.RejectReasonId;
				_rejectReasonNotes = daoSalesOrderDispatch.RejectReasonNotes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesOrderDispatch");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesOrderDispatch record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesOrderDispatch daoSalesOrderDispatch = new DAOSalesOrderDispatch();
			RegisterDataObject(daoSalesOrderDispatch);
			BeginTransaction("deleteBOSalesOrderDispatch");
			try
			{
				daoSalesOrderDispatch.DispatchId = _dispatchId;
				daoSalesOrderDispatch.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesOrderDispatch");
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderDispatchCollection
		///This method returns the collection of BOSalesOrderDispatch objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderDispatch]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderDispatch> SalesOrderDispatchCollection()
		{
			try
			{
				IList<BOSalesOrderDispatch> boSalesOrderDispatchCollection = new List<BOSalesOrderDispatch>();
				IList<DAOSalesOrderDispatch> daoSalesOrderDispatchCollection = DAOSalesOrderDispatch.SelectAll();
			
				foreach(DAOSalesOrderDispatch daoSalesOrderDispatch in daoSalesOrderDispatchCollection)
					boSalesOrderDispatchCollection.Add(new BOSalesOrderDispatch(daoSalesOrderDispatch));
			
				return boSalesOrderDispatchCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderDispatchCollectionCount
		///This method returns the collection count of BOSalesOrderDispatch objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderDispatchCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderDispatch.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderDispatch>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderDispatch.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderDispatchCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderDispatch objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderDispatchCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderDispatch> daoSalesOrderDispatchCollection = DAOSalesOrderDispatch.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderDispatch resdaoSalesOrderDispatch in daoSalesOrderDispatchCollection)
					boSalesOrderDispatchCollection.Add((T)(object)new BOSalesOrderDispatch(resdaoSalesOrderDispatch));
			
				return boSalesOrderDispatchCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderDispatchCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderDispatch objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderDispatch.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? DispatchId
		{
			get
			{
				 return _dispatchId;
			}
			set
			{
				_dispatchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DispatchCode
		{
			get
			{
				 return _dispatchCode;
			}
			set
			{
				_dispatchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? DispatchDate
		{
			get
			{
				 return _dispatchDate;
			}
			set
			{
				_dispatchDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? DispatchTime
		{
			get
			{
				 return _dispatchTime;
			}
			set
			{
				_dispatchTime = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ShiftDate
		{
			get
			{
				 return _shiftDate;
			}
			set
			{
				_shiftDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DistributorId
		{
			get
			{
				 return _distributorId;
			}
			set
			{
				_distributorId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CarId
		{
			get
			{
				 return _carId;
			}
			set
			{
				_carId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DriverId
		{
			get
			{
				 return _driverId;
			}
			set
			{
				_driverId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? InZone
		{
			get
			{
				 return _inZone;
			}
			set
			{
				_inZone = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Distance
		{
			get
			{
				 return _distance;
			}
			set
			{
				_distance = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FeedbackId
		{
			get
			{
				 return _feedbackId;
			}
			set
			{
				_feedbackId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RejectReasonId
		{
			get
			{
				 return _rejectReasonId;
			}
			set
			{
				_rejectReasonId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RejectReasonNotes
		{
			get
			{
				 return _rejectReasonNotes;
			}
			set
			{
				_rejectReasonNotes = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
