/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOBranchInvoiceingSetup.
	///</Summary>
	public partial class BOBranchInvoiceingSetup : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _setupId;
		protected Int32? _branchId;
		protected bool? _isEnabled;
		protected Int32? _serviceWorkerId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOBranchInvoiceingSetup()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 setupId
		///</parameters>
		public BOBranchInvoiceingSetup(Int32 setupId)
		{
			try
			{
				DAOBranchInvoiceingSetup daoBranchInvoiceingSetup = DAOBranchInvoiceingSetup.SelectOne(setupId);
				_setupId = daoBranchInvoiceingSetup.SetupId;
				_branchId = daoBranchInvoiceingSetup.BranchId;
				_isEnabled = daoBranchInvoiceingSetup.IsEnabled;
				_serviceWorkerId = daoBranchInvoiceingSetup.ServiceWorkerId;
				_cBy = daoBranchInvoiceingSetup.CBy;
				_cDate = daoBranchInvoiceingSetup.CDate;
				_eBy = daoBranchInvoiceingSetup.EBy;
				_eDate = daoBranchInvoiceingSetup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOBranchInvoiceingSetup
		///</parameters>
		protected internal BOBranchInvoiceingSetup(DAOBranchInvoiceingSetup daoBranchInvoiceingSetup)
		{
			try
			{
				_setupId = daoBranchInvoiceingSetup.SetupId;
				_branchId = daoBranchInvoiceingSetup.BranchId;
				_isEnabled = daoBranchInvoiceingSetup.IsEnabled;
				_serviceWorkerId = daoBranchInvoiceingSetup.ServiceWorkerId;
				_cBy = daoBranchInvoiceingSetup.CBy;
				_cDate = daoBranchInvoiceingSetup.CDate;
				_eBy = daoBranchInvoiceingSetup.EBy;
				_eDate = daoBranchInvoiceingSetup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new BranchInvoiceingSetup record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOBranchInvoiceingSetup daoBranchInvoiceingSetup = new DAOBranchInvoiceingSetup();
			RegisterDataObject(daoBranchInvoiceingSetup);
			BeginTransaction("savenewBOBranchInvoiceingSetup");
			try
			{
				daoBranchInvoiceingSetup.BranchId = _branchId;
				daoBranchInvoiceingSetup.IsEnabled = _isEnabled;
				daoBranchInvoiceingSetup.ServiceWorkerId = _serviceWorkerId;
				daoBranchInvoiceingSetup.CBy = _cBy;
				daoBranchInvoiceingSetup.CDate = _cDate;
				daoBranchInvoiceingSetup.EBy = _eBy;
				daoBranchInvoiceingSetup.EDate = _eDate;
				daoBranchInvoiceingSetup.Insert();
				CommitTransaction();
				
				_setupId = daoBranchInvoiceingSetup.SetupId;
				_branchId = daoBranchInvoiceingSetup.BranchId;
				_isEnabled = daoBranchInvoiceingSetup.IsEnabled;
				_serviceWorkerId = daoBranchInvoiceingSetup.ServiceWorkerId;
				_cBy = daoBranchInvoiceingSetup.CBy;
				_cDate = daoBranchInvoiceingSetup.CDate;
				_eBy = daoBranchInvoiceingSetup.EBy;
				_eDate = daoBranchInvoiceingSetup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOBranchInvoiceingSetup");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one BranchInvoiceingSetup record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOBranchInvoiceingSetup
		///</parameters>
		public virtual void Update()
		{
			DAOBranchInvoiceingSetup daoBranchInvoiceingSetup = new DAOBranchInvoiceingSetup();
			RegisterDataObject(daoBranchInvoiceingSetup);
			BeginTransaction("updateBOBranchInvoiceingSetup");
			try
			{
				daoBranchInvoiceingSetup.SetupId = _setupId;
				daoBranchInvoiceingSetup.BranchId = _branchId;
				daoBranchInvoiceingSetup.IsEnabled = _isEnabled;
				daoBranchInvoiceingSetup.ServiceWorkerId = _serviceWorkerId;
				daoBranchInvoiceingSetup.CBy = _cBy;
				daoBranchInvoiceingSetup.CDate = _cDate;
				daoBranchInvoiceingSetup.EBy = _eBy;
				daoBranchInvoiceingSetup.EDate = _eDate;
				daoBranchInvoiceingSetup.Update();
				CommitTransaction();
				
				_setupId = daoBranchInvoiceingSetup.SetupId;
				_branchId = daoBranchInvoiceingSetup.BranchId;
				_isEnabled = daoBranchInvoiceingSetup.IsEnabled;
				_serviceWorkerId = daoBranchInvoiceingSetup.ServiceWorkerId;
				_cBy = daoBranchInvoiceingSetup.CBy;
				_cDate = daoBranchInvoiceingSetup.CDate;
				_eBy = daoBranchInvoiceingSetup.EBy;
				_eDate = daoBranchInvoiceingSetup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOBranchInvoiceingSetup");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one BranchInvoiceingSetup record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOBranchInvoiceingSetup daoBranchInvoiceingSetup = new DAOBranchInvoiceingSetup();
			RegisterDataObject(daoBranchInvoiceingSetup);
			BeginTransaction("deleteBOBranchInvoiceingSetup");
			try
			{
				daoBranchInvoiceingSetup.SetupId = _setupId;
				daoBranchInvoiceingSetup.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOBranchInvoiceingSetup");
				throw;
			}
		}
		
		///<Summary>
		///BranchInvoiceingSetupCollection
		///This method returns the collection of BOBranchInvoiceingSetup objects
		///</Summary>
		///<returns>
		///List[BOBranchInvoiceingSetup]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOBranchInvoiceingSetup> BranchInvoiceingSetupCollection()
		{
			try
			{
				IList<BOBranchInvoiceingSetup> boBranchInvoiceingSetupCollection = new List<BOBranchInvoiceingSetup>();
				IList<DAOBranchInvoiceingSetup> daoBranchInvoiceingSetupCollection = DAOBranchInvoiceingSetup.SelectAll();
			
				foreach(DAOBranchInvoiceingSetup daoBranchInvoiceingSetup in daoBranchInvoiceingSetupCollection)
					boBranchInvoiceingSetupCollection.Add(new BOBranchInvoiceingSetup(daoBranchInvoiceingSetup));
			
				return boBranchInvoiceingSetupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchInvoiceingSetupCollectionCount
		///This method returns the collection count of BOBranchInvoiceingSetup objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 BranchInvoiceingSetupCollectionCount()
		{
			try
			{
				Int32 objCount = DAOBranchInvoiceingSetup.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOBranchInvoiceingSetup>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOBranchInvoiceingSetup.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchInvoiceingSetupCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOBranchInvoiceingSetup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boBranchInvoiceingSetupCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOBranchInvoiceingSetup> daoBranchInvoiceingSetupCollection = DAOBranchInvoiceingSetup.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOBranchInvoiceingSetup resdaoBranchInvoiceingSetup in daoBranchInvoiceingSetupCollection)
					boBranchInvoiceingSetupCollection.Add((T)(object)new BOBranchInvoiceingSetup(resdaoBranchInvoiceingSetup));
			
				return boBranchInvoiceingSetupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BranchInvoiceingSetupCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOBranchInvoiceingSetup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOBranchInvoiceingSetup.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SetupId
		{
			get
			{
				 return _setupId;
			}
			set
			{
				_setupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsEnabled
		{
			get
			{
				 return _isEnabled;
			}
			set
			{
				_isEnabled = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ServiceWorkerId
		{
			get
			{
				 return _serviceWorkerId;
			}
			set
			{
				_serviceWorkerId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
