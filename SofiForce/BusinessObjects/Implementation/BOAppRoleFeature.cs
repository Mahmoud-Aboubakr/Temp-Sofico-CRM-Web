/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppRoleFeature.
	///It maintains a collection of BOAppRoleFeaturePermission objects.
	///</Summary>
	public partial class BOAppRoleFeature : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _appRoleFeatueId;
		protected Int32? _appRoleId;
		protected Int32? _featueId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppRoleFeaturePermission> _boAppRoleFeaturePermissionCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppRoleFeature()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 appRoleFeatueId
		///</parameters>
		public BOAppRoleFeature(Int32 appRoleFeatueId)
		{
			try
			{
				DAOAppRoleFeature daoAppRoleFeature = DAOAppRoleFeature.SelectOne(appRoleFeatueId);
				_appRoleFeatueId = daoAppRoleFeature.AppRoleFeatueId;
				_appRoleId = daoAppRoleFeature.AppRoleId;
				_featueId = daoAppRoleFeature.FeatueId;
				_cBy = daoAppRoleFeature.CBy;
				_cDate = daoAppRoleFeature.CDate;
				_eBy = daoAppRoleFeature.EBy;
				_eDate = daoAppRoleFeature.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppRoleFeature
		///</parameters>
		protected internal BOAppRoleFeature(DAOAppRoleFeature daoAppRoleFeature)
		{
			try
			{
				_appRoleFeatueId = daoAppRoleFeature.AppRoleFeatueId;
				_appRoleId = daoAppRoleFeature.AppRoleId;
				_featueId = daoAppRoleFeature.FeatueId;
				_cBy = daoAppRoleFeature.CBy;
				_cDate = daoAppRoleFeature.CDate;
				_eBy = daoAppRoleFeature.EBy;
				_eDate = daoAppRoleFeature.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppRoleFeature record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppRoleFeature daoAppRoleFeature = new DAOAppRoleFeature();
			RegisterDataObject(daoAppRoleFeature);
			BeginTransaction("savenewBOAppRoleFeature");
			try
			{
				daoAppRoleFeature.AppRoleId = _appRoleId;
				daoAppRoleFeature.FeatueId = _featueId;
				daoAppRoleFeature.CBy = _cBy;
				daoAppRoleFeature.CDate = _cDate;
				daoAppRoleFeature.EBy = _eBy;
				daoAppRoleFeature.EDate = _eDate;
				daoAppRoleFeature.Insert();
				CommitTransaction();
				
				_appRoleFeatueId = daoAppRoleFeature.AppRoleFeatueId;
				_appRoleId = daoAppRoleFeature.AppRoleId;
				_featueId = daoAppRoleFeature.FeatueId;
				_cBy = daoAppRoleFeature.CBy;
				_cDate = daoAppRoleFeature.CDate;
				_eBy = daoAppRoleFeature.EBy;
				_eDate = daoAppRoleFeature.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppRoleFeature");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppRoleFeature record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppRoleFeature
		///</parameters>
		public virtual void Update()
		{
			DAOAppRoleFeature daoAppRoleFeature = new DAOAppRoleFeature();
			RegisterDataObject(daoAppRoleFeature);
			BeginTransaction("updateBOAppRoleFeature");
			try
			{
				daoAppRoleFeature.AppRoleFeatueId = _appRoleFeatueId;
				daoAppRoleFeature.AppRoleId = _appRoleId;
				daoAppRoleFeature.FeatueId = _featueId;
				daoAppRoleFeature.CBy = _cBy;
				daoAppRoleFeature.CDate = _cDate;
				daoAppRoleFeature.EBy = _eBy;
				daoAppRoleFeature.EDate = _eDate;
				daoAppRoleFeature.Update();
				CommitTransaction();
				
				_appRoleFeatueId = daoAppRoleFeature.AppRoleFeatueId;
				_appRoleId = daoAppRoleFeature.AppRoleId;
				_featueId = daoAppRoleFeature.FeatueId;
				_cBy = daoAppRoleFeature.CBy;
				_cDate = daoAppRoleFeature.CDate;
				_eBy = daoAppRoleFeature.EBy;
				_eDate = daoAppRoleFeature.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppRoleFeature");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppRoleFeature record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppRoleFeature daoAppRoleFeature = new DAOAppRoleFeature();
			RegisterDataObject(daoAppRoleFeature);
			BeginTransaction("deleteBOAppRoleFeature");
			try
			{
				daoAppRoleFeature.AppRoleFeatueId = _appRoleFeatueId;
				daoAppRoleFeature.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppRoleFeature");
				throw;
			}
		}
		
		///<Summary>
		///AppRoleFeatureCollection
		///This method returns the collection of BOAppRoleFeature objects
		///</Summary>
		///<returns>
		///List[BOAppRoleFeature]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppRoleFeature> AppRoleFeatureCollection()
		{
			try
			{
				IList<BOAppRoleFeature> boAppRoleFeatureCollection = new List<BOAppRoleFeature>();
				IList<DAOAppRoleFeature> daoAppRoleFeatureCollection = DAOAppRoleFeature.SelectAll();
			
				foreach(DAOAppRoleFeature daoAppRoleFeature in daoAppRoleFeatureCollection)
					boAppRoleFeatureCollection.Add(new BOAppRoleFeature(daoAppRoleFeature));
			
				return boAppRoleFeatureCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleFeatureCollectionCount
		///This method returns the collection count of BOAppRoleFeature objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppRoleFeatureCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppRoleFeature.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppRoleFeaturePermissionCollection
		///This method returns its collection of BOAppRoleFeaturePermission objects
		///</Summary>
		///<returns>
		///IList[BOAppRoleFeaturePermission]
		///</returns>
		///<parameters>
		///BOAppRoleFeature
		///</parameters>
		public virtual IList<BOAppRoleFeaturePermission> AppRoleFeaturePermissionCollection()
		{
			try
			{
				if(_boAppRoleFeaturePermissionCollection == null)
					LoadAppRoleFeaturePermissionCollection();
				
				return _boAppRoleFeaturePermissionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppRoleFeature>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppRoleFeature.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleFeatureCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppRoleFeature objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppRoleFeatureCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppRoleFeature> daoAppRoleFeatureCollection = DAOAppRoleFeature.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppRoleFeature resdaoAppRoleFeature in daoAppRoleFeatureCollection)
					boAppRoleFeatureCollection.Add((T)(object)new BOAppRoleFeature(resdaoAppRoleFeature));
			
				return boAppRoleFeatureCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleFeatureCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppRoleFeature objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppRoleFeature.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppRoleFeaturePermissionCollection
		///This method loads the internal collection of BOAppRoleFeaturePermission objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppRoleFeaturePermissionCollection()
		{
			try
			{
				_boAppRoleFeaturePermissionCollection = new List<BOAppRoleFeaturePermission>();
				IList<DAOAppRoleFeaturePermission> daoAppRoleFeaturePermissionCollection = DAOAppRoleFeaturePermission.SelectAllByAppRoleFeatueId(_appRoleFeatueId.Value);
				
				foreach(DAOAppRoleFeaturePermission daoAppRoleFeaturePermission in daoAppRoleFeaturePermissionCollection)
					_boAppRoleFeaturePermissionCollection.Add(new BOAppRoleFeaturePermission(daoAppRoleFeaturePermission));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppRoleFeaturePermission
		///This method persists a BOAppRoleFeaturePermission object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppRoleFeaturePermission
		///</parameters>
		public virtual void AddAppRoleFeaturePermission(BOAppRoleFeaturePermission boAppRoleFeaturePermission)
		{
			DAOAppRoleFeaturePermission daoAppRoleFeaturePermission = new DAOAppRoleFeaturePermission();
			RegisterDataObject(daoAppRoleFeaturePermission);
			BeginTransaction("addAppRoleFeaturePermission");
			try
			{
				daoAppRoleFeaturePermission.RolePermissionId = boAppRoleFeaturePermission.RolePermissionId;
				daoAppRoleFeaturePermission.FeaturePermissionId = boAppRoleFeaturePermission.FeaturePermissionId;
				daoAppRoleFeaturePermission.CBy = boAppRoleFeaturePermission.CBy;
				daoAppRoleFeaturePermission.CDate = boAppRoleFeaturePermission.CDate;
				daoAppRoleFeaturePermission.EBy = boAppRoleFeaturePermission.EBy;
				daoAppRoleFeaturePermission.EDate = boAppRoleFeaturePermission.EDate;
				daoAppRoleFeaturePermission.AppRoleFeatueId = _appRoleFeatueId.Value;
				daoAppRoleFeaturePermission.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppRoleFeaturePermission = new BOAppRoleFeaturePermission(daoAppRoleFeaturePermission);
				if(_boAppRoleFeaturePermissionCollection != null)
					_boAppRoleFeaturePermissionCollection.Add(boAppRoleFeaturePermission);
			}
			catch
			{
				RollbackTransaction("addAppRoleFeaturePermission");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppRoleFeaturePermission
		///This method deletes all BOAppRoleFeaturePermission objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppRoleFeaturePermission()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppRoleFeaturePermi3001");
			try
			{
				DAOAppRoleFeaturePermission.DeleteAllByAppRoleFeatueId(ConnectionProvider, _appRoleFeatueId.Value);
				CommitTransaction();
				if(_boAppRoleFeaturePermissionCollection != null)
				{
					_boAppRoleFeaturePermissionCollection.Clear();
					_boAppRoleFeaturePermissionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppRoleFeaturePermi3001");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? AppRoleFeatueId
		{
			get
			{
				 return _appRoleFeatueId;
			}
			set
			{
				_appRoleFeatueId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AppRoleId
		{
			get
			{
				 return _appRoleId;
			}
			set
			{
				_appRoleId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FeatueId
		{
			get
			{
				 return _featueId;
			}
			set
			{
				_featueId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
