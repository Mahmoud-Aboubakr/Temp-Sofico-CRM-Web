/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOperationStatus.
	///It maintains a collection of BOOperationRequestDetail objects.
	///</Summary>
	public partial class BOOperationStatus : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _operationStatusId;
		protected string _operationStatusCode;
		protected string _operationStatusNameEn;
		protected string _operationStatusNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOOperationRequestDetail> _boOperationRequestDetailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOperationStatus()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 operationStatusId
		///</parameters>
		public BOOperationStatus(Int32 operationStatusId)
		{
			try
			{
				DAOOperationStatus daoOperationStatus = DAOOperationStatus.SelectOne(operationStatusId);
				_operationStatusId = daoOperationStatus.OperationStatusId;
				_operationStatusCode = daoOperationStatus.OperationStatusCode;
				_operationStatusNameEn = daoOperationStatus.OperationStatusNameEn;
				_operationStatusNameAr = daoOperationStatus.OperationStatusNameAr;
				_isActive = daoOperationStatus.IsActive;
				_canEdit = daoOperationStatus.CanEdit;
				_canDelete = daoOperationStatus.CanDelete;
				_displayOrder = daoOperationStatus.DisplayOrder;
				_color = daoOperationStatus.Color;
				_icon = daoOperationStatus.Icon;
				_cBy = daoOperationStatus.CBy;
				_eBy = daoOperationStatus.EBy;
				_cDate = daoOperationStatus.CDate;
				_eDate = daoOperationStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOperationStatus
		///</parameters>
		protected internal BOOperationStatus(DAOOperationStatus daoOperationStatus)
		{
			try
			{
				_operationStatusId = daoOperationStatus.OperationStatusId;
				_operationStatusCode = daoOperationStatus.OperationStatusCode;
				_operationStatusNameEn = daoOperationStatus.OperationStatusNameEn;
				_operationStatusNameAr = daoOperationStatus.OperationStatusNameAr;
				_isActive = daoOperationStatus.IsActive;
				_canEdit = daoOperationStatus.CanEdit;
				_canDelete = daoOperationStatus.CanDelete;
				_displayOrder = daoOperationStatus.DisplayOrder;
				_color = daoOperationStatus.Color;
				_icon = daoOperationStatus.Icon;
				_cBy = daoOperationStatus.CBy;
				_eBy = daoOperationStatus.EBy;
				_cDate = daoOperationStatus.CDate;
				_eDate = daoOperationStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OperationStatus record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOOperationStatus daoOperationStatus = new DAOOperationStatus();
			RegisterDataObject(daoOperationStatus);
			BeginTransaction("savenewBOOperationStatus");
			try
			{
				daoOperationStatus.OperationStatusId = _operationStatusId;
				daoOperationStatus.OperationStatusCode = _operationStatusCode;
				daoOperationStatus.OperationStatusNameEn = _operationStatusNameEn;
				daoOperationStatus.OperationStatusNameAr = _operationStatusNameAr;
				daoOperationStatus.IsActive = _isActive;
				daoOperationStatus.CanEdit = _canEdit;
				daoOperationStatus.CanDelete = _canDelete;
				daoOperationStatus.DisplayOrder = _displayOrder;
				daoOperationStatus.Color = _color;
				daoOperationStatus.Icon = _icon;
				daoOperationStatus.CBy = _cBy;
				daoOperationStatus.EBy = _eBy;
				daoOperationStatus.CDate = _cDate;
				daoOperationStatus.EDate = _eDate;
				daoOperationStatus.Insert();
				CommitTransaction();
				
				_operationStatusId = daoOperationStatus.OperationStatusId;
				_operationStatusCode = daoOperationStatus.OperationStatusCode;
				_operationStatusNameEn = daoOperationStatus.OperationStatusNameEn;
				_operationStatusNameAr = daoOperationStatus.OperationStatusNameAr;
				_isActive = daoOperationStatus.IsActive;
				_canEdit = daoOperationStatus.CanEdit;
				_canDelete = daoOperationStatus.CanDelete;
				_displayOrder = daoOperationStatus.DisplayOrder;
				_color = daoOperationStatus.Color;
				_icon = daoOperationStatus.Icon;
				_cBy = daoOperationStatus.CBy;
				_eBy = daoOperationStatus.EBy;
				_cDate = daoOperationStatus.CDate;
				_eDate = daoOperationStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOOperationStatus");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one OperationStatus record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationStatus
		///</parameters>
		public virtual void Update()
		{
			DAOOperationStatus daoOperationStatus = new DAOOperationStatus();
			RegisterDataObject(daoOperationStatus);
			BeginTransaction("updateBOOperationStatus");
			try
			{
				daoOperationStatus.OperationStatusId = _operationStatusId;
				daoOperationStatus.OperationStatusCode = _operationStatusCode;
				daoOperationStatus.OperationStatusNameEn = _operationStatusNameEn;
				daoOperationStatus.OperationStatusNameAr = _operationStatusNameAr;
				daoOperationStatus.IsActive = _isActive;
				daoOperationStatus.CanEdit = _canEdit;
				daoOperationStatus.CanDelete = _canDelete;
				daoOperationStatus.DisplayOrder = _displayOrder;
				daoOperationStatus.Color = _color;
				daoOperationStatus.Icon = _icon;
				daoOperationStatus.CBy = _cBy;
				daoOperationStatus.EBy = _eBy;
				daoOperationStatus.CDate = _cDate;
				daoOperationStatus.EDate = _eDate;
				daoOperationStatus.Update();
				CommitTransaction();
				
				_operationStatusId = daoOperationStatus.OperationStatusId;
				_operationStatusCode = daoOperationStatus.OperationStatusCode;
				_operationStatusNameEn = daoOperationStatus.OperationStatusNameEn;
				_operationStatusNameAr = daoOperationStatus.OperationStatusNameAr;
				_isActive = daoOperationStatus.IsActive;
				_canEdit = daoOperationStatus.CanEdit;
				_canDelete = daoOperationStatus.CanDelete;
				_displayOrder = daoOperationStatus.DisplayOrder;
				_color = daoOperationStatus.Color;
				_icon = daoOperationStatus.Icon;
				_cBy = daoOperationStatus.CBy;
				_eBy = daoOperationStatus.EBy;
				_cDate = daoOperationStatus.CDate;
				_eDate = daoOperationStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOOperationStatus");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OperationStatus record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOOperationStatus daoOperationStatus = new DAOOperationStatus();
			RegisterDataObject(daoOperationStatus);
			BeginTransaction("deleteBOOperationStatus");
			try
			{
				daoOperationStatus.OperationStatusId = _operationStatusId;
				daoOperationStatus.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOOperationStatus");
				throw;
			}
		}
		
		///<Summary>
		///OperationStatusCollection
		///This method returns the collection of BOOperationStatus objects
		///</Summary>
		///<returns>
		///List[BOOperationStatus]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOOperationStatus> OperationStatusCollection()
		{
			try
			{
				IList<BOOperationStatus> boOperationStatusCollection = new List<BOOperationStatus>();
				IList<DAOOperationStatus> daoOperationStatusCollection = DAOOperationStatus.SelectAll();
			
				foreach(DAOOperationStatus daoOperationStatus in daoOperationStatusCollection)
					boOperationStatusCollection.Add(new BOOperationStatus(daoOperationStatus));
			
				return boOperationStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationStatusCollectionCount
		///This method returns the collection count of BOOperationStatus objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OperationStatusCollectionCount()
		{
			try
			{
				Int32 objCount = DAOOperationStatus.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailCollection
		///This method returns its collection of BOOperationRequestDetail objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequestDetail]
		///</returns>
		///<parameters>
		///BOOperationStatus
		///</parameters>
		public virtual IList<BOOperationRequestDetail> OperationRequestDetailCollection()
		{
			try
			{
				if(_boOperationRequestDetailCollection == null)
					LoadOperationRequestDetailCollection();
				
				return _boOperationRequestDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOOperationStatus>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOOperationStatus.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationStatusCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOOperationStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOperationStatusCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOOperationStatus> daoOperationStatusCollection = DAOOperationStatus.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOOperationStatus resdaoOperationStatus in daoOperationStatusCollection)
					boOperationStatusCollection.Add((T)(object)new BOOperationStatus(resdaoOperationStatus));
			
				return boOperationStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationStatusCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOOperationStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOOperationStatus.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestDetailCollection
		///This method loads the internal collection of BOOperationRequestDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestDetailCollection()
		{
			try
			{
				_boOperationRequestDetailCollection = new List<BOOperationRequestDetail>();
				IList<DAOOperationRequestDetail> daoOperationRequestDetailCollection = DAOOperationRequestDetail.SelectAllByOperationStatusId(_operationStatusId.Value);
				
				foreach(DAOOperationRequestDetail daoOperationRequestDetail in daoOperationRequestDetailCollection)
					_boOperationRequestDetailCollection.Add(new BOOperationRequestDetail(daoOperationRequestDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequestDetail
		///This method persists a BOOperationRequestDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetail
		///</parameters>
		public virtual void AddOperationRequestDetail(BOOperationRequestDetail boOperationRequestDetail)
		{
			DAOOperationRequestDetail daoOperationRequestDetail = new DAOOperationRequestDetail();
			RegisterDataObject(daoOperationRequestDetail);
			BeginTransaction("addOperationRequestDetail");
			try
			{
				daoOperationRequestDetail.DetailId = boOperationRequestDetail.DetailId;
				daoOperationRequestDetail.OperationId = boOperationRequestDetail.OperationId;
				daoOperationRequestDetail.OperationDate = boOperationRequestDetail.OperationDate;
				daoOperationRequestDetail.ClientId = boOperationRequestDetail.ClientId;
				daoOperationRequestDetail.ClientTypeId = boOperationRequestDetail.ClientTypeId;
				daoOperationRequestDetail.ClientNameAr = boOperationRequestDetail.ClientNameAr;
				daoOperationRequestDetail.ClientNameEn = boOperationRequestDetail.ClientNameEn;
				daoOperationRequestDetail.RegionId = boOperationRequestDetail.RegionId;
				daoOperationRequestDetail.GovernerateId = boOperationRequestDetail.GovernerateId;
				daoOperationRequestDetail.CityId = boOperationRequestDetail.CityId;
				daoOperationRequestDetail.LocationLevelId = boOperationRequestDetail.LocationLevelId;
				daoOperationRequestDetail.IsChain = boOperationRequestDetail.IsChain;
				daoOperationRequestDetail.ResponsibleNameEn = boOperationRequestDetail.ResponsibleNameEn;
				daoOperationRequestDetail.ResponsibleNameAr = boOperationRequestDetail.ResponsibleNameAr;
				daoOperationRequestDetail.Building = boOperationRequestDetail.Building;
				daoOperationRequestDetail.Floor = boOperationRequestDetail.Floor;
				daoOperationRequestDetail.Property = boOperationRequestDetail.Property;
				daoOperationRequestDetail.Address = boOperationRequestDetail.Address;
				daoOperationRequestDetail.Landmark = boOperationRequestDetail.Landmark;
				daoOperationRequestDetail.Phone = boOperationRequestDetail.Phone;
				daoOperationRequestDetail.Mobile = boOperationRequestDetail.Mobile;
				daoOperationRequestDetail.WhatsApp = boOperationRequestDetail.WhatsApp;
				daoOperationRequestDetail.Latitude = boOperationRequestDetail.Latitude;
				daoOperationRequestDetail.Longitude = boOperationRequestDetail.Longitude;
				daoOperationRequestDetail.Accuracy = boOperationRequestDetail.Accuracy;
				daoOperationRequestDetail.InZone = boOperationRequestDetail.InZone;
				daoOperationRequestDetail.CBy = boOperationRequestDetail.CBy;
				daoOperationRequestDetail.CDate = boOperationRequestDetail.CDate;
				daoOperationRequestDetail.EBy = boOperationRequestDetail.EBy;
				daoOperationRequestDetail.EDate = boOperationRequestDetail.EDate;
				daoOperationRequestDetail.TaxCode = boOperationRequestDetail.TaxCode;
				daoOperationRequestDetail.CommercialCode = boOperationRequestDetail.CommercialCode;
				daoOperationRequestDetail.OperationRejectReasonId = boOperationRequestDetail.OperationRejectReasonId;
				daoOperationRequestDetail.OperationStatusId = _operationStatusId.Value;
				daoOperationRequestDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequestDetail = new BOOperationRequestDetail(daoOperationRequestDetail);
				if(_boOperationRequestDetailCollection != null)
					_boOperationRequestDetailCollection.Add(boOperationRequestDetail);
			}
			catch
			{
				RollbackTransaction("addOperationRequestDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequestDetail
		///This method deletes all BOOperationRequestDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequestDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequestDetail");
			try
			{
				DAOOperationRequestDetail.DeleteAllByOperationStatusId(ConnectionProvider, _operationStatusId.Value);
				CommitTransaction();
				if(_boOperationRequestDetailCollection != null)
				{
					_boOperationRequestDetailCollection.Clear();
					_boOperationRequestDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequestDetail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? OperationStatusId
		{
			get
			{
				 return _operationStatusId;
			}
			set
			{
				_operationStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationStatusCode
		{
			get
			{
				 return _operationStatusCode;
			}
			set
			{
				_operationStatusCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationStatusNameEn
		{
			get
			{
				 return _operationStatusNameEn;
			}
			set
			{
				_operationStatusNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationStatusNameAr
		{
			get
			{
				 return _operationStatusNameAr;
			}
			set
			{
				_operationStatusNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
