/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOVacation.
	///</Summary>
	public partial class BOVacation : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _vacationId;
		protected Int32? _vacationTypeId;
		protected DateTime? _vacationDate;
		protected string _notes;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eby;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOVacation()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 vacationId
		///</parameters>
		public BOVacation(Int32 vacationId)
		{
			try
			{
				DAOVacation daoVacation = DAOVacation.SelectOne(vacationId);
				_vacationId = daoVacation.VacationId;
				_vacationTypeId = daoVacation.VacationTypeId;
				_vacationDate = daoVacation.VacationDate;
				_notes = daoVacation.Notes;
				_cBy = daoVacation.CBy;
				_cDate = daoVacation.CDate;
				_eby = daoVacation.Eby;
				_eDate = daoVacation.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOVacation
		///</parameters>
		protected internal BOVacation(DAOVacation daoVacation)
		{
			try
			{
				_vacationId = daoVacation.VacationId;
				_vacationTypeId = daoVacation.VacationTypeId;
				_vacationDate = daoVacation.VacationDate;
				_notes = daoVacation.Notes;
				_cBy = daoVacation.CBy;
				_cDate = daoVacation.CDate;
				_eby = daoVacation.Eby;
				_eDate = daoVacation.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Vacation record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOVacation daoVacation = new DAOVacation();
			RegisterDataObject(daoVacation);
			BeginTransaction("savenewBOVacation");
			try
			{
				daoVacation.VacationTypeId = _vacationTypeId;
				daoVacation.VacationDate = _vacationDate;
				daoVacation.Notes = _notes;
				daoVacation.CBy = _cBy;
				daoVacation.CDate = _cDate;
				daoVacation.Eby = _eby;
				daoVacation.EDate = _eDate;
				daoVacation.Insert();
				CommitTransaction();
				
				_vacationId = daoVacation.VacationId;
				_vacationTypeId = daoVacation.VacationTypeId;
				_vacationDate = daoVacation.VacationDate;
				_notes = daoVacation.Notes;
				_cBy = daoVacation.CBy;
				_cDate = daoVacation.CDate;
				_eby = daoVacation.Eby;
				_eDate = daoVacation.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOVacation");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Vacation record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVacation
		///</parameters>
		public virtual void Update()
		{
			DAOVacation daoVacation = new DAOVacation();
			RegisterDataObject(daoVacation);
			BeginTransaction("updateBOVacation");
			try
			{
				daoVacation.VacationId = _vacationId;
				daoVacation.VacationTypeId = _vacationTypeId;
				daoVacation.VacationDate = _vacationDate;
				daoVacation.Notes = _notes;
				daoVacation.CBy = _cBy;
				daoVacation.CDate = _cDate;
				daoVacation.Eby = _eby;
				daoVacation.EDate = _eDate;
				daoVacation.Update();
				CommitTransaction();
				
				_vacationId = daoVacation.VacationId;
				_vacationTypeId = daoVacation.VacationTypeId;
				_vacationDate = daoVacation.VacationDate;
				_notes = daoVacation.Notes;
				_cBy = daoVacation.CBy;
				_cDate = daoVacation.CDate;
				_eby = daoVacation.Eby;
				_eDate = daoVacation.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOVacation");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Vacation record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOVacation daoVacation = new DAOVacation();
			RegisterDataObject(daoVacation);
			BeginTransaction("deleteBOVacation");
			try
			{
				daoVacation.VacationId = _vacationId;
				daoVacation.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOVacation");
				throw;
			}
		}
		
		///<Summary>
		///VacationCollection
		///This method returns the collection of BOVacation objects
		///</Summary>
		///<returns>
		///List[BOVacation]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOVacation> VacationCollection()
		{
			try
			{
				IList<BOVacation> boVacationCollection = new List<BOVacation>();
				IList<DAOVacation> daoVacationCollection = DAOVacation.SelectAll();
			
				foreach(DAOVacation daoVacation in daoVacationCollection)
					boVacationCollection.Add(new BOVacation(daoVacation));
			
				return boVacationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VacationCollectionCount
		///This method returns the collection count of BOVacation objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 VacationCollectionCount()
		{
			try
			{
				Int32 objCount = DAOVacation.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOVacation>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOVacation.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VacationCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOVacation objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boVacationCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOVacation> daoVacationCollection = DAOVacation.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOVacation resdaoVacation in daoVacationCollection)
					boVacationCollection.Add((T)(object)new BOVacation(resdaoVacation));
			
				return boVacationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VacationCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOVacation objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOVacation.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? VacationId
		{
			get
			{
				 return _vacationId;
			}
			set
			{
				_vacationId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VacationTypeId
		{
			get
			{
				 return _vacationTypeId;
			}
			set
			{
				_vacationTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? VacationDate
		{
			get
			{
				 return _vacationDate;
			}
			set
			{
				_vacationDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Eby
		{
			get
			{
				 return _eby;
			}
			set
			{
				_eby = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
