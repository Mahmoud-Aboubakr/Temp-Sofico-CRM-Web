/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2/20/2023 4:01:45 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOInvoiceSync.
	///</Summary>
	public partial class BOInvoiceSync : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected string _invoiceCode;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOInvoiceSync()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOInvoiceSync
		///</parameters>
		protected internal BOInvoiceSync(DAOInvoiceSync daoInvoiceSync)
		{
			try
			{
				_invoiceCode = daoInvoiceSync.InvoiceCode;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new InvoiceSync record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOInvoiceSync daoInvoiceSync = new DAOInvoiceSync();
			RegisterDataObject(daoInvoiceSync);
			BeginTransaction("savenewBOInvoiceSync");
			try
			{
				daoInvoiceSync.InvoiceCode = _invoiceCode;
				daoInvoiceSync.Insert();
				CommitTransaction();
				
				_invoiceCode = daoInvoiceSync.InvoiceCode;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOInvoiceSync");
				throw;
			}
		}
		
		
		///<Summary>
		///InvoiceSyncCollection
		///This method returns the collection of BOInvoiceSync objects
		///</Summary>
		///<returns>
		///List[BOInvoiceSync]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOInvoiceSync> InvoiceSyncCollection()
		{
			try
			{
				IList<BOInvoiceSync> boInvoiceSyncCollection = new List<BOInvoiceSync>();
				IList<DAOInvoiceSync> daoInvoiceSyncCollection = DAOInvoiceSync.SelectAll();
			
				foreach(DAOInvoiceSync daoInvoiceSync in daoInvoiceSyncCollection)
					boInvoiceSyncCollection.Add(new BOInvoiceSync(daoInvoiceSync));
			
				return boInvoiceSyncCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///InvoiceSyncCollectionCount
		///This method returns the collection count of BOInvoiceSync objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 InvoiceSyncCollectionCount()
		{
			try
			{
				Int32 objCount = DAOInvoiceSync.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOInvoiceSync>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOInvoiceSync.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///InvoiceSyncCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOInvoiceSync objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boInvoiceSyncCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOInvoiceSync> daoInvoiceSyncCollection = DAOInvoiceSync.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOInvoiceSync resdaoInvoiceSync in daoInvoiceSyncCollection)
					boInvoiceSyncCollection.Add((T)(object)new BOInvoiceSync(resdaoInvoiceSync));
			
				return boInvoiceSyncCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///InvoiceSyncCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOInvoiceSync objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOInvoiceSync.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string InvoiceCode
		{
			get
			{
				 return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
