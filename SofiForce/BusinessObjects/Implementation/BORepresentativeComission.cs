/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORepresentativeComission.
	///</Summary>
	public partial class BORepresentativeComission : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _comissionId;
		protected Int32? _representativeId;
		protected DateTime? _comissionDate;
		protected decimal? _comissionValue;
		protected bool? _isApproved;
		protected Int32? _comissionTypeId;
		protected string _notes;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORepresentativeComission()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 comissionId
		///</parameters>
		public BORepresentativeComission(Int32 comissionId)
		{
			try
			{
				DAORepresentativeComission daoRepresentativeComission = DAORepresentativeComission.SelectOne(comissionId);
				_comissionId = daoRepresentativeComission.ComissionId;
				_representativeId = daoRepresentativeComission.RepresentativeId;
				_comissionDate = daoRepresentativeComission.ComissionDate;
				_comissionValue = daoRepresentativeComission.ComissionValue;
				_isApproved = daoRepresentativeComission.IsApproved;
				_comissionTypeId = daoRepresentativeComission.ComissionTypeId;
				_notes = daoRepresentativeComission.Notes;
				_cBy = daoRepresentativeComission.CBy;
				_cDate = daoRepresentativeComission.CDate;
				_eBy = daoRepresentativeComission.EBy;
				_eDate = daoRepresentativeComission.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORepresentativeComission
		///</parameters>
		protected internal BORepresentativeComission(DAORepresentativeComission daoRepresentativeComission)
		{
			try
			{
				_comissionId = daoRepresentativeComission.ComissionId;
				_representativeId = daoRepresentativeComission.RepresentativeId;
				_comissionDate = daoRepresentativeComission.ComissionDate;
				_comissionValue = daoRepresentativeComission.ComissionValue;
				_isApproved = daoRepresentativeComission.IsApproved;
				_comissionTypeId = daoRepresentativeComission.ComissionTypeId;
				_notes = daoRepresentativeComission.Notes;
				_cBy = daoRepresentativeComission.CBy;
				_cDate = daoRepresentativeComission.CDate;
				_eBy = daoRepresentativeComission.EBy;
				_eDate = daoRepresentativeComission.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new RepresentativeComission record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORepresentativeComission daoRepresentativeComission = new DAORepresentativeComission();
			RegisterDataObject(daoRepresentativeComission);
			BeginTransaction("savenewBORepresentativeComission");
			try
			{
				daoRepresentativeComission.RepresentativeId = _representativeId;
				daoRepresentativeComission.ComissionDate = _comissionDate;
				daoRepresentativeComission.ComissionValue = _comissionValue;
				daoRepresentativeComission.IsApproved = _isApproved;
				daoRepresentativeComission.ComissionTypeId = _comissionTypeId;
				daoRepresentativeComission.Notes = _notes;
				daoRepresentativeComission.CBy = _cBy;
				daoRepresentativeComission.CDate = _cDate;
				daoRepresentativeComission.EBy = _eBy;
				daoRepresentativeComission.EDate = _eDate;
				daoRepresentativeComission.Insert();
				CommitTransaction();
				
				_comissionId = daoRepresentativeComission.ComissionId;
				_representativeId = daoRepresentativeComission.RepresentativeId;
				_comissionDate = daoRepresentativeComission.ComissionDate;
				_comissionValue = daoRepresentativeComission.ComissionValue;
				_isApproved = daoRepresentativeComission.IsApproved;
				_comissionTypeId = daoRepresentativeComission.ComissionTypeId;
				_notes = daoRepresentativeComission.Notes;
				_cBy = daoRepresentativeComission.CBy;
				_cDate = daoRepresentativeComission.CDate;
				_eBy = daoRepresentativeComission.EBy;
				_eDate = daoRepresentativeComission.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORepresentativeComission");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one RepresentativeComission record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeComission
		///</parameters>
		public virtual void Update()
		{
			DAORepresentativeComission daoRepresentativeComission = new DAORepresentativeComission();
			RegisterDataObject(daoRepresentativeComission);
			BeginTransaction("updateBORepresentativeComission");
			try
			{
				daoRepresentativeComission.ComissionId = _comissionId;
				daoRepresentativeComission.RepresentativeId = _representativeId;
				daoRepresentativeComission.ComissionDate = _comissionDate;
				daoRepresentativeComission.ComissionValue = _comissionValue;
				daoRepresentativeComission.IsApproved = _isApproved;
				daoRepresentativeComission.ComissionTypeId = _comissionTypeId;
				daoRepresentativeComission.Notes = _notes;
				daoRepresentativeComission.CBy = _cBy;
				daoRepresentativeComission.CDate = _cDate;
				daoRepresentativeComission.EBy = _eBy;
				daoRepresentativeComission.EDate = _eDate;
				daoRepresentativeComission.Update();
				CommitTransaction();
				
				_comissionId = daoRepresentativeComission.ComissionId;
				_representativeId = daoRepresentativeComission.RepresentativeId;
				_comissionDate = daoRepresentativeComission.ComissionDate;
				_comissionValue = daoRepresentativeComission.ComissionValue;
				_isApproved = daoRepresentativeComission.IsApproved;
				_comissionTypeId = daoRepresentativeComission.ComissionTypeId;
				_notes = daoRepresentativeComission.Notes;
				_cBy = daoRepresentativeComission.CBy;
				_cDate = daoRepresentativeComission.CDate;
				_eBy = daoRepresentativeComission.EBy;
				_eDate = daoRepresentativeComission.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORepresentativeComission");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one RepresentativeComission record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORepresentativeComission daoRepresentativeComission = new DAORepresentativeComission();
			RegisterDataObject(daoRepresentativeComission);
			BeginTransaction("deleteBORepresentativeComission");
			try
			{
				daoRepresentativeComission.ComissionId = _comissionId;
				daoRepresentativeComission.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORepresentativeComission");
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeComissionCollection
		///This method returns the collection of BORepresentativeComission objects
		///</Summary>
		///<returns>
		///List[BORepresentativeComission]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORepresentativeComission> RepresentativeComissionCollection()
		{
			try
			{
				IList<BORepresentativeComission> boRepresentativeComissionCollection = new List<BORepresentativeComission>();
				IList<DAORepresentativeComission> daoRepresentativeComissionCollection = DAORepresentativeComission.SelectAll();
			
				foreach(DAORepresentativeComission daoRepresentativeComission in daoRepresentativeComissionCollection)
					boRepresentativeComissionCollection.Add(new BORepresentativeComission(daoRepresentativeComission));
			
				return boRepresentativeComissionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeComissionCollectionCount
		///This method returns the collection count of BORepresentativeComission objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RepresentativeComissionCollectionCount()
		{
			try
			{
				Int32 objCount = DAORepresentativeComission.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORepresentativeComission>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORepresentativeComission.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeComissionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORepresentativeComission objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRepresentativeComissionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORepresentativeComission> daoRepresentativeComissionCollection = DAORepresentativeComission.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORepresentativeComission resdaoRepresentativeComission in daoRepresentativeComissionCollection)
					boRepresentativeComissionCollection.Add((T)(object)new BORepresentativeComission(resdaoRepresentativeComission));
			
				return boRepresentativeComissionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeComissionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORepresentativeComission objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORepresentativeComission.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ComissionId
		{
			get
			{
				 return _comissionId;
			}
			set
			{
				_comissionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ComissionDate
		{
			get
			{
				 return _comissionDate;
			}
			set
			{
				_comissionDate = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ComissionValue
		{
			get
			{
				 return _comissionValue;
			}
			set
			{
				_comissionValue = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsApproved
		{
			get
			{
				 return _isApproved;
			}
			set
			{
				_isApproved = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ComissionTypeId
		{
			get
			{
				 return _comissionTypeId;
			}
			set
			{
				_comissionTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
