/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppUserLocation.
	///</Summary>
	public partial class BOAppUserLocation : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _trackingId;
		protected Int32? _userId;
		protected Int32? _trackingTypeId;
		protected DateTime? _trackingDate;
		protected DateTime? _trackingTime;
		protected double? _latitude;
		protected double? _longitude;
		protected bool? _isPositive;
		protected Int64? _salesId;
		protected Int32? _clientId;
		protected bool? _inZone;
		protected Int32? _distance;
		protected bool _isDirty = false;
		protected Int32? _visitRejectReasonId;
        /*collection member objects*******************/
        /*********************************************/
        #endregion

        #region class methods
        ///<Summary>
        ///Constructor
        ///This is the default constructor
        ///</Summary>
        ///<returns>
        ///void
        ///</returns>
        ///<parameters>
        ///
        ///</parameters>
        public BOAppUserLocation()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 trackingId
		///</parameters>
		public BOAppUserLocation(Int64 trackingId)
		{
			try
			{
				DAOAppUserLocation daoAppUserLocation = DAOAppUserLocation.SelectOne(trackingId);
				_trackingId = daoAppUserLocation.TrackingId;
				_userId = daoAppUserLocation.UserId;
				_trackingTypeId = daoAppUserLocation.TrackingTypeId;
				_trackingDate = daoAppUserLocation.TrackingDate;
				_trackingTime = daoAppUserLocation.TrackingTime;
				_latitude = daoAppUserLocation.Latitude;
				_longitude = daoAppUserLocation.Longitude;
				_isPositive = daoAppUserLocation.IsPositive;
				_salesId = daoAppUserLocation.SalesId;
				_clientId = daoAppUserLocation.ClientId;
				_inZone = daoAppUserLocation.InZone;
				_distance = daoAppUserLocation.Distance;
				_visitRejectReasonId = daoAppUserLocation.VisitRejectReasonId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppUserLocation
		///</parameters>
		protected internal BOAppUserLocation(DAOAppUserLocation daoAppUserLocation)
		{
			try
			{
				_trackingId = daoAppUserLocation.TrackingId;
				_userId = daoAppUserLocation.UserId;
				_trackingTypeId = daoAppUserLocation.TrackingTypeId;
				_trackingDate = daoAppUserLocation.TrackingDate;
				_trackingTime = daoAppUserLocation.TrackingTime;
				_latitude = daoAppUserLocation.Latitude;
				_longitude = daoAppUserLocation.Longitude;
				_isPositive = daoAppUserLocation.IsPositive;
				_salesId = daoAppUserLocation.SalesId;
				_clientId = daoAppUserLocation.ClientId;
				_inZone = daoAppUserLocation.InZone;
				_distance = daoAppUserLocation.Distance;
				_visitRejectReasonId = daoAppUserLocation.VisitRejectReasonId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppUserLocation record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppUserLocation daoAppUserLocation = new DAOAppUserLocation();
			RegisterDataObject(daoAppUserLocation);
			BeginTransaction("savenewBOAppUserLocation");
			try
			{
				daoAppUserLocation.UserId = _userId;
				daoAppUserLocation.TrackingTypeId = _trackingTypeId;
				daoAppUserLocation.TrackingDate = _trackingDate;
				daoAppUserLocation.TrackingTime = _trackingTime;
				daoAppUserLocation.Latitude = _latitude;
				daoAppUserLocation.Longitude = _longitude;
				daoAppUserLocation.IsPositive = _isPositive;
				daoAppUserLocation.SalesId = _salesId;
				daoAppUserLocation.ClientId = _clientId;
				daoAppUserLocation.InZone = _inZone;
				daoAppUserLocation.Distance = _distance;
				daoAppUserLocation.VisitRejectReasonId = _visitRejectReasonId;
				daoAppUserLocation.Insert();
				CommitTransaction();
				
				_trackingId = daoAppUserLocation.TrackingId;
				_userId = daoAppUserLocation.UserId;
				_trackingTypeId = daoAppUserLocation.TrackingTypeId;
				_trackingDate = daoAppUserLocation.TrackingDate;
				_trackingTime = daoAppUserLocation.TrackingTime;
				_latitude = daoAppUserLocation.Latitude;
				_longitude = daoAppUserLocation.Longitude;
				_isPositive = daoAppUserLocation.IsPositive;
				_salesId = daoAppUserLocation.SalesId;
				_clientId = daoAppUserLocation.ClientId;
				_inZone = daoAppUserLocation.InZone;
				_distance = daoAppUserLocation.Distance;
				_visitRejectReasonId = daoAppUserLocation.VisitRejectReasonId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppUserLocation");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppUserLocation record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserLocation
		///</parameters>
		public virtual void Update()
		{
			DAOAppUserLocation daoAppUserLocation = new DAOAppUserLocation();
			RegisterDataObject(daoAppUserLocation);
			BeginTransaction("updateBOAppUserLocation");
			try
			{
				daoAppUserLocation.TrackingId = _trackingId;
				daoAppUserLocation.UserId = _userId;
				daoAppUserLocation.TrackingTypeId = _trackingTypeId;
				daoAppUserLocation.TrackingDate = _trackingDate;
				daoAppUserLocation.TrackingTime = _trackingTime;
				daoAppUserLocation.Latitude = _latitude;
				daoAppUserLocation.Longitude = _longitude;
				daoAppUserLocation.IsPositive = _isPositive;
				daoAppUserLocation.SalesId = _salesId;
				daoAppUserLocation.ClientId = _clientId;
				daoAppUserLocation.InZone = _inZone;
				daoAppUserLocation.Distance = _distance;
				daoAppUserLocation.VisitRejectReasonId = _visitRejectReasonId;
				daoAppUserLocation.Update();
				CommitTransaction();
				
				_trackingId = daoAppUserLocation.TrackingId;
				_userId = daoAppUserLocation.UserId;
				_trackingTypeId = daoAppUserLocation.TrackingTypeId;
				_trackingDate = daoAppUserLocation.TrackingDate;
				_trackingTime = daoAppUserLocation.TrackingTime;
				_latitude = daoAppUserLocation.Latitude;
				_longitude = daoAppUserLocation.Longitude;
				_isPositive = daoAppUserLocation.IsPositive;
				_salesId = daoAppUserLocation.SalesId;
				_clientId = daoAppUserLocation.ClientId;
				_inZone = daoAppUserLocation.InZone;
				_distance = daoAppUserLocation.Distance;
				_visitRejectReasonId = daoAppUserLocation.VisitRejectReasonId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppUserLocation");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppUserLocation record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppUserLocation daoAppUserLocation = new DAOAppUserLocation();
			RegisterDataObject(daoAppUserLocation);
			BeginTransaction("deleteBOAppUserLocation");
			try
			{
				daoAppUserLocation.TrackingId = _trackingId;
				daoAppUserLocation.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppUserLocation");
				throw;
			}
		}
		
		///<Summary>
		///AppUserLocationCollection
		///This method returns the collection of BOAppUserLocation objects
		///</Summary>
		///<returns>
		///List[BOAppUserLocation]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppUserLocation> AppUserLocationCollection()
		{
			try
			{
				IList<BOAppUserLocation> boAppUserLocationCollection = new List<BOAppUserLocation>();
				IList<DAOAppUserLocation> daoAppUserLocationCollection = DAOAppUserLocation.SelectAll();
			
				foreach(DAOAppUserLocation daoAppUserLocation in daoAppUserLocationCollection)
					boAppUserLocationCollection.Add(new BOAppUserLocation(daoAppUserLocation));
			
				return boAppUserLocationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserLocationCollectionCount
		///This method returns the collection count of BOAppUserLocation objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppUserLocationCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppUserLocation.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppUserLocation>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppUserLocation.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserLocationCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppUserLocation objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppUserLocationCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppUserLocation> daoAppUserLocationCollection = DAOAppUserLocation.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppUserLocation resdaoAppUserLocation in daoAppUserLocationCollection)
					boAppUserLocationCollection.Add((T)(object)new BOAppUserLocation(resdaoAppUserLocation));
			
				return boAppUserLocationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserLocationCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppUserLocation objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppUserLocation.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}

        #endregion

        #region member properties
        public Int32? VisitRejectReasonId
        {
            get { return _visitRejectReasonId; }
            set
            {
                if (_visitRejectReasonId != value)
                {
                    _visitRejectReasonId = value;
                    _isDirty = true;
                }
            }
        }
        public virtual Int64? TrackingId
		{
			get
			{
				 return _trackingId;
			}
			set
			{
				_trackingId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TrackingTypeId
		{
			get
			{
				 return _trackingTypeId;
			}
			set
			{
				_trackingTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TrackingDate
		{
			get
			{
				 return _trackingDate;
			}
			set
			{
				_trackingDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TrackingTime
		{
			get
			{
				 return _trackingTime;
			}
			set
			{
				_trackingTime = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsPositive
		{
			get
			{
				 return _isPositive;
			}
			set
			{
				_isPositive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? InZone
		{
			get
			{
				 return _inZone;
			}
			set
			{
				_inZone = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Distance
		{
			get
			{
				 return _distance;
			}
			set
			{
				_distance = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
