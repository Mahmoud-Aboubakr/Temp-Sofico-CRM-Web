/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientTransaction.
	///</Summary>
	public partial class BOClientTransaction : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _transactionId;
		protected Int32? _clientId;
		protected Int32? _transactionTypeId;
		protected string _transactionCode;
		protected DateTime? _transactionDate;
		protected decimal? _transactionValue;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientTransaction()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 transactionId
		///</parameters>
		public BOClientTransaction(Int64 transactionId)
		{
			try
			{
				DAOClientTransaction daoClientTransaction = DAOClientTransaction.SelectOne(transactionId);
				_transactionId = daoClientTransaction.TransactionId;
				_clientId = daoClientTransaction.ClientId;
				_transactionTypeId = daoClientTransaction.TransactionTypeId;
				_transactionCode = daoClientTransaction.TransactionCode;
				_transactionDate = daoClientTransaction.TransactionDate;
				_transactionValue = daoClientTransaction.TransactionValue;
				_cBy = daoClientTransaction.CBy;
				_cDate = daoClientTransaction.CDate;
				_eBy = daoClientTransaction.EBy;
				_eDate = daoClientTransaction.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientTransaction
		///</parameters>
		protected internal BOClientTransaction(DAOClientTransaction daoClientTransaction)
		{
			try
			{
				_transactionId = daoClientTransaction.TransactionId;
				_clientId = daoClientTransaction.ClientId;
				_transactionTypeId = daoClientTransaction.TransactionTypeId;
				_transactionCode = daoClientTransaction.TransactionCode;
				_transactionDate = daoClientTransaction.TransactionDate;
				_transactionValue = daoClientTransaction.TransactionValue;
				_cBy = daoClientTransaction.CBy;
				_cDate = daoClientTransaction.CDate;
				_eBy = daoClientTransaction.EBy;
				_eDate = daoClientTransaction.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientTransaction record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientTransaction daoClientTransaction = new DAOClientTransaction();
			RegisterDataObject(daoClientTransaction);
			BeginTransaction("savenewBOClientTransaction");
			try
			{
				daoClientTransaction.ClientId = _clientId;
				daoClientTransaction.TransactionTypeId = _transactionTypeId;
				daoClientTransaction.TransactionCode = _transactionCode;
				daoClientTransaction.TransactionDate = _transactionDate;
				daoClientTransaction.TransactionValue = _transactionValue;
				daoClientTransaction.CBy = _cBy;
				daoClientTransaction.CDate = _cDate;
				daoClientTransaction.EBy = _eBy;
				daoClientTransaction.EDate = _eDate;
				daoClientTransaction.Insert();
				CommitTransaction();
				
				_transactionId = daoClientTransaction.TransactionId;
				_clientId = daoClientTransaction.ClientId;
				_transactionTypeId = daoClientTransaction.TransactionTypeId;
				_transactionCode = daoClientTransaction.TransactionCode;
				_transactionDate = daoClientTransaction.TransactionDate;
				_transactionValue = daoClientTransaction.TransactionValue;
				_cBy = daoClientTransaction.CBy;
				_cDate = daoClientTransaction.CDate;
				_eBy = daoClientTransaction.EBy;
				_eDate = daoClientTransaction.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientTransaction");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientTransaction record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientTransaction
		///</parameters>
		public virtual void Update()
		{
			DAOClientTransaction daoClientTransaction = new DAOClientTransaction();
			RegisterDataObject(daoClientTransaction);
			BeginTransaction("updateBOClientTransaction");
			try
			{
				daoClientTransaction.TransactionId = _transactionId;
				daoClientTransaction.ClientId = _clientId;
				daoClientTransaction.TransactionTypeId = _transactionTypeId;
				daoClientTransaction.TransactionCode = _transactionCode;
				daoClientTransaction.TransactionDate = _transactionDate;
				daoClientTransaction.TransactionValue = _transactionValue;
				daoClientTransaction.CBy = _cBy;
				daoClientTransaction.CDate = _cDate;
				daoClientTransaction.EBy = _eBy;
				daoClientTransaction.EDate = _eDate;
				daoClientTransaction.Update();
				CommitTransaction();
				
				_transactionId = daoClientTransaction.TransactionId;
				_clientId = daoClientTransaction.ClientId;
				_transactionTypeId = daoClientTransaction.TransactionTypeId;
				_transactionCode = daoClientTransaction.TransactionCode;
				_transactionDate = daoClientTransaction.TransactionDate;
				_transactionValue = daoClientTransaction.TransactionValue;
				_cBy = daoClientTransaction.CBy;
				_cDate = daoClientTransaction.CDate;
				_eBy = daoClientTransaction.EBy;
				_eDate = daoClientTransaction.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientTransaction");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientTransaction record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientTransaction daoClientTransaction = new DAOClientTransaction();
			RegisterDataObject(daoClientTransaction);
			BeginTransaction("deleteBOClientTransaction");
			try
			{
				daoClientTransaction.TransactionId = _transactionId;
				daoClientTransaction.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientTransaction");
				throw;
			}
		}
		
		///<Summary>
		///ClientTransactionCollection
		///This method returns the collection of BOClientTransaction objects
		///</Summary>
		///<returns>
		///List[BOClientTransaction]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientTransaction> ClientTransactionCollection()
		{
			try
			{
				IList<BOClientTransaction> boClientTransactionCollection = new List<BOClientTransaction>();
				IList<DAOClientTransaction> daoClientTransactionCollection = DAOClientTransaction.SelectAll();
			
				foreach(DAOClientTransaction daoClientTransaction in daoClientTransactionCollection)
					boClientTransactionCollection.Add(new BOClientTransaction(daoClientTransaction));
			
				return boClientTransactionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientTransactionCollectionCount
		///This method returns the collection count of BOClientTransaction objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientTransactionCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientTransaction.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientTransaction>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientTransaction.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientTransactionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientTransaction objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientTransactionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientTransaction> daoClientTransactionCollection = DAOClientTransaction.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientTransaction resdaoClientTransaction in daoClientTransactionCollection)
					boClientTransactionCollection.Add((T)(object)new BOClientTransaction(resdaoClientTransaction));
			
				return boClientTransactionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientTransactionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientTransaction objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientTransaction.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? TransactionId
		{
			get
			{
				 return _transactionId;
			}
			set
			{
				_transactionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TransactionTypeId
		{
			get
			{
				 return _transactionTypeId;
			}
			set
			{
				_transactionTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionCode
		{
			get
			{
				 return _transactionCode;
			}
			set
			{
				_transactionCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TransactionDate
		{
			get
			{
				 return _transactionDate;
			}
			set
			{
				_transactionDate = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? TransactionValue
		{
			get
			{
				 return _transactionValue;
			}
			set
			{
				_transactionValue = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
