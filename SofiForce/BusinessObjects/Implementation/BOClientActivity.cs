/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientActivity.
	///</Summary>
	public partial class BOClientActivity : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _activityId;
		protected Int32? _clientId;
		protected Int32? _representativeId;
		protected DateTime? _activityDate;
		protected DateTime? _activityTime;
		protected Int32? _duration;
		protected bool? _inJourney;
		protected bool? _isPositive;
		protected bool? _inZone;
		protected Int32? _activityTypeId;
		protected double? _latitude;
		protected double? _longitude;
		protected decimal? _distance;
		protected Int64? _salesId;
		protected DateTime? _callAgain;
		protected string _notes;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientActivity()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 activityId
		///</parameters>
		public BOClientActivity(Int64 activityId)
		{
			try
			{
				DAOClientActivity daoClientActivity = DAOClientActivity.SelectOne(activityId);
				_activityId = daoClientActivity.ActivityId;
				_clientId = daoClientActivity.ClientId;
				_representativeId = daoClientActivity.RepresentativeId;
				_activityDate = daoClientActivity.ActivityDate;
				_activityTime = daoClientActivity.ActivityTime;
				_duration = daoClientActivity.Duration;
				_inJourney = daoClientActivity.InJourney;
				_isPositive = daoClientActivity.IsPositive;
				_inZone = daoClientActivity.InZone;
				_activityTypeId = daoClientActivity.ActivityTypeId;
				_latitude = daoClientActivity.Latitude;
				_longitude = daoClientActivity.Longitude;
				_distance = daoClientActivity.Distance;
				_salesId = daoClientActivity.SalesId;
				_callAgain = daoClientActivity.CallAgain;
				_notes = daoClientActivity.Notes;
				_cBy = daoClientActivity.CBy;
				_cDate = daoClientActivity.CDate;
				_eBy = daoClientActivity.EBy;
				_eDate = daoClientActivity.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientActivity
		///</parameters>
		protected internal BOClientActivity(DAOClientActivity daoClientActivity)
		{
			try
			{
				_activityId = daoClientActivity.ActivityId;
				_clientId = daoClientActivity.ClientId;
				_representativeId = daoClientActivity.RepresentativeId;
				_activityDate = daoClientActivity.ActivityDate;
				_activityTime = daoClientActivity.ActivityTime;
				_duration = daoClientActivity.Duration;
				_inJourney = daoClientActivity.InJourney;
				_isPositive = daoClientActivity.IsPositive;
				_inZone = daoClientActivity.InZone;
				_activityTypeId = daoClientActivity.ActivityTypeId;
				_latitude = daoClientActivity.Latitude;
				_longitude = daoClientActivity.Longitude;
				_distance = daoClientActivity.Distance;
				_salesId = daoClientActivity.SalesId;
				_callAgain = daoClientActivity.CallAgain;
				_notes = daoClientActivity.Notes;
				_cBy = daoClientActivity.CBy;
				_cDate = daoClientActivity.CDate;
				_eBy = daoClientActivity.EBy;
				_eDate = daoClientActivity.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientActivity record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientActivity daoClientActivity = new DAOClientActivity();
			RegisterDataObject(daoClientActivity);
			BeginTransaction("savenewBOClientActivity");
			try
			{
				daoClientActivity.ClientId = _clientId;
				daoClientActivity.RepresentativeId = _representativeId;
				daoClientActivity.ActivityDate = _activityDate;
				daoClientActivity.ActivityTime = _activityTime;
				daoClientActivity.Duration = _duration;
				daoClientActivity.InJourney = _inJourney;
				daoClientActivity.IsPositive = _isPositive;
				daoClientActivity.InZone = _inZone;
				daoClientActivity.ActivityTypeId = _activityTypeId;
				daoClientActivity.Latitude = _latitude;
				daoClientActivity.Longitude = _longitude;
				daoClientActivity.Distance = _distance;
				daoClientActivity.SalesId = _salesId;
				daoClientActivity.CallAgain = _callAgain;
				daoClientActivity.Notes = _notes;
				daoClientActivity.CBy = _cBy;
				daoClientActivity.CDate = _cDate;
				daoClientActivity.EBy = _eBy;
				daoClientActivity.EDate = _eDate;
				daoClientActivity.Insert();
				CommitTransaction();
				
				_activityId = daoClientActivity.ActivityId;
				_clientId = daoClientActivity.ClientId;
				_representativeId = daoClientActivity.RepresentativeId;
				_activityDate = daoClientActivity.ActivityDate;
				_activityTime = daoClientActivity.ActivityTime;
				_duration = daoClientActivity.Duration;
				_inJourney = daoClientActivity.InJourney;
				_isPositive = daoClientActivity.IsPositive;
				_inZone = daoClientActivity.InZone;
				_activityTypeId = daoClientActivity.ActivityTypeId;
				_latitude = daoClientActivity.Latitude;
				_longitude = daoClientActivity.Longitude;
				_distance = daoClientActivity.Distance;
				_salesId = daoClientActivity.SalesId;
				_callAgain = daoClientActivity.CallAgain;
				_notes = daoClientActivity.Notes;
				_cBy = daoClientActivity.CBy;
				_cDate = daoClientActivity.CDate;
				_eBy = daoClientActivity.EBy;
				_eDate = daoClientActivity.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientActivity");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientActivity record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientActivity
		///</parameters>
		public virtual void Update()
		{
			DAOClientActivity daoClientActivity = new DAOClientActivity();
			RegisterDataObject(daoClientActivity);
			BeginTransaction("updateBOClientActivity");
			try
			{
				daoClientActivity.ActivityId = _activityId;
				daoClientActivity.ClientId = _clientId;
				daoClientActivity.RepresentativeId = _representativeId;
				daoClientActivity.ActivityDate = _activityDate;
				daoClientActivity.ActivityTime = _activityTime;
				daoClientActivity.Duration = _duration;
				daoClientActivity.InJourney = _inJourney;
				daoClientActivity.IsPositive = _isPositive;
				daoClientActivity.InZone = _inZone;
				daoClientActivity.ActivityTypeId = _activityTypeId;
				daoClientActivity.Latitude = _latitude;
				daoClientActivity.Longitude = _longitude;
				daoClientActivity.Distance = _distance;
				daoClientActivity.SalesId = _salesId;
				daoClientActivity.CallAgain = _callAgain;
				daoClientActivity.Notes = _notes;
				daoClientActivity.CBy = _cBy;
				daoClientActivity.CDate = _cDate;
				daoClientActivity.EBy = _eBy;
				daoClientActivity.EDate = _eDate;
				daoClientActivity.Update();
				CommitTransaction();
				
				_activityId = daoClientActivity.ActivityId;
				_clientId = daoClientActivity.ClientId;
				_representativeId = daoClientActivity.RepresentativeId;
				_activityDate = daoClientActivity.ActivityDate;
				_activityTime = daoClientActivity.ActivityTime;
				_duration = daoClientActivity.Duration;
				_inJourney = daoClientActivity.InJourney;
				_isPositive = daoClientActivity.IsPositive;
				_inZone = daoClientActivity.InZone;
				_activityTypeId = daoClientActivity.ActivityTypeId;
				_latitude = daoClientActivity.Latitude;
				_longitude = daoClientActivity.Longitude;
				_distance = daoClientActivity.Distance;
				_salesId = daoClientActivity.SalesId;
				_callAgain = daoClientActivity.CallAgain;
				_notes = daoClientActivity.Notes;
				_cBy = daoClientActivity.CBy;
				_cDate = daoClientActivity.CDate;
				_eBy = daoClientActivity.EBy;
				_eDate = daoClientActivity.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientActivity");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientActivity record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientActivity daoClientActivity = new DAOClientActivity();
			RegisterDataObject(daoClientActivity);
			BeginTransaction("deleteBOClientActivity");
			try
			{
				daoClientActivity.ActivityId = _activityId;
				daoClientActivity.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientActivity");
				throw;
			}
		}
		
		///<Summary>
		///ClientActivityCollection
		///This method returns the collection of BOClientActivity objects
		///</Summary>
		///<returns>
		///List[BOClientActivity]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientActivity> ClientActivityCollection()
		{
			try
			{
				IList<BOClientActivity> boClientActivityCollection = new List<BOClientActivity>();
				IList<DAOClientActivity> daoClientActivityCollection = DAOClientActivity.SelectAll();
			
				foreach(DAOClientActivity daoClientActivity in daoClientActivityCollection)
					boClientActivityCollection.Add(new BOClientActivity(daoClientActivity));
			
				return boClientActivityCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientActivityCollectionCount
		///This method returns the collection count of BOClientActivity objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientActivityCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientActivity.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientActivity>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientActivity.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientActivityCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientActivity objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientActivityCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientActivity> daoClientActivityCollection = DAOClientActivity.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientActivity resdaoClientActivity in daoClientActivityCollection)
					boClientActivityCollection.Add((T)(object)new BOClientActivity(resdaoClientActivity));
			
				return boClientActivityCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientActivityCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientActivity objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientActivity.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? ActivityId
		{
			get
			{
				 return _activityId;
			}
			set
			{
				_activityId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ActivityDate
		{
			get
			{
				 return _activityDate;
			}
			set
			{
				_activityDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ActivityTime
		{
			get
			{
				 return _activityTime;
			}
			set
			{
				_activityTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Duration
		{
			get
			{
				 return _duration;
			}
			set
			{
				_duration = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? InJourney
		{
			get
			{
				 return _inJourney;
			}
			set
			{
				_inJourney = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsPositive
		{
			get
			{
				 return _isPositive;
			}
			set
			{
				_isPositive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? InZone
		{
			get
			{
				 return _inZone;
			}
			set
			{
				_inZone = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ActivityTypeId
		{
			get
			{
				 return _activityTypeId;
			}
			set
			{
				_activityTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Distance
		{
			get
			{
				 return _distance;
			}
			set
			{
				_distance = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CallAgain
		{
			get
			{
				 return _callAgain;
			}
			set
			{
				_callAgain = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
