/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppRoleFeaturePermission.
	///</Summary>
	public partial class BOAppRoleFeaturePermission : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _rolePermissionId;
		protected Int32? _appRoleFeatueId;
		protected Int32? _featurePermissionId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppRoleFeaturePermission()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 rolePermissionId
		///</parameters>
		public BOAppRoleFeaturePermission(Int32 rolePermissionId)
		{
			try
			{
				DAOAppRoleFeaturePermission daoAppRoleFeaturePermission = DAOAppRoleFeaturePermission.SelectOne(rolePermissionId);
				_rolePermissionId = daoAppRoleFeaturePermission.RolePermissionId;
				_appRoleFeatueId = daoAppRoleFeaturePermission.AppRoleFeatueId;
				_featurePermissionId = daoAppRoleFeaturePermission.FeaturePermissionId;
				_cBy = daoAppRoleFeaturePermission.CBy;
				_cDate = daoAppRoleFeaturePermission.CDate;
				_eBy = daoAppRoleFeaturePermission.EBy;
				_eDate = daoAppRoleFeaturePermission.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppRoleFeaturePermission
		///</parameters>
		protected internal BOAppRoleFeaturePermission(DAOAppRoleFeaturePermission daoAppRoleFeaturePermission)
		{
			try
			{
				_rolePermissionId = daoAppRoleFeaturePermission.RolePermissionId;
				_appRoleFeatueId = daoAppRoleFeaturePermission.AppRoleFeatueId;
				_featurePermissionId = daoAppRoleFeaturePermission.FeaturePermissionId;
				_cBy = daoAppRoleFeaturePermission.CBy;
				_cDate = daoAppRoleFeaturePermission.CDate;
				_eBy = daoAppRoleFeaturePermission.EBy;
				_eDate = daoAppRoleFeaturePermission.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppRoleFeaturePermission record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppRoleFeaturePermission daoAppRoleFeaturePermission = new DAOAppRoleFeaturePermission();
			RegisterDataObject(daoAppRoleFeaturePermission);
			BeginTransaction("savenewBOAppRoleFeaturePermi7801");
			try
			{
				daoAppRoleFeaturePermission.AppRoleFeatueId = _appRoleFeatueId;
				daoAppRoleFeaturePermission.FeaturePermissionId = _featurePermissionId;
				daoAppRoleFeaturePermission.CBy = _cBy;
				daoAppRoleFeaturePermission.CDate = _cDate;
				daoAppRoleFeaturePermission.EBy = _eBy;
				daoAppRoleFeaturePermission.EDate = _eDate;
				daoAppRoleFeaturePermission.Insert();
				CommitTransaction();
				
				_rolePermissionId = daoAppRoleFeaturePermission.RolePermissionId;
				_appRoleFeatueId = daoAppRoleFeaturePermission.AppRoleFeatueId;
				_featurePermissionId = daoAppRoleFeaturePermission.FeaturePermissionId;
				_cBy = daoAppRoleFeaturePermission.CBy;
				_cDate = daoAppRoleFeaturePermission.CDate;
				_eBy = daoAppRoleFeaturePermission.EBy;
				_eDate = daoAppRoleFeaturePermission.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppRoleFeaturePermi7801");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppRoleFeaturePermission record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppRoleFeaturePermission
		///</parameters>
		public virtual void Update()
		{
			DAOAppRoleFeaturePermission daoAppRoleFeaturePermission = new DAOAppRoleFeaturePermission();
			RegisterDataObject(daoAppRoleFeaturePermission);
			BeginTransaction("updateBOAppRoleFeaturePermission");
			try
			{
				daoAppRoleFeaturePermission.RolePermissionId = _rolePermissionId;
				daoAppRoleFeaturePermission.AppRoleFeatueId = _appRoleFeatueId;
				daoAppRoleFeaturePermission.FeaturePermissionId = _featurePermissionId;
				daoAppRoleFeaturePermission.CBy = _cBy;
				daoAppRoleFeaturePermission.CDate = _cDate;
				daoAppRoleFeaturePermission.EBy = _eBy;
				daoAppRoleFeaturePermission.EDate = _eDate;
				daoAppRoleFeaturePermission.Update();
				CommitTransaction();
				
				_rolePermissionId = daoAppRoleFeaturePermission.RolePermissionId;
				_appRoleFeatueId = daoAppRoleFeaturePermission.AppRoleFeatueId;
				_featurePermissionId = daoAppRoleFeaturePermission.FeaturePermissionId;
				_cBy = daoAppRoleFeaturePermission.CBy;
				_cDate = daoAppRoleFeaturePermission.CDate;
				_eBy = daoAppRoleFeaturePermission.EBy;
				_eDate = daoAppRoleFeaturePermission.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppRoleFeaturePermission");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppRoleFeaturePermission record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppRoleFeaturePermission daoAppRoleFeaturePermission = new DAOAppRoleFeaturePermission();
			RegisterDataObject(daoAppRoleFeaturePermission);
			BeginTransaction("deleteBOAppRoleFeaturePermission");
			try
			{
				daoAppRoleFeaturePermission.RolePermissionId = _rolePermissionId;
				daoAppRoleFeaturePermission.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppRoleFeaturePermission");
				throw;
			}
		}
		
		///<Summary>
		///AppRoleFeaturePermissionCollection
		///This method returns the collection of BOAppRoleFeaturePermission objects
		///</Summary>
		///<returns>
		///List[BOAppRoleFeaturePermission]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppRoleFeaturePermission> AppRoleFeaturePermissionCollection()
		{
			try
			{
				IList<BOAppRoleFeaturePermission> boAppRoleFeaturePermissionCollection = new List<BOAppRoleFeaturePermission>();
				IList<DAOAppRoleFeaturePermission> daoAppRoleFeaturePermissionCollection = DAOAppRoleFeaturePermission.SelectAll();
			
				foreach(DAOAppRoleFeaturePermission daoAppRoleFeaturePermission in daoAppRoleFeaturePermissionCollection)
					boAppRoleFeaturePermissionCollection.Add(new BOAppRoleFeaturePermission(daoAppRoleFeaturePermission));
			
				return boAppRoleFeaturePermissionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleFeaturePermissionCollectionCount
		///This method returns the collection count of BOAppRoleFeaturePermission objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppRoleFeaturePermissionCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppRoleFeaturePermission.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppRoleFeaturePermission>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppRoleFeaturePermission.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleFeaturePermissionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppRoleFeaturePermission objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppRoleFeaturePermissionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppRoleFeaturePermission> daoAppRoleFeaturePermissionCollection = DAOAppRoleFeaturePermission.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppRoleFeaturePermission resdaoAppRoleFeaturePermission in daoAppRoleFeaturePermissionCollection)
					boAppRoleFeaturePermissionCollection.Add((T)(object)new BOAppRoleFeaturePermission(resdaoAppRoleFeaturePermission));
			
				return boAppRoleFeaturePermissionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleFeaturePermissionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppRoleFeaturePermission objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppRoleFeaturePermission.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RolePermissionId
		{
			get
			{
				 return _rolePermissionId;
			}
			set
			{
				_rolePermissionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AppRoleFeatueId
		{
			get
			{
				 return _appRoleFeatueId;
			}
			set
			{
				_appRoleFeatueId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FeaturePermissionId
		{
			get
			{
				 return _featurePermissionId;
			}
			set
			{
				_featurePermissionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
