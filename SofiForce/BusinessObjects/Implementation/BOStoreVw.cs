/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:40 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOStoreVw.
	///</Summary>
	public partial class BOStoreVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _storeId;
		protected Int32? _branchId;
		protected Int32? _storeTypeId;
		protected string _storeNameEn;
		protected string _storeNameAr;
		protected string _storeCode;
		protected bool? _isActive;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected string _branchNameEn;
		protected string _branchNameAr;
		protected string _branchCode;
		protected string _storeTypeNameEn;
		protected string _storeTypeNameAr;
		protected bool? _isOrder;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOStoreVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOStoreVw
		///</parameters>
		protected internal BOStoreVw(DAOStoreVw daoStoreVw)
		{
			try
			{
				_storeId = daoStoreVw.StoreId;
				_branchId = daoStoreVw.BranchId;
				_storeTypeId = daoStoreVw.StoreTypeId;
				_storeNameEn = daoStoreVw.StoreNameEn;
				_storeNameAr = daoStoreVw.StoreNameAr;
				_storeCode = daoStoreVw.StoreCode;
				_isActive = daoStoreVw.IsActive;
				_icon = daoStoreVw.Icon;
				_color = daoStoreVw.Color;
				_displayOrder = daoStoreVw.DisplayOrder;
				_canDelete = daoStoreVw.CanDelete;
				_canEdit = daoStoreVw.CanEdit;
				_branchNameEn = daoStoreVw.BranchNameEn;
				_branchNameAr = daoStoreVw.BranchNameAr;
				_branchCode = daoStoreVw.BranchCode;
				_storeTypeNameEn = daoStoreVw.StoreTypeNameEn;
				_storeTypeNameAr = daoStoreVw.StoreTypeNameAr;
				_isOrder = daoStoreVw.IsOrder;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///StoreVwCollection
		///This method returns the collection of BOStoreVw objects
		///</Summary>
		///<returns>
		///List[BOStoreVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOStoreVw> StoreVwCollection()
		{
			try
			{
				IList<BOStoreVw> boStoreVwCollection = new List<BOStoreVw>();
				IList<DAOStoreVw> daoStoreVwCollection = DAOStoreVw.SelectAll();
			
				foreach(DAOStoreVw daoStoreVw in daoStoreVwCollection)
					boStoreVwCollection.Add(new BOStoreVw(daoStoreVw));
			
				return boStoreVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///StoreVwCollectionCount
		///This method returns the collection count of BOStoreVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 StoreVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOStoreVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOStoreVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOStoreVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///StoreVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOStoreVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boStoreVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOStoreVw> daoStoreVwCollection = DAOStoreVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOStoreVw resdaoStoreVw in daoStoreVwCollection)
					boStoreVwCollection.Add((T)(object)new BOStoreVw(resdaoStoreVw));
			
				return boStoreVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///StoreVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOStoreVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOStoreVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? StoreId
		{
			get
			{
				 return _storeId;
			}
			set
			{
				_storeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreTypeId
		{
			get
			{
				 return _storeTypeId;
			}
			set
			{
				_storeTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreNameEn
		{
			get
			{
				 return _storeNameEn;
			}
			set
			{
				_storeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreNameAr
		{
			get
			{
				 return _storeNameAr;
			}
			set
			{
				_storeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreCode
		{
			get
			{
				 return _storeCode;
			}
			set
			{
				_storeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreTypeNameEn
		{
			get
			{
				 return _storeTypeNameEn;
			}
			set
			{
				_storeTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreTypeNameAr
		{
			get
			{
				 return _storeTypeNameAr;
			}
			set
			{
				_storeTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsOrder
		{
			get
			{
				 return _isOrder;
			}
			set
			{
				_isOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
