/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOperationRejectReason.
	///It maintains a collection of BOOperationRequestDetail objects.
	///</Summary>
	public partial class BOOperationRejectReason : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _operationRejectReasonId;
		protected string _operationRejectReasonCode;
		protected string _operationRejectReasonNameEn;
		protected string _operationRejectReasonNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOOperationRequestDetail> _boOperationRequestDetailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOperationRejectReason()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 operationRejectReasonId
		///</parameters>
		public BOOperationRejectReason(Int32 operationRejectReasonId)
		{
			try
			{
				DAOOperationRejectReason daoOperationRejectReason = DAOOperationRejectReason.SelectOne(operationRejectReasonId);
				_operationRejectReasonId = daoOperationRejectReason.OperationRejectReasonId;
				_operationRejectReasonCode = daoOperationRejectReason.OperationRejectReasonCode;
				_operationRejectReasonNameEn = daoOperationRejectReason.OperationRejectReasonNameEn;
				_operationRejectReasonNameAr = daoOperationRejectReason.OperationRejectReasonNameAr;
				_isActive = daoOperationRejectReason.IsActive;
				_canEdit = daoOperationRejectReason.CanEdit;
				_canDelete = daoOperationRejectReason.CanDelete;
				_displayOrder = daoOperationRejectReason.DisplayOrder;
				_color = daoOperationRejectReason.Color;
				_icon = daoOperationRejectReason.Icon;
				_cBy = daoOperationRejectReason.CBy;
				_eBy = daoOperationRejectReason.EBy;
				_cDate = daoOperationRejectReason.CDate;
				_eDate = daoOperationRejectReason.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOperationRejectReason
		///</parameters>
		protected internal BOOperationRejectReason(DAOOperationRejectReason daoOperationRejectReason)
		{
			try
			{
				_operationRejectReasonId = daoOperationRejectReason.OperationRejectReasonId;
				_operationRejectReasonCode = daoOperationRejectReason.OperationRejectReasonCode;
				_operationRejectReasonNameEn = daoOperationRejectReason.OperationRejectReasonNameEn;
				_operationRejectReasonNameAr = daoOperationRejectReason.OperationRejectReasonNameAr;
				_isActive = daoOperationRejectReason.IsActive;
				_canEdit = daoOperationRejectReason.CanEdit;
				_canDelete = daoOperationRejectReason.CanDelete;
				_displayOrder = daoOperationRejectReason.DisplayOrder;
				_color = daoOperationRejectReason.Color;
				_icon = daoOperationRejectReason.Icon;
				_cBy = daoOperationRejectReason.CBy;
				_eBy = daoOperationRejectReason.EBy;
				_cDate = daoOperationRejectReason.CDate;
				_eDate = daoOperationRejectReason.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OperationRejectReason record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOOperationRejectReason daoOperationRejectReason = new DAOOperationRejectReason();
			RegisterDataObject(daoOperationRejectReason);
			BeginTransaction("savenewBOOperationRejectReason");
			try
			{
				daoOperationRejectReason.OperationRejectReasonId = _operationRejectReasonId;
				daoOperationRejectReason.OperationRejectReasonCode = _operationRejectReasonCode;
				daoOperationRejectReason.OperationRejectReasonNameEn = _operationRejectReasonNameEn;
				daoOperationRejectReason.OperationRejectReasonNameAr = _operationRejectReasonNameAr;
				daoOperationRejectReason.IsActive = _isActive;
				daoOperationRejectReason.CanEdit = _canEdit;
				daoOperationRejectReason.CanDelete = _canDelete;
				daoOperationRejectReason.DisplayOrder = _displayOrder;
				daoOperationRejectReason.Color = _color;
				daoOperationRejectReason.Icon = _icon;
				daoOperationRejectReason.CBy = _cBy;
				daoOperationRejectReason.EBy = _eBy;
				daoOperationRejectReason.CDate = _cDate;
				daoOperationRejectReason.EDate = _eDate;
				daoOperationRejectReason.Insert();
				CommitTransaction();
				
				_operationRejectReasonId = daoOperationRejectReason.OperationRejectReasonId;
				_operationRejectReasonCode = daoOperationRejectReason.OperationRejectReasonCode;
				_operationRejectReasonNameEn = daoOperationRejectReason.OperationRejectReasonNameEn;
				_operationRejectReasonNameAr = daoOperationRejectReason.OperationRejectReasonNameAr;
				_isActive = daoOperationRejectReason.IsActive;
				_canEdit = daoOperationRejectReason.CanEdit;
				_canDelete = daoOperationRejectReason.CanDelete;
				_displayOrder = daoOperationRejectReason.DisplayOrder;
				_color = daoOperationRejectReason.Color;
				_icon = daoOperationRejectReason.Icon;
				_cBy = daoOperationRejectReason.CBy;
				_eBy = daoOperationRejectReason.EBy;
				_cDate = daoOperationRejectReason.CDate;
				_eDate = daoOperationRejectReason.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOOperationRejectReason");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one OperationRejectReason record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRejectReason
		///</parameters>
		public virtual void Update()
		{
			DAOOperationRejectReason daoOperationRejectReason = new DAOOperationRejectReason();
			RegisterDataObject(daoOperationRejectReason);
			BeginTransaction("updateBOOperationRejectReason");
			try
			{
				daoOperationRejectReason.OperationRejectReasonId = _operationRejectReasonId;
				daoOperationRejectReason.OperationRejectReasonCode = _operationRejectReasonCode;
				daoOperationRejectReason.OperationRejectReasonNameEn = _operationRejectReasonNameEn;
				daoOperationRejectReason.OperationRejectReasonNameAr = _operationRejectReasonNameAr;
				daoOperationRejectReason.IsActive = _isActive;
				daoOperationRejectReason.CanEdit = _canEdit;
				daoOperationRejectReason.CanDelete = _canDelete;
				daoOperationRejectReason.DisplayOrder = _displayOrder;
				daoOperationRejectReason.Color = _color;
				daoOperationRejectReason.Icon = _icon;
				daoOperationRejectReason.CBy = _cBy;
				daoOperationRejectReason.EBy = _eBy;
				daoOperationRejectReason.CDate = _cDate;
				daoOperationRejectReason.EDate = _eDate;
				daoOperationRejectReason.Update();
				CommitTransaction();
				
				_operationRejectReasonId = daoOperationRejectReason.OperationRejectReasonId;
				_operationRejectReasonCode = daoOperationRejectReason.OperationRejectReasonCode;
				_operationRejectReasonNameEn = daoOperationRejectReason.OperationRejectReasonNameEn;
				_operationRejectReasonNameAr = daoOperationRejectReason.OperationRejectReasonNameAr;
				_isActive = daoOperationRejectReason.IsActive;
				_canEdit = daoOperationRejectReason.CanEdit;
				_canDelete = daoOperationRejectReason.CanDelete;
				_displayOrder = daoOperationRejectReason.DisplayOrder;
				_color = daoOperationRejectReason.Color;
				_icon = daoOperationRejectReason.Icon;
				_cBy = daoOperationRejectReason.CBy;
				_eBy = daoOperationRejectReason.EBy;
				_cDate = daoOperationRejectReason.CDate;
				_eDate = daoOperationRejectReason.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOOperationRejectReason");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OperationRejectReason record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOOperationRejectReason daoOperationRejectReason = new DAOOperationRejectReason();
			RegisterDataObject(daoOperationRejectReason);
			BeginTransaction("deleteBOOperationRejectReason");
			try
			{
				daoOperationRejectReason.OperationRejectReasonId = _operationRejectReasonId;
				daoOperationRejectReason.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOOperationRejectReason");
				throw;
			}
		}
		
		///<Summary>
		///OperationRejectReasonCollection
		///This method returns the collection of BOOperationRejectReason objects
		///</Summary>
		///<returns>
		///List[BOOperationRejectReason]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOOperationRejectReason> OperationRejectReasonCollection()
		{
			try
			{
				IList<BOOperationRejectReason> boOperationRejectReasonCollection = new List<BOOperationRejectReason>();
				IList<DAOOperationRejectReason> daoOperationRejectReasonCollection = DAOOperationRejectReason.SelectAll();
			
				foreach(DAOOperationRejectReason daoOperationRejectReason in daoOperationRejectReasonCollection)
					boOperationRejectReasonCollection.Add(new BOOperationRejectReason(daoOperationRejectReason));
			
				return boOperationRejectReasonCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationRejectReasonCollectionCount
		///This method returns the collection count of BOOperationRejectReason objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OperationRejectReasonCollectionCount()
		{
			try
			{
				Int32 objCount = DAOOperationRejectReason.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailCollection
		///This method returns its collection of BOOperationRequestDetail objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequestDetail]
		///</returns>
		///<parameters>
		///BOOperationRejectReason
		///</parameters>
		public virtual IList<BOOperationRequestDetail> OperationRequestDetailCollection()
		{
			try
			{
				if(_boOperationRequestDetailCollection == null)
					LoadOperationRequestDetailCollection();
				
				return _boOperationRequestDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOOperationRejectReason>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOOperationRejectReason.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationRejectReasonCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOOperationRejectReason objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOperationRejectReasonCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOOperationRejectReason> daoOperationRejectReasonCollection = DAOOperationRejectReason.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOOperationRejectReason resdaoOperationRejectReason in daoOperationRejectReasonCollection)
					boOperationRejectReasonCollection.Add((T)(object)new BOOperationRejectReason(resdaoOperationRejectReason));
			
				return boOperationRejectReasonCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationRejectReasonCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOOperationRejectReason objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOOperationRejectReason.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestDetailCollection
		///This method loads the internal collection of BOOperationRequestDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestDetailCollection()
		{
			try
			{
				_boOperationRequestDetailCollection = new List<BOOperationRequestDetail>();
				IList<DAOOperationRequestDetail> daoOperationRequestDetailCollection = DAOOperationRequestDetail.SelectAllByOperationRejectReasonId(_operationRejectReasonId.Value);
				
				foreach(DAOOperationRequestDetail daoOperationRequestDetail in daoOperationRequestDetailCollection)
					_boOperationRequestDetailCollection.Add(new BOOperationRequestDetail(daoOperationRequestDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequestDetail
		///This method persists a BOOperationRequestDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetail
		///</parameters>
		public virtual void AddOperationRequestDetail(BOOperationRequestDetail boOperationRequestDetail)
		{
			DAOOperationRequestDetail daoOperationRequestDetail = new DAOOperationRequestDetail();
			RegisterDataObject(daoOperationRequestDetail);
			BeginTransaction("addOperationRequestDetail");
			try
			{
				daoOperationRequestDetail.DetailId = boOperationRequestDetail.DetailId;
				daoOperationRequestDetail.OperationId = boOperationRequestDetail.OperationId;
				daoOperationRequestDetail.OperationDate = boOperationRequestDetail.OperationDate;
				daoOperationRequestDetail.ClientId = boOperationRequestDetail.ClientId;
				daoOperationRequestDetail.ClientTypeId = boOperationRequestDetail.ClientTypeId;
				daoOperationRequestDetail.ClientNameAr = boOperationRequestDetail.ClientNameAr;
				daoOperationRequestDetail.ClientNameEn = boOperationRequestDetail.ClientNameEn;
				daoOperationRequestDetail.RegionId = boOperationRequestDetail.RegionId;
				daoOperationRequestDetail.GovernerateId = boOperationRequestDetail.GovernerateId;
				daoOperationRequestDetail.CityId = boOperationRequestDetail.CityId;
				daoOperationRequestDetail.LocationLevelId = boOperationRequestDetail.LocationLevelId;
				daoOperationRequestDetail.IsChain = boOperationRequestDetail.IsChain;
				daoOperationRequestDetail.ResponsibleNameEn = boOperationRequestDetail.ResponsibleNameEn;
				daoOperationRequestDetail.ResponsibleNameAr = boOperationRequestDetail.ResponsibleNameAr;
				daoOperationRequestDetail.Building = boOperationRequestDetail.Building;
				daoOperationRequestDetail.Floor = boOperationRequestDetail.Floor;
				daoOperationRequestDetail.Property = boOperationRequestDetail.Property;
				daoOperationRequestDetail.Address = boOperationRequestDetail.Address;
				daoOperationRequestDetail.Landmark = boOperationRequestDetail.Landmark;
				daoOperationRequestDetail.Phone = boOperationRequestDetail.Phone;
				daoOperationRequestDetail.Mobile = boOperationRequestDetail.Mobile;
				daoOperationRequestDetail.WhatsApp = boOperationRequestDetail.WhatsApp;
				daoOperationRequestDetail.Latitude = boOperationRequestDetail.Latitude;
				daoOperationRequestDetail.Longitude = boOperationRequestDetail.Longitude;
				daoOperationRequestDetail.Accuracy = boOperationRequestDetail.Accuracy;
				daoOperationRequestDetail.InZone = boOperationRequestDetail.InZone;
				daoOperationRequestDetail.OperationStatusId = boOperationRequestDetail.OperationStatusId;
				daoOperationRequestDetail.CBy = boOperationRequestDetail.CBy;
				daoOperationRequestDetail.CDate = boOperationRequestDetail.CDate;
				daoOperationRequestDetail.EBy = boOperationRequestDetail.EBy;
				daoOperationRequestDetail.EDate = boOperationRequestDetail.EDate;
				daoOperationRequestDetail.TaxCode = boOperationRequestDetail.TaxCode;
				daoOperationRequestDetail.CommercialCode = boOperationRequestDetail.CommercialCode;
				daoOperationRequestDetail.OperationRejectReasonId = _operationRejectReasonId.Value;
				daoOperationRequestDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequestDetail = new BOOperationRequestDetail(daoOperationRequestDetail);
				if(_boOperationRequestDetailCollection != null)
					_boOperationRequestDetailCollection.Add(boOperationRequestDetail);
			}
			catch
			{
				RollbackTransaction("addOperationRequestDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequestDetail
		///This method deletes all BOOperationRequestDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequestDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequestDetail");
			try
			{
				DAOOperationRequestDetail.DeleteAllByOperationRejectReasonId(ConnectionProvider, _operationRejectReasonId.Value);
				CommitTransaction();
				if(_boOperationRequestDetailCollection != null)
				{
					_boOperationRequestDetailCollection.Clear();
					_boOperationRequestDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequestDetail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? OperationRejectReasonId
		{
			get
			{
				 return _operationRejectReasonId;
			}
			set
			{
				_operationRejectReasonId = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationRejectReasonCode
		{
			get
			{
				 return _operationRejectReasonCode;
			}
			set
			{
				_operationRejectReasonCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationRejectReasonNameEn
		{
			get
			{
				 return _operationRejectReasonNameEn;
			}
			set
			{
				_operationRejectReasonNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string OperationRejectReasonNameAr
		{
			get
			{
				 return _operationRejectReasonNameAr;
			}
			set
			{
				_operationRejectReasonNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
