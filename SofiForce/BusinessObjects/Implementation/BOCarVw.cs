/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOCarVw.
	///</Summary>
	public partial class BOCarVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected string _carNo;
		protected string _carCode;
		protected Int32? _branchId;
		protected Int32? _carId;
		protected Int32? _carTypeId;
		protected string _carTypeCode;
		protected string _carTypeNameEn;
		protected string _carTypeNameAr;
		protected Int32? _manufacturerId;
		protected Int32? _yearManufactur;
		protected string _manufacturerCode;
		protected string _manufacturerNameEn;
		protected string _manufacturerNameAr;
		protected string _model;
		protected bool? _isActive;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOCarVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOCarVw
		///</parameters>
		protected internal BOCarVw(DAOCarVw daoCarVw)
		{
			try
			{
				_branchCode = daoCarVw.BranchCode;
				_branchNameAr = daoCarVw.BranchNameAr;
				_branchNameEn = daoCarVw.BranchNameEn;
				_carNo = daoCarVw.CarNo;
				_carCode = daoCarVw.CarCode;
				_branchId = daoCarVw.BranchId;
				_carId = daoCarVw.CarId;
				_carTypeId = daoCarVw.CarTypeId;
				_carTypeCode = daoCarVw.CarTypeCode;
				_carTypeNameEn = daoCarVw.CarTypeNameEn;
				_carTypeNameAr = daoCarVw.CarTypeNameAr;
				_manufacturerId = daoCarVw.ManufacturerId;
				_yearManufactur = daoCarVw.YearManufactur;
				_manufacturerCode = daoCarVw.ManufacturerCode;
				_manufacturerNameEn = daoCarVw.ManufacturerNameEn;
				_manufacturerNameAr = daoCarVw.ManufacturerNameAr;
				_model = daoCarVw.Model;
				_isActive = daoCarVw.IsActive;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///CarVwCollection
		///This method returns the collection of BOCarVw objects
		///</Summary>
		///<returns>
		///List[BOCarVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOCarVw> CarVwCollection()
		{
			try
			{
				IList<BOCarVw> boCarVwCollection = new List<BOCarVw>();
				IList<DAOCarVw> daoCarVwCollection = DAOCarVw.SelectAll();
			
				foreach(DAOCarVw daoCarVw in daoCarVwCollection)
					boCarVwCollection.Add(new BOCarVw(daoCarVw));
			
				return boCarVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CarVwCollectionCount
		///This method returns the collection count of BOCarVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 CarVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOCarVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOCarVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOCarVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CarVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOCarVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boCarVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOCarVw> daoCarVwCollection = DAOCarVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOCarVw resdaoCarVw in daoCarVwCollection)
					boCarVwCollection.Add((T)(object)new BOCarVw(resdaoCarVw));
			
				return boCarVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CarVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOCarVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOCarVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string CarNo
		{
			get
			{
				 return _carNo;
			}
			set
			{
				_carNo = value;
				_isDirty = true;
			}
		}
		
		public virtual string CarCode
		{
			get
			{
				 return _carCode;
			}
			set
			{
				_carCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CarId
		{
			get
			{
				 return _carId;
			}
			set
			{
				_carId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CarTypeId
		{
			get
			{
				 return _carTypeId;
			}
			set
			{
				_carTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string CarTypeCode
		{
			get
			{
				 return _carTypeCode;
			}
			set
			{
				_carTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string CarTypeNameEn
		{
			get
			{
				 return _carTypeNameEn;
			}
			set
			{
				_carTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string CarTypeNameAr
		{
			get
			{
				 return _carTypeNameAr;
			}
			set
			{
				_carTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ManufacturerId
		{
			get
			{
				 return _manufacturerId;
			}
			set
			{
				_manufacturerId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? YearManufactur
		{
			get
			{
				 return _yearManufactur;
			}
			set
			{
				_yearManufactur = value;
				_isDirty = true;
			}
		}
		
		public virtual string ManufacturerCode
		{
			get
			{
				 return _manufacturerCode;
			}
			set
			{
				_manufacturerCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ManufacturerNameEn
		{
			get
			{
				 return _manufacturerNameEn;
			}
			set
			{
				_manufacturerNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ManufacturerNameAr
		{
			get
			{
				 return _manufacturerNameAr;
			}
			set
			{
				_manufacturerNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Model
		{
			get
			{
				 return _model;
			}
			set
			{
				_model = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
