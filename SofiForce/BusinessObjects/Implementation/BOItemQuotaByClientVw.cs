/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOItemQuotaByClientVw.
	///</Summary>
	public partial class BOItemQuotaByClientVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _itemId;
		protected string _itemCode;
		protected string _itemNameEn;
		protected string _itemNameAr;
		protected Int32? _vendorId;
		protected Int32? _clientId;
		protected Int32? _branchId;
		protected Int32? _quantity;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected DateTime? _fromDate;
		protected DateTime? _toDate;
		protected Int32? _quotaQty;
		protected string _invoiceCode;
		protected DateTime? _salesDate;
		protected Int32? _salesOrderStatusId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOItemQuotaByClientVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOItemQuotaByClientVw
		///</parameters>
		protected internal BOItemQuotaByClientVw(DAOItemQuotaByClientVw daoItemQuotaByClientVw)
		{
			try
			{
				_itemId = daoItemQuotaByClientVw.ItemId;
				_itemCode = daoItemQuotaByClientVw.ItemCode;
				_itemNameEn = daoItemQuotaByClientVw.ItemNameEn;
				_itemNameAr = daoItemQuotaByClientVw.ItemNameAr;
				_vendorId = daoItemQuotaByClientVw.VendorId;
				_clientId = daoItemQuotaByClientVw.ClientId;
				_branchId = daoItemQuotaByClientVw.BranchId;
				_quantity = daoItemQuotaByClientVw.Quantity;
				_clientCode = daoItemQuotaByClientVw.ClientCode;
				_clientNameAr = daoItemQuotaByClientVw.ClientNameAr;
				_clientNameEn = daoItemQuotaByClientVw.ClientNameEn;
				_fromDate = daoItemQuotaByClientVw.FromDate;
				_toDate = daoItemQuotaByClientVw.ToDate;
				_quotaQty = daoItemQuotaByClientVw.QuotaQty;
				_invoiceCode = daoItemQuotaByClientVw.InvoiceCode;
				_salesDate = daoItemQuotaByClientVw.SalesDate;
				_salesOrderStatusId = daoItemQuotaByClientVw.SalesOrderStatusId;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ItemQuotaByClientVwCollection
		///This method returns the collection of BOItemQuotaByClientVw objects
		///</Summary>
		///<returns>
		///List[BOItemQuotaByClientVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOItemQuotaByClientVw> ItemQuotaByClientVwCollection()
		{
			try
			{
				IList<BOItemQuotaByClientVw> boItemQuotaByClientVwCollection = new List<BOItemQuotaByClientVw>();
				IList<DAOItemQuotaByClientVw> daoItemQuotaByClientVwCollection = DAOItemQuotaByClientVw.SelectAll();
			
				foreach(DAOItemQuotaByClientVw daoItemQuotaByClientVw in daoItemQuotaByClientVwCollection)
					boItemQuotaByClientVwCollection.Add(new BOItemQuotaByClientVw(daoItemQuotaByClientVw));
			
				return boItemQuotaByClientVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemQuotaByClientVwCollectionCount
		///This method returns the collection count of BOItemQuotaByClientVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ItemQuotaByClientVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOItemQuotaByClientVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOItemQuotaByClientVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOItemQuotaByClientVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemQuotaByClientVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOItemQuotaByClientVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boItemQuotaByClientVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOItemQuotaByClientVw> daoItemQuotaByClientVwCollection = DAOItemQuotaByClientVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOItemQuotaByClientVw resdaoItemQuotaByClientVw in daoItemQuotaByClientVwCollection)
					boItemQuotaByClientVwCollection.Add((T)(object)new BOItemQuotaByClientVw(resdaoItemQuotaByClientVw));
			
				return boItemQuotaByClientVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemQuotaByClientVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOItemQuotaByClientVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOItemQuotaByClientVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ItemId
		{
			get
			{
				 return _itemId;
			}
			set
			{
				_itemId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemCode
		{
			get
			{
				 return _itemCode;
			}
			set
			{
				_itemCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemNameEn
		{
			get
			{
				 return _itemNameEn;
			}
			set
			{
				_itemNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemNameAr
		{
			get
			{
				 return _itemNameAr;
			}
			set
			{
				_itemNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VendorId
		{
			get
			{
				 return _vendorId;
			}
			set
			{
				_vendorId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientCode
		{
			get
			{
				 return _clientCode;
			}
			set
			{
				_clientCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientNameAr
		{
			get
			{
				 return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientNameEn
		{
			get
			{
				 return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? FromDate
		{
			get
			{
				 return _fromDate;
			}
			set
			{
				_fromDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ToDate
		{
			get
			{
				 return _toDate;
			}
			set
			{
				_toDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? QuotaQty
		{
			get
			{
				 return _quotaQty;
			}
			set
			{
				_quotaQty = value;
				_isDirty = true;
			}
		}
		
		public virtual string InvoiceCode
		{
			get
			{
				 return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? SalesDate
		{
			get
			{
				 return _salesDate;
			}
			set
			{
				_salesDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesOrderStatusId
		{
			get
			{
				 return _salesOrderStatusId;
			}
			set
			{
				_salesOrderStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
