/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORepresentative.
	///It maintains a collection of BOClientActivity,BOClientComplain,BOClientPayment,BOClientServiceRequest,BOClientSurvey,BOOperationRequest,BORepresentativeComission,BORepresentativeJourney,BORepresentativeQuota,BOSalesOrder objects.
	///</Summary>
	public partial class BORepresentative : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _representativeId;
		protected Int32? _branchId;
		protected Int32? _userId;
		protected Int32? _supervisorId;
		protected Int32? _kindId;
		protected Int32? _businessUnitId;
		protected string _companyCode;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _phone;
		protected string _phoneAlternative;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected DateTime? _joinDate;
		protected string _notes;
		protected string _icon;
		protected string _color;
		protected bool? _isTerminated;
		protected DateTime? _terminationDate;
		protected Int32? _terminationReasonId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientActivity> _boClientActivityCollection;
		List<BOClientComplain> _boClientComplainCollection;
		List<BOClientPayment> _boClientPaymentCollection;
		List<BOClientServiceRequest> _boClientServiceRequestCollection;
		List<BOClientSurvey> _boClientSurveyCollection;
		List<BOOperationRequest> _boOperationRequestCollection;
		List<BORepresentativeComission> _boRepresentativeComissionCollection;
		List<BORepresentativeJourney> _boRepresentativeJourneyCollection;
		List<BORepresentativeQuota> _boRepresentativeQuotaCollection;
		List<BOSalesOrder> _boSalesOrderCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORepresentative()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 representativeId
		///</parameters>
		public BORepresentative(Int32 representativeId)
		{
			try
			{
				DAORepresentative daoRepresentative = DAORepresentative.SelectOne(representativeId);
				_representativeId = daoRepresentative.RepresentativeId;
				_branchId = daoRepresentative.BranchId;
				_userId = daoRepresentative.UserId;
				_supervisorId = daoRepresentative.SupervisorId;
				_kindId = daoRepresentative.KindId;
				_businessUnitId = daoRepresentative.BusinessUnitId;
				_companyCode = daoRepresentative.CompanyCode;
				_representativeCode = daoRepresentative.RepresentativeCode;
				_representativeNameAr = daoRepresentative.RepresentativeNameAr;
				_representativeNameEn = daoRepresentative.RepresentativeNameEn;
				_phone = daoRepresentative.Phone;
				_phoneAlternative = daoRepresentative.PhoneAlternative;
				_isActive = daoRepresentative.IsActive;
				_displayOrder = daoRepresentative.DisplayOrder;
				_canEdit = daoRepresentative.CanEdit;
				_canDelete = daoRepresentative.CanDelete;
				_joinDate = daoRepresentative.JoinDate;
				_notes = daoRepresentative.Notes;
				_icon = daoRepresentative.Icon;
				_color = daoRepresentative.Color;
				_isTerminated = daoRepresentative.IsTerminated;
				_terminationDate = daoRepresentative.TerminationDate;
				_terminationReasonId = daoRepresentative.TerminationReasonId;
				_cBy = daoRepresentative.CBy;
				_cDate = daoRepresentative.CDate;
				_eBy = daoRepresentative.EBy;
				_eDate = daoRepresentative.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORepresentative
		///</parameters>
		protected internal BORepresentative(DAORepresentative daoRepresentative)
		{
			try
			{
				_representativeId = daoRepresentative.RepresentativeId;
				_branchId = daoRepresentative.BranchId;
				_userId = daoRepresentative.UserId;
				_supervisorId = daoRepresentative.SupervisorId;
				_kindId = daoRepresentative.KindId;
				_businessUnitId = daoRepresentative.BusinessUnitId;
				_companyCode = daoRepresentative.CompanyCode;
				_representativeCode = daoRepresentative.RepresentativeCode;
				_representativeNameAr = daoRepresentative.RepresentativeNameAr;
				_representativeNameEn = daoRepresentative.RepresentativeNameEn;
				_phone = daoRepresentative.Phone;
				_phoneAlternative = daoRepresentative.PhoneAlternative;
				_isActive = daoRepresentative.IsActive;
				_displayOrder = daoRepresentative.DisplayOrder;
				_canEdit = daoRepresentative.CanEdit;
				_canDelete = daoRepresentative.CanDelete;
				_joinDate = daoRepresentative.JoinDate;
				_notes = daoRepresentative.Notes;
				_icon = daoRepresentative.Icon;
				_color = daoRepresentative.Color;
				_isTerminated = daoRepresentative.IsTerminated;
				_terminationDate = daoRepresentative.TerminationDate;
				_terminationReasonId = daoRepresentative.TerminationReasonId;
				_cBy = daoRepresentative.CBy;
				_cDate = daoRepresentative.CDate;
				_eBy = daoRepresentative.EBy;
				_eDate = daoRepresentative.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Representative record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("savenewBORepresentative");
			try
			{
				daoRepresentative.BranchId = _branchId;
				daoRepresentative.UserId = _userId;
				daoRepresentative.SupervisorId = _supervisorId;
				daoRepresentative.KindId = _kindId;
				daoRepresentative.BusinessUnitId = _businessUnitId;
				daoRepresentative.CompanyCode = _companyCode;
				daoRepresentative.RepresentativeCode = _representativeCode;
				daoRepresentative.RepresentativeNameAr = _representativeNameAr;
				daoRepresentative.RepresentativeNameEn = _representativeNameEn;
				daoRepresentative.Phone = _phone;
				daoRepresentative.PhoneAlternative = _phoneAlternative;
				daoRepresentative.IsActive = _isActive;
				daoRepresentative.DisplayOrder = _displayOrder;
				daoRepresentative.CanEdit = _canEdit;
				daoRepresentative.CanDelete = _canDelete;
				daoRepresentative.JoinDate = _joinDate;
				daoRepresentative.Notes = _notes;
				daoRepresentative.Icon = _icon;
				daoRepresentative.Color = _color;
				daoRepresentative.IsTerminated = _isTerminated;
				daoRepresentative.TerminationDate = _terminationDate;
				daoRepresentative.TerminationReasonId = _terminationReasonId;
				daoRepresentative.CBy = _cBy;
				daoRepresentative.CDate = _cDate;
				daoRepresentative.EBy = _eBy;
				daoRepresentative.EDate = _eDate;
				daoRepresentative.Insert();
				CommitTransaction();
				
				_representativeId = daoRepresentative.RepresentativeId;
				_branchId = daoRepresentative.BranchId;
				_userId = daoRepresentative.UserId;
				_supervisorId = daoRepresentative.SupervisorId;
				_kindId = daoRepresentative.KindId;
				_businessUnitId = daoRepresentative.BusinessUnitId;
				_companyCode = daoRepresentative.CompanyCode;
				_representativeCode = daoRepresentative.RepresentativeCode;
				_representativeNameAr = daoRepresentative.RepresentativeNameAr;
				_representativeNameEn = daoRepresentative.RepresentativeNameEn;
				_phone = daoRepresentative.Phone;
				_phoneAlternative = daoRepresentative.PhoneAlternative;
				_isActive = daoRepresentative.IsActive;
				_displayOrder = daoRepresentative.DisplayOrder;
				_canEdit = daoRepresentative.CanEdit;
				_canDelete = daoRepresentative.CanDelete;
				_joinDate = daoRepresentative.JoinDate;
				_notes = daoRepresentative.Notes;
				_icon = daoRepresentative.Icon;
				_color = daoRepresentative.Color;
				_isTerminated = daoRepresentative.IsTerminated;
				_terminationDate = daoRepresentative.TerminationDate;
				_terminationReasonId = daoRepresentative.TerminationReasonId;
				_cBy = daoRepresentative.CBy;
				_cDate = daoRepresentative.CDate;
				_eBy = daoRepresentative.EBy;
				_eDate = daoRepresentative.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORepresentative");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Representative record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual void Update()
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("updateBORepresentative");
			try
			{
				daoRepresentative.RepresentativeId = _representativeId;
				daoRepresentative.BranchId = _branchId;
				daoRepresentative.UserId = _userId;
				daoRepresentative.SupervisorId = _supervisorId;
				daoRepresentative.KindId = _kindId;
				daoRepresentative.BusinessUnitId = _businessUnitId;
				daoRepresentative.CompanyCode = _companyCode;
				daoRepresentative.RepresentativeCode = _representativeCode;
				daoRepresentative.RepresentativeNameAr = _representativeNameAr;
				daoRepresentative.RepresentativeNameEn = _representativeNameEn;
				daoRepresentative.Phone = _phone;
				daoRepresentative.PhoneAlternative = _phoneAlternative;
				daoRepresentative.IsActive = _isActive;
				daoRepresentative.DisplayOrder = _displayOrder;
				daoRepresentative.CanEdit = _canEdit;
				daoRepresentative.CanDelete = _canDelete;
				daoRepresentative.JoinDate = _joinDate;
				daoRepresentative.Notes = _notes;
				daoRepresentative.Icon = _icon;
				daoRepresentative.Color = _color;
				daoRepresentative.IsTerminated = _isTerminated;
				daoRepresentative.TerminationDate = _terminationDate;
				daoRepresentative.TerminationReasonId = _terminationReasonId;
				daoRepresentative.CBy = _cBy;
				daoRepresentative.CDate = _cDate;
				daoRepresentative.EBy = _eBy;
				daoRepresentative.EDate = _eDate;
				daoRepresentative.Update();
				CommitTransaction();
				
				_representativeId = daoRepresentative.RepresentativeId;
				_branchId = daoRepresentative.BranchId;
				_userId = daoRepresentative.UserId;
				_supervisorId = daoRepresentative.SupervisorId;
				_kindId = daoRepresentative.KindId;
				_businessUnitId = daoRepresentative.BusinessUnitId;
				_companyCode = daoRepresentative.CompanyCode;
				_representativeCode = daoRepresentative.RepresentativeCode;
				_representativeNameAr = daoRepresentative.RepresentativeNameAr;
				_representativeNameEn = daoRepresentative.RepresentativeNameEn;
				_phone = daoRepresentative.Phone;
				_phoneAlternative = daoRepresentative.PhoneAlternative;
				_isActive = daoRepresentative.IsActive;
				_displayOrder = daoRepresentative.DisplayOrder;
				_canEdit = daoRepresentative.CanEdit;
				_canDelete = daoRepresentative.CanDelete;
				_joinDate = daoRepresentative.JoinDate;
				_notes = daoRepresentative.Notes;
				_icon = daoRepresentative.Icon;
				_color = daoRepresentative.Color;
				_isTerminated = daoRepresentative.IsTerminated;
				_terminationDate = daoRepresentative.TerminationDate;
				_terminationReasonId = daoRepresentative.TerminationReasonId;
				_cBy = daoRepresentative.CBy;
				_cDate = daoRepresentative.CDate;
				_eBy = daoRepresentative.EBy;
				_eDate = daoRepresentative.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORepresentative");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Representative record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("deleteBORepresentative");
			try
			{
				daoRepresentative.RepresentativeId = _representativeId;
				daoRepresentative.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORepresentative");
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeCollection
		///This method returns the collection of BORepresentative objects
		///</Summary>
		///<returns>
		///List[BORepresentative]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORepresentative> RepresentativeCollection()
		{
			try
			{
				IList<BORepresentative> boRepresentativeCollection = new List<BORepresentative>();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAll();
			
				foreach(DAORepresentative daoRepresentative in daoRepresentativeCollection)
					boRepresentativeCollection.Add(new BORepresentative(daoRepresentative));
			
				return boRepresentativeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeCollectionCount
		///This method returns the collection count of BORepresentative objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RepresentativeCollectionCount()
		{
			try
			{
				Int32 objCount = DAORepresentative.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientActivityCollection
		///This method returns its collection of BOClientActivity objects
		///</Summary>
		///<returns>
		///IList[BOClientActivity]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BOClientActivity> ClientActivityCollection()
		{
			try
			{
				if(_boClientActivityCollection == null)
					LoadClientActivityCollection();
				
				return _boClientActivityCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientPaymentCollection
		///This method returns its collection of BOClientPayment objects
		///</Summary>
		///<returns>
		///IList[BOClientPayment]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BOClientPayment> ClientPaymentCollection()
		{
			try
			{
				if(_boClientPaymentCollection == null)
					LoadClientPaymentCollection();
				
				return _boClientPaymentCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestCollection
		///This method returns its collection of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequest]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BOClientServiceRequest> ClientServiceRequestCollection()
		{
			try
			{
				if(_boClientServiceRequestCollection == null)
					LoadClientServiceRequestCollection();
				
				return _boClientServiceRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientSurveyCollection
		///This method returns its collection of BOClientSurvey objects
		///</Summary>
		///<returns>
		///IList[BOClientSurvey]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BOClientSurvey> ClientSurveyCollection()
		{
			try
			{
				if(_boClientSurveyCollection == null)
					LoadClientSurveyCollection();
				
				return _boClientSurveyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestCollection
		///This method returns its collection of BOOperationRequest objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequest]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BOOperationRequest> OperationRequestCollection()
		{
			try
			{
				if(_boOperationRequestCollection == null)
					LoadOperationRequestCollection();
				
				return _boOperationRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeComissionCollection
		///This method returns its collection of BORepresentativeComission objects
		///</Summary>
		///<returns>
		///IList[BORepresentativeComission]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BORepresentativeComission> RepresentativeComissionCollection()
		{
			try
			{
				if(_boRepresentativeComissionCollection == null)
					LoadRepresentativeComissionCollection();
				
				return _boRepresentativeComissionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeJourneyCollection
		///This method returns its collection of BORepresentativeJourney objects
		///</Summary>
		///<returns>
		///IList[BORepresentativeJourney]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BORepresentativeJourney> RepresentativeJourneyCollection()
		{
			try
			{
				if(_boRepresentativeJourneyCollection == null)
					LoadRepresentativeJourneyCollection();
				
				return _boRepresentativeJourneyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeQuotaCollection
		///This method returns its collection of BORepresentativeQuota objects
		///</Summary>
		///<returns>
		///IList[BORepresentativeQuota]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BORepresentativeQuota> RepresentativeQuotaCollection()
		{
			try
			{
				if(_boRepresentativeQuotaCollection == null)
					LoadRepresentativeQuotaCollection();
				
				return _boRepresentativeQuotaCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderCollection
		///This method returns its collection of BOSalesOrder objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrder]
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual IList<BOSalesOrder> SalesOrderCollection()
		{
			try
			{
				if(_boSalesOrderCollection == null)
					LoadSalesOrderCollection();
				
				return _boSalesOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORepresentative>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORepresentative.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORepresentative objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRepresentativeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORepresentative resdaoRepresentative in daoRepresentativeCollection)
					boRepresentativeCollection.Add((T)(object)new BORepresentative(resdaoRepresentative));
			
				return boRepresentativeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORepresentative objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORepresentative.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientActivityCollection
		///This method loads the internal collection of BOClientActivity objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientActivityCollection()
		{
			try
			{
				_boClientActivityCollection = new List<BOClientActivity>();
				IList<DAOClientActivity> daoClientActivityCollection = DAOClientActivity.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAOClientActivity daoClientActivity in daoClientActivityCollection)
					_boClientActivityCollection.Add(new BOClientActivity(daoClientActivity));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientActivity
		///This method persists a BOClientActivity object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientActivity
		///</parameters>
		public virtual void AddClientActivity(BOClientActivity boClientActivity)
		{
			DAOClientActivity daoClientActivity = new DAOClientActivity();
			RegisterDataObject(daoClientActivity);
			BeginTransaction("addClientActivity");
			try
			{
				daoClientActivity.ActivityId = boClientActivity.ActivityId;
				daoClientActivity.ClientId = boClientActivity.ClientId;
				daoClientActivity.ActivityDate = boClientActivity.ActivityDate;
				daoClientActivity.ActivityTime = boClientActivity.ActivityTime;
				daoClientActivity.Duration = boClientActivity.Duration;
				daoClientActivity.InJourney = boClientActivity.InJourney;
				daoClientActivity.IsPositive = boClientActivity.IsPositive;
				daoClientActivity.InZone = boClientActivity.InZone;
				daoClientActivity.ActivityTypeId = boClientActivity.ActivityTypeId;
				daoClientActivity.Latitude = boClientActivity.Latitude;
				daoClientActivity.Longitude = boClientActivity.Longitude;
				daoClientActivity.Distance = boClientActivity.Distance;
				daoClientActivity.SalesId = boClientActivity.SalesId;
				daoClientActivity.CallAgain = boClientActivity.CallAgain;
				daoClientActivity.Notes = boClientActivity.Notes;
				daoClientActivity.CBy = boClientActivity.CBy;
				daoClientActivity.CDate = boClientActivity.CDate;
				daoClientActivity.EBy = boClientActivity.EBy;
				daoClientActivity.EDate = boClientActivity.EDate;
				daoClientActivity.RepresentativeId = _representativeId.Value;
				daoClientActivity.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientActivity = new BOClientActivity(daoClientActivity);
				if(_boClientActivityCollection != null)
					_boClientActivityCollection.Add(boClientActivity);
			}
			catch
			{
				RollbackTransaction("addClientActivity");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientActivity
		///This method deletes all BOClientActivity objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientActivity()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientActivity");
			try
			{
				DAOClientActivity.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boClientActivityCollection != null)
				{
					_boClientActivityCollection.Clear();
					_boClientActivityCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientActivity");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.BranchId = boClientComplain.BranchId;
				daoClientComplain.ClientId = boClientComplain.ClientId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeId = boClientComplain.ComplainTypeId;
				daoClientComplain.ComplainTypeDetailId = boClientComplain.ComplainTypeDetailId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.PriorityId = boClientComplain.PriorityId;
				daoClientComplain.ComplainStatusId = boClientComplain.ComplainStatusId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.DepartmentId = boClientComplain.DepartmentId;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.RepresentativeId = _representativeId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientPaymentCollection
		///This method loads the internal collection of BOClientPayment objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientPaymentCollection()
		{
			try
			{
				_boClientPaymentCollection = new List<BOClientPayment>();
				IList<DAOClientPayment> daoClientPaymentCollection = DAOClientPayment.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAOClientPayment daoClientPayment in daoClientPaymentCollection)
					_boClientPaymentCollection.Add(new BOClientPayment(daoClientPayment));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientPayment
		///This method persists a BOClientPayment object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientPayment
		///</parameters>
		public virtual void AddClientPayment(BOClientPayment boClientPayment)
		{
			DAOClientPayment daoClientPayment = new DAOClientPayment();
			RegisterDataObject(daoClientPayment);
			BeginTransaction("addClientPayment");
			try
			{
				daoClientPayment.PaymentId = boClientPayment.PaymentId;
				daoClientPayment.ClientId = boClientPayment.ClientId;
				daoClientPayment.PaymentDate = boClientPayment.PaymentDate;
				daoClientPayment.PaymentMethodId = boClientPayment.PaymentMethodId;
				daoClientPayment.PaymentValue = boClientPayment.PaymentValue;
				daoClientPayment.PaymentCode = boClientPayment.PaymentCode;
				daoClientPayment.BankId = boClientPayment.BankId;
				daoClientPayment.DueDate = boClientPayment.DueDate;
				daoClientPayment.IsRejected = boClientPayment.IsRejected;
				daoClientPayment.CBy = boClientPayment.CBy;
				daoClientPayment.CDate = boClientPayment.CDate;
				daoClientPayment.EBy = boClientPayment.EBy;
				daoClientPayment.EDate = boClientPayment.EDate;
				daoClientPayment.RepresentativeId = _representativeId.Value;
				daoClientPayment.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientPayment = new BOClientPayment(daoClientPayment);
				if(_boClientPaymentCollection != null)
					_boClientPaymentCollection.Add(boClientPayment);
			}
			catch
			{
				RollbackTransaction("addClientPayment");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientPayment
		///This method deletes all BOClientPayment objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientPayment()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientPayment");
			try
			{
				DAOClientPayment.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boClientPaymentCollection != null)
				{
					_boClientPaymentCollection.Clear();
					_boClientPaymentCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientPayment");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestCollection
		///This method loads the internal collection of BOClientServiceRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestCollection()
		{
			try
			{
				_boClientServiceRequestCollection = new List<BOClientServiceRequest>();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAOClientServiceRequest daoClientServiceRequest in daoClientServiceRequestCollection)
					_boClientServiceRequestCollection.Add(new BOClientServiceRequest(daoClientServiceRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequest
		///This method persists a BOClientServiceRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual void AddClientServiceRequest(BOClientServiceRequest boClientServiceRequest)
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("addClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = boClientServiceRequest.RequestId;
				daoClientServiceRequest.RequestCode = boClientServiceRequest.RequestCode;
				daoClientServiceRequest.BranchId = boClientServiceRequest.BranchId;
				daoClientServiceRequest.ClientId = boClientServiceRequest.ClientId;
				daoClientServiceRequest.RequestDate = boClientServiceRequest.RequestDate;
				daoClientServiceRequest.RequestTime = boClientServiceRequest.RequestTime;
				daoClientServiceRequest.RequestTypeId = boClientServiceRequest.RequestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = boClientServiceRequest.RequestTypeDetailId;
				daoClientServiceRequest.Phone = boClientServiceRequest.Phone;
				daoClientServiceRequest.PhoneAlternative = boClientServiceRequest.PhoneAlternative;
				daoClientServiceRequest.PriorityId = boClientServiceRequest.PriorityId;
				daoClientServiceRequest.RequestStatusId = boClientServiceRequest.RequestStatusId;
				daoClientServiceRequest.IsClosed = boClientServiceRequest.IsClosed;
				daoClientServiceRequest.CloseDate = boClientServiceRequest.CloseDate;
				daoClientServiceRequest.Duration = boClientServiceRequest.Duration;
				daoClientServiceRequest.Latitude = boClientServiceRequest.Latitude;
				daoClientServiceRequest.Longitude = boClientServiceRequest.Longitude;
				daoClientServiceRequest.InZone = boClientServiceRequest.InZone;
				daoClientServiceRequest.Distance = boClientServiceRequest.Distance;
				daoClientServiceRequest.Notes = boClientServiceRequest.Notes;
				daoClientServiceRequest.DepartmentId = boClientServiceRequest.DepartmentId;
				daoClientServiceRequest.CBy = boClientServiceRequest.CBy;
				daoClientServiceRequest.CDate = boClientServiceRequest.CDate;
				daoClientServiceRequest.EBy = boClientServiceRequest.EBy;
				daoClientServiceRequest.EDate = boClientServiceRequest.EDate;
				daoClientServiceRequest.Replay = boClientServiceRequest.Replay;
				daoClientServiceRequest.RequestTitle = boClientServiceRequest.RequestTitle;
				daoClientServiceRequest.RepresentativeId = _representativeId.Value;
				daoClientServiceRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequest = new BOClientServiceRequest(daoClientServiceRequest);
				if(_boClientServiceRequestCollection != null)
					_boClientServiceRequestCollection.Add(boClientServiceRequest);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequest
		///This method deletes all BOClientServiceRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceRequest");
			try
			{
				DAOClientServiceRequest.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boClientServiceRequestCollection != null)
				{
					_boClientServiceRequestCollection.Clear();
					_boClientServiceRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientSurveyCollection
		///This method loads the internal collection of BOClientSurvey objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientSurveyCollection()
		{
			try
			{
				_boClientSurveyCollection = new List<BOClientSurvey>();
				IList<DAOClientSurvey> daoClientSurveyCollection = DAOClientSurvey.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAOClientSurvey daoClientSurvey in daoClientSurveyCollection)
					_boClientSurveyCollection.Add(new BOClientSurvey(daoClientSurvey));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientSurvey
		///This method persists a BOClientSurvey object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientSurvey
		///</parameters>
		public virtual void AddClientSurvey(BOClientSurvey boClientSurvey)
		{
			DAOClientSurvey daoClientSurvey = new DAOClientSurvey();
			RegisterDataObject(daoClientSurvey);
			BeginTransaction("addClientSurvey");
			try
			{
				daoClientSurvey.ClientServeyId = boClientSurvey.ClientServeyId;
				daoClientSurvey.SurveyId = boClientSurvey.SurveyId;
				daoClientSurvey.BranchId = boClientSurvey.BranchId;
				daoClientSurvey.ClientId = boClientSurvey.ClientId;
				daoClientSurvey.ServeyStatusId = boClientSurvey.ServeyStatusId;
				daoClientSurvey.CreateDate = boClientSurvey.CreateDate;
				daoClientSurvey.CreateTime = boClientSurvey.CreateTime;
				daoClientSurvey.StartDate = boClientSurvey.StartDate;
				daoClientSurvey.StartTime = boClientSurvey.StartTime;
				daoClientSurvey.IsClosed = boClientSurvey.IsClosed;
				daoClientSurvey.Notes = boClientSurvey.Notes;
				daoClientSurvey.Latitude = boClientSurvey.Latitude;
				daoClientSurvey.Longitude = boClientSurvey.Longitude;
				daoClientSurvey.InZone = boClientSurvey.InZone;
				daoClientSurvey.Distance = boClientSurvey.Distance;
				daoClientSurvey.CanDelete = boClientSurvey.CanDelete;
				daoClientSurvey.CBy = boClientSurvey.CBy;
				daoClientSurvey.CDate = boClientSurvey.CDate;
				daoClientSurvey.EBy = boClientSurvey.EBy;
				daoClientSurvey.EDate = boClientSurvey.EDate;
				daoClientSurvey.RepresentativeId = _representativeId.Value;
				daoClientSurvey.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientSurvey = new BOClientSurvey(daoClientSurvey);
				if(_boClientSurveyCollection != null)
					_boClientSurveyCollection.Add(boClientSurvey);
			}
			catch
			{
				RollbackTransaction("addClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientSurvey
		///This method deletes all BOClientSurvey objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientSurvey()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientSurvey");
			try
			{
				DAOClientSurvey.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boClientSurveyCollection != null)
				{
					_boClientSurveyCollection.Clear();
					_boClientSurveyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestCollection
		///This method loads the internal collection of BOOperationRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestCollection()
		{
			try
			{
				_boOperationRequestCollection = new List<BOOperationRequest>();
				IList<DAOOperationRequest> daoOperationRequestCollection = DAOOperationRequest.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAOOperationRequest daoOperationRequest in daoOperationRequestCollection)
					_boOperationRequestCollection.Add(new BOOperationRequest(daoOperationRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequest
		///This method persists a BOOperationRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequest
		///</parameters>
		public virtual void AddOperationRequest(BOOperationRequest boOperationRequest)
		{
			DAOOperationRequest daoOperationRequest = new DAOOperationRequest();
			RegisterDataObject(daoOperationRequest);
			BeginTransaction("addOperationRequest");
			try
			{
				daoOperationRequest.OperationId = boOperationRequest.OperationId;
				daoOperationRequest.OperationCode = boOperationRequest.OperationCode;
				daoOperationRequest.AgentId = boOperationRequest.AgentId;
				daoOperationRequest.OperationTypeId = boOperationRequest.OperationTypeId;
				daoOperationRequest.GovernerateId = boOperationRequest.GovernerateId;
				daoOperationRequest.OperationDate = boOperationRequest.OperationDate;
				daoOperationRequest.StartDate = boOperationRequest.StartDate;
				daoOperationRequest.TargetDays = boOperationRequest.TargetDays;
				daoOperationRequest.ActualDays = boOperationRequest.ActualDays;
				daoOperationRequest.TargetClients = boOperationRequest.TargetClients;
				daoOperationRequest.ActualClients = boOperationRequest.ActualClients;
				daoOperationRequest.DaysPerformance = boOperationRequest.DaysPerformance;
				daoOperationRequest.ClientsPerformance = boOperationRequest.ClientsPerformance;
				daoOperationRequest.Accuracy = boOperationRequest.Accuracy;
				daoOperationRequest.MapPoints = boOperationRequest.MapPoints;
				daoOperationRequest.IsClosed = boOperationRequest.IsClosed;
				daoOperationRequest.CloseDate = boOperationRequest.CloseDate;
				daoOperationRequest.Notes = boOperationRequest.Notes;
				daoOperationRequest.CBy = boOperationRequest.CBy;
				daoOperationRequest.EBy = boOperationRequest.EBy;
				daoOperationRequest.CDate = boOperationRequest.CDate;
				daoOperationRequest.EDate = boOperationRequest.EDate;
				daoOperationRequest.RepresentativeId = _representativeId.Value;
				daoOperationRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequest = new BOOperationRequest(daoOperationRequest);
				if(_boOperationRequestCollection != null)
					_boOperationRequestCollection.Add(boOperationRequest);
			}
			catch
			{
				RollbackTransaction("addOperationRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequest
		///This method deletes all BOOperationRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequest");
			try
			{
				DAOOperationRequest.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boOperationRequestCollection != null)
				{
					_boOperationRequestCollection.Clear();
					_boOperationRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequest");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeComissionCollection
		///This method loads the internal collection of BORepresentativeComission objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeComissionCollection()
		{
			try
			{
				_boRepresentativeComissionCollection = new List<BORepresentativeComission>();
				IList<DAORepresentativeComission> daoRepresentativeComissionCollection = DAORepresentativeComission.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAORepresentativeComission daoRepresentativeComission in daoRepresentativeComissionCollection)
					_boRepresentativeComissionCollection.Add(new BORepresentativeComission(daoRepresentativeComission));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentativeComission
		///This method persists a BORepresentativeComission object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeComission
		///</parameters>
		public virtual void AddRepresentativeComission(BORepresentativeComission boRepresentativeComission)
		{
			DAORepresentativeComission daoRepresentativeComission = new DAORepresentativeComission();
			RegisterDataObject(daoRepresentativeComission);
			BeginTransaction("addRepresentativeComission");
			try
			{
				daoRepresentativeComission.ComissionId = boRepresentativeComission.ComissionId;
				daoRepresentativeComission.ComissionDate = boRepresentativeComission.ComissionDate;
				daoRepresentativeComission.ComissionValue = boRepresentativeComission.ComissionValue;
				daoRepresentativeComission.IsApproved = boRepresentativeComission.IsApproved;
				daoRepresentativeComission.ComissionTypeId = boRepresentativeComission.ComissionTypeId;
				daoRepresentativeComission.Notes = boRepresentativeComission.Notes;
				daoRepresentativeComission.CBy = boRepresentativeComission.CBy;
				daoRepresentativeComission.CDate = boRepresentativeComission.CDate;
				daoRepresentativeComission.EBy = boRepresentativeComission.EBy;
				daoRepresentativeComission.EDate = boRepresentativeComission.EDate;
				daoRepresentativeComission.RepresentativeId = _representativeId.Value;
				daoRepresentativeComission.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentativeComission = new BORepresentativeComission(daoRepresentativeComission);
				if(_boRepresentativeComissionCollection != null)
					_boRepresentativeComissionCollection.Add(boRepresentativeComission);
			}
			catch
			{
				RollbackTransaction("addRepresentativeComission");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentativeComission
		///This method deletes all BORepresentativeComission objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentativeComission()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentativeComission");
			try
			{
				DAORepresentativeComission.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boRepresentativeComissionCollection != null)
				{
					_boRepresentativeComissionCollection.Clear();
					_boRepresentativeComissionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentativeComission");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeJourneyCollection
		///This method loads the internal collection of BORepresentativeJourney objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeJourneyCollection()
		{
			try
			{
				_boRepresentativeJourneyCollection = new List<BORepresentativeJourney>();
				IList<DAORepresentativeJourney> daoRepresentativeJourneyCollection = DAORepresentativeJourney.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAORepresentativeJourney daoRepresentativeJourney in daoRepresentativeJourneyCollection)
					_boRepresentativeJourneyCollection.Add(new BORepresentativeJourney(daoRepresentativeJourney));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentativeJourney
		///This method persists a BORepresentativeJourney object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeJourney
		///</parameters>
		public virtual void AddRepresentativeJourney(BORepresentativeJourney boRepresentativeJourney)
		{
			DAORepresentativeJourney daoRepresentativeJourney = new DAORepresentativeJourney();
			RegisterDataObject(daoRepresentativeJourney);
			BeginTransaction("addRepresentativeJourney");
			try
			{
				daoRepresentativeJourney.JourneyId = boRepresentativeJourney.JourneyId;
				daoRepresentativeJourney.RouteId = boRepresentativeJourney.RouteId;
				daoRepresentativeJourney.CBy = boRepresentativeJourney.CBy;
				daoRepresentativeJourney.CDate = boRepresentativeJourney.CDate;
				daoRepresentativeJourney.EBy = boRepresentativeJourney.EBy;
				daoRepresentativeJourney.EDate = boRepresentativeJourney.EDate;
				daoRepresentativeJourney.RepresentativeId = _representativeId.Value;
				daoRepresentativeJourney.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentativeJourney = new BORepresentativeJourney(daoRepresentativeJourney);
				if(_boRepresentativeJourneyCollection != null)
					_boRepresentativeJourneyCollection.Add(boRepresentativeJourney);
			}
			catch
			{
				RollbackTransaction("addRepresentativeJourney");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentativeJourney
		///This method deletes all BORepresentativeJourney objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentativeJourney()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentativeJourney");
			try
			{
				DAORepresentativeJourney.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boRepresentativeJourneyCollection != null)
				{
					_boRepresentativeJourneyCollection.Clear();
					_boRepresentativeJourneyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentativeJourney");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeQuotaCollection
		///This method loads the internal collection of BORepresentativeQuota objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeQuotaCollection()
		{
			try
			{
				_boRepresentativeQuotaCollection = new List<BORepresentativeQuota>();
				IList<DAORepresentativeQuota> daoRepresentativeQuotaCollection = DAORepresentativeQuota.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAORepresentativeQuota daoRepresentativeQuota in daoRepresentativeQuotaCollection)
					_boRepresentativeQuotaCollection.Add(new BORepresentativeQuota(daoRepresentativeQuota));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentativeQuota
		///This method persists a BORepresentativeQuota object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeQuota
		///</parameters>
		public virtual void AddRepresentativeQuota(BORepresentativeQuota boRepresentativeQuota)
		{
			DAORepresentativeQuota daoRepresentativeQuota = new DAORepresentativeQuota();
			RegisterDataObject(daoRepresentativeQuota);
			BeginTransaction("addRepresentativeQuota");
			try
			{
				daoRepresentativeQuota.QuotaId = boRepresentativeQuota.QuotaId;
				daoRepresentativeQuota.ItemId = boRepresentativeQuota.ItemId;
				daoRepresentativeQuota.Quantity = boRepresentativeQuota.Quantity;
				daoRepresentativeQuota.CBy = boRepresentativeQuota.CBy;
				daoRepresentativeQuota.EBy = boRepresentativeQuota.EBy;
				daoRepresentativeQuota.CDate = boRepresentativeQuota.CDate;
				daoRepresentativeQuota.EDate = boRepresentativeQuota.EDate;
				daoRepresentativeQuota.RepresentativeId = _representativeId.Value;
				daoRepresentativeQuota.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentativeQuota = new BORepresentativeQuota(daoRepresentativeQuota);
				if(_boRepresentativeQuotaCollection != null)
					_boRepresentativeQuotaCollection.Add(boRepresentativeQuota);
			}
			catch
			{
				RollbackTransaction("addRepresentativeQuota");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentativeQuota
		///This method deletes all BORepresentativeQuota objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentativeQuota()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentativeQuota");
			try
			{
				DAORepresentativeQuota.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boRepresentativeQuotaCollection != null)
				{
					_boRepresentativeQuotaCollection.Clear();
					_boRepresentativeQuotaCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentativeQuota");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderCollection
		///This method loads the internal collection of BOSalesOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderCollection()
		{
			try
			{
				_boSalesOrderCollection = new List<BOSalesOrder>();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAllByRepresentativeId(_representativeId.Value);
				
				foreach(DAOSalesOrder daoSalesOrder in daoSalesOrderCollection)
					_boSalesOrderCollection.Add(new BOSalesOrder(daoSalesOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrder
		///This method persists a BOSalesOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual void AddSalesOrder(BOSalesOrder boSalesOrder)
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("addSalesOrder");
			try
			{
				daoSalesOrder.SalesId = boSalesOrder.SalesId;
				daoSalesOrder.SalesCode = boSalesOrder.SalesCode;
				daoSalesOrder.SalesOrderTypeId = boSalesOrder.SalesOrderTypeId;
				daoSalesOrder.ClientId = boSalesOrder.ClientId;
				daoSalesOrder.BranchId = boSalesOrder.BranchId;
				daoSalesOrder.AgentId = boSalesOrder.AgentId;
				daoSalesOrder.StoreId = boSalesOrder.StoreId;
				daoSalesOrder.PriorityTypeId = boSalesOrder.PriorityTypeId;
				daoSalesOrder.PaymentTermId = boSalesOrder.PaymentTermId;
				daoSalesOrder.SalesDate = boSalesOrder.SalesDate;
				daoSalesOrder.SalesTime = boSalesOrder.SalesTime;
				daoSalesOrder.SalesOrderStatusId = boSalesOrder.SalesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = boSalesOrder.SalesOrderSourceId;
				daoSalesOrder.SalesChannelId = boSalesOrder.SalesChannelId;
				daoSalesOrder.SalesPoolId = boSalesOrder.SalesPoolId;
				daoSalesOrder.IsOpened = boSalesOrder.IsOpened;
				daoSalesOrder.OpenValue = boSalesOrder.OpenValue;
				daoSalesOrder.Latitude = boSalesOrder.Latitude;
				daoSalesOrder.Longitude = boSalesOrder.Longitude;
				daoSalesOrder.ItemTotal = boSalesOrder.ItemTotal;
				daoSalesOrder.ItemDiscountTotal = boSalesOrder.ItemDiscountTotal;
				daoSalesOrder.TaxTotal = boSalesOrder.TaxTotal;
				daoSalesOrder.CashDiscountTotal = boSalesOrder.CashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = boSalesOrder.CustomDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = boSalesOrder.CustomDiscountValue;
				daoSalesOrder.CustomDiscountTotal = boSalesOrder.CustomDiscountTotal;
				daoSalesOrder.DeliveryTotal = boSalesOrder.DeliveryTotal;
				daoSalesOrder.NetTotal = boSalesOrder.NetTotal;
				daoSalesOrder.Notes = boSalesOrder.Notes;
				daoSalesOrder.InvoiceRetry = boSalesOrder.InvoiceRetry;
				daoSalesOrder.HasError = boSalesOrder.HasError;
				daoSalesOrder.IsInvoiced = boSalesOrder.IsInvoiced;
				daoSalesOrder.InvoiceCode = boSalesOrder.InvoiceCode;
				daoSalesOrder.InvoiceDate = boSalesOrder.InvoiceDate;
				daoSalesOrder.CreateDate = boSalesOrder.CreateDate;
				daoSalesOrder.RecId = boSalesOrder.RecId;
				daoSalesOrder.CBy = boSalesOrder.CBy;
				daoSalesOrder.CDate = boSalesOrder.CDate;
				daoSalesOrder.EBy = boSalesOrder.EBy;
				daoSalesOrder.EDate = boSalesOrder.EDate;
				daoSalesOrder.SalesPerenId = boSalesOrder.SalesPerenId;
				daoSalesOrder.Inprogress = boSalesOrder.Inprogress;
				daoSalesOrder.IsBackoffice = boSalesOrder.IsBackoffice;
				daoSalesOrder.IsDeleted = boSalesOrder.IsDeleted;
				daoSalesOrder.RepresentativeId = _representativeId.Value;
				daoSalesOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrder = new BOSalesOrder(daoSalesOrder);
				if(_boSalesOrderCollection != null)
					_boSalesOrderCollection.Add(boSalesOrder);
			}
			catch
			{
				RollbackTransaction("addSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrder
		///This method deletes all BOSalesOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrder");
			try
			{
				DAOSalesOrder.DeleteAllByRepresentativeId(ConnectionProvider, _representativeId.Value);
				CommitTransaction();
				if(_boSalesOrderCollection != null)
				{
					_boSalesOrderCollection.Clear();
					_boSalesOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrder");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SupervisorId
		{
			get
			{
				 return _supervisorId;
			}
			set
			{
				_supervisorId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? KindId
		{
			get
			{
				 return _kindId;
			}
			set
			{
				_kindId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BusinessUnitId
		{
			get
			{
				 return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
				_isDirty = true;
			}
		}
		
		public virtual string CompanyCode
		{
			get
			{
				 return _companyCode;
			}
			set
			{
				_companyCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeCode
		{
			get
			{
				 return _representativeCode;
			}
			set
			{
				_representativeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeNameAr
		{
			get
			{
				 return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeNameEn
		{
			get
			{
				 return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string PhoneAlternative
		{
			get
			{
				 return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? JoinDate
		{
			get
			{
				 return _joinDate;
			}
			set
			{
				_joinDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsTerminated
		{
			get
			{
				 return _isTerminated;
			}
			set
			{
				_isTerminated = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TerminationDate
		{
			get
			{
				 return _terminationDate;
			}
			set
			{
				_terminationDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TerminationReasonId
		{
			get
			{
				 return _terminationReasonId;
			}
			set
			{
				_terminationReasonId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
