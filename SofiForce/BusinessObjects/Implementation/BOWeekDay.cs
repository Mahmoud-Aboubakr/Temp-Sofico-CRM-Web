/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOWeekDay.
	///It maintains a collection of BOClientPreferredTime,BOOperationRequestDetailPreferredTime objects.
	///</Summary>
	public partial class BOWeekDay : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _weekDayId;
		protected string _weekDayCode;
		protected string _weekDayNameEn;
		protected string _weekDayNameAr;
		protected string _icon;
		protected string _color;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected Int32? _cBy;
		protected Int32? _cDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientPreferredTime> _boClientPreferredTimeCollection;
		List<BOOperationRequestDetailPreferredTime> _boOperationRequestDetailPreferredTimeCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOWeekDay()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 weekDayId
		///</parameters>
		public BOWeekDay(Int32 weekDayId)
		{
			try
			{
				DAOWeekDay daoWeekDay = DAOWeekDay.SelectOne(weekDayId);
				_weekDayId = daoWeekDay.WeekDayId;
				_weekDayCode = daoWeekDay.WeekDayCode;
				_weekDayNameEn = daoWeekDay.WeekDayNameEn;
				_weekDayNameAr = daoWeekDay.WeekDayNameAr;
				_icon = daoWeekDay.Icon;
				_color = daoWeekDay.Color;
				_canEdit = daoWeekDay.CanEdit;
				_canDelete = daoWeekDay.CanDelete;
				_isActive = daoWeekDay.IsActive;
				_displayOrder = daoWeekDay.DisplayOrder;
				_cBy = daoWeekDay.CBy;
				_cDate = daoWeekDay.CDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOWeekDay
		///</parameters>
		protected internal BOWeekDay(DAOWeekDay daoWeekDay)
		{
			try
			{
				_weekDayId = daoWeekDay.WeekDayId;
				_weekDayCode = daoWeekDay.WeekDayCode;
				_weekDayNameEn = daoWeekDay.WeekDayNameEn;
				_weekDayNameAr = daoWeekDay.WeekDayNameAr;
				_icon = daoWeekDay.Icon;
				_color = daoWeekDay.Color;
				_canEdit = daoWeekDay.CanEdit;
				_canDelete = daoWeekDay.CanDelete;
				_isActive = daoWeekDay.IsActive;
				_displayOrder = daoWeekDay.DisplayOrder;
				_cBy = daoWeekDay.CBy;
				_cDate = daoWeekDay.CDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new WeekDay record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOWeekDay daoWeekDay = new DAOWeekDay();
			RegisterDataObject(daoWeekDay);
			BeginTransaction("savenewBOWeekDay");
			try
			{
				daoWeekDay.WeekDayId = _weekDayId;
				daoWeekDay.WeekDayCode = _weekDayCode;
				daoWeekDay.WeekDayNameEn = _weekDayNameEn;
				daoWeekDay.WeekDayNameAr = _weekDayNameAr;
				daoWeekDay.Icon = _icon;
				daoWeekDay.Color = _color;
				daoWeekDay.CanEdit = _canEdit;
				daoWeekDay.CanDelete = _canDelete;
				daoWeekDay.IsActive = _isActive;
				daoWeekDay.DisplayOrder = _displayOrder;
				daoWeekDay.CBy = _cBy;
				daoWeekDay.CDate = _cDate;
				daoWeekDay.Insert();
				CommitTransaction();
				
				_weekDayId = daoWeekDay.WeekDayId;
				_weekDayCode = daoWeekDay.WeekDayCode;
				_weekDayNameEn = daoWeekDay.WeekDayNameEn;
				_weekDayNameAr = daoWeekDay.WeekDayNameAr;
				_icon = daoWeekDay.Icon;
				_color = daoWeekDay.Color;
				_canEdit = daoWeekDay.CanEdit;
				_canDelete = daoWeekDay.CanDelete;
				_isActive = daoWeekDay.IsActive;
				_displayOrder = daoWeekDay.DisplayOrder;
				_cBy = daoWeekDay.CBy;
				_cDate = daoWeekDay.CDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOWeekDay");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one WeekDay record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOWeekDay
		///</parameters>
		public virtual void Update()
		{
			DAOWeekDay daoWeekDay = new DAOWeekDay();
			RegisterDataObject(daoWeekDay);
			BeginTransaction("updateBOWeekDay");
			try
			{
				daoWeekDay.WeekDayId = _weekDayId;
				daoWeekDay.WeekDayCode = _weekDayCode;
				daoWeekDay.WeekDayNameEn = _weekDayNameEn;
				daoWeekDay.WeekDayNameAr = _weekDayNameAr;
				daoWeekDay.Icon = _icon;
				daoWeekDay.Color = _color;
				daoWeekDay.CanEdit = _canEdit;
				daoWeekDay.CanDelete = _canDelete;
				daoWeekDay.IsActive = _isActive;
				daoWeekDay.DisplayOrder = _displayOrder;
				daoWeekDay.CBy = _cBy;
				daoWeekDay.CDate = _cDate;
				daoWeekDay.Update();
				CommitTransaction();
				
				_weekDayId = daoWeekDay.WeekDayId;
				_weekDayCode = daoWeekDay.WeekDayCode;
				_weekDayNameEn = daoWeekDay.WeekDayNameEn;
				_weekDayNameAr = daoWeekDay.WeekDayNameAr;
				_icon = daoWeekDay.Icon;
				_color = daoWeekDay.Color;
				_canEdit = daoWeekDay.CanEdit;
				_canDelete = daoWeekDay.CanDelete;
				_isActive = daoWeekDay.IsActive;
				_displayOrder = daoWeekDay.DisplayOrder;
				_cBy = daoWeekDay.CBy;
				_cDate = daoWeekDay.CDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOWeekDay");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one WeekDay record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOWeekDay daoWeekDay = new DAOWeekDay();
			RegisterDataObject(daoWeekDay);
			BeginTransaction("deleteBOWeekDay");
			try
			{
				daoWeekDay.WeekDayId = _weekDayId;
				daoWeekDay.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOWeekDay");
				throw;
			}
		}
		
		///<Summary>
		///WeekDayCollection
		///This method returns the collection of BOWeekDay objects
		///</Summary>
		///<returns>
		///List[BOWeekDay]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOWeekDay> WeekDayCollection()
		{
			try
			{
				IList<BOWeekDay> boWeekDayCollection = new List<BOWeekDay>();
				IList<DAOWeekDay> daoWeekDayCollection = DAOWeekDay.SelectAll();
			
				foreach(DAOWeekDay daoWeekDay in daoWeekDayCollection)
					boWeekDayCollection.Add(new BOWeekDay(daoWeekDay));
			
				return boWeekDayCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///WeekDayCollectionCount
		///This method returns the collection count of BOWeekDay objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 WeekDayCollectionCount()
		{
			try
			{
				Int32 objCount = DAOWeekDay.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientPreferredTimeCollection
		///This method returns its collection of BOClientPreferredTime objects
		///</Summary>
		///<returns>
		///IList[BOClientPreferredTime]
		///</returns>
		///<parameters>
		///BOWeekDay
		///</parameters>
		public virtual IList<BOClientPreferredTime> ClientPreferredTimeCollection()
		{
			try
			{
				if(_boClientPreferredTimeCollection == null)
					LoadClientPreferredTimeCollection();
				
				return _boClientPreferredTimeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailPreferredTimeCollection
		///This method returns its collection of BOOperationRequestDetailPreferredTime objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequestDetailPreferredTime]
		///</returns>
		///<parameters>
		///BOWeekDay
		///</parameters>
		public virtual IList<BOOperationRequestDetailPreferredTime> OperationRequestDetailPreferredTimeCollection()
		{
			try
			{
				if(_boOperationRequestDetailPreferredTimeCollection == null)
					LoadOperationRequestDetailPreferredTimeCollection();
				
				return _boOperationRequestDetailPreferredTimeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOWeekDay>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOWeekDay.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///WeekDayCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOWeekDay objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boWeekDayCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOWeekDay> daoWeekDayCollection = DAOWeekDay.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOWeekDay resdaoWeekDay in daoWeekDayCollection)
					boWeekDayCollection.Add((T)(object)new BOWeekDay(resdaoWeekDay));
			
				return boWeekDayCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///WeekDayCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOWeekDay objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOWeekDay.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientPreferredTimeCollection
		///This method loads the internal collection of BOClientPreferredTime objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientPreferredTimeCollection()
		{
			try
			{
				_boClientPreferredTimeCollection = new List<BOClientPreferredTime>();
				IList<DAOClientPreferredTime> daoClientPreferredTimeCollection = DAOClientPreferredTime.SelectAllByWeekDayId(_weekDayId.Value);
				
				foreach(DAOClientPreferredTime daoClientPreferredTime in daoClientPreferredTimeCollection)
					_boClientPreferredTimeCollection.Add(new BOClientPreferredTime(daoClientPreferredTime));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientPreferredTime
		///This method persists a BOClientPreferredTime object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientPreferredTime
		///</parameters>
		public virtual void AddClientPreferredTime(BOClientPreferredTime boClientPreferredTime)
		{
			DAOClientPreferredTime daoClientPreferredTime = new DAOClientPreferredTime();
			RegisterDataObject(daoClientPreferredTime);
			BeginTransaction("addClientPreferredTime");
			try
			{
				daoClientPreferredTime.PreferredId = boClientPreferredTime.PreferredId;
				daoClientPreferredTime.ClientId = boClientPreferredTime.ClientId;
				daoClientPreferredTime.PreferredOperationId = boClientPreferredTime.PreferredOperationId;
				daoClientPreferredTime.FromTime = boClientPreferredTime.FromTime;
				daoClientPreferredTime.ToTime = boClientPreferredTime.ToTime;
				daoClientPreferredTime.WeekDayId = _weekDayId.Value;
				daoClientPreferredTime.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientPreferredTime = new BOClientPreferredTime(daoClientPreferredTime);
				if(_boClientPreferredTimeCollection != null)
					_boClientPreferredTimeCollection.Add(boClientPreferredTime);
			}
			catch
			{
				RollbackTransaction("addClientPreferredTime");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientPreferredTime
		///This method deletes all BOClientPreferredTime objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientPreferredTime()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientPreferredTime");
			try
			{
				DAOClientPreferredTime.DeleteAllByWeekDayId(ConnectionProvider, _weekDayId.Value);
				CommitTransaction();
				if(_boClientPreferredTimeCollection != null)
				{
					_boClientPreferredTimeCollection.Clear();
					_boClientPreferredTimeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientPreferredTime");
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestDetailPreferredTimeCollection
		///This method loads the internal collection of BOOperationRequestDetailPreferredTime objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestDetailPreferredTimeCollection()
		{
			try
			{
				_boOperationRequestDetailPreferredTimeCollection = new List<BOOperationRequestDetailPreferredTime>();
				IList<DAOOperationRequestDetailPreferredTime> daoOperationRequestDetailPreferredTimeCollection = DAOOperationRequestDetailPreferredTime.SelectAllByWeekDayId(_weekDayId.Value);
				
				foreach(DAOOperationRequestDetailPreferredTime daoOperationRequestDetailPreferredTime in daoOperationRequestDetailPreferredTimeCollection)
					_boOperationRequestDetailPreferredTimeCollection.Add(new BOOperationRequestDetailPreferredTime(daoOperationRequestDetailPreferredTime));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequestDetailPreferredTime
		///This method persists a BOOperationRequestDetailPreferredTime object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetailPreferredTime
		///</parameters>
		public virtual void AddOperationRequestDetailPreferredTime(BOOperationRequestDetailPreferredTime boOperationRequestDetailPreferredTime)
		{
			DAOOperationRequestDetailPreferredTime daoOperationRequestDetailPreferredTime = new DAOOperationRequestDetailPreferredTime();
			RegisterDataObject(daoOperationRequestDetailPreferredTime);
			BeginTransaction("addOperationRequestDetailPre1913");
			try
			{
				daoOperationRequestDetailPreferredTime.PreferredId = boOperationRequestDetailPreferredTime.PreferredId;
				daoOperationRequestDetailPreferredTime.DetailId = boOperationRequestDetailPreferredTime.DetailId;
				daoOperationRequestDetailPreferredTime.PreferredOperationId = boOperationRequestDetailPreferredTime.PreferredOperationId;
				daoOperationRequestDetailPreferredTime.FromTime = boOperationRequestDetailPreferredTime.FromTime;
				daoOperationRequestDetailPreferredTime.ToTime = boOperationRequestDetailPreferredTime.ToTime;
				daoOperationRequestDetailPreferredTime.WeekDayId = _weekDayId.Value;
				daoOperationRequestDetailPreferredTime.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequestDetailPreferredTime = new BOOperationRequestDetailPreferredTime(daoOperationRequestDetailPreferredTime);
				if(_boOperationRequestDetailPreferredTimeCollection != null)
					_boOperationRequestDetailPreferredTimeCollection.Add(boOperationRequestDetailPreferredTime);
			}
			catch
			{
				RollbackTransaction("addOperationRequestDetailPre1913");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequestDetailPreferredTime
		///This method deletes all BOOperationRequestDetailPreferredTime objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequestDetailPreferredTime()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequestDet1913");
			try
			{
				DAOOperationRequestDetailPreferredTime.DeleteAllByWeekDayId(ConnectionProvider, _weekDayId.Value);
				CommitTransaction();
				if(_boOperationRequestDetailPreferredTimeCollection != null)
				{
					_boOperationRequestDetailPreferredTimeCollection.Clear();
					_boOperationRequestDetailPreferredTimeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequestDet1913");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? WeekDayId
		{
			get
			{
				 return _weekDayId;
			}
			set
			{
				_weekDayId = value;
				_isDirty = true;
			}
		}
		
		public virtual string WeekDayCode
		{
			get
			{
				 return _weekDayCode;
			}
			set
			{
				_weekDayCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string WeekDayNameEn
		{
			get
			{
				 return _weekDayNameEn;
			}
			set
			{
				_weekDayNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string WeekDayNameAr
		{
			get
			{
				 return _weekDayNameAr;
			}
			set
			{
				_weekDayNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
