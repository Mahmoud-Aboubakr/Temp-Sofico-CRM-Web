/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderLog.
	///</Summary>
	public partial class BOSalesOrderLog : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _logId;
		protected Int64? _salesId;
		protected Int32? _salesOrderLogTypeId;
		protected DateTime? _logDate;
		protected Int32? _userId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderLog()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 logId
		///</parameters>
		public BOSalesOrderLog(Int64 logId)
		{
			try
			{
				DAOSalesOrderLog daoSalesOrderLog = DAOSalesOrderLog.SelectOne(logId);
				_logId = daoSalesOrderLog.LogId;
				_salesId = daoSalesOrderLog.SalesId;
				_salesOrderLogTypeId = daoSalesOrderLog.SalesOrderLogTypeId;
				_logDate = daoSalesOrderLog.LogDate;
				_userId = daoSalesOrderLog.UserId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderLog
		///</parameters>
		protected internal BOSalesOrderLog(DAOSalesOrderLog daoSalesOrderLog)
		{
			try
			{
				_logId = daoSalesOrderLog.LogId;
				_salesId = daoSalesOrderLog.SalesId;
				_salesOrderLogTypeId = daoSalesOrderLog.SalesOrderLogTypeId;
				_logDate = daoSalesOrderLog.LogDate;
				_userId = daoSalesOrderLog.UserId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesOrderLog record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesOrderLog daoSalesOrderLog = new DAOSalesOrderLog();
			RegisterDataObject(daoSalesOrderLog);
			BeginTransaction("savenewBOSalesOrderLog");
			try
			{
				daoSalesOrderLog.SalesId = _salesId;
				daoSalesOrderLog.SalesOrderLogTypeId = _salesOrderLogTypeId;
				daoSalesOrderLog.LogDate = _logDate;
				daoSalesOrderLog.UserId = _userId;
				daoSalesOrderLog.Insert();
				CommitTransaction();
				
				_logId = daoSalesOrderLog.LogId;
				_salesId = daoSalesOrderLog.SalesId;
				_salesOrderLogTypeId = daoSalesOrderLog.SalesOrderLogTypeId;
				_logDate = daoSalesOrderLog.LogDate;
				_userId = daoSalesOrderLog.UserId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesOrderLog");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesOrderLog record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderLog
		///</parameters>
		public virtual void Update()
		{
			DAOSalesOrderLog daoSalesOrderLog = new DAOSalesOrderLog();
			RegisterDataObject(daoSalesOrderLog);
			BeginTransaction("updateBOSalesOrderLog");
			try
			{
				daoSalesOrderLog.LogId = _logId;
				daoSalesOrderLog.SalesId = _salesId;
				daoSalesOrderLog.SalesOrderLogTypeId = _salesOrderLogTypeId;
				daoSalesOrderLog.LogDate = _logDate;
				daoSalesOrderLog.UserId = _userId;
				daoSalesOrderLog.Update();
				CommitTransaction();
				
				_logId = daoSalesOrderLog.LogId;
				_salesId = daoSalesOrderLog.SalesId;
				_salesOrderLogTypeId = daoSalesOrderLog.SalesOrderLogTypeId;
				_logDate = daoSalesOrderLog.LogDate;
				_userId = daoSalesOrderLog.UserId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesOrderLog");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesOrderLog record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesOrderLog daoSalesOrderLog = new DAOSalesOrderLog();
			RegisterDataObject(daoSalesOrderLog);
			BeginTransaction("deleteBOSalesOrderLog");
			try
			{
				daoSalesOrderLog.LogId = _logId;
				daoSalesOrderLog.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesOrderLog");
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderLogCollection
		///This method returns the collection of BOSalesOrderLog objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderLog]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderLog> SalesOrderLogCollection()
		{
			try
			{
				IList<BOSalesOrderLog> boSalesOrderLogCollection = new List<BOSalesOrderLog>();
				IList<DAOSalesOrderLog> daoSalesOrderLogCollection = DAOSalesOrderLog.SelectAll();
			
				foreach(DAOSalesOrderLog daoSalesOrderLog in daoSalesOrderLogCollection)
					boSalesOrderLogCollection.Add(new BOSalesOrderLog(daoSalesOrderLog));
			
				return boSalesOrderLogCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderLogCollectionCount
		///This method returns the collection count of BOSalesOrderLog objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderLogCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderLog.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderLog>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderLog.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderLogCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderLog objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderLogCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderLog> daoSalesOrderLogCollection = DAOSalesOrderLog.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderLog resdaoSalesOrderLog in daoSalesOrderLogCollection)
					boSalesOrderLogCollection.Add((T)(object)new BOSalesOrderLog(resdaoSalesOrderLog));
			
				return boSalesOrderLogCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderLogCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderLog objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderLog.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? LogId
		{
			get
			{
				 return _logId;
			}
			set
			{
				_logId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesOrderLogTypeId
		{
			get
			{
				 return _salesOrderLogTypeId;
			}
			set
			{
				_salesOrderLogTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? LogDate
		{
			get
			{
				 return _logDate;
			}
			set
			{
				_logDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
