/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderWorkflow.
	///</Summary>
	public partial class BOSalesOrderWorkflow : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _workflowId;
		protected Int64? _salesId;
		protected Int32? _salesOrderStatusId;
		protected Int32? _agentId;
		protected DateTime? _workflowDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderWorkflow()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 workflowId
		///</parameters>
		public BOSalesOrderWorkflow(Int64 workflowId)
		{
			try
			{
				DAOSalesOrderWorkflow daoSalesOrderWorkflow = DAOSalesOrderWorkflow.SelectOne(workflowId);
				_workflowId = daoSalesOrderWorkflow.WorkflowId;
				_salesId = daoSalesOrderWorkflow.SalesId;
				_salesOrderStatusId = daoSalesOrderWorkflow.SalesOrderStatusId;
				_agentId = daoSalesOrderWorkflow.AgentId;
				_workflowDate = daoSalesOrderWorkflow.WorkflowDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderWorkflow
		///</parameters>
		protected internal BOSalesOrderWorkflow(DAOSalesOrderWorkflow daoSalesOrderWorkflow)
		{
			try
			{
				_workflowId = daoSalesOrderWorkflow.WorkflowId;
				_salesId = daoSalesOrderWorkflow.SalesId;
				_salesOrderStatusId = daoSalesOrderWorkflow.SalesOrderStatusId;
				_agentId = daoSalesOrderWorkflow.AgentId;
				_workflowDate = daoSalesOrderWorkflow.WorkflowDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesOrderWorkflow record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesOrderWorkflow daoSalesOrderWorkflow = new DAOSalesOrderWorkflow();
			RegisterDataObject(daoSalesOrderWorkflow);
			BeginTransaction("savenewBOSalesOrderWorkflow");
			try
			{
				daoSalesOrderWorkflow.SalesId = _salesId;
				daoSalesOrderWorkflow.SalesOrderStatusId = _salesOrderStatusId;
				daoSalesOrderWorkflow.AgentId = _agentId;
				daoSalesOrderWorkflow.WorkflowDate = _workflowDate;
				daoSalesOrderWorkflow.Insert();
				CommitTransaction();
				
				_workflowId = daoSalesOrderWorkflow.WorkflowId;
				_salesId = daoSalesOrderWorkflow.SalesId;
				_salesOrderStatusId = daoSalesOrderWorkflow.SalesOrderStatusId;
				_agentId = daoSalesOrderWorkflow.AgentId;
				_workflowDate = daoSalesOrderWorkflow.WorkflowDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesOrderWorkflow");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesOrderWorkflow record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderWorkflow
		///</parameters>
		public virtual void Update()
		{
			DAOSalesOrderWorkflow daoSalesOrderWorkflow = new DAOSalesOrderWorkflow();
			RegisterDataObject(daoSalesOrderWorkflow);
			BeginTransaction("updateBOSalesOrderWorkflow");
			try
			{
				daoSalesOrderWorkflow.WorkflowId = _workflowId;
				daoSalesOrderWorkflow.SalesId = _salesId;
				daoSalesOrderWorkflow.SalesOrderStatusId = _salesOrderStatusId;
				daoSalesOrderWorkflow.AgentId = _agentId;
				daoSalesOrderWorkflow.WorkflowDate = _workflowDate;
				daoSalesOrderWorkflow.Update();
				CommitTransaction();
				
				_workflowId = daoSalesOrderWorkflow.WorkflowId;
				_salesId = daoSalesOrderWorkflow.SalesId;
				_salesOrderStatusId = daoSalesOrderWorkflow.SalesOrderStatusId;
				_agentId = daoSalesOrderWorkflow.AgentId;
				_workflowDate = daoSalesOrderWorkflow.WorkflowDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesOrderWorkflow");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesOrderWorkflow record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesOrderWorkflow daoSalesOrderWorkflow = new DAOSalesOrderWorkflow();
			RegisterDataObject(daoSalesOrderWorkflow);
			BeginTransaction("deleteBOSalesOrderWorkflow");
			try
			{
				daoSalesOrderWorkflow.WorkflowId = _workflowId;
				daoSalesOrderWorkflow.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesOrderWorkflow");
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderWorkflowCollection
		///This method returns the collection of BOSalesOrderWorkflow objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderWorkflow]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderWorkflow> SalesOrderWorkflowCollection()
		{
			try
			{
				IList<BOSalesOrderWorkflow> boSalesOrderWorkflowCollection = new List<BOSalesOrderWorkflow>();
				IList<DAOSalesOrderWorkflow> daoSalesOrderWorkflowCollection = DAOSalesOrderWorkflow.SelectAll();
			
				foreach(DAOSalesOrderWorkflow daoSalesOrderWorkflow in daoSalesOrderWorkflowCollection)
					boSalesOrderWorkflowCollection.Add(new BOSalesOrderWorkflow(daoSalesOrderWorkflow));
			
				return boSalesOrderWorkflowCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderWorkflowCollectionCount
		///This method returns the collection count of BOSalesOrderWorkflow objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderWorkflowCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderWorkflow.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderWorkflow>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderWorkflow.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderWorkflowCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderWorkflow objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderWorkflowCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderWorkflow> daoSalesOrderWorkflowCollection = DAOSalesOrderWorkflow.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderWorkflow resdaoSalesOrderWorkflow in daoSalesOrderWorkflowCollection)
					boSalesOrderWorkflowCollection.Add((T)(object)new BOSalesOrderWorkflow(resdaoSalesOrderWorkflow));
			
				return boSalesOrderWorkflowCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderWorkflowCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderWorkflow objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderWorkflow.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? WorkflowId
		{
			get
			{
				 return _workflowId;
			}
			set
			{
				_workflowId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesOrderStatusId
		{
			get
			{
				 return _salesOrderStatusId;
			}
			set
			{
				_salesOrderStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AgentId
		{
			get
			{
				 return _agentId;
			}
			set
			{
				_agentId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? WorkflowDate
		{
			get
			{
				 return _workflowDate;
			}
			set
			{
				_workflowDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
