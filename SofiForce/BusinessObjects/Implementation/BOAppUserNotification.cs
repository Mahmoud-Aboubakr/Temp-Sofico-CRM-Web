/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppUserNotification.
	///</Summary>
	public partial class BOAppUserNotification : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _userNotificationId;
		protected Int32? _notificationId;
		protected Int32? _userId;
		protected DateTime? _readDate;
		protected bool? _isReaded;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppUserNotification()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 userNotificationId
		///</parameters>
		public BOAppUserNotification(Int32 userNotificationId)
		{
			try
			{
				DAOAppUserNotification daoAppUserNotification = DAOAppUserNotification.SelectOne(userNotificationId);
				_userNotificationId = daoAppUserNotification.UserNotificationId;
				_notificationId = daoAppUserNotification.NotificationId;
				_userId = daoAppUserNotification.UserId;
				_readDate = daoAppUserNotification.ReadDate;
				_isReaded = daoAppUserNotification.IsReaded;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppUserNotification
		///</parameters>
		protected internal BOAppUserNotification(DAOAppUserNotification daoAppUserNotification)
		{
			try
			{
				_userNotificationId = daoAppUserNotification.UserNotificationId;
				_notificationId = daoAppUserNotification.NotificationId;
				_userId = daoAppUserNotification.UserId;
				_readDate = daoAppUserNotification.ReadDate;
				_isReaded = daoAppUserNotification.IsReaded;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppUserNotification record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppUserNotification daoAppUserNotification = new DAOAppUserNotification();
			RegisterDataObject(daoAppUserNotification);
			BeginTransaction("savenewBOAppUserNotification");
			try
			{
				daoAppUserNotification.NotificationId = _notificationId;
				daoAppUserNotification.UserId = _userId;
				daoAppUserNotification.ReadDate = _readDate;
				daoAppUserNotification.IsReaded = _isReaded;
				daoAppUserNotification.Insert();
				CommitTransaction();
				
				_userNotificationId = daoAppUserNotification.UserNotificationId;
				_notificationId = daoAppUserNotification.NotificationId;
				_userId = daoAppUserNotification.UserId;
				_readDate = daoAppUserNotification.ReadDate;
				_isReaded = daoAppUserNotification.IsReaded;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppUserNotification");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppUserNotification record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserNotification
		///</parameters>
		public virtual void Update()
		{
			DAOAppUserNotification daoAppUserNotification = new DAOAppUserNotification();
			RegisterDataObject(daoAppUserNotification);
			BeginTransaction("updateBOAppUserNotification");
			try
			{
				daoAppUserNotification.UserNotificationId = _userNotificationId;
				daoAppUserNotification.NotificationId = _notificationId;
				daoAppUserNotification.UserId = _userId;
				daoAppUserNotification.ReadDate = _readDate;
				daoAppUserNotification.IsReaded = _isReaded;
				daoAppUserNotification.Update();
				CommitTransaction();
				
				_userNotificationId = daoAppUserNotification.UserNotificationId;
				_notificationId = daoAppUserNotification.NotificationId;
				_userId = daoAppUserNotification.UserId;
				_readDate = daoAppUserNotification.ReadDate;
				_isReaded = daoAppUserNotification.IsReaded;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppUserNotification");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppUserNotification record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppUserNotification daoAppUserNotification = new DAOAppUserNotification();
			RegisterDataObject(daoAppUserNotification);
			BeginTransaction("deleteBOAppUserNotification");
			try
			{
				daoAppUserNotification.UserNotificationId = _userNotificationId;
				daoAppUserNotification.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppUserNotification");
				throw;
			}
		}
		
		///<Summary>
		///AppUserNotificationCollection
		///This method returns the collection of BOAppUserNotification objects
		///</Summary>
		///<returns>
		///List[BOAppUserNotification]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppUserNotification> AppUserNotificationCollection()
		{
			try
			{
				IList<BOAppUserNotification> boAppUserNotificationCollection = new List<BOAppUserNotification>();
				IList<DAOAppUserNotification> daoAppUserNotificationCollection = DAOAppUserNotification.SelectAll();
			
				foreach(DAOAppUserNotification daoAppUserNotification in daoAppUserNotificationCollection)
					boAppUserNotificationCollection.Add(new BOAppUserNotification(daoAppUserNotification));
			
				return boAppUserNotificationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserNotificationCollectionCount
		///This method returns the collection count of BOAppUserNotification objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppUserNotificationCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppUserNotification.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppUserNotification>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppUserNotification.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserNotificationCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppUserNotification objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppUserNotificationCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppUserNotification> daoAppUserNotificationCollection = DAOAppUserNotification.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppUserNotification resdaoAppUserNotification in daoAppUserNotificationCollection)
					boAppUserNotificationCollection.Add((T)(object)new BOAppUserNotification(resdaoAppUserNotification));
			
				return boAppUserNotificationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserNotificationCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppUserNotification objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppUserNotification.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? UserNotificationId
		{
			get
			{
				 return _userNotificationId;
			}
			set
			{
				_userNotificationId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? NotificationId
		{
			get
			{
				 return _notificationId;
			}
			set
			{
				_notificationId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ReadDate
		{
			get
			{
				 return _readDate;
			}
			set
			{
				_readDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsReaded
		{
			get
			{
				 return _isReaded;
			}
			set
			{
				_isReaded = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
