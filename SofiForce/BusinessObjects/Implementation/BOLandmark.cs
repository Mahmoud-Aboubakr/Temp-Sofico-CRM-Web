/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOLandmark.
	///It maintains a collection of BOClientLandmark,BOOperationRequestDetailLandmark objects.
	///</Summary>
	public partial class BOLandmark : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _landmarkId;
		protected string _landmarkCode;
		protected string _landmarkNameEn;
		protected string _landmarkNameAr;
		protected string _icon;
		protected string _color;
		protected bool? _isActive;
		protected Int32? _canEdit;
		protected bool? _canDelete;
		protected bool? _displayOrder;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientLandmark> _boClientLandmarkCollection;
		List<BOOperationRequestDetailLandmark> _boOperationRequestDetailLandmarkCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOLandmark()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 landmarkId
		///</parameters>
		public BOLandmark(Int32 landmarkId)
		{
			try
			{
				DAOLandmark daoLandmark = DAOLandmark.SelectOne(landmarkId);
				_landmarkId = daoLandmark.LandmarkId;
				_landmarkCode = daoLandmark.LandmarkCode;
				_landmarkNameEn = daoLandmark.LandmarkNameEn;
				_landmarkNameAr = daoLandmark.LandmarkNameAr;
				_icon = daoLandmark.Icon;
				_color = daoLandmark.Color;
				_isActive = daoLandmark.IsActive;
				_canEdit = daoLandmark.CanEdit;
				_canDelete = daoLandmark.CanDelete;
				_displayOrder = daoLandmark.DisplayOrder;
				_cBy = daoLandmark.CBy;
				_cDate = daoLandmark.CDate;
				_eBy = daoLandmark.EBy;
				_eDate = daoLandmark.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOLandmark
		///</parameters>
		protected internal BOLandmark(DAOLandmark daoLandmark)
		{
			try
			{
				_landmarkId = daoLandmark.LandmarkId;
				_landmarkCode = daoLandmark.LandmarkCode;
				_landmarkNameEn = daoLandmark.LandmarkNameEn;
				_landmarkNameAr = daoLandmark.LandmarkNameAr;
				_icon = daoLandmark.Icon;
				_color = daoLandmark.Color;
				_isActive = daoLandmark.IsActive;
				_canEdit = daoLandmark.CanEdit;
				_canDelete = daoLandmark.CanDelete;
				_displayOrder = daoLandmark.DisplayOrder;
				_cBy = daoLandmark.CBy;
				_cDate = daoLandmark.CDate;
				_eBy = daoLandmark.EBy;
				_eDate = daoLandmark.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Landmark record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOLandmark daoLandmark = new DAOLandmark();
			RegisterDataObject(daoLandmark);
			BeginTransaction("savenewBOLandmark");
			try
			{
				daoLandmark.LandmarkId = _landmarkId;
				daoLandmark.LandmarkCode = _landmarkCode;
				daoLandmark.LandmarkNameEn = _landmarkNameEn;
				daoLandmark.LandmarkNameAr = _landmarkNameAr;
				daoLandmark.Icon = _icon;
				daoLandmark.Color = _color;
				daoLandmark.IsActive = _isActive;
				daoLandmark.CanEdit = _canEdit;
				daoLandmark.CanDelete = _canDelete;
				daoLandmark.DisplayOrder = _displayOrder;
				daoLandmark.CBy = _cBy;
				daoLandmark.CDate = _cDate;
				daoLandmark.EBy = _eBy;
				daoLandmark.EDate = _eDate;
				daoLandmark.Insert();
				CommitTransaction();
				
				_landmarkId = daoLandmark.LandmarkId;
				_landmarkCode = daoLandmark.LandmarkCode;
				_landmarkNameEn = daoLandmark.LandmarkNameEn;
				_landmarkNameAr = daoLandmark.LandmarkNameAr;
				_icon = daoLandmark.Icon;
				_color = daoLandmark.Color;
				_isActive = daoLandmark.IsActive;
				_canEdit = daoLandmark.CanEdit;
				_canDelete = daoLandmark.CanDelete;
				_displayOrder = daoLandmark.DisplayOrder;
				_cBy = daoLandmark.CBy;
				_cDate = daoLandmark.CDate;
				_eBy = daoLandmark.EBy;
				_eDate = daoLandmark.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOLandmark");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Landmark record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOLandmark
		///</parameters>
		public virtual void Update()
		{
			DAOLandmark daoLandmark = new DAOLandmark();
			RegisterDataObject(daoLandmark);
			BeginTransaction("updateBOLandmark");
			try
			{
				daoLandmark.LandmarkId = _landmarkId;
				daoLandmark.LandmarkCode = _landmarkCode;
				daoLandmark.LandmarkNameEn = _landmarkNameEn;
				daoLandmark.LandmarkNameAr = _landmarkNameAr;
				daoLandmark.Icon = _icon;
				daoLandmark.Color = _color;
				daoLandmark.IsActive = _isActive;
				daoLandmark.CanEdit = _canEdit;
				daoLandmark.CanDelete = _canDelete;
				daoLandmark.DisplayOrder = _displayOrder;
				daoLandmark.CBy = _cBy;
				daoLandmark.CDate = _cDate;
				daoLandmark.EBy = _eBy;
				daoLandmark.EDate = _eDate;
				daoLandmark.Update();
				CommitTransaction();
				
				_landmarkId = daoLandmark.LandmarkId;
				_landmarkCode = daoLandmark.LandmarkCode;
				_landmarkNameEn = daoLandmark.LandmarkNameEn;
				_landmarkNameAr = daoLandmark.LandmarkNameAr;
				_icon = daoLandmark.Icon;
				_color = daoLandmark.Color;
				_isActive = daoLandmark.IsActive;
				_canEdit = daoLandmark.CanEdit;
				_canDelete = daoLandmark.CanDelete;
				_displayOrder = daoLandmark.DisplayOrder;
				_cBy = daoLandmark.CBy;
				_cDate = daoLandmark.CDate;
				_eBy = daoLandmark.EBy;
				_eDate = daoLandmark.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOLandmark");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Landmark record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOLandmark daoLandmark = new DAOLandmark();
			RegisterDataObject(daoLandmark);
			BeginTransaction("deleteBOLandmark");
			try
			{
				daoLandmark.LandmarkId = _landmarkId;
				daoLandmark.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOLandmark");
				throw;
			}
		}
		
		///<Summary>
		///LandmarkCollection
		///This method returns the collection of BOLandmark objects
		///</Summary>
		///<returns>
		///List[BOLandmark]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOLandmark> LandmarkCollection()
		{
			try
			{
				IList<BOLandmark> boLandmarkCollection = new List<BOLandmark>();
				IList<DAOLandmark> daoLandmarkCollection = DAOLandmark.SelectAll();
			
				foreach(DAOLandmark daoLandmark in daoLandmarkCollection)
					boLandmarkCollection.Add(new BOLandmark(daoLandmark));
			
				return boLandmarkCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///LandmarkCollectionCount
		///This method returns the collection count of BOLandmark objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 LandmarkCollectionCount()
		{
			try
			{
				Int32 objCount = DAOLandmark.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientLandmarkCollection
		///This method returns its collection of BOClientLandmark objects
		///</Summary>
		///<returns>
		///IList[BOClientLandmark]
		///</returns>
		///<parameters>
		///BOLandmark
		///</parameters>
		public virtual IList<BOClientLandmark> ClientLandmarkCollection()
		{
			try
			{
				if(_boClientLandmarkCollection == null)
					LoadClientLandmarkCollection();
				
				return _boClientLandmarkCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailLandmarkCollection
		///This method returns its collection of BOOperationRequestDetailLandmark objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequestDetailLandmark]
		///</returns>
		///<parameters>
		///BOLandmark
		///</parameters>
		public virtual IList<BOOperationRequestDetailLandmark> OperationRequestDetailLandmarkCollection()
		{
			try
			{
				if(_boOperationRequestDetailLandmarkCollection == null)
					LoadOperationRequestDetailLandmarkCollection();
				
				return _boOperationRequestDetailLandmarkCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOLandmark>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOLandmark.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///LandmarkCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOLandmark objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boLandmarkCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOLandmark> daoLandmarkCollection = DAOLandmark.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOLandmark resdaoLandmark in daoLandmarkCollection)
					boLandmarkCollection.Add((T)(object)new BOLandmark(resdaoLandmark));
			
				return boLandmarkCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///LandmarkCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOLandmark objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOLandmark.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientLandmarkCollection
		///This method loads the internal collection of BOClientLandmark objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientLandmarkCollection()
		{
			try
			{
				_boClientLandmarkCollection = new List<BOClientLandmark>();
				IList<DAOClientLandmark> daoClientLandmarkCollection = DAOClientLandmark.SelectAllByLandmarkId(_landmarkId.Value);
				
				foreach(DAOClientLandmark daoClientLandmark in daoClientLandmarkCollection)
					_boClientLandmarkCollection.Add(new BOClientLandmark(daoClientLandmark));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientLandmark
		///This method persists a BOClientLandmark object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientLandmark
		///</parameters>
		public virtual void AddClientLandmark(BOClientLandmark boClientLandmark)
		{
			DAOClientLandmark daoClientLandmark = new DAOClientLandmark();
			RegisterDataObject(daoClientLandmark);
			BeginTransaction("addClientLandmark");
			try
			{
				daoClientLandmark.ClientId = boClientLandmark.ClientId;
				daoClientLandmark.DetaillandId = boClientLandmark.DetaillandId;
				daoClientLandmark.LandmarkId = _landmarkId.Value;
				daoClientLandmark.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientLandmark = new BOClientLandmark(daoClientLandmark);
				if(_boClientLandmarkCollection != null)
					_boClientLandmarkCollection.Add(boClientLandmark);
			}
			catch
			{
				RollbackTransaction("addClientLandmark");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientLandmark
		///This method deletes all BOClientLandmark objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientLandmark()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientLandmark");
			try
			{
				DAOClientLandmark.DeleteAllByLandmarkId(ConnectionProvider, _landmarkId.Value);
				CommitTransaction();
				if(_boClientLandmarkCollection != null)
				{
					_boClientLandmarkCollection.Clear();
					_boClientLandmarkCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientLandmark");
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestDetailLandmarkCollection
		///This method loads the internal collection of BOOperationRequestDetailLandmark objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestDetailLandmarkCollection()
		{
			try
			{
				_boOperationRequestDetailLandmarkCollection = new List<BOOperationRequestDetailLandmark>();
				IList<DAOOperationRequestDetailLandmark> daoOperationRequestDetailLandmarkCollection = DAOOperationRequestDetailLandmark.SelectAllByLandmarkId(_landmarkId.Value);
				
				foreach(DAOOperationRequestDetailLandmark daoOperationRequestDetailLandmark in daoOperationRequestDetailLandmarkCollection)
					_boOperationRequestDetailLandmarkCollection.Add(new BOOperationRequestDetailLandmark(daoOperationRequestDetailLandmark));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequestDetailLandmark
		///This method persists a BOOperationRequestDetailLandmark object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetailLandmark
		///</parameters>
		public virtual void AddOperationRequestDetailLandmark(BOOperationRequestDetailLandmark boOperationRequestDetailLandmark)
		{
			DAOOperationRequestDetailLandmark daoOperationRequestDetailLandmark = new DAOOperationRequestDetailLandmark();
			RegisterDataObject(daoOperationRequestDetailLandmark);
			BeginTransaction("addOperationRequestDetailLan568");
			try
			{
				daoOperationRequestDetailLandmark.DetailId = boOperationRequestDetailLandmark.DetailId;
				daoOperationRequestDetailLandmark.DetaillandId = boOperationRequestDetailLandmark.DetaillandId;
				daoOperationRequestDetailLandmark.LandmarkId = _landmarkId.Value;
				daoOperationRequestDetailLandmark.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequestDetailLandmark = new BOOperationRequestDetailLandmark(daoOperationRequestDetailLandmark);
				if(_boOperationRequestDetailLandmarkCollection != null)
					_boOperationRequestDetailLandmarkCollection.Add(boOperationRequestDetailLandmark);
			}
			catch
			{
				RollbackTransaction("addOperationRequestDetailLan568");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequestDetailLandmark
		///This method deletes all BOOperationRequestDetailLandmark objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequestDetailLandmark()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequestDet5792");
			try
			{
				DAOOperationRequestDetailLandmark.DeleteAllByLandmarkId(ConnectionProvider, _landmarkId.Value);
				CommitTransaction();
				if(_boOperationRequestDetailLandmarkCollection != null)
				{
					_boOperationRequestDetailLandmarkCollection.Clear();
					_boOperationRequestDetailLandmarkCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequestDet5792");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? LandmarkId
		{
			get
			{
				 return _landmarkId;
			}
			set
			{
				_landmarkId = value;
				_isDirty = true;
			}
		}
		
		public virtual string LandmarkCode
		{
			get
			{
				 return _landmarkCode;
			}
			set
			{
				_landmarkCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string LandmarkNameEn
		{
			get
			{
				 return _landmarkNameEn;
			}
			set
			{
				_landmarkNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string LandmarkNameAr
		{
			get
			{
				 return _landmarkNameAr;
			}
			set
			{
				_landmarkNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
