/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSurveyDetailAnswer.
	///</Summary>
	public partial class BOSurveyDetailAnswer : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _detailAnswerId;
		protected Int32? _surveyDetailId;
		protected Int32? _surveyId;
		protected string _answerEn;
		protected string _answerAr;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSurveyDetailAnswer()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 detailAnswerId
		///</parameters>
		public BOSurveyDetailAnswer(Int32 detailAnswerId)
		{
			try
			{
				DAOSurveyDetailAnswer daoSurveyDetailAnswer = DAOSurveyDetailAnswer.SelectOne(detailAnswerId);
				_detailAnswerId = daoSurveyDetailAnswer.DetailAnswerId;
				_surveyDetailId = daoSurveyDetailAnswer.SurveyDetailId;
				_surveyId = daoSurveyDetailAnswer.SurveyId;
				_answerEn = daoSurveyDetailAnswer.AnswerEn;
				_answerAr = daoSurveyDetailAnswer.AnswerAr;
				_cBy = daoSurveyDetailAnswer.CBy;
				_cDate = daoSurveyDetailAnswer.CDate;
				_eBy = daoSurveyDetailAnswer.EBy;
				_eDate = daoSurveyDetailAnswer.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSurveyDetailAnswer
		///</parameters>
		protected internal BOSurveyDetailAnswer(DAOSurveyDetailAnswer daoSurveyDetailAnswer)
		{
			try
			{
				_detailAnswerId = daoSurveyDetailAnswer.DetailAnswerId;
				_surveyDetailId = daoSurveyDetailAnswer.SurveyDetailId;
				_surveyId = daoSurveyDetailAnswer.SurveyId;
				_answerEn = daoSurveyDetailAnswer.AnswerEn;
				_answerAr = daoSurveyDetailAnswer.AnswerAr;
				_cBy = daoSurveyDetailAnswer.CBy;
				_cDate = daoSurveyDetailAnswer.CDate;
				_eBy = daoSurveyDetailAnswer.EBy;
				_eDate = daoSurveyDetailAnswer.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SurveyDetailAnswer record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSurveyDetailAnswer daoSurveyDetailAnswer = new DAOSurveyDetailAnswer();
			RegisterDataObject(daoSurveyDetailAnswer);
			BeginTransaction("savenewBOSurveyDetailAnswer");
			try
			{
				daoSurveyDetailAnswer.SurveyDetailId = _surveyDetailId;
				daoSurveyDetailAnswer.SurveyId = _surveyId;
				daoSurveyDetailAnswer.AnswerEn = _answerEn;
				daoSurveyDetailAnswer.AnswerAr = _answerAr;
				daoSurveyDetailAnswer.CBy = _cBy;
				daoSurveyDetailAnswer.CDate = _cDate;
				daoSurveyDetailAnswer.EBy = _eBy;
				daoSurveyDetailAnswer.EDate = _eDate;
				daoSurveyDetailAnswer.Insert();
				CommitTransaction();
				
				_detailAnswerId = daoSurveyDetailAnswer.DetailAnswerId;
				_surveyDetailId = daoSurveyDetailAnswer.SurveyDetailId;
				_surveyId = daoSurveyDetailAnswer.SurveyId;
				_answerEn = daoSurveyDetailAnswer.AnswerEn;
				_answerAr = daoSurveyDetailAnswer.AnswerAr;
				_cBy = daoSurveyDetailAnswer.CBy;
				_cDate = daoSurveyDetailAnswer.CDate;
				_eBy = daoSurveyDetailAnswer.EBy;
				_eDate = daoSurveyDetailAnswer.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSurveyDetailAnswer");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SurveyDetailAnswer record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSurveyDetailAnswer
		///</parameters>
		public virtual void Update()
		{
			DAOSurveyDetailAnswer daoSurveyDetailAnswer = new DAOSurveyDetailAnswer();
			RegisterDataObject(daoSurveyDetailAnswer);
			BeginTransaction("updateBOSurveyDetailAnswer");
			try
			{
				daoSurveyDetailAnswer.DetailAnswerId = _detailAnswerId;
				daoSurveyDetailAnswer.SurveyDetailId = _surveyDetailId;
				daoSurveyDetailAnswer.SurveyId = _surveyId;
				daoSurveyDetailAnswer.AnswerEn = _answerEn;
				daoSurveyDetailAnswer.AnswerAr = _answerAr;
				daoSurveyDetailAnswer.CBy = _cBy;
				daoSurveyDetailAnswer.CDate = _cDate;
				daoSurveyDetailAnswer.EBy = _eBy;
				daoSurveyDetailAnswer.EDate = _eDate;
				daoSurveyDetailAnswer.Update();
				CommitTransaction();
				
				_detailAnswerId = daoSurveyDetailAnswer.DetailAnswerId;
				_surveyDetailId = daoSurveyDetailAnswer.SurveyDetailId;
				_surveyId = daoSurveyDetailAnswer.SurveyId;
				_answerEn = daoSurveyDetailAnswer.AnswerEn;
				_answerAr = daoSurveyDetailAnswer.AnswerAr;
				_cBy = daoSurveyDetailAnswer.CBy;
				_cDate = daoSurveyDetailAnswer.CDate;
				_eBy = daoSurveyDetailAnswer.EBy;
				_eDate = daoSurveyDetailAnswer.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSurveyDetailAnswer");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SurveyDetailAnswer record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSurveyDetailAnswer daoSurveyDetailAnswer = new DAOSurveyDetailAnswer();
			RegisterDataObject(daoSurveyDetailAnswer);
			BeginTransaction("deleteBOSurveyDetailAnswer");
			try
			{
				daoSurveyDetailAnswer.DetailAnswerId = _detailAnswerId;
				daoSurveyDetailAnswer.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSurveyDetailAnswer");
				throw;
			}
		}
		
		///<Summary>
		///SurveyDetailAnswerCollection
		///This method returns the collection of BOSurveyDetailAnswer objects
		///</Summary>
		///<returns>
		///List[BOSurveyDetailAnswer]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSurveyDetailAnswer> SurveyDetailAnswerCollection()
		{
			try
			{
				IList<BOSurveyDetailAnswer> boSurveyDetailAnswerCollection = new List<BOSurveyDetailAnswer>();
				IList<DAOSurveyDetailAnswer> daoSurveyDetailAnswerCollection = DAOSurveyDetailAnswer.SelectAll();
			
				foreach(DAOSurveyDetailAnswer daoSurveyDetailAnswer in daoSurveyDetailAnswerCollection)
					boSurveyDetailAnswerCollection.Add(new BOSurveyDetailAnswer(daoSurveyDetailAnswer));
			
				return boSurveyDetailAnswerCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyDetailAnswerCollectionCount
		///This method returns the collection count of BOSurveyDetailAnswer objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SurveyDetailAnswerCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSurveyDetailAnswer.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSurveyDetailAnswer>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSurveyDetailAnswer.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyDetailAnswerCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSurveyDetailAnswer objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSurveyDetailAnswerCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSurveyDetailAnswer> daoSurveyDetailAnswerCollection = DAOSurveyDetailAnswer.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSurveyDetailAnswer resdaoSurveyDetailAnswer in daoSurveyDetailAnswerCollection)
					boSurveyDetailAnswerCollection.Add((T)(object)new BOSurveyDetailAnswer(resdaoSurveyDetailAnswer));
			
				return boSurveyDetailAnswerCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyDetailAnswerCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSurveyDetailAnswer objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSurveyDetailAnswer.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? DetailAnswerId
		{
			get
			{
				 return _detailAnswerId;
			}
			set
			{
				_detailAnswerId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SurveyDetailId
		{
			get
			{
				 return _surveyDetailId;
			}
			set
			{
				_surveyDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SurveyId
		{
			get
			{
				 return _surveyId;
			}
			set
			{
				_surveyId = value;
				_isDirty = true;
			}
		}
		
		public virtual string AnswerEn
		{
			get
			{
				 return _answerEn;
			}
			set
			{
				_answerEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string AnswerAr
		{
			get
			{
				 return _answerAr;
			}
			set
			{
				_answerAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
