/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesError.
	///</Summary>
	public partial class BOSalesError : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _salesErrorId;
		protected string _salesErrorCode;
		protected string _salesErrorNameEn;
		protected string _salesErrorNameAr;
		protected string _salesErrorTemplateAr;
		protected string _salesErrorTemplateEn;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected Int64? _rowId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesError()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 salesErrorId
		///</parameters>
		public BOSalesError(Int32 salesErrorId)
		{
			try
			{
				DAOSalesError daoSalesError = DAOSalesError.SelectOne(salesErrorId);
				_salesErrorId = daoSalesError.SalesErrorId;
				_salesErrorCode = daoSalesError.SalesErrorCode;
				_salesErrorNameEn = daoSalesError.SalesErrorNameEn;
				_salesErrorNameAr = daoSalesError.SalesErrorNameAr;
				_salesErrorTemplateAr = daoSalesError.SalesErrorTemplateAr;
				_salesErrorTemplateEn = daoSalesError.SalesErrorTemplateEn;
				_icon = daoSalesError.Icon;
				_color = daoSalesError.Color;
				_displayOrder = daoSalesError.DisplayOrder;
				_isActive = daoSalesError.IsActive;
				_canEdit = daoSalesError.CanEdit;
				_canDelete = daoSalesError.CanDelete;
				_cBy = daoSalesError.CBy;
				_cDate = daoSalesError.CDate;
				_eBy = daoSalesError.EBy;
				_eDate = daoSalesError.EDate;
				_rowId = daoSalesError.RowId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesError
		///</parameters>
		protected internal BOSalesError(DAOSalesError daoSalesError)
		{
			try
			{
				_salesErrorId = daoSalesError.SalesErrorId;
				_salesErrorCode = daoSalesError.SalesErrorCode;
				_salesErrorNameEn = daoSalesError.SalesErrorNameEn;
				_salesErrorNameAr = daoSalesError.SalesErrorNameAr;
				_salesErrorTemplateAr = daoSalesError.SalesErrorTemplateAr;
				_salesErrorTemplateEn = daoSalesError.SalesErrorTemplateEn;
				_icon = daoSalesError.Icon;
				_color = daoSalesError.Color;
				_displayOrder = daoSalesError.DisplayOrder;
				_isActive = daoSalesError.IsActive;
				_canEdit = daoSalesError.CanEdit;
				_canDelete = daoSalesError.CanDelete;
				_cBy = daoSalesError.CBy;
				_cDate = daoSalesError.CDate;
				_eBy = daoSalesError.EBy;
				_eDate = daoSalesError.EDate;
				_rowId = daoSalesError.RowId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesError record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesError daoSalesError = new DAOSalesError();
			RegisterDataObject(daoSalesError);
			BeginTransaction("savenewBOSalesError");
			try
			{
				daoSalesError.SalesErrorId = _salesErrorId;
				daoSalesError.SalesErrorCode = _salesErrorCode;
				daoSalesError.SalesErrorNameEn = _salesErrorNameEn;
				daoSalesError.SalesErrorNameAr = _salesErrorNameAr;
				daoSalesError.SalesErrorTemplateAr = _salesErrorTemplateAr;
				daoSalesError.SalesErrorTemplateEn = _salesErrorTemplateEn;
				daoSalesError.Icon = _icon;
				daoSalesError.Color = _color;
				daoSalesError.DisplayOrder = _displayOrder;
				daoSalesError.IsActive = _isActive;
				daoSalesError.CanEdit = _canEdit;
				daoSalesError.CanDelete = _canDelete;
				daoSalesError.CBy = _cBy;
				daoSalesError.CDate = _cDate;
				daoSalesError.EBy = _eBy;
				daoSalesError.EDate = _eDate;
				daoSalesError.Insert();
				CommitTransaction();
				
				_salesErrorId = daoSalesError.SalesErrorId;
				_salesErrorCode = daoSalesError.SalesErrorCode;
				_salesErrorNameEn = daoSalesError.SalesErrorNameEn;
				_salesErrorNameAr = daoSalesError.SalesErrorNameAr;
				_salesErrorTemplateAr = daoSalesError.SalesErrorTemplateAr;
				_salesErrorTemplateEn = daoSalesError.SalesErrorTemplateEn;
				_icon = daoSalesError.Icon;
				_color = daoSalesError.Color;
				_displayOrder = daoSalesError.DisplayOrder;
				_isActive = daoSalesError.IsActive;
				_canEdit = daoSalesError.CanEdit;
				_canDelete = daoSalesError.CanDelete;
				_cBy = daoSalesError.CBy;
				_cDate = daoSalesError.CDate;
				_eBy = daoSalesError.EBy;
				_eDate = daoSalesError.EDate;
				_rowId = daoSalesError.RowId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesError");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesError record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesError
		///</parameters>
		public virtual void Update()
		{
			DAOSalesError daoSalesError = new DAOSalesError();
			RegisterDataObject(daoSalesError);
			BeginTransaction("updateBOSalesError");
			try
			{
				daoSalesError.SalesErrorId = _salesErrorId;
				daoSalesError.SalesErrorCode = _salesErrorCode;
				daoSalesError.SalesErrorNameEn = _salesErrorNameEn;
				daoSalesError.SalesErrorNameAr = _salesErrorNameAr;
				daoSalesError.SalesErrorTemplateAr = _salesErrorTemplateAr;
				daoSalesError.SalesErrorTemplateEn = _salesErrorTemplateEn;
				daoSalesError.Icon = _icon;
				daoSalesError.Color = _color;
				daoSalesError.DisplayOrder = _displayOrder;
				daoSalesError.IsActive = _isActive;
				daoSalesError.CanEdit = _canEdit;
				daoSalesError.CanDelete = _canDelete;
				daoSalesError.CBy = _cBy;
				daoSalesError.CDate = _cDate;
				daoSalesError.EBy = _eBy;
				daoSalesError.EDate = _eDate;
				daoSalesError.RowId = _rowId;
				daoSalesError.Update();
				CommitTransaction();
				
				_salesErrorId = daoSalesError.SalesErrorId;
				_salesErrorCode = daoSalesError.SalesErrorCode;
				_salesErrorNameEn = daoSalesError.SalesErrorNameEn;
				_salesErrorNameAr = daoSalesError.SalesErrorNameAr;
				_salesErrorTemplateAr = daoSalesError.SalesErrorTemplateAr;
				_salesErrorTemplateEn = daoSalesError.SalesErrorTemplateEn;
				_icon = daoSalesError.Icon;
				_color = daoSalesError.Color;
				_displayOrder = daoSalesError.DisplayOrder;
				_isActive = daoSalesError.IsActive;
				_canEdit = daoSalesError.CanEdit;
				_canDelete = daoSalesError.CanDelete;
				_cBy = daoSalesError.CBy;
				_cDate = daoSalesError.CDate;
				_eBy = daoSalesError.EBy;
				_eDate = daoSalesError.EDate;
				_rowId = daoSalesError.RowId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesError");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesError record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesError daoSalesError = new DAOSalesError();
			RegisterDataObject(daoSalesError);
			BeginTransaction("deleteBOSalesError");
			try
			{
				daoSalesError.SalesErrorId = _salesErrorId;
				daoSalesError.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesError");
				throw;
			}
		}
		
		///<Summary>
		///SalesErrorCollection
		///This method returns the collection of BOSalesError objects
		///</Summary>
		///<returns>
		///List[BOSalesError]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesError> SalesErrorCollection()
		{
			try
			{
				IList<BOSalesError> boSalesErrorCollection = new List<BOSalesError>();
				IList<DAOSalesError> daoSalesErrorCollection = DAOSalesError.SelectAll();
			
				foreach(DAOSalesError daoSalesError in daoSalesErrorCollection)
					boSalesErrorCollection.Add(new BOSalesError(daoSalesError));
			
				return boSalesErrorCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesErrorCollectionCount
		///This method returns the collection count of BOSalesError objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesErrorCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesError.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesError>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesError.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesErrorCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesError objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesErrorCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesError> daoSalesErrorCollection = DAOSalesError.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesError resdaoSalesError in daoSalesErrorCollection)
					boSalesErrorCollection.Add((T)(object)new BOSalesError(resdaoSalesError));
			
				return boSalesErrorCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesErrorCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesError objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesError.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SalesErrorId
		{
			get
			{
				 return _salesErrorId;
			}
			set
			{
				_salesErrorId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SalesErrorCode
		{
			get
			{
				 return _salesErrorCode;
			}
			set
			{
				_salesErrorCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string SalesErrorNameEn
		{
			get
			{
				 return _salesErrorNameEn;
			}
			set
			{
				_salesErrorNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string SalesErrorNameAr
		{
			get
			{
				 return _salesErrorNameAr;
			}
			set
			{
				_salesErrorNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string SalesErrorTemplateAr
		{
			get
			{
				 return _salesErrorTemplateAr;
			}
			set
			{
				_salesErrorTemplateAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string SalesErrorTemplateEn
		{
			get
			{
				 return _salesErrorTemplateEn;
			}
			set
			{
				_salesErrorTemplateEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? RowId
		{
			get
			{
				 return _rowId;
			}
			set
			{
				_rowId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
