/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOServeyStatus.
	///It maintains a collection of BOClientSurvey objects.
	///</Summary>
	public partial class BOServeyStatus : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _serveyStatusId;
		protected string _serveyStatusCode;
		protected string _serveyStatusNameEn;
		protected string _serveyStatusNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientSurvey> _boClientSurveyCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOServeyStatus()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 serveyStatusId
		///</parameters>
		public BOServeyStatus(Int32 serveyStatusId)
		{
			try
			{
				DAOServeyStatus daoServeyStatus = DAOServeyStatus.SelectOne(serveyStatusId);
				_serveyStatusId = daoServeyStatus.ServeyStatusId;
				_serveyStatusCode = daoServeyStatus.ServeyStatusCode;
				_serveyStatusNameEn = daoServeyStatus.ServeyStatusNameEn;
				_serveyStatusNameAr = daoServeyStatus.ServeyStatusNameAr;
				_isActive = daoServeyStatus.IsActive;
				_canEdit = daoServeyStatus.CanEdit;
				_canDelete = daoServeyStatus.CanDelete;
				_displayOrder = daoServeyStatus.DisplayOrder;
				_color = daoServeyStatus.Color;
				_icon = daoServeyStatus.Icon;
				_cBy = daoServeyStatus.CBy;
				_cDate = daoServeyStatus.CDate;
				_eBy = daoServeyStatus.EBy;
				_eDate = daoServeyStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOServeyStatus
		///</parameters>
		protected internal BOServeyStatus(DAOServeyStatus daoServeyStatus)
		{
			try
			{
				_serveyStatusId = daoServeyStatus.ServeyStatusId;
				_serveyStatusCode = daoServeyStatus.ServeyStatusCode;
				_serveyStatusNameEn = daoServeyStatus.ServeyStatusNameEn;
				_serveyStatusNameAr = daoServeyStatus.ServeyStatusNameAr;
				_isActive = daoServeyStatus.IsActive;
				_canEdit = daoServeyStatus.CanEdit;
				_canDelete = daoServeyStatus.CanDelete;
				_displayOrder = daoServeyStatus.DisplayOrder;
				_color = daoServeyStatus.Color;
				_icon = daoServeyStatus.Icon;
				_cBy = daoServeyStatus.CBy;
				_cDate = daoServeyStatus.CDate;
				_eBy = daoServeyStatus.EBy;
				_eDate = daoServeyStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ServeyStatus record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOServeyStatus daoServeyStatus = new DAOServeyStatus();
			RegisterDataObject(daoServeyStatus);
			BeginTransaction("savenewBOServeyStatus");
			try
			{
				daoServeyStatus.ServeyStatusId = _serveyStatusId;
				daoServeyStatus.ServeyStatusCode = _serveyStatusCode;
				daoServeyStatus.ServeyStatusNameEn = _serveyStatusNameEn;
				daoServeyStatus.ServeyStatusNameAr = _serveyStatusNameAr;
				daoServeyStatus.IsActive = _isActive;
				daoServeyStatus.CanEdit = _canEdit;
				daoServeyStatus.CanDelete = _canDelete;
				daoServeyStatus.DisplayOrder = _displayOrder;
				daoServeyStatus.Color = _color;
				daoServeyStatus.Icon = _icon;
				daoServeyStatus.CBy = _cBy;
				daoServeyStatus.CDate = _cDate;
				daoServeyStatus.EBy = _eBy;
				daoServeyStatus.EDate = _eDate;
				daoServeyStatus.Insert();
				CommitTransaction();
				
				_serveyStatusId = daoServeyStatus.ServeyStatusId;
				_serveyStatusCode = daoServeyStatus.ServeyStatusCode;
				_serveyStatusNameEn = daoServeyStatus.ServeyStatusNameEn;
				_serveyStatusNameAr = daoServeyStatus.ServeyStatusNameAr;
				_isActive = daoServeyStatus.IsActive;
				_canEdit = daoServeyStatus.CanEdit;
				_canDelete = daoServeyStatus.CanDelete;
				_displayOrder = daoServeyStatus.DisplayOrder;
				_color = daoServeyStatus.Color;
				_icon = daoServeyStatus.Icon;
				_cBy = daoServeyStatus.CBy;
				_cDate = daoServeyStatus.CDate;
				_eBy = daoServeyStatus.EBy;
				_eDate = daoServeyStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOServeyStatus");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ServeyStatus record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOServeyStatus
		///</parameters>
		public virtual void Update()
		{
			DAOServeyStatus daoServeyStatus = new DAOServeyStatus();
			RegisterDataObject(daoServeyStatus);
			BeginTransaction("updateBOServeyStatus");
			try
			{
				daoServeyStatus.ServeyStatusId = _serveyStatusId;
				daoServeyStatus.ServeyStatusCode = _serveyStatusCode;
				daoServeyStatus.ServeyStatusNameEn = _serveyStatusNameEn;
				daoServeyStatus.ServeyStatusNameAr = _serveyStatusNameAr;
				daoServeyStatus.IsActive = _isActive;
				daoServeyStatus.CanEdit = _canEdit;
				daoServeyStatus.CanDelete = _canDelete;
				daoServeyStatus.DisplayOrder = _displayOrder;
				daoServeyStatus.Color = _color;
				daoServeyStatus.Icon = _icon;
				daoServeyStatus.CBy = _cBy;
				daoServeyStatus.CDate = _cDate;
				daoServeyStatus.EBy = _eBy;
				daoServeyStatus.EDate = _eDate;
				daoServeyStatus.Update();
				CommitTransaction();
				
				_serveyStatusId = daoServeyStatus.ServeyStatusId;
				_serveyStatusCode = daoServeyStatus.ServeyStatusCode;
				_serveyStatusNameEn = daoServeyStatus.ServeyStatusNameEn;
				_serveyStatusNameAr = daoServeyStatus.ServeyStatusNameAr;
				_isActive = daoServeyStatus.IsActive;
				_canEdit = daoServeyStatus.CanEdit;
				_canDelete = daoServeyStatus.CanDelete;
				_displayOrder = daoServeyStatus.DisplayOrder;
				_color = daoServeyStatus.Color;
				_icon = daoServeyStatus.Icon;
				_cBy = daoServeyStatus.CBy;
				_cDate = daoServeyStatus.CDate;
				_eBy = daoServeyStatus.EBy;
				_eDate = daoServeyStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOServeyStatus");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ServeyStatus record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOServeyStatus daoServeyStatus = new DAOServeyStatus();
			RegisterDataObject(daoServeyStatus);
			BeginTransaction("deleteBOServeyStatus");
			try
			{
				daoServeyStatus.ServeyStatusId = _serveyStatusId;
				daoServeyStatus.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOServeyStatus");
				throw;
			}
		}
		
		///<Summary>
		///ServeyStatusCollection
		///This method returns the collection of BOServeyStatus objects
		///</Summary>
		///<returns>
		///List[BOServeyStatus]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOServeyStatus> ServeyStatusCollection()
		{
			try
			{
				IList<BOServeyStatus> boServeyStatusCollection = new List<BOServeyStatus>();
				IList<DAOServeyStatus> daoServeyStatusCollection = DAOServeyStatus.SelectAll();
			
				foreach(DAOServeyStatus daoServeyStatus in daoServeyStatusCollection)
					boServeyStatusCollection.Add(new BOServeyStatus(daoServeyStatus));
			
				return boServeyStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ServeyStatusCollectionCount
		///This method returns the collection count of BOServeyStatus objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ServeyStatusCollectionCount()
		{
			try
			{
				Int32 objCount = DAOServeyStatus.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientSurveyCollection
		///This method returns its collection of BOClientSurvey objects
		///</Summary>
		///<returns>
		///IList[BOClientSurvey]
		///</returns>
		///<parameters>
		///BOServeyStatus
		///</parameters>
		public virtual IList<BOClientSurvey> ClientSurveyCollection()
		{
			try
			{
				if(_boClientSurveyCollection == null)
					LoadClientSurveyCollection();
				
				return _boClientSurveyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOServeyStatus>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOServeyStatus.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ServeyStatusCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOServeyStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boServeyStatusCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOServeyStatus> daoServeyStatusCollection = DAOServeyStatus.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOServeyStatus resdaoServeyStatus in daoServeyStatusCollection)
					boServeyStatusCollection.Add((T)(object)new BOServeyStatus(resdaoServeyStatus));
			
				return boServeyStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ServeyStatusCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOServeyStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOServeyStatus.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientSurveyCollection
		///This method loads the internal collection of BOClientSurvey objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientSurveyCollection()
		{
			try
			{
				_boClientSurveyCollection = new List<BOClientSurvey>();
				IList<DAOClientSurvey> daoClientSurveyCollection = DAOClientSurvey.SelectAllByServeyStatusId(_serveyStatusId.Value);
				
				foreach(DAOClientSurvey daoClientSurvey in daoClientSurveyCollection)
					_boClientSurveyCollection.Add(new BOClientSurvey(daoClientSurvey));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientSurvey
		///This method persists a BOClientSurvey object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientSurvey
		///</parameters>
		public virtual void AddClientSurvey(BOClientSurvey boClientSurvey)
		{
			DAOClientSurvey daoClientSurvey = new DAOClientSurvey();
			RegisterDataObject(daoClientSurvey);
			BeginTransaction("addClientSurvey");
			try
			{
				daoClientSurvey.ClientServeyId = boClientSurvey.ClientServeyId;
				daoClientSurvey.SurveyId = boClientSurvey.SurveyId;
				daoClientSurvey.BranchId = boClientSurvey.BranchId;
				daoClientSurvey.ClientId = boClientSurvey.ClientId;
				daoClientSurvey.RepresentativeId = boClientSurvey.RepresentativeId;
				daoClientSurvey.CreateDate = boClientSurvey.CreateDate;
				daoClientSurvey.CreateTime = boClientSurvey.CreateTime;
				daoClientSurvey.StartDate = boClientSurvey.StartDate;
				daoClientSurvey.StartTime = boClientSurvey.StartTime;
				daoClientSurvey.IsClosed = boClientSurvey.IsClosed;
				daoClientSurvey.Notes = boClientSurvey.Notes;
				daoClientSurvey.Latitude = boClientSurvey.Latitude;
				daoClientSurvey.Longitude = boClientSurvey.Longitude;
				daoClientSurvey.InZone = boClientSurvey.InZone;
				daoClientSurvey.Distance = boClientSurvey.Distance;
				daoClientSurvey.CanDelete = boClientSurvey.CanDelete;
				daoClientSurvey.CBy = boClientSurvey.CBy;
				daoClientSurvey.CDate = boClientSurvey.CDate;
				daoClientSurvey.EBy = boClientSurvey.EBy;
				daoClientSurvey.EDate = boClientSurvey.EDate;
				daoClientSurvey.ServeyStatusId = _serveyStatusId.Value;
				daoClientSurvey.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientSurvey = new BOClientSurvey(daoClientSurvey);
				if(_boClientSurveyCollection != null)
					_boClientSurveyCollection.Add(boClientSurvey);
			}
			catch
			{
				RollbackTransaction("addClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientSurvey
		///This method deletes all BOClientSurvey objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientSurvey()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientSurvey");
			try
			{
				DAOClientSurvey.DeleteAllByServeyStatusId(ConnectionProvider, _serveyStatusId.Value);
				CommitTransaction();
				if(_boClientSurveyCollection != null)
				{
					_boClientSurveyCollection.Clear();
					_boClientSurveyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientSurvey");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ServeyStatusId
		{
			get
			{
				 return _serveyStatusId;
			}
			set
			{
				_serveyStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ServeyStatusCode
		{
			get
			{
				 return _serveyStatusCode;
			}
			set
			{
				_serveyStatusCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ServeyStatusNameEn
		{
			get
			{
				 return _serveyStatusNameEn;
			}
			set
			{
				_serveyStatusNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ServeyStatusNameAr
		{
			get
			{
				 return _serveyStatusNameAr;
			}
			set
			{
				_serveyStatusNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
