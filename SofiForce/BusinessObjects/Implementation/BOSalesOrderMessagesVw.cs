/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:40 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderMessagesVw.
	///</Summary>
	public partial class BOSalesOrderMessagesVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _salesMessageId;
		protected Int64? _salesId;
		protected Int32? _userId;
		protected DateTime? _messageDate;
		protected string _message;
		protected string _realName;
		protected string _userName;
		protected string _avatar;
		protected string _jobTitle;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderMessagesVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderMessagesVw
		///</parameters>
		protected internal BOSalesOrderMessagesVw(DAOSalesOrderMessagesVw daoSalesOrderMessagesVw)
		{
			try
			{
				_salesMessageId = daoSalesOrderMessagesVw.SalesMessageId;
				_salesId = daoSalesOrderMessagesVw.SalesId;
				_userId = daoSalesOrderMessagesVw.UserId;
				_messageDate = daoSalesOrderMessagesVw.MessageDate;
				_message = daoSalesOrderMessagesVw.Message;
				_realName = daoSalesOrderMessagesVw.RealName;
				_userName = daoSalesOrderMessagesVw.UserName;
				_avatar = daoSalesOrderMessagesVw.Avatar;
				_jobTitle = daoSalesOrderMessagesVw.JobTitle;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///SalesOrderMessagesVwCollection
		///This method returns the collection of BOSalesOrderMessagesVw objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderMessagesVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderMessagesVw> SalesOrderMessagesVwCollection()
		{
			try
			{
				IList<BOSalesOrderMessagesVw> boSalesOrderMessagesVwCollection = new List<BOSalesOrderMessagesVw>();
				IList<DAOSalesOrderMessagesVw> daoSalesOrderMessagesVwCollection = DAOSalesOrderMessagesVw.SelectAll();
			
				foreach(DAOSalesOrderMessagesVw daoSalesOrderMessagesVw in daoSalesOrderMessagesVwCollection)
					boSalesOrderMessagesVwCollection.Add(new BOSalesOrderMessagesVw(daoSalesOrderMessagesVw));
			
				return boSalesOrderMessagesVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderMessagesVwCollectionCount
		///This method returns the collection count of BOSalesOrderMessagesVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderMessagesVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderMessagesVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderMessagesVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderMessagesVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderMessagesVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderMessagesVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderMessagesVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderMessagesVw> daoSalesOrderMessagesVwCollection = DAOSalesOrderMessagesVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderMessagesVw resdaoSalesOrderMessagesVw in daoSalesOrderMessagesVwCollection)
					boSalesOrderMessagesVwCollection.Add((T)(object)new BOSalesOrderMessagesVw(resdaoSalesOrderMessagesVw));
			
				return boSalesOrderMessagesVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderMessagesVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderMessagesVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderMessagesVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? SalesMessageId
		{
			get
			{
				 return _salesMessageId;
			}
			set
			{
				_salesMessageId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? MessageDate
		{
			get
			{
				 return _messageDate;
			}
			set
			{
				_messageDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Message
		{
			get
			{
				 return _message;
			}
			set
			{
				_message = value;
				_isDirty = true;
			}
		}
		
		public virtual string RealName
		{
			get
			{
				 return _realName;
			}
			set
			{
				_realName = value;
				_isDirty = true;
			}
		}
		
		public virtual string UserName
		{
			get
			{
				 return _userName;
			}
			set
			{
				_userName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Avatar
		{
			get
			{
				 return _avatar;
			}
			set
			{
				_avatar = value;
				_isDirty = true;
			}
		}
		
		public virtual string JobTitle
		{
			get
			{
				 return _jobTitle;
			}
			set
			{
				_jobTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
