/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientVisitPlanVw.
	///</Summary>
	public partial class BOClientVisitPlanVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _visitPlanId;
		protected Int32? _clientId;
		protected Int32? _day1;
		protected Int32? _day2;
		protected Int32? _day3;
		protected Int32? _day4;
		protected Int32? _day5;
		protected Int32? _day6;
		protected Int32? _day7;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected Int32? _branchId;
		protected string _clientGroupSubNameAr;
		protected string _clientGroupSubNameEn;
		protected Int32? _clientGroupSubId;
		protected Int32? _clientGroupId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientVisitPlanVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientVisitPlanVw
		///</parameters>
		protected internal BOClientVisitPlanVw(DAOClientVisitPlanVw daoClientVisitPlanVw)
		{
			try
			{
				_visitPlanId = daoClientVisitPlanVw.VisitPlanId;
				_clientId = daoClientVisitPlanVw.ClientId;
				_day1 = daoClientVisitPlanVw.Day1;
				_day2 = daoClientVisitPlanVw.Day2;
				_day3 = daoClientVisitPlanVw.Day3;
				_day4 = daoClientVisitPlanVw.Day4;
				_day5 = daoClientVisitPlanVw.Day5;
				_day6 = daoClientVisitPlanVw.Day6;
				_day7 = daoClientVisitPlanVw.Day7;
				_clientCode = daoClientVisitPlanVw.ClientCode;
				_clientNameAr = daoClientVisitPlanVw.ClientNameAr;
				_clientNameEn = daoClientVisitPlanVw.ClientNameEn;
				_branchCode = daoClientVisitPlanVw.BranchCode;
				_branchNameAr = daoClientVisitPlanVw.BranchNameAr;
				_branchNameEn = daoClientVisitPlanVw.BranchNameEn;
				_branchId = daoClientVisitPlanVw.BranchId;
				_clientGroupSubNameAr = daoClientVisitPlanVw.ClientGroupSubNameAr;
				_clientGroupSubNameEn = daoClientVisitPlanVw.ClientGroupSubNameEn;
				_clientGroupSubId = daoClientVisitPlanVw.ClientGroupSubId;
				_clientGroupId = daoClientVisitPlanVw.ClientGroupId;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ClientVisitPlanVwCollection
		///This method returns the collection of BOClientVisitPlanVw objects
		///</Summary>
		///<returns>
		///List[BOClientVisitPlanVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientVisitPlanVw> ClientVisitPlanVwCollection()
		{
			try
			{
				IList<BOClientVisitPlanVw> boClientVisitPlanVwCollection = new List<BOClientVisitPlanVw>();
				IList<DAOClientVisitPlanVw> daoClientVisitPlanVwCollection = DAOClientVisitPlanVw.SelectAll();
			
				foreach(DAOClientVisitPlanVw daoClientVisitPlanVw in daoClientVisitPlanVwCollection)
					boClientVisitPlanVwCollection.Add(new BOClientVisitPlanVw(daoClientVisitPlanVw));
			
				return boClientVisitPlanVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientVisitPlanVwCollectionCount
		///This method returns the collection count of BOClientVisitPlanVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientVisitPlanVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientVisitPlanVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientVisitPlanVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientVisitPlanVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientVisitPlanVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientVisitPlanVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientVisitPlanVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientVisitPlanVw> daoClientVisitPlanVwCollection = DAOClientVisitPlanVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientVisitPlanVw resdaoClientVisitPlanVw in daoClientVisitPlanVwCollection)
					boClientVisitPlanVwCollection.Add((T)(object)new BOClientVisitPlanVw(resdaoClientVisitPlanVw));
			
				return boClientVisitPlanVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientVisitPlanVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientVisitPlanVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientVisitPlanVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? VisitPlanId
		{
			get
			{
				 return _visitPlanId;
			}
			set
			{
				_visitPlanId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day1
		{
			get
			{
				 return _day1;
			}
			set
			{
				_day1 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day2
		{
			get
			{
				 return _day2;
			}
			set
			{
				_day2 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day3
		{
			get
			{
				 return _day3;
			}
			set
			{
				_day3 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day4
		{
			get
			{
				 return _day4;
			}
			set
			{
				_day4 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day5
		{
			get
			{
				 return _day5;
			}
			set
			{
				_day5 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day6
		{
			get
			{
				 return _day6;
			}
			set
			{
				_day6 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day7
		{
			get
			{
				 return _day7;
			}
			set
			{
				_day7 = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientCode
		{
			get
			{
				 return _clientCode;
			}
			set
			{
				_clientCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientNameAr
		{
			get
			{
				 return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientNameEn
		{
			get
			{
				 return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientGroupSubNameAr
		{
			get
			{
				 return _clientGroupSubNameAr;
			}
			set
			{
				_clientGroupSubNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientGroupSubNameEn
		{
			get
			{
				 return _clientGroupSubNameEn;
			}
			set
			{
				_clientGroupSubNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientGroupSubId
		{
			get
			{
				 return _clientGroupSubId;
			}
			set
			{
				_clientGroupSubId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientGroupId
		{
			get
			{
				 return _clientGroupId;
			}
			set
			{
				_clientGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
