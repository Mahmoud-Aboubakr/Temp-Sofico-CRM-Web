/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOStore.
	///It maintains a collection of BOAppUserStore,BOItemStore,BOPurchaseOrder,BOSalesOrder objects.
	///</Summary>
	public partial class BOStore : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _storeId;
		protected Int32? _branchId;
		protected Int32? _storeTypeId;
		protected string _storeNameEn;
		protected string _storeNameAr;
		protected string _storeCode;
		protected bool? _isActive;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected Int64? _recId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppUserStore> _boAppUserStoreCollection;
		List<BOItemStore> _boItemStoreCollection;
		List<BOPurchaseOrder> _boPurchaseOrderCollection;
		List<BOSalesOrder> _boSalesOrderCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOStore()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 storeId
		///</parameters>
		public BOStore(Int32 storeId)
		{
			try
			{
				DAOStore daoStore = DAOStore.SelectOne(storeId);
				_storeId = daoStore.StoreId;
				_branchId = daoStore.BranchId;
				_storeTypeId = daoStore.StoreTypeId;
				_storeNameEn = daoStore.StoreNameEn;
				_storeNameAr = daoStore.StoreNameAr;
				_storeCode = daoStore.StoreCode;
				_isActive = daoStore.IsActive;
				_icon = daoStore.Icon;
				_color = daoStore.Color;
				_displayOrder = daoStore.DisplayOrder;
				_canDelete = daoStore.CanDelete;
				_canEdit = daoStore.CanEdit;
				_cBy = daoStore.CBy;
				_cDate = daoStore.CDate;
				_eBy = daoStore.EBy;
				_eDate = daoStore.EDate;
				_recId = daoStore.RecId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOStore
		///</parameters>
		protected internal BOStore(DAOStore daoStore)
		{
			try
			{
				_storeId = daoStore.StoreId;
				_branchId = daoStore.BranchId;
				_storeTypeId = daoStore.StoreTypeId;
				_storeNameEn = daoStore.StoreNameEn;
				_storeNameAr = daoStore.StoreNameAr;
				_storeCode = daoStore.StoreCode;
				_isActive = daoStore.IsActive;
				_icon = daoStore.Icon;
				_color = daoStore.Color;
				_displayOrder = daoStore.DisplayOrder;
				_canDelete = daoStore.CanDelete;
				_canEdit = daoStore.CanEdit;
				_cBy = daoStore.CBy;
				_cDate = daoStore.CDate;
				_eBy = daoStore.EBy;
				_eDate = daoStore.EDate;
				_recId = daoStore.RecId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Store record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOStore daoStore = new DAOStore();
			RegisterDataObject(daoStore);
			BeginTransaction("savenewBOStore");
			try
			{
				daoStore.BranchId = _branchId;
				daoStore.StoreTypeId = _storeTypeId;
				daoStore.StoreNameEn = _storeNameEn;
				daoStore.StoreNameAr = _storeNameAr;
				daoStore.StoreCode = _storeCode;
				daoStore.IsActive = _isActive;
				daoStore.Icon = _icon;
				daoStore.Color = _color;
				daoStore.DisplayOrder = _displayOrder;
				daoStore.CanDelete = _canDelete;
				daoStore.CanEdit = _canEdit;
				daoStore.CBy = _cBy;
				daoStore.CDate = _cDate;
				daoStore.EBy = _eBy;
				daoStore.EDate = _eDate;
				daoStore.RecId = _recId;
				daoStore.Insert();
				CommitTransaction();
				
				_storeId = daoStore.StoreId;
				_branchId = daoStore.BranchId;
				_storeTypeId = daoStore.StoreTypeId;
				_storeNameEn = daoStore.StoreNameEn;
				_storeNameAr = daoStore.StoreNameAr;
				_storeCode = daoStore.StoreCode;
				_isActive = daoStore.IsActive;
				_icon = daoStore.Icon;
				_color = daoStore.Color;
				_displayOrder = daoStore.DisplayOrder;
				_canDelete = daoStore.CanDelete;
				_canEdit = daoStore.CanEdit;
				_cBy = daoStore.CBy;
				_cDate = daoStore.CDate;
				_eBy = daoStore.EBy;
				_eDate = daoStore.EDate;
				_recId = daoStore.RecId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOStore");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Store record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOStore
		///</parameters>
		public virtual void Update()
		{
			DAOStore daoStore = new DAOStore();
			RegisterDataObject(daoStore);
			BeginTransaction("updateBOStore");
			try
			{
				daoStore.StoreId = _storeId;
				daoStore.BranchId = _branchId;
				daoStore.StoreTypeId = _storeTypeId;
				daoStore.StoreNameEn = _storeNameEn;
				daoStore.StoreNameAr = _storeNameAr;
				daoStore.StoreCode = _storeCode;
				daoStore.IsActive = _isActive;
				daoStore.Icon = _icon;
				daoStore.Color = _color;
				daoStore.DisplayOrder = _displayOrder;
				daoStore.CanDelete = _canDelete;
				daoStore.CanEdit = _canEdit;
				daoStore.CBy = _cBy;
				daoStore.CDate = _cDate;
				daoStore.EBy = _eBy;
				daoStore.EDate = _eDate;
				daoStore.RecId = _recId;
				daoStore.Update();
				CommitTransaction();
				
				_storeId = daoStore.StoreId;
				_branchId = daoStore.BranchId;
				_storeTypeId = daoStore.StoreTypeId;
				_storeNameEn = daoStore.StoreNameEn;
				_storeNameAr = daoStore.StoreNameAr;
				_storeCode = daoStore.StoreCode;
				_isActive = daoStore.IsActive;
				_icon = daoStore.Icon;
				_color = daoStore.Color;
				_displayOrder = daoStore.DisplayOrder;
				_canDelete = daoStore.CanDelete;
				_canEdit = daoStore.CanEdit;
				_cBy = daoStore.CBy;
				_cDate = daoStore.CDate;
				_eBy = daoStore.EBy;
				_eDate = daoStore.EDate;
				_recId = daoStore.RecId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOStore");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Store record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOStore daoStore = new DAOStore();
			RegisterDataObject(daoStore);
			BeginTransaction("deleteBOStore");
			try
			{
				daoStore.StoreId = _storeId;
				daoStore.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOStore");
				throw;
			}
		}
		
		///<Summary>
		///StoreCollection
		///This method returns the collection of BOStore objects
		///</Summary>
		///<returns>
		///List[BOStore]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOStore> StoreCollection()
		{
			try
			{
				IList<BOStore> boStoreCollection = new List<BOStore>();
				IList<DAOStore> daoStoreCollection = DAOStore.SelectAll();
			
				foreach(DAOStore daoStore in daoStoreCollection)
					boStoreCollection.Add(new BOStore(daoStore));
			
				return boStoreCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///StoreCollectionCount
		///This method returns the collection count of BOStore objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 StoreCollectionCount()
		{
			try
			{
				Int32 objCount = DAOStore.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserStoreCollection
		///This method returns its collection of BOAppUserStore objects
		///</Summary>
		///<returns>
		///IList[BOAppUserStore]
		///</returns>
		///<parameters>
		///BOStore
		///</parameters>
		public virtual IList<BOAppUserStore> AppUserStoreCollection()
		{
			try
			{
				if(_boAppUserStoreCollection == null)
					LoadAppUserStoreCollection();
				
				return _boAppUserStoreCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ItemStoreCollection
		///This method returns its collection of BOItemStore objects
		///</Summary>
		///<returns>
		///IList[BOItemStore]
		///</returns>
		///<parameters>
		///BOStore
		///</parameters>
		public virtual IList<BOItemStore> ItemStoreCollection()
		{
			try
			{
				if(_boItemStoreCollection == null)
					LoadItemStoreCollection();
				
				return _boItemStoreCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PurchaseOrderCollection
		///This method returns its collection of BOPurchaseOrder objects
		///</Summary>
		///<returns>
		///IList[BOPurchaseOrder]
		///</returns>
		///<parameters>
		///BOStore
		///</parameters>
		public virtual IList<BOPurchaseOrder> PurchaseOrderCollection()
		{
			try
			{
				if(_boPurchaseOrderCollection == null)
					LoadPurchaseOrderCollection();
				
				return _boPurchaseOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderCollection
		///This method returns its collection of BOSalesOrder objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrder]
		///</returns>
		///<parameters>
		///BOStore
		///</parameters>
		public virtual IList<BOSalesOrder> SalesOrderCollection()
		{
			try
			{
				if(_boSalesOrderCollection == null)
					LoadSalesOrderCollection();
				
				return _boSalesOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOStore>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOStore.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///StoreCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOStore objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boStoreCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOStore> daoStoreCollection = DAOStore.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOStore resdaoStore in daoStoreCollection)
					boStoreCollection.Add((T)(object)new BOStore(resdaoStore));
			
				return boStoreCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///StoreCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOStore objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOStore.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserStoreCollection
		///This method loads the internal collection of BOAppUserStore objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserStoreCollection()
		{
			try
			{
				_boAppUserStoreCollection = new List<BOAppUserStore>();
				IList<DAOAppUserStore> daoAppUserStoreCollection = DAOAppUserStore.SelectAllByStoreId(_storeId.Value);
				
				foreach(DAOAppUserStore daoAppUserStore in daoAppUserStoreCollection)
					_boAppUserStoreCollection.Add(new BOAppUserStore(daoAppUserStore));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserStore
		///This method persists a BOAppUserStore object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserStore
		///</parameters>
		public virtual void AddAppUserStore(BOAppUserStore boAppUserStore)
		{
			DAOAppUserStore daoAppUserStore = new DAOAppUserStore();
			RegisterDataObject(daoAppUserStore);
			BeginTransaction("addAppUserStore");
			try
			{
				daoAppUserStore.AppUserStoreId = boAppUserStore.AppUserStoreId;
				daoAppUserStore.UserId = boAppUserStore.UserId;
				daoAppUserStore.StoreId = _storeId.Value;
				daoAppUserStore.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserStore = new BOAppUserStore(daoAppUserStore);
				if(_boAppUserStoreCollection != null)
					_boAppUserStoreCollection.Add(boAppUserStore);
			}
			catch
			{
				RollbackTransaction("addAppUserStore");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserStore
		///This method deletes all BOAppUserStore objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserStore()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserStore");
			try
			{
				DAOAppUserStore.DeleteAllByStoreId(ConnectionProvider, _storeId.Value);
				CommitTransaction();
				if(_boAppUserStoreCollection != null)
				{
					_boAppUserStoreCollection.Clear();
					_boAppUserStoreCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserStore");
				throw;
			}
		}
		
		///<Summary>
		///LoadItemStoreCollection
		///This method loads the internal collection of BOItemStore objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadItemStoreCollection()
		{
			try
			{
				_boItemStoreCollection = new List<BOItemStore>();
				IList<DAOItemStore> daoItemStoreCollection = DAOItemStore.SelectAllByStoreId(_storeId.Value);
				
				foreach(DAOItemStore daoItemStore in daoItemStoreCollection)
					_boItemStoreCollection.Add(new BOItemStore(daoItemStore));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddItemStore
		///This method persists a BOItemStore object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOItemStore
		///</parameters>
		public virtual void AddItemStore(BOItemStore boItemStore)
		{
			DAOItemStore daoItemStore = new DAOItemStore();
			RegisterDataObject(daoItemStore);
			BeginTransaction("addItemStore");
			try
			{
				daoItemStore.ItemStoreId = boItemStore.ItemStoreId;
				daoItemStore.ItemId = boItemStore.ItemId;
				daoItemStore.BranchId = boItemStore.BranchId;
				daoItemStore.Quantity = boItemStore.Quantity;
				daoItemStore.OnHand = boItemStore.OnHand;
				daoItemStore.ExpireDate = boItemStore.ExpireDate;
				daoItemStore.BatchNo = boItemStore.BatchNo;
				daoItemStore.IsActive = boItemStore.IsActive;
				daoItemStore.CBy = boItemStore.CBy;
				daoItemStore.CDate = boItemStore.CDate;
				daoItemStore.EBy = boItemStore.EBy;
				daoItemStore.EDate = boItemStore.EDate;
				daoItemStore.StoreId = _storeId.Value;
				daoItemStore.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boItemStore = new BOItemStore(daoItemStore);
				if(_boItemStoreCollection != null)
					_boItemStoreCollection.Add(boItemStore);
			}
			catch
			{
				RollbackTransaction("addItemStore");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllItemStore
		///This method deletes all BOItemStore objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllItemStore()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllItemStore");
			try
			{
				DAOItemStore.DeleteAllByStoreId(ConnectionProvider, _storeId.Value);
				CommitTransaction();
				if(_boItemStoreCollection != null)
				{
					_boItemStoreCollection.Clear();
					_boItemStoreCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllItemStore");
				throw;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderCollection
		///This method loads the internal collection of BOPurchaseOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderCollection()
		{
			try
			{
				_boPurchaseOrderCollection = new List<BOPurchaseOrder>();
				IList<DAOPurchaseOrder> daoPurchaseOrderCollection = DAOPurchaseOrder.SelectAllByStoreId(_storeId.Value);
				
				foreach(DAOPurchaseOrder daoPurchaseOrder in daoPurchaseOrderCollection)
					_boPurchaseOrderCollection.Add(new BOPurchaseOrder(daoPurchaseOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPurchaseOrder
		///This method persists a BOPurchaseOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrder
		///</parameters>
		public virtual void AddPurchaseOrder(BOPurchaseOrder boPurchaseOrder)
		{
			DAOPurchaseOrder daoPurchaseOrder = new DAOPurchaseOrder();
			RegisterDataObject(daoPurchaseOrder);
			BeginTransaction("addPurchaseOrder");
			try
			{
				daoPurchaseOrder.PurchaseId = boPurchaseOrder.PurchaseId;
				daoPurchaseOrder.PurchaseCode = boPurchaseOrder.PurchaseCode;
				daoPurchaseOrder.BranchId = boPurchaseOrder.BranchId;
				daoPurchaseOrder.VendorId = boPurchaseOrder.VendorId;
				daoPurchaseOrder.InvoiceCode = boPurchaseOrder.InvoiceCode;
				daoPurchaseOrder.InvoiceDate = boPurchaseOrder.InvoiceDate;
				daoPurchaseOrder.InvoiceAmount = boPurchaseOrder.InvoiceAmount;
				daoPurchaseOrder.Currency = boPurchaseOrder.Currency;
				daoPurchaseOrder.ExchangeRate = boPurchaseOrder.ExchangeRate;
				daoPurchaseOrder.InvoiceAmountLocal = boPurchaseOrder.InvoiceAmountLocal;
				daoPurchaseOrder.SumTax = boPurchaseOrder.SumTax;
				daoPurchaseOrder.SumExpense = boPurchaseOrder.SumExpense;
				daoPurchaseOrder.OpenValue = boPurchaseOrder.OpenValue;
				daoPurchaseOrder.RecId = boPurchaseOrder.RecId;
				daoPurchaseOrder.CBy = boPurchaseOrder.CBy;
				daoPurchaseOrder.CDate = boPurchaseOrder.CDate;
				daoPurchaseOrder.EBy = boPurchaseOrder.EBy;
				daoPurchaseOrder.EDate = boPurchaseOrder.EDate;
				daoPurchaseOrder.StoreId = _storeId.Value;
				daoPurchaseOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrder = new BOPurchaseOrder(daoPurchaseOrder);
				if(_boPurchaseOrderCollection != null)
					_boPurchaseOrderCollection.Add(boPurchaseOrder);
			}
			catch
			{
				RollbackTransaction("addPurchaseOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrder
		///This method deletes all BOPurchaseOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPurchaseOrder");
			try
			{
				DAOPurchaseOrder.DeleteAllByStoreId(ConnectionProvider, _storeId.Value);
				CommitTransaction();
				if(_boPurchaseOrderCollection != null)
				{
					_boPurchaseOrderCollection.Clear();
					_boPurchaseOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPurchaseOrder");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderCollection
		///This method loads the internal collection of BOSalesOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderCollection()
		{
			try
			{
				_boSalesOrderCollection = new List<BOSalesOrder>();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAllByStoreId(_storeId.Value);
				
				foreach(DAOSalesOrder daoSalesOrder in daoSalesOrderCollection)
					_boSalesOrderCollection.Add(new BOSalesOrder(daoSalesOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrder
		///This method persists a BOSalesOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual void AddSalesOrder(BOSalesOrder boSalesOrder)
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("addSalesOrder");
			try
			{
				daoSalesOrder.SalesId = boSalesOrder.SalesId;
				daoSalesOrder.SalesCode = boSalesOrder.SalesCode;
				daoSalesOrder.SalesOrderTypeId = boSalesOrder.SalesOrderTypeId;
				daoSalesOrder.ClientId = boSalesOrder.ClientId;
				daoSalesOrder.BranchId = boSalesOrder.BranchId;
				daoSalesOrder.AgentId = boSalesOrder.AgentId;
				daoSalesOrder.RepresentativeId = boSalesOrder.RepresentativeId;
				daoSalesOrder.PriorityTypeId = boSalesOrder.PriorityTypeId;
				daoSalesOrder.PaymentTermId = boSalesOrder.PaymentTermId;
				daoSalesOrder.SalesDate = boSalesOrder.SalesDate;
				daoSalesOrder.SalesTime = boSalesOrder.SalesTime;
				daoSalesOrder.SalesOrderStatusId = boSalesOrder.SalesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = boSalesOrder.SalesOrderSourceId;
				daoSalesOrder.SalesChannelId = boSalesOrder.SalesChannelId;
				daoSalesOrder.SalesPoolId = boSalesOrder.SalesPoolId;
				daoSalesOrder.IsOpened = boSalesOrder.IsOpened;
				daoSalesOrder.OpenValue = boSalesOrder.OpenValue;
				daoSalesOrder.Latitude = boSalesOrder.Latitude;
				daoSalesOrder.Longitude = boSalesOrder.Longitude;
				daoSalesOrder.ItemTotal = boSalesOrder.ItemTotal;
				daoSalesOrder.ItemDiscountTotal = boSalesOrder.ItemDiscountTotal;
				daoSalesOrder.TaxTotal = boSalesOrder.TaxTotal;
				daoSalesOrder.CashDiscountTotal = boSalesOrder.CashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = boSalesOrder.CustomDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = boSalesOrder.CustomDiscountValue;
				daoSalesOrder.CustomDiscountTotal = boSalesOrder.CustomDiscountTotal;
				daoSalesOrder.DeliveryTotal = boSalesOrder.DeliveryTotal;
				daoSalesOrder.NetTotal = boSalesOrder.NetTotal;
				daoSalesOrder.Notes = boSalesOrder.Notes;
				daoSalesOrder.InvoiceRetry = boSalesOrder.InvoiceRetry;
				daoSalesOrder.HasError = boSalesOrder.HasError;
				daoSalesOrder.IsInvoiced = boSalesOrder.IsInvoiced;
				daoSalesOrder.InvoiceCode = boSalesOrder.InvoiceCode;
				daoSalesOrder.InvoiceDate = boSalesOrder.InvoiceDate;
				daoSalesOrder.CreateDate = boSalesOrder.CreateDate;
				daoSalesOrder.RecId = boSalesOrder.RecId;
				daoSalesOrder.CBy = boSalesOrder.CBy;
				daoSalesOrder.CDate = boSalesOrder.CDate;
				daoSalesOrder.EBy = boSalesOrder.EBy;
				daoSalesOrder.EDate = boSalesOrder.EDate;
				daoSalesOrder.SalesPerenId = boSalesOrder.SalesPerenId;
				daoSalesOrder.Inprogress = boSalesOrder.Inprogress;
				daoSalesOrder.IsBackoffice = boSalesOrder.IsBackoffice;
				daoSalesOrder.IsDeleted = boSalesOrder.IsDeleted;
				daoSalesOrder.StoreId = _storeId.Value;
				daoSalesOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrder = new BOSalesOrder(daoSalesOrder);
				if(_boSalesOrderCollection != null)
					_boSalesOrderCollection.Add(boSalesOrder);
			}
			catch
			{
				RollbackTransaction("addSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrder
		///This method deletes all BOSalesOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrder");
			try
			{
				DAOSalesOrder.DeleteAllByStoreId(ConnectionProvider, _storeId.Value);
				CommitTransaction();
				if(_boSalesOrderCollection != null)
				{
					_boSalesOrderCollection.Clear();
					_boSalesOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrder");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? StoreId
		{
			get
			{
				 return _storeId;
			}
			set
			{
				_storeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreTypeId
		{
			get
			{
				 return _storeTypeId;
			}
			set
			{
				_storeTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreNameEn
		{
			get
			{
				 return _storeNameEn;
			}
			set
			{
				_storeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreNameAr
		{
			get
			{
				 return _storeNameAr;
			}
			set
			{
				_storeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string StoreCode
		{
			get
			{
				 return _storeCode;
			}
			set
			{
				_storeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? RecId
		{
			get
			{
				 return _recId;
			}
			set
			{
				_recId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
