/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientAccount.
	///It maintains a collection of BOClient objects.
	///</Summary>
	public partial class BOClientAccount : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _clientAccountId;
		protected string _clientAccountCode;
		protected string _clientAccountNameAr;
		protected string _clientAccountNameEn;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClient> _boClientCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientAccount()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 clientAccountId
		///</parameters>
		public BOClientAccount(Int32 clientAccountId)
		{
			try
			{
				DAOClientAccount daoClientAccount = DAOClientAccount.SelectOne(clientAccountId);
				_clientAccountId = daoClientAccount.ClientAccountId;
				_clientAccountCode = daoClientAccount.ClientAccountCode;
				_clientAccountNameAr = daoClientAccount.ClientAccountNameAr;
				_clientAccountNameEn = daoClientAccount.ClientAccountNameEn;
				_isActive = daoClientAccount.IsActive;
				_canEdit = daoClientAccount.CanEdit;
				_canDelete = daoClientAccount.CanDelete;
				_icon = daoClientAccount.Icon;
				_color = daoClientAccount.Color;
				_displayOrder = daoClientAccount.DisplayOrder;
				_cBy = daoClientAccount.CBy;
				_cDate = daoClientAccount.CDate;
				_eBy = daoClientAccount.EBy;
				_eDate = daoClientAccount.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientAccount
		///</parameters>
		protected internal BOClientAccount(DAOClientAccount daoClientAccount)
		{
			try
			{
				_clientAccountId = daoClientAccount.ClientAccountId;
				_clientAccountCode = daoClientAccount.ClientAccountCode;
				_clientAccountNameAr = daoClientAccount.ClientAccountNameAr;
				_clientAccountNameEn = daoClientAccount.ClientAccountNameEn;
				_isActive = daoClientAccount.IsActive;
				_canEdit = daoClientAccount.CanEdit;
				_canDelete = daoClientAccount.CanDelete;
				_icon = daoClientAccount.Icon;
				_color = daoClientAccount.Color;
				_displayOrder = daoClientAccount.DisplayOrder;
				_cBy = daoClientAccount.CBy;
				_cDate = daoClientAccount.CDate;
				_eBy = daoClientAccount.EBy;
				_eDate = daoClientAccount.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientAccount record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientAccount daoClientAccount = new DAOClientAccount();
			RegisterDataObject(daoClientAccount);
			BeginTransaction("savenewBOClientAccount");
			try
			{
				daoClientAccount.ClientAccountCode = _clientAccountCode;
				daoClientAccount.ClientAccountNameAr = _clientAccountNameAr;
				daoClientAccount.ClientAccountNameEn = _clientAccountNameEn;
				daoClientAccount.IsActive = _isActive;
				daoClientAccount.CanEdit = _canEdit;
				daoClientAccount.CanDelete = _canDelete;
				daoClientAccount.Icon = _icon;
				daoClientAccount.Color = _color;
				daoClientAccount.DisplayOrder = _displayOrder;
				daoClientAccount.CBy = _cBy;
				daoClientAccount.CDate = _cDate;
				daoClientAccount.EBy = _eBy;
				daoClientAccount.EDate = _eDate;
				daoClientAccount.Insert();
				CommitTransaction();
				
				_clientAccountId = daoClientAccount.ClientAccountId;
				_clientAccountCode = daoClientAccount.ClientAccountCode;
				_clientAccountNameAr = daoClientAccount.ClientAccountNameAr;
				_clientAccountNameEn = daoClientAccount.ClientAccountNameEn;
				_isActive = daoClientAccount.IsActive;
				_canEdit = daoClientAccount.CanEdit;
				_canDelete = daoClientAccount.CanDelete;
				_icon = daoClientAccount.Icon;
				_color = daoClientAccount.Color;
				_displayOrder = daoClientAccount.DisplayOrder;
				_cBy = daoClientAccount.CBy;
				_cDate = daoClientAccount.CDate;
				_eBy = daoClientAccount.EBy;
				_eDate = daoClientAccount.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientAccount");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientAccount record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientAccount
		///</parameters>
		public virtual void Update()
		{
			DAOClientAccount daoClientAccount = new DAOClientAccount();
			RegisterDataObject(daoClientAccount);
			BeginTransaction("updateBOClientAccount");
			try
			{
				daoClientAccount.ClientAccountId = _clientAccountId;
				daoClientAccount.ClientAccountCode = _clientAccountCode;
				daoClientAccount.ClientAccountNameAr = _clientAccountNameAr;
				daoClientAccount.ClientAccountNameEn = _clientAccountNameEn;
				daoClientAccount.IsActive = _isActive;
				daoClientAccount.CanEdit = _canEdit;
				daoClientAccount.CanDelete = _canDelete;
				daoClientAccount.Icon = _icon;
				daoClientAccount.Color = _color;
				daoClientAccount.DisplayOrder = _displayOrder;
				daoClientAccount.CBy = _cBy;
				daoClientAccount.CDate = _cDate;
				daoClientAccount.EBy = _eBy;
				daoClientAccount.EDate = _eDate;
				daoClientAccount.Update();
				CommitTransaction();
				
				_clientAccountId = daoClientAccount.ClientAccountId;
				_clientAccountCode = daoClientAccount.ClientAccountCode;
				_clientAccountNameAr = daoClientAccount.ClientAccountNameAr;
				_clientAccountNameEn = daoClientAccount.ClientAccountNameEn;
				_isActive = daoClientAccount.IsActive;
				_canEdit = daoClientAccount.CanEdit;
				_canDelete = daoClientAccount.CanDelete;
				_icon = daoClientAccount.Icon;
				_color = daoClientAccount.Color;
				_displayOrder = daoClientAccount.DisplayOrder;
				_cBy = daoClientAccount.CBy;
				_cDate = daoClientAccount.CDate;
				_eBy = daoClientAccount.EBy;
				_eDate = daoClientAccount.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientAccount");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientAccount record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientAccount daoClientAccount = new DAOClientAccount();
			RegisterDataObject(daoClientAccount);
			BeginTransaction("deleteBOClientAccount");
			try
			{
				daoClientAccount.ClientAccountId = _clientAccountId;
				daoClientAccount.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientAccount");
				throw;
			}
		}
		
		///<Summary>
		///ClientAccountCollection
		///This method returns the collection of BOClientAccount objects
		///</Summary>
		///<returns>
		///List[BOClientAccount]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientAccount> ClientAccountCollection()
		{
			try
			{
				IList<BOClientAccount> boClientAccountCollection = new List<BOClientAccount>();
				IList<DAOClientAccount> daoClientAccountCollection = DAOClientAccount.SelectAll();
			
				foreach(DAOClientAccount daoClientAccount in daoClientAccountCollection)
					boClientAccountCollection.Add(new BOClientAccount(daoClientAccount));
			
				return boClientAccountCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientAccountCollectionCount
		///This method returns the collection count of BOClientAccount objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientAccountCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientAccount.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientCollection
		///This method returns its collection of BOClient objects
		///</Summary>
		///<returns>
		///IList[BOClient]
		///</returns>
		///<parameters>
		///BOClientAccount
		///</parameters>
		public virtual IList<BOClient> ClientCollection()
		{
			try
			{
				if(_boClientCollection == null)
					LoadClientCollection();
				
				return _boClientCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientAccount>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientAccount.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientAccountCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientAccount objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientAccountCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientAccount> daoClientAccountCollection = DAOClientAccount.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientAccount resdaoClientAccount in daoClientAccountCollection)
					boClientAccountCollection.Add((T)(object)new BOClientAccount(resdaoClientAccount));
			
				return boClientAccountCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientAccountCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientAccount objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientAccount.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientCollection
		///This method loads the internal collection of BOClient objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientCollection()
		{
			try
			{
				_boClientCollection = new List<BOClient>();
				IList<DAOClient> daoClientCollection = DAOClient.SelectAllByClientAccountId(_clientAccountId.Value);
				
				foreach(DAOClient daoClient in daoClientCollection)
					_boClientCollection.Add(new BOClient(daoClient));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClient
		///This method persists a BOClient object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual void AddClient(BOClient boClient)
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("addClient");
			try
			{
				daoClient.ClientId = boClient.ClientId;
				daoClient.ClientTypeId = boClient.ClientTypeId;
				daoClient.ClientCode = boClient.ClientCode;
				daoClient.ClientNameAr = boClient.ClientNameAr;
				daoClient.ClientNameEn = boClient.ClientNameEn;
				daoClient.BusinessUnitId = boClient.BusinessUnitId;
				daoClient.BranchId = boClient.BranchId;
				daoClient.RegionId = boClient.RegionId;
				daoClient.GovernerateId = boClient.GovernerateId;
				daoClient.CityId = boClient.CityId;
				daoClient.LocationLevelId = boClient.LocationLevelId;
				daoClient.ClientGroupId = boClient.ClientGroupId;
				daoClient.ClientGroupSubId = boClient.ClientGroupSubId;
				daoClient.ClientClassificationId = boClient.ClientClassificationId;
				daoClient.CreditLimit = boClient.CreditLimit;
				daoClient.CreditBalance = boClient.CreditBalance;
				daoClient.PaymentTermId = boClient.PaymentTermId;
				daoClient.IsChain = boClient.IsChain;
				daoClient.Building = boClient.Building;
				daoClient.Floor = boClient.Floor;
				daoClient.Property = boClient.Property;
				daoClient.Address = boClient.Address;
				daoClient.Landmark = boClient.Landmark;
				daoClient.Phone = boClient.Phone;
				daoClient.Mobile = boClient.Mobile;
				daoClient.WhatsApp = boClient.WhatsApp;
				daoClient.IsActive = boClient.IsActive;
				daoClient.Latitude = boClient.Latitude;
				daoClient.Longitude = boClient.Longitude;
				daoClient.CBy = boClient.CBy;
				daoClient.CDate = boClient.CDate;
				daoClient.EBy = boClient.EBy;
				daoClient.EDate = boClient.EDate;
				daoClient.IsTaxable = boClient.IsTaxable;
				daoClient.IsCashDiscount = boClient.IsCashDiscount;
				daoClient.ResponsibleNameAr = boClient.ResponsibleNameAr;
				daoClient.ResponsibleNameEn = boClient.ResponsibleNameEn;
				daoClient.TaxCode = boClient.TaxCode;
				daoClient.CommercialCode = boClient.CommercialCode;
				daoClient.IsNew = boClient.IsNew;
				daoClient.NeedValidation = boClient.NeedValidation;
				daoClient.CashGroupId = boClient.CashGroupId;
				daoClient.InRoute = boClient.InRoute;
				daoClient.SalesChannelId = boClient.SalesChannelId;
				daoClient.SalesPoolId = boClient.SalesPoolId;
				daoClient.UserId = boClient.UserId;
				daoClient.Points = boClient.Points;
				daoClient.Wallet = boClient.Wallet;
				daoClient.DealId = boClient.DealId;
				daoClient.ClientAccountId = _clientAccountId.Value;
				daoClient.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClient = new BOClient(daoClient);
				if(_boClientCollection != null)
					_boClientCollection.Add(boClient);
			}
			catch
			{
				RollbackTransaction("addClient");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClient
		///This method deletes all BOClient objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClient()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClient");
			try
			{
				DAOClient.DeleteAllByClientAccountId(ConnectionProvider, _clientAccountId.Value);
				CommitTransaction();
				if(_boClientCollection != null)
				{
					_boClientCollection.Clear();
					_boClientCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClient");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ClientAccountId
		{
			get
			{
				 return _clientAccountId;
			}
			set
			{
				_clientAccountId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientAccountCode
		{
			get
			{
				 return _clientAccountCode;
			}
			set
			{
				_clientAccountCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientAccountNameAr
		{
			get
			{
				 return _clientAccountNameAr;
			}
			set
			{
				_clientAccountNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientAccountNameEn
		{
			get
			{
				 return _clientAccountNameEn;
			}
			set
			{
				_clientAccountNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
