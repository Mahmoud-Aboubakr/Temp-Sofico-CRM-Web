/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BODepartment.
	///It maintains a collection of BOClientComplain,BOClientServiceRequest objects.
	///</Summary>
	public partial class BODepartment : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _departmentId;
		protected string _departmentCode;
		protected string _departmentNameEn;
		protected string _departmentNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientComplain> _boClientComplainCollection;
		List<BOClientServiceRequest> _boClientServiceRequestCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BODepartment()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 departmentId
		///</parameters>
		public BODepartment(Int32 departmentId)
		{
			try
			{
				DAODepartment daoDepartment = DAODepartment.SelectOne(departmentId);
				_departmentId = daoDepartment.DepartmentId;
				_departmentCode = daoDepartment.DepartmentCode;
				_departmentNameEn = daoDepartment.DepartmentNameEn;
				_departmentNameAr = daoDepartment.DepartmentNameAr;
				_isActive = daoDepartment.IsActive;
				_canEdit = daoDepartment.CanEdit;
				_canDelete = daoDepartment.CanDelete;
				_displayOrder = daoDepartment.DisplayOrder;
				_color = daoDepartment.Color;
				_icon = daoDepartment.Icon;
				_cBy = daoDepartment.CBy;
				_cDate = daoDepartment.CDate;
				_eBy = daoDepartment.EBy;
				_eDate = daoDepartment.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAODepartment
		///</parameters>
		protected internal BODepartment(DAODepartment daoDepartment)
		{
			try
			{
				_departmentId = daoDepartment.DepartmentId;
				_departmentCode = daoDepartment.DepartmentCode;
				_departmentNameEn = daoDepartment.DepartmentNameEn;
				_departmentNameAr = daoDepartment.DepartmentNameAr;
				_isActive = daoDepartment.IsActive;
				_canEdit = daoDepartment.CanEdit;
				_canDelete = daoDepartment.CanDelete;
				_displayOrder = daoDepartment.DisplayOrder;
				_color = daoDepartment.Color;
				_icon = daoDepartment.Icon;
				_cBy = daoDepartment.CBy;
				_cDate = daoDepartment.CDate;
				_eBy = daoDepartment.EBy;
				_eDate = daoDepartment.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Department record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAODepartment daoDepartment = new DAODepartment();
			RegisterDataObject(daoDepartment);
			BeginTransaction("savenewBODepartment");
			try
			{
				daoDepartment.DepartmentCode = _departmentCode;
				daoDepartment.DepartmentNameEn = _departmentNameEn;
				daoDepartment.DepartmentNameAr = _departmentNameAr;
				daoDepartment.IsActive = _isActive;
				daoDepartment.CanEdit = _canEdit;
				daoDepartment.CanDelete = _canDelete;
				daoDepartment.DisplayOrder = _displayOrder;
				daoDepartment.Color = _color;
				daoDepartment.Icon = _icon;
				daoDepartment.CBy = _cBy;
				daoDepartment.CDate = _cDate;
				daoDepartment.EBy = _eBy;
				daoDepartment.EDate = _eDate;
				daoDepartment.Insert();
				CommitTransaction();
				
				_departmentId = daoDepartment.DepartmentId;
				_departmentCode = daoDepartment.DepartmentCode;
				_departmentNameEn = daoDepartment.DepartmentNameEn;
				_departmentNameAr = daoDepartment.DepartmentNameAr;
				_isActive = daoDepartment.IsActive;
				_canEdit = daoDepartment.CanEdit;
				_canDelete = daoDepartment.CanDelete;
				_displayOrder = daoDepartment.DisplayOrder;
				_color = daoDepartment.Color;
				_icon = daoDepartment.Icon;
				_cBy = daoDepartment.CBy;
				_cDate = daoDepartment.CDate;
				_eBy = daoDepartment.EBy;
				_eDate = daoDepartment.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBODepartment");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Department record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BODepartment
		///</parameters>
		public virtual void Update()
		{
			DAODepartment daoDepartment = new DAODepartment();
			RegisterDataObject(daoDepartment);
			BeginTransaction("updateBODepartment");
			try
			{
				daoDepartment.DepartmentId = _departmentId;
				daoDepartment.DepartmentCode = _departmentCode;
				daoDepartment.DepartmentNameEn = _departmentNameEn;
				daoDepartment.DepartmentNameAr = _departmentNameAr;
				daoDepartment.IsActive = _isActive;
				daoDepartment.CanEdit = _canEdit;
				daoDepartment.CanDelete = _canDelete;
				daoDepartment.DisplayOrder = _displayOrder;
				daoDepartment.Color = _color;
				daoDepartment.Icon = _icon;
				daoDepartment.CBy = _cBy;
				daoDepartment.CDate = _cDate;
				daoDepartment.EBy = _eBy;
				daoDepartment.EDate = _eDate;
				daoDepartment.Update();
				CommitTransaction();
				
				_departmentId = daoDepartment.DepartmentId;
				_departmentCode = daoDepartment.DepartmentCode;
				_departmentNameEn = daoDepartment.DepartmentNameEn;
				_departmentNameAr = daoDepartment.DepartmentNameAr;
				_isActive = daoDepartment.IsActive;
				_canEdit = daoDepartment.CanEdit;
				_canDelete = daoDepartment.CanDelete;
				_displayOrder = daoDepartment.DisplayOrder;
				_color = daoDepartment.Color;
				_icon = daoDepartment.Icon;
				_cBy = daoDepartment.CBy;
				_cDate = daoDepartment.CDate;
				_eBy = daoDepartment.EBy;
				_eDate = daoDepartment.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBODepartment");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Department record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAODepartment daoDepartment = new DAODepartment();
			RegisterDataObject(daoDepartment);
			BeginTransaction("deleteBODepartment");
			try
			{
				daoDepartment.DepartmentId = _departmentId;
				daoDepartment.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBODepartment");
				throw;
			}
		}
		
		///<Summary>
		///DepartmentCollection
		///This method returns the collection of BODepartment objects
		///</Summary>
		///<returns>
		///List[BODepartment]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BODepartment> DepartmentCollection()
		{
			try
			{
				IList<BODepartment> boDepartmentCollection = new List<BODepartment>();
				IList<DAODepartment> daoDepartmentCollection = DAODepartment.SelectAll();
			
				foreach(DAODepartment daoDepartment in daoDepartmentCollection)
					boDepartmentCollection.Add(new BODepartment(daoDepartment));
			
				return boDepartmentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DepartmentCollectionCount
		///This method returns the collection count of BODepartment objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DepartmentCollectionCount()
		{
			try
			{
				Int32 objCount = DAODepartment.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BODepartment
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestCollection
		///This method returns its collection of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequest]
		///</returns>
		///<parameters>
		///BODepartment
		///</parameters>
		public virtual IList<BOClientServiceRequest> ClientServiceRequestCollection()
		{
			try
			{
				if(_boClientServiceRequestCollection == null)
					LoadClientServiceRequestCollection();
				
				return _boClientServiceRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BODepartment>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAODepartment.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DepartmentCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BODepartment objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boDepartmentCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAODepartment> daoDepartmentCollection = DAODepartment.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAODepartment resdaoDepartment in daoDepartmentCollection)
					boDepartmentCollection.Add((T)(object)new BODepartment(resdaoDepartment));
			
				return boDepartmentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DepartmentCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BODepartment objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAODepartment.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByDepartmentId(_departmentId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.BranchId = boClientComplain.BranchId;
				daoClientComplain.RepresentativeId = boClientComplain.RepresentativeId;
				daoClientComplain.ClientId = boClientComplain.ClientId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeId = boClientComplain.ComplainTypeId;
				daoClientComplain.ComplainTypeDetailId = boClientComplain.ComplainTypeDetailId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.PriorityId = boClientComplain.PriorityId;
				daoClientComplain.ComplainStatusId = boClientComplain.ComplainStatusId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.DepartmentId = _departmentId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByDepartmentId(ConnectionProvider, _departmentId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestCollection
		///This method loads the internal collection of BOClientServiceRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestCollection()
		{
			try
			{
				_boClientServiceRequestCollection = new List<BOClientServiceRequest>();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAllByDepartmentId(_departmentId.Value);
				
				foreach(DAOClientServiceRequest daoClientServiceRequest in daoClientServiceRequestCollection)
					_boClientServiceRequestCollection.Add(new BOClientServiceRequest(daoClientServiceRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequest
		///This method persists a BOClientServiceRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual void AddClientServiceRequest(BOClientServiceRequest boClientServiceRequest)
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("addClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = boClientServiceRequest.RequestId;
				daoClientServiceRequest.RequestCode = boClientServiceRequest.RequestCode;
				daoClientServiceRequest.BranchId = boClientServiceRequest.BranchId;
				daoClientServiceRequest.RepresentativeId = boClientServiceRequest.RepresentativeId;
				daoClientServiceRequest.ClientId = boClientServiceRequest.ClientId;
				daoClientServiceRequest.RequestDate = boClientServiceRequest.RequestDate;
				daoClientServiceRequest.RequestTime = boClientServiceRequest.RequestTime;
				daoClientServiceRequest.RequestTypeId = boClientServiceRequest.RequestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = boClientServiceRequest.RequestTypeDetailId;
				daoClientServiceRequest.Phone = boClientServiceRequest.Phone;
				daoClientServiceRequest.PhoneAlternative = boClientServiceRequest.PhoneAlternative;
				daoClientServiceRequest.PriorityId = boClientServiceRequest.PriorityId;
				daoClientServiceRequest.RequestStatusId = boClientServiceRequest.RequestStatusId;
				daoClientServiceRequest.IsClosed = boClientServiceRequest.IsClosed;
				daoClientServiceRequest.CloseDate = boClientServiceRequest.CloseDate;
				daoClientServiceRequest.Duration = boClientServiceRequest.Duration;
				daoClientServiceRequest.Latitude = boClientServiceRequest.Latitude;
				daoClientServiceRequest.Longitude = boClientServiceRequest.Longitude;
				daoClientServiceRequest.InZone = boClientServiceRequest.InZone;
				daoClientServiceRequest.Distance = boClientServiceRequest.Distance;
				daoClientServiceRequest.Notes = boClientServiceRequest.Notes;
				daoClientServiceRequest.CBy = boClientServiceRequest.CBy;
				daoClientServiceRequest.CDate = boClientServiceRequest.CDate;
				daoClientServiceRequest.EBy = boClientServiceRequest.EBy;
				daoClientServiceRequest.EDate = boClientServiceRequest.EDate;
				daoClientServiceRequest.Replay = boClientServiceRequest.Replay;
				daoClientServiceRequest.RequestTitle = boClientServiceRequest.RequestTitle;
				daoClientServiceRequest.DepartmentId = _departmentId.Value;
				daoClientServiceRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequest = new BOClientServiceRequest(daoClientServiceRequest);
				if(_boClientServiceRequestCollection != null)
					_boClientServiceRequestCollection.Add(boClientServiceRequest);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequest
		///This method deletes all BOClientServiceRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceRequest");
			try
			{
				DAOClientServiceRequest.DeleteAllByDepartmentId(ConnectionProvider, _departmentId.Value);
				CommitTransaction();
				if(_boClientServiceRequestCollection != null)
				{
					_boClientServiceRequestCollection.Clear();
					_boClientServiceRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceRequest");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? DepartmentId
		{
			get
			{
				 return _departmentId;
			}
			set
			{
				_departmentId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DepartmentCode
		{
			get
			{
				 return _departmentCode;
			}
			set
			{
				_departmentCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string DepartmentNameEn
		{
			get
			{
				 return _departmentNameEn;
			}
			set
			{
				_departmentNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string DepartmentNameAr
		{
			get
			{
				 return _departmentNameAr;
			}
			set
			{
				_departmentNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
