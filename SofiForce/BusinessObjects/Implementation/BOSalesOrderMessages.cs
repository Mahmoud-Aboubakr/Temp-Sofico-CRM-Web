/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderMessages.
	///</Summary>
	public partial class BOSalesOrderMessages : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _salesMessageId;
		protected Int64? _salesId;
		protected Int32? _userId;
		protected DateTime? _messageDate;
		protected string _message;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderMessages()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 salesMessageId
		///</parameters>
		public BOSalesOrderMessages(Int64 salesMessageId)
		{
			try
			{
				DAOSalesOrderMessages daoSalesOrderMessages = DAOSalesOrderMessages.SelectOne(salesMessageId);
				_salesMessageId = daoSalesOrderMessages.SalesMessageId;
				_salesId = daoSalesOrderMessages.SalesId;
				_userId = daoSalesOrderMessages.UserId;
				_messageDate = daoSalesOrderMessages.MessageDate;
				_message = daoSalesOrderMessages.Message;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderMessages
		///</parameters>
		protected internal BOSalesOrderMessages(DAOSalesOrderMessages daoSalesOrderMessages)
		{
			try
			{
				_salesMessageId = daoSalesOrderMessages.SalesMessageId;
				_salesId = daoSalesOrderMessages.SalesId;
				_userId = daoSalesOrderMessages.UserId;
				_messageDate = daoSalesOrderMessages.MessageDate;
				_message = daoSalesOrderMessages.Message;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesOrderMessages record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesOrderMessages daoSalesOrderMessages = new DAOSalesOrderMessages();
			RegisterDataObject(daoSalesOrderMessages);
			BeginTransaction("savenewBOSalesOrderMessages");
			try
			{
				daoSalesOrderMessages.SalesId = _salesId;
				daoSalesOrderMessages.UserId = _userId;
				daoSalesOrderMessages.MessageDate = _messageDate;
				daoSalesOrderMessages.Message = _message;
				daoSalesOrderMessages.Insert();
				CommitTransaction();
				
				_salesMessageId = daoSalesOrderMessages.SalesMessageId;
				_salesId = daoSalesOrderMessages.SalesId;
				_userId = daoSalesOrderMessages.UserId;
				_messageDate = daoSalesOrderMessages.MessageDate;
				_message = daoSalesOrderMessages.Message;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesOrderMessages");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesOrderMessages record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderMessages
		///</parameters>
		public virtual void Update()
		{
			DAOSalesOrderMessages daoSalesOrderMessages = new DAOSalesOrderMessages();
			RegisterDataObject(daoSalesOrderMessages);
			BeginTransaction("updateBOSalesOrderMessages");
			try
			{
				daoSalesOrderMessages.SalesMessageId = _salesMessageId;
				daoSalesOrderMessages.SalesId = _salesId;
				daoSalesOrderMessages.UserId = _userId;
				daoSalesOrderMessages.MessageDate = _messageDate;
				daoSalesOrderMessages.Message = _message;
				daoSalesOrderMessages.Update();
				CommitTransaction();
				
				_salesMessageId = daoSalesOrderMessages.SalesMessageId;
				_salesId = daoSalesOrderMessages.SalesId;
				_userId = daoSalesOrderMessages.UserId;
				_messageDate = daoSalesOrderMessages.MessageDate;
				_message = daoSalesOrderMessages.Message;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesOrderMessages");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesOrderMessages record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesOrderMessages daoSalesOrderMessages = new DAOSalesOrderMessages();
			RegisterDataObject(daoSalesOrderMessages);
			BeginTransaction("deleteBOSalesOrderMessages");
			try
			{
				daoSalesOrderMessages.SalesMessageId = _salesMessageId;
				daoSalesOrderMessages.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesOrderMessages");
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderMessagesCollection
		///This method returns the collection of BOSalesOrderMessages objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderMessages]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderMessages> SalesOrderMessagesCollection()
		{
			try
			{
				IList<BOSalesOrderMessages> boSalesOrderMessagesCollection = new List<BOSalesOrderMessages>();
				IList<DAOSalesOrderMessages> daoSalesOrderMessagesCollection = DAOSalesOrderMessages.SelectAll();
			
				foreach(DAOSalesOrderMessages daoSalesOrderMessages in daoSalesOrderMessagesCollection)
					boSalesOrderMessagesCollection.Add(new BOSalesOrderMessages(daoSalesOrderMessages));
			
				return boSalesOrderMessagesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderMessagesCollectionCount
		///This method returns the collection count of BOSalesOrderMessages objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderMessagesCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderMessages.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderMessages>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderMessages.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderMessagesCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderMessages objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderMessagesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderMessages> daoSalesOrderMessagesCollection = DAOSalesOrderMessages.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderMessages resdaoSalesOrderMessages in daoSalesOrderMessagesCollection)
					boSalesOrderMessagesCollection.Add((T)(object)new BOSalesOrderMessages(resdaoSalesOrderMessages));
			
				return boSalesOrderMessagesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderMessagesCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderMessages objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderMessages.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? SalesMessageId
		{
			get
			{
				 return _salesMessageId;
			}
			set
			{
				_salesMessageId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? MessageDate
		{
			get
			{
				 return _messageDate;
			}
			set
			{
				_messageDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Message
		{
			get
			{
				 return _message;
			}
			set
			{
				_message = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
