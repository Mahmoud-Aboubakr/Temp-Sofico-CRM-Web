/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppUserStore.
	///</Summary>
	public partial class BOAppUserStore : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _appUserStoreId;
		protected Int32? _userId;
		protected Int32? _storeId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppUserStore()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 appUserStoreId
		///</parameters>
		public BOAppUserStore(Int32 appUserStoreId)
		{
			try
			{
				DAOAppUserStore daoAppUserStore = DAOAppUserStore.SelectOne(appUserStoreId);
				_appUserStoreId = daoAppUserStore.AppUserStoreId;
				_userId = daoAppUserStore.UserId;
				_storeId = daoAppUserStore.StoreId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppUserStore
		///</parameters>
		protected internal BOAppUserStore(DAOAppUserStore daoAppUserStore)
		{
			try
			{
				_appUserStoreId = daoAppUserStore.AppUserStoreId;
				_userId = daoAppUserStore.UserId;
				_storeId = daoAppUserStore.StoreId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppUserStore record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppUserStore daoAppUserStore = new DAOAppUserStore();
			RegisterDataObject(daoAppUserStore);
			BeginTransaction("savenewBOAppUserStore");
			try
			{
				daoAppUserStore.UserId = _userId;
				daoAppUserStore.StoreId = _storeId;
				daoAppUserStore.Insert();
				CommitTransaction();
				
				_appUserStoreId = daoAppUserStore.AppUserStoreId;
				_userId = daoAppUserStore.UserId;
				_storeId = daoAppUserStore.StoreId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppUserStore");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppUserStore record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserStore
		///</parameters>
		public virtual void Update()
		{
			DAOAppUserStore daoAppUserStore = new DAOAppUserStore();
			RegisterDataObject(daoAppUserStore);
			BeginTransaction("updateBOAppUserStore");
			try
			{
				daoAppUserStore.AppUserStoreId = _appUserStoreId;
				daoAppUserStore.UserId = _userId;
				daoAppUserStore.StoreId = _storeId;
				daoAppUserStore.Update();
				CommitTransaction();
				
				_appUserStoreId = daoAppUserStore.AppUserStoreId;
				_userId = daoAppUserStore.UserId;
				_storeId = daoAppUserStore.StoreId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppUserStore");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppUserStore record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppUserStore daoAppUserStore = new DAOAppUserStore();
			RegisterDataObject(daoAppUserStore);
			BeginTransaction("deleteBOAppUserStore");
			try
			{
				daoAppUserStore.AppUserStoreId = _appUserStoreId;
				daoAppUserStore.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppUserStore");
				throw;
			}
		}
		
		///<Summary>
		///AppUserStoreCollection
		///This method returns the collection of BOAppUserStore objects
		///</Summary>
		///<returns>
		///List[BOAppUserStore]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppUserStore> AppUserStoreCollection()
		{
			try
			{
				IList<BOAppUserStore> boAppUserStoreCollection = new List<BOAppUserStore>();
				IList<DAOAppUserStore> daoAppUserStoreCollection = DAOAppUserStore.SelectAll();
			
				foreach(DAOAppUserStore daoAppUserStore in daoAppUserStoreCollection)
					boAppUserStoreCollection.Add(new BOAppUserStore(daoAppUserStore));
			
				return boAppUserStoreCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserStoreCollectionCount
		///This method returns the collection count of BOAppUserStore objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppUserStoreCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppUserStore.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppUserStore>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppUserStore.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserStoreCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppUserStore objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppUserStoreCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppUserStore> daoAppUserStoreCollection = DAOAppUserStore.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppUserStore resdaoAppUserStore in daoAppUserStoreCollection)
					boAppUserStoreCollection.Add((T)(object)new BOAppUserStore(resdaoAppUserStore));
			
				return boAppUserStoreCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserStoreCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppUserStore objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppUserStore.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? AppUserStoreId
		{
			get
			{
				 return _appUserStoreId;
			}
			set
			{
				_appUserStoreId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreId
		{
			get
			{
				 return _storeId;
			}
			set
			{
				_storeId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
