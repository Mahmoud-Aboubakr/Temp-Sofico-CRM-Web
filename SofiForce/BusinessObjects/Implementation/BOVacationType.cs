/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOVacationType.
	///It maintains a collection of BOVacation objects.
	///</Summary>
	public partial class BOVacationType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _vacationTypeId;
		protected string _vacationTypeCode;
		protected string _vacationTypeNameEn;
		protected string _vacationTypeNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOVacation> _boVacationCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOVacationType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 vacationTypeId
		///</parameters>
		public BOVacationType(Int32 vacationTypeId)
		{
			try
			{
				DAOVacationType daoVacationType = DAOVacationType.SelectOne(vacationTypeId);
				_vacationTypeId = daoVacationType.VacationTypeId;
				_vacationTypeCode = daoVacationType.VacationTypeCode;
				_vacationTypeNameEn = daoVacationType.VacationTypeNameEn;
				_vacationTypeNameAr = daoVacationType.VacationTypeNameAr;
				_isActive = daoVacationType.IsActive;
				_canEdit = daoVacationType.CanEdit;
				_canDelete = daoVacationType.CanDelete;
				_displayOrder = daoVacationType.DisplayOrder;
				_color = daoVacationType.Color;
				_icon = daoVacationType.Icon;
				_cBy = daoVacationType.CBy;
				_cDate = daoVacationType.CDate;
				_eBy = daoVacationType.EBy;
				_eDate = daoVacationType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOVacationType
		///</parameters>
		protected internal BOVacationType(DAOVacationType daoVacationType)
		{
			try
			{
				_vacationTypeId = daoVacationType.VacationTypeId;
				_vacationTypeCode = daoVacationType.VacationTypeCode;
				_vacationTypeNameEn = daoVacationType.VacationTypeNameEn;
				_vacationTypeNameAr = daoVacationType.VacationTypeNameAr;
				_isActive = daoVacationType.IsActive;
				_canEdit = daoVacationType.CanEdit;
				_canDelete = daoVacationType.CanDelete;
				_displayOrder = daoVacationType.DisplayOrder;
				_color = daoVacationType.Color;
				_icon = daoVacationType.Icon;
				_cBy = daoVacationType.CBy;
				_cDate = daoVacationType.CDate;
				_eBy = daoVacationType.EBy;
				_eDate = daoVacationType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new VacationType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOVacationType daoVacationType = new DAOVacationType();
			RegisterDataObject(daoVacationType);
			BeginTransaction("savenewBOVacationType");
			try
			{
				daoVacationType.VacationTypeId = _vacationTypeId;
				daoVacationType.VacationTypeCode = _vacationTypeCode;
				daoVacationType.VacationTypeNameEn = _vacationTypeNameEn;
				daoVacationType.VacationTypeNameAr = _vacationTypeNameAr;
				daoVacationType.IsActive = _isActive;
				daoVacationType.CanEdit = _canEdit;
				daoVacationType.CanDelete = _canDelete;
				daoVacationType.DisplayOrder = _displayOrder;
				daoVacationType.Color = _color;
				daoVacationType.Icon = _icon;
				daoVacationType.CBy = _cBy;
				daoVacationType.CDate = _cDate;
				daoVacationType.EBy = _eBy;
				daoVacationType.EDate = _eDate;
				daoVacationType.Insert();
				CommitTransaction();
				
				_vacationTypeId = daoVacationType.VacationTypeId;
				_vacationTypeCode = daoVacationType.VacationTypeCode;
				_vacationTypeNameEn = daoVacationType.VacationTypeNameEn;
				_vacationTypeNameAr = daoVacationType.VacationTypeNameAr;
				_isActive = daoVacationType.IsActive;
				_canEdit = daoVacationType.CanEdit;
				_canDelete = daoVacationType.CanDelete;
				_displayOrder = daoVacationType.DisplayOrder;
				_color = daoVacationType.Color;
				_icon = daoVacationType.Icon;
				_cBy = daoVacationType.CBy;
				_cDate = daoVacationType.CDate;
				_eBy = daoVacationType.EBy;
				_eDate = daoVacationType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOVacationType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one VacationType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVacationType
		///</parameters>
		public virtual void Update()
		{
			DAOVacationType daoVacationType = new DAOVacationType();
			RegisterDataObject(daoVacationType);
			BeginTransaction("updateBOVacationType");
			try
			{
				daoVacationType.VacationTypeId = _vacationTypeId;
				daoVacationType.VacationTypeCode = _vacationTypeCode;
				daoVacationType.VacationTypeNameEn = _vacationTypeNameEn;
				daoVacationType.VacationTypeNameAr = _vacationTypeNameAr;
				daoVacationType.IsActive = _isActive;
				daoVacationType.CanEdit = _canEdit;
				daoVacationType.CanDelete = _canDelete;
				daoVacationType.DisplayOrder = _displayOrder;
				daoVacationType.Color = _color;
				daoVacationType.Icon = _icon;
				daoVacationType.CBy = _cBy;
				daoVacationType.CDate = _cDate;
				daoVacationType.EBy = _eBy;
				daoVacationType.EDate = _eDate;
				daoVacationType.Update();
				CommitTransaction();
				
				_vacationTypeId = daoVacationType.VacationTypeId;
				_vacationTypeCode = daoVacationType.VacationTypeCode;
				_vacationTypeNameEn = daoVacationType.VacationTypeNameEn;
				_vacationTypeNameAr = daoVacationType.VacationTypeNameAr;
				_isActive = daoVacationType.IsActive;
				_canEdit = daoVacationType.CanEdit;
				_canDelete = daoVacationType.CanDelete;
				_displayOrder = daoVacationType.DisplayOrder;
				_color = daoVacationType.Color;
				_icon = daoVacationType.Icon;
				_cBy = daoVacationType.CBy;
				_cDate = daoVacationType.CDate;
				_eBy = daoVacationType.EBy;
				_eDate = daoVacationType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOVacationType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one VacationType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOVacationType daoVacationType = new DAOVacationType();
			RegisterDataObject(daoVacationType);
			BeginTransaction("deleteBOVacationType");
			try
			{
				daoVacationType.VacationTypeId = _vacationTypeId;
				daoVacationType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOVacationType");
				throw;
			}
		}
		
		///<Summary>
		///VacationTypeCollection
		///This method returns the collection of BOVacationType objects
		///</Summary>
		///<returns>
		///List[BOVacationType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOVacationType> VacationTypeCollection()
		{
			try
			{
				IList<BOVacationType> boVacationTypeCollection = new List<BOVacationType>();
				IList<DAOVacationType> daoVacationTypeCollection = DAOVacationType.SelectAll();
			
				foreach(DAOVacationType daoVacationType in daoVacationTypeCollection)
					boVacationTypeCollection.Add(new BOVacationType(daoVacationType));
			
				return boVacationTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VacationTypeCollectionCount
		///This method returns the collection count of BOVacationType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 VacationTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOVacationType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///VacationCollection
		///This method returns its collection of BOVacation objects
		///</Summary>
		///<returns>
		///IList[BOVacation]
		///</returns>
		///<parameters>
		///BOVacationType
		///</parameters>
		public virtual IList<BOVacation> VacationCollection()
		{
			try
			{
				if(_boVacationCollection == null)
					LoadVacationCollection();
				
				return _boVacationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOVacationType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOVacationType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VacationTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOVacationType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boVacationTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOVacationType> daoVacationTypeCollection = DAOVacationType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOVacationType resdaoVacationType in daoVacationTypeCollection)
					boVacationTypeCollection.Add((T)(object)new BOVacationType(resdaoVacationType));
			
				return boVacationTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VacationTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOVacationType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOVacationType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadVacationCollection
		///This method loads the internal collection of BOVacation objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadVacationCollection()
		{
			try
			{
				_boVacationCollection = new List<BOVacation>();
				IList<DAOVacation> daoVacationCollection = DAOVacation.SelectAllByVacationTypeId(_vacationTypeId.Value);
				
				foreach(DAOVacation daoVacation in daoVacationCollection)
					_boVacationCollection.Add(new BOVacation(daoVacation));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddVacation
		///This method persists a BOVacation object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVacation
		///</parameters>
		public virtual void AddVacation(BOVacation boVacation)
		{
			DAOVacation daoVacation = new DAOVacation();
			RegisterDataObject(daoVacation);
			BeginTransaction("addVacation");
			try
			{
				daoVacation.VacationId = boVacation.VacationId;
				daoVacation.VacationDate = boVacation.VacationDate;
				daoVacation.Notes = boVacation.Notes;
				daoVacation.CBy = boVacation.CBy;
				daoVacation.CDate = boVacation.CDate;
				daoVacation.Eby = boVacation.Eby;
				daoVacation.EDate = boVacation.EDate;
				daoVacation.VacationTypeId = _vacationTypeId.Value;
				daoVacation.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boVacation = new BOVacation(daoVacation);
				if(_boVacationCollection != null)
					_boVacationCollection.Add(boVacation);
			}
			catch
			{
				RollbackTransaction("addVacation");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllVacation
		///This method deletes all BOVacation objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllVacation()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllVacation");
			try
			{
				DAOVacation.DeleteAllByVacationTypeId(ConnectionProvider, _vacationTypeId.Value);
				CommitTransaction();
				if(_boVacationCollection != null)
				{
					_boVacationCollection.Clear();
					_boVacationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllVacation");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? VacationTypeId
		{
			get
			{
				 return _vacationTypeId;
			}
			set
			{
				_vacationTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string VacationTypeCode
		{
			get
			{
				 return _vacationTypeCode;
			}
			set
			{
				_vacationTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string VacationTypeNameEn
		{
			get
			{
				 return _vacationTypeNameEn;
			}
			set
			{
				_vacationTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string VacationTypeNameAr
		{
			get
			{
				 return _vacationTypeNameAr;
			}
			set
			{
				_vacationTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
