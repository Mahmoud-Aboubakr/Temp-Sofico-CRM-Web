/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientTransactionVw.
	///</Summary>
	public partial class BOClientTransactionVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _transactionId;
		protected Int32? _clientId;
		protected Int32? _transactionTypeId;
		protected string _transactionCode;
		protected DateTime? _transactionDate;
		protected decimal? _transactionValue;
		protected string _transactionTypeNameAr;
		protected string _transactionTypeNameEn;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientTransactionVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientTransactionVw
		///</parameters>
		protected internal BOClientTransactionVw(DAOClientTransactionVw daoClientTransactionVw)
		{
			try
			{
				_transactionId = daoClientTransactionVw.TransactionId;
				_clientId = daoClientTransactionVw.ClientId;
				_transactionTypeId = daoClientTransactionVw.TransactionTypeId;
				_transactionCode = daoClientTransactionVw.TransactionCode;
				_transactionDate = daoClientTransactionVw.TransactionDate;
				_transactionValue = daoClientTransactionVw.TransactionValue;
				_transactionTypeNameAr = daoClientTransactionVw.TransactionTypeNameAr;
				_transactionTypeNameEn = daoClientTransactionVw.TransactionTypeNameEn;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ClientTransactionVwCollection
		///This method returns the collection of BOClientTransactionVw objects
		///</Summary>
		///<returns>
		///List[BOClientTransactionVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientTransactionVw> ClientTransactionVwCollection()
		{
			try
			{
				IList<BOClientTransactionVw> boClientTransactionVwCollection = new List<BOClientTransactionVw>();
				IList<DAOClientTransactionVw> daoClientTransactionVwCollection = DAOClientTransactionVw.SelectAll();
			
				foreach(DAOClientTransactionVw daoClientTransactionVw in daoClientTransactionVwCollection)
					boClientTransactionVwCollection.Add(new BOClientTransactionVw(daoClientTransactionVw));
			
				return boClientTransactionVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientTransactionVwCollectionCount
		///This method returns the collection count of BOClientTransactionVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientTransactionVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientTransactionVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientTransactionVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientTransactionVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientTransactionVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientTransactionVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientTransactionVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientTransactionVw> daoClientTransactionVwCollection = DAOClientTransactionVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientTransactionVw resdaoClientTransactionVw in daoClientTransactionVwCollection)
					boClientTransactionVwCollection.Add((T)(object)new BOClientTransactionVw(resdaoClientTransactionVw));
			
				return boClientTransactionVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientTransactionVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientTransactionVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientTransactionVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? TransactionId
		{
			get
			{
				 return _transactionId;
			}
			set
			{
				_transactionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TransactionTypeId
		{
			get
			{
				 return _transactionTypeId;
			}
			set
			{
				_transactionTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionCode
		{
			get
			{
				 return _transactionCode;
			}
			set
			{
				_transactionCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TransactionDate
		{
			get
			{
				 return _transactionDate;
			}
			set
			{
				_transactionDate = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? TransactionValue
		{
			get
			{
				 return _transactionValue;
			}
			set
			{
				_transactionValue = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionTypeNameAr
		{
			get
			{
				 return _transactionTypeNameAr;
			}
			set
			{
				_transactionTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionTypeNameEn
		{
			get
			{
				 return _transactionTypeNameEn;
			}
			set
			{
				_transactionTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
