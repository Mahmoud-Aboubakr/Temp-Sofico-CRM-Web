/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTerminationReason.
	///It maintains a collection of BORepresentative,BOSupervisor objects.
	///</Summary>
	public partial class BOTerminationReason : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _terminationReasonId;
		protected string _terminationReasonCode;
		protected string _terminationReasonNameEn;
		protected string _terminationReasonNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _icon;
		protected string _color;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BORepresentative> _boRepresentativeCollection;
		List<BOSupervisor> _boSupervisorCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOTerminationReason()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 terminationReasonId
		///</parameters>
		public BOTerminationReason(Int32 terminationReasonId)
		{
			try
			{
				DAOTerminationReason daoTerminationReason = DAOTerminationReason.SelectOne(terminationReasonId);
				_terminationReasonId = daoTerminationReason.TerminationReasonId;
				_terminationReasonCode = daoTerminationReason.TerminationReasonCode;
				_terminationReasonNameEn = daoTerminationReason.TerminationReasonNameEn;
				_terminationReasonNameAr = daoTerminationReason.TerminationReasonNameAr;
				_isActive = daoTerminationReason.IsActive;
				_canEdit = daoTerminationReason.CanEdit;
				_canDelete = daoTerminationReason.CanDelete;
				_displayOrder = daoTerminationReason.DisplayOrder;
				_icon = daoTerminationReason.Icon;
				_color = daoTerminationReason.Color;
				_cBy = daoTerminationReason.CBy;
				_eBy = daoTerminationReason.EBy;
				_cDate = daoTerminationReason.CDate;
				_eDate = daoTerminationReason.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTerminationReason
		///</parameters>
		protected internal BOTerminationReason(DAOTerminationReason daoTerminationReason)
		{
			try
			{
				_terminationReasonId = daoTerminationReason.TerminationReasonId;
				_terminationReasonCode = daoTerminationReason.TerminationReasonCode;
				_terminationReasonNameEn = daoTerminationReason.TerminationReasonNameEn;
				_terminationReasonNameAr = daoTerminationReason.TerminationReasonNameAr;
				_isActive = daoTerminationReason.IsActive;
				_canEdit = daoTerminationReason.CanEdit;
				_canDelete = daoTerminationReason.CanDelete;
				_displayOrder = daoTerminationReason.DisplayOrder;
				_icon = daoTerminationReason.Icon;
				_color = daoTerminationReason.Color;
				_cBy = daoTerminationReason.CBy;
				_eBy = daoTerminationReason.EBy;
				_cDate = daoTerminationReason.CDate;
				_eDate = daoTerminationReason.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new TerminationReason record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOTerminationReason daoTerminationReason = new DAOTerminationReason();
			RegisterDataObject(daoTerminationReason);
			BeginTransaction("savenewBOTerminationReason");
			try
			{
				daoTerminationReason.TerminationReasonId = _terminationReasonId;
				daoTerminationReason.TerminationReasonCode = _terminationReasonCode;
				daoTerminationReason.TerminationReasonNameEn = _terminationReasonNameEn;
				daoTerminationReason.TerminationReasonNameAr = _terminationReasonNameAr;
				daoTerminationReason.IsActive = _isActive;
				daoTerminationReason.CanEdit = _canEdit;
				daoTerminationReason.CanDelete = _canDelete;
				daoTerminationReason.DisplayOrder = _displayOrder;
				daoTerminationReason.Icon = _icon;
				daoTerminationReason.Color = _color;
				daoTerminationReason.CBy = _cBy;
				daoTerminationReason.EBy = _eBy;
				daoTerminationReason.CDate = _cDate;
				daoTerminationReason.EDate = _eDate;
				daoTerminationReason.Insert();
				CommitTransaction();
				
				_terminationReasonId = daoTerminationReason.TerminationReasonId;
				_terminationReasonCode = daoTerminationReason.TerminationReasonCode;
				_terminationReasonNameEn = daoTerminationReason.TerminationReasonNameEn;
				_terminationReasonNameAr = daoTerminationReason.TerminationReasonNameAr;
				_isActive = daoTerminationReason.IsActive;
				_canEdit = daoTerminationReason.CanEdit;
				_canDelete = daoTerminationReason.CanDelete;
				_displayOrder = daoTerminationReason.DisplayOrder;
				_icon = daoTerminationReason.Icon;
				_color = daoTerminationReason.Color;
				_cBy = daoTerminationReason.CBy;
				_eBy = daoTerminationReason.EBy;
				_cDate = daoTerminationReason.CDate;
				_eDate = daoTerminationReason.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOTerminationReason");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one TerminationReason record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTerminationReason
		///</parameters>
		public virtual void Update()
		{
			DAOTerminationReason daoTerminationReason = new DAOTerminationReason();
			RegisterDataObject(daoTerminationReason);
			BeginTransaction("updateBOTerminationReason");
			try
			{
				daoTerminationReason.TerminationReasonId = _terminationReasonId;
				daoTerminationReason.TerminationReasonCode = _terminationReasonCode;
				daoTerminationReason.TerminationReasonNameEn = _terminationReasonNameEn;
				daoTerminationReason.TerminationReasonNameAr = _terminationReasonNameAr;
				daoTerminationReason.IsActive = _isActive;
				daoTerminationReason.CanEdit = _canEdit;
				daoTerminationReason.CanDelete = _canDelete;
				daoTerminationReason.DisplayOrder = _displayOrder;
				daoTerminationReason.Icon = _icon;
				daoTerminationReason.Color = _color;
				daoTerminationReason.CBy = _cBy;
				daoTerminationReason.EBy = _eBy;
				daoTerminationReason.CDate = _cDate;
				daoTerminationReason.EDate = _eDate;
				daoTerminationReason.Update();
				CommitTransaction();
				
				_terminationReasonId = daoTerminationReason.TerminationReasonId;
				_terminationReasonCode = daoTerminationReason.TerminationReasonCode;
				_terminationReasonNameEn = daoTerminationReason.TerminationReasonNameEn;
				_terminationReasonNameAr = daoTerminationReason.TerminationReasonNameAr;
				_isActive = daoTerminationReason.IsActive;
				_canEdit = daoTerminationReason.CanEdit;
				_canDelete = daoTerminationReason.CanDelete;
				_displayOrder = daoTerminationReason.DisplayOrder;
				_icon = daoTerminationReason.Icon;
				_color = daoTerminationReason.Color;
				_cBy = daoTerminationReason.CBy;
				_eBy = daoTerminationReason.EBy;
				_cDate = daoTerminationReason.CDate;
				_eDate = daoTerminationReason.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOTerminationReason");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one TerminationReason record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOTerminationReason daoTerminationReason = new DAOTerminationReason();
			RegisterDataObject(daoTerminationReason);
			BeginTransaction("deleteBOTerminationReason");
			try
			{
				daoTerminationReason.TerminationReasonId = _terminationReasonId;
				daoTerminationReason.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOTerminationReason");
				throw;
			}
		}
		
		///<Summary>
		///TerminationReasonCollection
		///This method returns the collection of BOTerminationReason objects
		///</Summary>
		///<returns>
		///List[BOTerminationReason]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTerminationReason> TerminationReasonCollection()
		{
			try
			{
				IList<BOTerminationReason> boTerminationReasonCollection = new List<BOTerminationReason>();
				IList<DAOTerminationReason> daoTerminationReasonCollection = DAOTerminationReason.SelectAll();
			
				foreach(DAOTerminationReason daoTerminationReason in daoTerminationReasonCollection)
					boTerminationReasonCollection.Add(new BOTerminationReason(daoTerminationReason));
			
				return boTerminationReasonCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TerminationReasonCollectionCount
		///This method returns the collection count of BOTerminationReason objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TerminationReasonCollectionCount()
		{
			try
			{
				Int32 objCount = DAOTerminationReason.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeCollection
		///This method returns its collection of BORepresentative objects
		///</Summary>
		///<returns>
		///IList[BORepresentative]
		///</returns>
		///<parameters>
		///BOTerminationReason
		///</parameters>
		public virtual IList<BORepresentative> RepresentativeCollection()
		{
			try
			{
				if(_boRepresentativeCollection == null)
					LoadRepresentativeCollection();
				
				return _boRepresentativeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SupervisorCollection
		///This method returns its collection of BOSupervisor objects
		///</Summary>
		///<returns>
		///IList[BOSupervisor]
		///</returns>
		///<parameters>
		///BOTerminationReason
		///</parameters>
		public virtual IList<BOSupervisor> SupervisorCollection()
		{
			try
			{
				if(_boSupervisorCollection == null)
					LoadSupervisorCollection();
				
				return _boSupervisorCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOTerminationReason>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOTerminationReason.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TerminationReasonCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOTerminationReason objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boTerminationReasonCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOTerminationReason> daoTerminationReasonCollection = DAOTerminationReason.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOTerminationReason resdaoTerminationReason in daoTerminationReasonCollection)
					boTerminationReasonCollection.Add((T)(object)new BOTerminationReason(resdaoTerminationReason));
			
				return boTerminationReasonCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TerminationReasonCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOTerminationReason objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOTerminationReason.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeCollection
		///This method loads the internal collection of BORepresentative objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeCollection()
		{
			try
			{
				_boRepresentativeCollection = new List<BORepresentative>();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAllByTerminationReasonId(_terminationReasonId.Value);
				
				foreach(DAORepresentative daoRepresentative in daoRepresentativeCollection)
					_boRepresentativeCollection.Add(new BORepresentative(daoRepresentative));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentative
		///This method persists a BORepresentative object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual void AddRepresentative(BORepresentative boRepresentative)
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("addRepresentative");
			try
			{
				daoRepresentative.RepresentativeId = boRepresentative.RepresentativeId;
				daoRepresentative.BranchId = boRepresentative.BranchId;
				daoRepresentative.UserId = boRepresentative.UserId;
				daoRepresentative.SupervisorId = boRepresentative.SupervisorId;
				daoRepresentative.KindId = boRepresentative.KindId;
				daoRepresentative.BusinessUnitId = boRepresentative.BusinessUnitId;
				daoRepresentative.CompanyCode = boRepresentative.CompanyCode;
				daoRepresentative.RepresentativeCode = boRepresentative.RepresentativeCode;
				daoRepresentative.RepresentativeNameAr = boRepresentative.RepresentativeNameAr;
				daoRepresentative.RepresentativeNameEn = boRepresentative.RepresentativeNameEn;
				daoRepresentative.Phone = boRepresentative.Phone;
				daoRepresentative.PhoneAlternative = boRepresentative.PhoneAlternative;
				daoRepresentative.IsActive = boRepresentative.IsActive;
				daoRepresentative.DisplayOrder = boRepresentative.DisplayOrder;
				daoRepresentative.CanEdit = boRepresentative.CanEdit;
				daoRepresentative.CanDelete = boRepresentative.CanDelete;
				daoRepresentative.JoinDate = boRepresentative.JoinDate;
				daoRepresentative.Notes = boRepresentative.Notes;
				daoRepresentative.Icon = boRepresentative.Icon;
				daoRepresentative.Color = boRepresentative.Color;
				daoRepresentative.IsTerminated = boRepresentative.IsTerminated;
				daoRepresentative.TerminationDate = boRepresentative.TerminationDate;
				daoRepresentative.CBy = boRepresentative.CBy;
				daoRepresentative.CDate = boRepresentative.CDate;
				daoRepresentative.EBy = boRepresentative.EBy;
				daoRepresentative.EDate = boRepresentative.EDate;
				daoRepresentative.TerminationReasonId = _terminationReasonId.Value;
				daoRepresentative.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentative = new BORepresentative(daoRepresentative);
				if(_boRepresentativeCollection != null)
					_boRepresentativeCollection.Add(boRepresentative);
			}
			catch
			{
				RollbackTransaction("addRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentative
		///This method deletes all BORepresentative objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentative()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentative");
			try
			{
				DAORepresentative.DeleteAllByTerminationReasonId(ConnectionProvider, _terminationReasonId.Value);
				CommitTransaction();
				if(_boRepresentativeCollection != null)
				{
					_boRepresentativeCollection.Clear();
					_boRepresentativeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///LoadSupervisorCollection
		///This method loads the internal collection of BOSupervisor objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSupervisorCollection()
		{
			try
			{
				_boSupervisorCollection = new List<BOSupervisor>();
				IList<DAOSupervisor> daoSupervisorCollection = DAOSupervisor.SelectAllByTerminationReasonId(_terminationReasonId.Value);
				
				foreach(DAOSupervisor daoSupervisor in daoSupervisorCollection)
					_boSupervisorCollection.Add(new BOSupervisor(daoSupervisor));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSupervisor
		///This method persists a BOSupervisor object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupervisor
		///</parameters>
		public virtual void AddSupervisor(BOSupervisor boSupervisor)
		{
			DAOSupervisor daoSupervisor = new DAOSupervisor();
			RegisterDataObject(daoSupervisor);
			BeginTransaction("addSupervisor");
			try
			{
				daoSupervisor.SupervisorId = boSupervisor.SupervisorId;
				daoSupervisor.SupervisorTypeId = boSupervisor.SupervisorTypeId;
				daoSupervisor.BusinessUnitId = boSupervisor.BusinessUnitId;
				daoSupervisor.CompanyCode = boSupervisor.CompanyCode;
				daoSupervisor.SupervisorCode = boSupervisor.SupervisorCode;
				daoSupervisor.SupervisorNameEn = boSupervisor.SupervisorNameEn;
				daoSupervisor.SupervisorNameAr = boSupervisor.SupervisorNameAr;
				daoSupervisor.Phone = boSupervisor.Phone;
				daoSupervisor.PhoneAlternative = boSupervisor.PhoneAlternative;
				daoSupervisor.JoinDate = boSupervisor.JoinDate;
				daoSupervisor.UserId = boSupervisor.UserId;
				daoSupervisor.BranchId = boSupervisor.BranchId;
				daoSupervisor.IsActive = boSupervisor.IsActive;
				daoSupervisor.Color = boSupervisor.Color;
				daoSupervisor.DisplayOrder = boSupervisor.DisplayOrder;
				daoSupervisor.Icon = boSupervisor.Icon;
				daoSupervisor.CanEdit = boSupervisor.CanEdit;
				daoSupervisor.CanDelete = boSupervisor.CanDelete;
				daoSupervisor.Notes = boSupervisor.Notes;
				daoSupervisor.IsTerminated = boSupervisor.IsTerminated;
				daoSupervisor.TerminationDate = boSupervisor.TerminationDate;
				daoSupervisor.CBy = boSupervisor.CBy;
				daoSupervisor.CDate = boSupervisor.CDate;
				daoSupervisor.EBy = boSupervisor.EBy;
				daoSupervisor.EDate = boSupervisor.EDate;
				daoSupervisor.TerminationReasonId = _terminationReasonId.Value;
				daoSupervisor.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSupervisor = new BOSupervisor(daoSupervisor);
				if(_boSupervisorCollection != null)
					_boSupervisorCollection.Add(boSupervisor);
			}
			catch
			{
				RollbackTransaction("addSupervisor");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSupervisor
		///This method deletes all BOSupervisor objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSupervisor()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSupervisor");
			try
			{
				DAOSupervisor.DeleteAllByTerminationReasonId(ConnectionProvider, _terminationReasonId.Value);
				CommitTransaction();
				if(_boSupervisorCollection != null)
				{
					_boSupervisorCollection.Clear();
					_boSupervisorCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSupervisor");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? TerminationReasonId
		{
			get
			{
				 return _terminationReasonId;
			}
			set
			{
				_terminationReasonId = value;
				_isDirty = true;
			}
		}
		
		public virtual string TerminationReasonCode
		{
			get
			{
				 return _terminationReasonCode;
			}
			set
			{
				_terminationReasonCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string TerminationReasonNameEn
		{
			get
			{
				 return _terminationReasonNameEn;
			}
			set
			{
				_terminationReasonNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string TerminationReasonNameAr
		{
			get
			{
				 return _terminationReasonNameAr;
			}
			set
			{
				_terminationReasonNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
