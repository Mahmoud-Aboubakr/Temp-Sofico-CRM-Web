/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOVendorGroup.
	///It maintains a collection of BOVendor objects.
	///</Summary>
	public partial class BOVendorGroup : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _vendorGroupId;
		protected string _vendorGroupCode;
		protected string _vendorGroupNameEn;
		protected string _vendorGroupNameAr;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected string _icon;
		protected string _color;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOVendor> _boVendorCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOVendorGroup()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 vendorGroupId
		///</parameters>
		public BOVendorGroup(Int32 vendorGroupId)
		{
			try
			{
				DAOVendorGroup daoVendorGroup = DAOVendorGroup.SelectOne(vendorGroupId);
				_vendorGroupId = daoVendorGroup.VendorGroupId;
				_vendorGroupCode = daoVendorGroup.VendorGroupCode;
				_vendorGroupNameEn = daoVendorGroup.VendorGroupNameEn;
				_vendorGroupNameAr = daoVendorGroup.VendorGroupNameAr;
				_isActive = daoVendorGroup.IsActive;
				_displayOrder = daoVendorGroup.DisplayOrder;
				_icon = daoVendorGroup.Icon;
				_color = daoVendorGroup.Color;
				_canEdit = daoVendorGroup.CanEdit;
				_canDelete = daoVendorGroup.CanDelete;
				_cBy = daoVendorGroup.CBy;
				_cDate = daoVendorGroup.CDate;
				_eBy = daoVendorGroup.EBy;
				_eDate = daoVendorGroup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOVendorGroup
		///</parameters>
		protected internal BOVendorGroup(DAOVendorGroup daoVendorGroup)
		{
			try
			{
				_vendorGroupId = daoVendorGroup.VendorGroupId;
				_vendorGroupCode = daoVendorGroup.VendorGroupCode;
				_vendorGroupNameEn = daoVendorGroup.VendorGroupNameEn;
				_vendorGroupNameAr = daoVendorGroup.VendorGroupNameAr;
				_isActive = daoVendorGroup.IsActive;
				_displayOrder = daoVendorGroup.DisplayOrder;
				_icon = daoVendorGroup.Icon;
				_color = daoVendorGroup.Color;
				_canEdit = daoVendorGroup.CanEdit;
				_canDelete = daoVendorGroup.CanDelete;
				_cBy = daoVendorGroup.CBy;
				_cDate = daoVendorGroup.CDate;
				_eBy = daoVendorGroup.EBy;
				_eDate = daoVendorGroup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new VendorGroup record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOVendorGroup daoVendorGroup = new DAOVendorGroup();
			RegisterDataObject(daoVendorGroup);
			BeginTransaction("savenewBOVendorGroup");
			try
			{
				daoVendorGroup.VendorGroupCode = _vendorGroupCode;
				daoVendorGroup.VendorGroupNameEn = _vendorGroupNameEn;
				daoVendorGroup.VendorGroupNameAr = _vendorGroupNameAr;
				daoVendorGroup.IsActive = _isActive;
				daoVendorGroup.DisplayOrder = _displayOrder;
				daoVendorGroup.Icon = _icon;
				daoVendorGroup.Color = _color;
				daoVendorGroup.CanEdit = _canEdit;
				daoVendorGroup.CanDelete = _canDelete;
				daoVendorGroup.CBy = _cBy;
				daoVendorGroup.CDate = _cDate;
				daoVendorGroup.EBy = _eBy;
				daoVendorGroup.EDate = _eDate;
				daoVendorGroup.Insert();
				CommitTransaction();
				
				_vendorGroupId = daoVendorGroup.VendorGroupId;
				_vendorGroupCode = daoVendorGroup.VendorGroupCode;
				_vendorGroupNameEn = daoVendorGroup.VendorGroupNameEn;
				_vendorGroupNameAr = daoVendorGroup.VendorGroupNameAr;
				_isActive = daoVendorGroup.IsActive;
				_displayOrder = daoVendorGroup.DisplayOrder;
				_icon = daoVendorGroup.Icon;
				_color = daoVendorGroup.Color;
				_canEdit = daoVendorGroup.CanEdit;
				_canDelete = daoVendorGroup.CanDelete;
				_cBy = daoVendorGroup.CBy;
				_cDate = daoVendorGroup.CDate;
				_eBy = daoVendorGroup.EBy;
				_eDate = daoVendorGroup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOVendorGroup");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one VendorGroup record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVendorGroup
		///</parameters>
		public virtual void Update()
		{
			DAOVendorGroup daoVendorGroup = new DAOVendorGroup();
			RegisterDataObject(daoVendorGroup);
			BeginTransaction("updateBOVendorGroup");
			try
			{
				daoVendorGroup.VendorGroupId = _vendorGroupId;
				daoVendorGroup.VendorGroupCode = _vendorGroupCode;
				daoVendorGroup.VendorGroupNameEn = _vendorGroupNameEn;
				daoVendorGroup.VendorGroupNameAr = _vendorGroupNameAr;
				daoVendorGroup.IsActive = _isActive;
				daoVendorGroup.DisplayOrder = _displayOrder;
				daoVendorGroup.Icon = _icon;
				daoVendorGroup.Color = _color;
				daoVendorGroup.CanEdit = _canEdit;
				daoVendorGroup.CanDelete = _canDelete;
				daoVendorGroup.CBy = _cBy;
				daoVendorGroup.CDate = _cDate;
				daoVendorGroup.EBy = _eBy;
				daoVendorGroup.EDate = _eDate;
				daoVendorGroup.Update();
				CommitTransaction();
				
				_vendorGroupId = daoVendorGroup.VendorGroupId;
				_vendorGroupCode = daoVendorGroup.VendorGroupCode;
				_vendorGroupNameEn = daoVendorGroup.VendorGroupNameEn;
				_vendorGroupNameAr = daoVendorGroup.VendorGroupNameAr;
				_isActive = daoVendorGroup.IsActive;
				_displayOrder = daoVendorGroup.DisplayOrder;
				_icon = daoVendorGroup.Icon;
				_color = daoVendorGroup.Color;
				_canEdit = daoVendorGroup.CanEdit;
				_canDelete = daoVendorGroup.CanDelete;
				_cBy = daoVendorGroup.CBy;
				_cDate = daoVendorGroup.CDate;
				_eBy = daoVendorGroup.EBy;
				_eDate = daoVendorGroup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOVendorGroup");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one VendorGroup record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOVendorGroup daoVendorGroup = new DAOVendorGroup();
			RegisterDataObject(daoVendorGroup);
			BeginTransaction("deleteBOVendorGroup");
			try
			{
				daoVendorGroup.VendorGroupId = _vendorGroupId;
				daoVendorGroup.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOVendorGroup");
				throw;
			}
		}
		
		///<Summary>
		///VendorGroupCollection
		///This method returns the collection of BOVendorGroup objects
		///</Summary>
		///<returns>
		///List[BOVendorGroup]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOVendorGroup> VendorGroupCollection()
		{
			try
			{
				IList<BOVendorGroup> boVendorGroupCollection = new List<BOVendorGroup>();
				IList<DAOVendorGroup> daoVendorGroupCollection = DAOVendorGroup.SelectAll();
			
				foreach(DAOVendorGroup daoVendorGroup in daoVendorGroupCollection)
					boVendorGroupCollection.Add(new BOVendorGroup(daoVendorGroup));
			
				return boVendorGroupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorGroupCollectionCount
		///This method returns the collection count of BOVendorGroup objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 VendorGroupCollectionCount()
		{
			try
			{
				Int32 objCount = DAOVendorGroup.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///VendorCollection
		///This method returns its collection of BOVendor objects
		///</Summary>
		///<returns>
		///IList[BOVendor]
		///</returns>
		///<parameters>
		///BOVendorGroup
		///</parameters>
		public virtual IList<BOVendor> VendorCollection()
		{
			try
			{
				if(_boVendorCollection == null)
					LoadVendorCollection();
				
				return _boVendorCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOVendorGroup>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOVendorGroup.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorGroupCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOVendorGroup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boVendorGroupCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOVendorGroup> daoVendorGroupCollection = DAOVendorGroup.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOVendorGroup resdaoVendorGroup in daoVendorGroupCollection)
					boVendorGroupCollection.Add((T)(object)new BOVendorGroup(resdaoVendorGroup));
			
				return boVendorGroupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorGroupCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOVendorGroup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOVendorGroup.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadVendorCollection
		///This method loads the internal collection of BOVendor objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadVendorCollection()
		{
			try
			{
				_boVendorCollection = new List<BOVendor>();
				IList<DAOVendor> daoVendorCollection = DAOVendor.SelectAllByVendorGroupId(_vendorGroupId.Value);
				
				foreach(DAOVendor daoVendor in daoVendorCollection)
					_boVendorCollection.Add(new BOVendor(daoVendor));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddVendor
		///This method persists a BOVendor object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVendor
		///</parameters>
		public virtual void AddVendor(BOVendor boVendor)
		{
			DAOVendor daoVendor = new DAOVendor();
			RegisterDataObject(daoVendor);
			BeginTransaction("addVendor");
			try
			{
				daoVendor.VendorId = boVendor.VendorId;
				daoVendor.VendorCode = boVendor.VendorCode;
				daoVendor.VendorNameEn = boVendor.VendorNameEn;
				daoVendor.VendorNameAr = boVendor.VendorNameAr;
				daoVendor.IsLocal = boVendor.IsLocal;
				daoVendor.IsActive = boVendor.IsActive;
				daoVendor.IsHot = boVendor.IsHot;
				daoVendor.DisplayOrder = boVendor.DisplayOrder;
				daoVendor.Color = boVendor.Color;
				daoVendor.Icon = boVendor.Icon;
				daoVendor.CanEdit = boVendor.CanEdit;
				daoVendor.CanDelete = boVendor.CanDelete;
				daoVendor.CBy = boVendor.CBy;
				daoVendor.CDate = boVendor.CDate;
				daoVendor.EBy = boVendor.EBy;
				daoVendor.EDate = boVendor.EDate;
				daoVendor.VendorImage = boVendor.VendorImage;
				daoVendor.IsNew = boVendor.IsNew;
				daoVendor.VendorGroupId = _vendorGroupId.Value;
				daoVendor.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boVendor = new BOVendor(daoVendor);
				if(_boVendorCollection != null)
					_boVendorCollection.Add(boVendor);
			}
			catch
			{
				RollbackTransaction("addVendor");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllVendor
		///This method deletes all BOVendor objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllVendor()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllVendor");
			try
			{
				DAOVendor.DeleteAllByVendorGroupId(ConnectionProvider, _vendorGroupId.Value);
				CommitTransaction();
				if(_boVendorCollection != null)
				{
					_boVendorCollection.Clear();
					_boVendorCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllVendor");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? VendorGroupId
		{
			get
			{
				 return _vendorGroupId;
			}
			set
			{
				_vendorGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorGroupCode
		{
			get
			{
				 return _vendorGroupCode;
			}
			set
			{
				_vendorGroupCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorGroupNameEn
		{
			get
			{
				 return _vendorGroupNameEn;
			}
			set
			{
				_vendorGroupNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorGroupNameAr
		{
			get
			{
				 return _vendorGroupNameAr;
			}
			set
			{
				_vendorGroupNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
