/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOContent.
	///</Summary>
	public partial class BOContent : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _contentId;
		protected string _contentCode;
		protected string _contentNameEn;
		protected string _contentNameAr;
		protected string _contentEn;
		protected string _contentAr;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOContent()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 contentId
		///</parameters>
		public BOContent(Int32 contentId)
		{
			try
			{
				DAOContent daoContent = DAOContent.SelectOne(contentId);
				_contentId = daoContent.ContentId;
				_contentCode = daoContent.ContentCode;
				_contentNameEn = daoContent.ContentNameEn;
				_contentNameAr = daoContent.ContentNameAr;
				_contentEn = daoContent.ContentEn;
				_contentAr = daoContent.ContentAr;
				_cBy = daoContent.CBy;
				_cDate = daoContent.CDate;
				_eBy = daoContent.EBy;
				_eDate = daoContent.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOContent
		///</parameters>
		protected internal BOContent(DAOContent daoContent)
		{
			try
			{
				_contentId = daoContent.ContentId;
				_contentCode = daoContent.ContentCode;
				_contentNameEn = daoContent.ContentNameEn;
				_contentNameAr = daoContent.ContentNameAr;
				_contentEn = daoContent.ContentEn;
				_contentAr = daoContent.ContentAr;
				_cBy = daoContent.CBy;
				_cDate = daoContent.CDate;
				_eBy = daoContent.EBy;
				_eDate = daoContent.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Content record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOContent daoContent = new DAOContent();
			RegisterDataObject(daoContent);
			BeginTransaction("savenewBOContent");
			try
			{
				daoContent.ContentCode = _contentCode;
				daoContent.ContentNameEn = _contentNameEn;
				daoContent.ContentNameAr = _contentNameAr;
				daoContent.ContentEn = _contentEn;
				daoContent.ContentAr = _contentAr;
				daoContent.CBy = _cBy;
				daoContent.CDate = _cDate;
				daoContent.EBy = _eBy;
				daoContent.EDate = _eDate;
				daoContent.Insert();
				CommitTransaction();
				
				_contentId = daoContent.ContentId;
				_contentCode = daoContent.ContentCode;
				_contentNameEn = daoContent.ContentNameEn;
				_contentNameAr = daoContent.ContentNameAr;
				_contentEn = daoContent.ContentEn;
				_contentAr = daoContent.ContentAr;
				_cBy = daoContent.CBy;
				_cDate = daoContent.CDate;
				_eBy = daoContent.EBy;
				_eDate = daoContent.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOContent");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Content record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOContent
		///</parameters>
		public virtual void Update()
		{
			DAOContent daoContent = new DAOContent();
			RegisterDataObject(daoContent);
			BeginTransaction("updateBOContent");
			try
			{
				daoContent.ContentId = _contentId;
				daoContent.ContentCode = _contentCode;
				daoContent.ContentNameEn = _contentNameEn;
				daoContent.ContentNameAr = _contentNameAr;
				daoContent.ContentEn = _contentEn;
				daoContent.ContentAr = _contentAr;
				daoContent.CBy = _cBy;
				daoContent.CDate = _cDate;
				daoContent.EBy = _eBy;
				daoContent.EDate = _eDate;
				daoContent.Update();
				CommitTransaction();
				
				_contentId = daoContent.ContentId;
				_contentCode = daoContent.ContentCode;
				_contentNameEn = daoContent.ContentNameEn;
				_contentNameAr = daoContent.ContentNameAr;
				_contentEn = daoContent.ContentEn;
				_contentAr = daoContent.ContentAr;
				_cBy = daoContent.CBy;
				_cDate = daoContent.CDate;
				_eBy = daoContent.EBy;
				_eDate = daoContent.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOContent");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Content record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOContent daoContent = new DAOContent();
			RegisterDataObject(daoContent);
			BeginTransaction("deleteBOContent");
			try
			{
				daoContent.ContentId = _contentId;
				daoContent.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOContent");
				throw;
			}
		}
		
		///<Summary>
		///ContentCollection
		///This method returns the collection of BOContent objects
		///</Summary>
		///<returns>
		///List[BOContent]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOContent> ContentCollection()
		{
			try
			{
				IList<BOContent> boContentCollection = new List<BOContent>();
				IList<DAOContent> daoContentCollection = DAOContent.SelectAll();
			
				foreach(DAOContent daoContent in daoContentCollection)
					boContentCollection.Add(new BOContent(daoContent));
			
				return boContentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ContentCollectionCount
		///This method returns the collection count of BOContent objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ContentCollectionCount()
		{
			try
			{
				Int32 objCount = DAOContent.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOContent>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOContent.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ContentCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOContent objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boContentCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOContent> daoContentCollection = DAOContent.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOContent resdaoContent in daoContentCollection)
					boContentCollection.Add((T)(object)new BOContent(resdaoContent));
			
				return boContentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ContentCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOContent objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOContent.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ContentId
		{
			get
			{
				 return _contentId;
			}
			set
			{
				_contentId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContentCode
		{
			get
			{
				 return _contentCode;
			}
			set
			{
				_contentCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContentNameEn
		{
			get
			{
				 return _contentNameEn;
			}
			set
			{
				_contentNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContentNameAr
		{
			get
			{
				 return _contentNameAr;
			}
			set
			{
				_contentNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContentEn
		{
			get
			{
				 return _contentEn;
			}
			set
			{
				_contentEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContentAr
		{
			get
			{
				 return _contentAr;
			}
			set
			{
				_contentAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
