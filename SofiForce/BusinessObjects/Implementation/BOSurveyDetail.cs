/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSurveyDetail.
	///It maintains a collection of BOClientSurveyDetailAnswer,BOClientSurveyDetail,BOSurveyDetailAnswer objects.
	///</Summary>
	public partial class BOSurveyDetail : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _surveyDetailId;
		protected Int32? _surveyId;
		protected string _surveyQuestionEn;
		protected string _surveyQuestionAr;
		protected bool? _isMuliSelect;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientSurveyDetailAnswer> _boClientSurveyDetailAnswerCollection;
		List<BOClientSurveyDetail> _boClientSurveyDetailCollection;
		List<BOSurveyDetailAnswer> _boSurveyDetailAnswerCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSurveyDetail()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 surveyDetailId
		///</parameters>
		public BOSurveyDetail(Int32 surveyDetailId)
		{
			try
			{
				DAOSurveyDetail daoSurveyDetail = DAOSurveyDetail.SelectOne(surveyDetailId);
				_surveyDetailId = daoSurveyDetail.SurveyDetailId;
				_surveyId = daoSurveyDetail.SurveyId;
				_surveyQuestionEn = daoSurveyDetail.SurveyQuestionEn;
				_surveyQuestionAr = daoSurveyDetail.SurveyQuestionAr;
				_isMuliSelect = daoSurveyDetail.IsMuliSelect;
				_cBy = daoSurveyDetail.CBy;
				_cDate = daoSurveyDetail.CDate;
				_eBy = daoSurveyDetail.EBy;
				_eDate = daoSurveyDetail.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSurveyDetail
		///</parameters>
		protected internal BOSurveyDetail(DAOSurveyDetail daoSurveyDetail)
		{
			try
			{
				_surveyDetailId = daoSurveyDetail.SurveyDetailId;
				_surveyId = daoSurveyDetail.SurveyId;
				_surveyQuestionEn = daoSurveyDetail.SurveyQuestionEn;
				_surveyQuestionAr = daoSurveyDetail.SurveyQuestionAr;
				_isMuliSelect = daoSurveyDetail.IsMuliSelect;
				_cBy = daoSurveyDetail.CBy;
				_cDate = daoSurveyDetail.CDate;
				_eBy = daoSurveyDetail.EBy;
				_eDate = daoSurveyDetail.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SurveyDetail record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSurveyDetail daoSurveyDetail = new DAOSurveyDetail();
			RegisterDataObject(daoSurveyDetail);
			BeginTransaction("savenewBOSurveyDetail");
			try
			{
				daoSurveyDetail.SurveyId = _surveyId;
				daoSurveyDetail.SurveyQuestionEn = _surveyQuestionEn;
				daoSurveyDetail.SurveyQuestionAr = _surveyQuestionAr;
				daoSurveyDetail.IsMuliSelect = _isMuliSelect;
				daoSurveyDetail.CBy = _cBy;
				daoSurveyDetail.CDate = _cDate;
				daoSurveyDetail.EBy = _eBy;
				daoSurveyDetail.EDate = _eDate;
				daoSurveyDetail.Insert();
				CommitTransaction();
				
				_surveyDetailId = daoSurveyDetail.SurveyDetailId;
				_surveyId = daoSurveyDetail.SurveyId;
				_surveyQuestionEn = daoSurveyDetail.SurveyQuestionEn;
				_surveyQuestionAr = daoSurveyDetail.SurveyQuestionAr;
				_isMuliSelect = daoSurveyDetail.IsMuliSelect;
				_cBy = daoSurveyDetail.CBy;
				_cDate = daoSurveyDetail.CDate;
				_eBy = daoSurveyDetail.EBy;
				_eDate = daoSurveyDetail.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSurveyDetail");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SurveyDetail record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSurveyDetail
		///</parameters>
		public virtual void Update()
		{
			DAOSurveyDetail daoSurveyDetail = new DAOSurveyDetail();
			RegisterDataObject(daoSurveyDetail);
			BeginTransaction("updateBOSurveyDetail");
			try
			{
				daoSurveyDetail.SurveyDetailId = _surveyDetailId;
				daoSurveyDetail.SurveyId = _surveyId;
				daoSurveyDetail.SurveyQuestionEn = _surveyQuestionEn;
				daoSurveyDetail.SurveyQuestionAr = _surveyQuestionAr;
				daoSurveyDetail.IsMuliSelect = _isMuliSelect;
				daoSurveyDetail.CBy = _cBy;
				daoSurveyDetail.CDate = _cDate;
				daoSurveyDetail.EBy = _eBy;
				daoSurveyDetail.EDate = _eDate;
				daoSurveyDetail.Update();
				CommitTransaction();
				
				_surveyDetailId = daoSurveyDetail.SurveyDetailId;
				_surveyId = daoSurveyDetail.SurveyId;
				_surveyQuestionEn = daoSurveyDetail.SurveyQuestionEn;
				_surveyQuestionAr = daoSurveyDetail.SurveyQuestionAr;
				_isMuliSelect = daoSurveyDetail.IsMuliSelect;
				_cBy = daoSurveyDetail.CBy;
				_cDate = daoSurveyDetail.CDate;
				_eBy = daoSurveyDetail.EBy;
				_eDate = daoSurveyDetail.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSurveyDetail");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SurveyDetail record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSurveyDetail daoSurveyDetail = new DAOSurveyDetail();
			RegisterDataObject(daoSurveyDetail);
			BeginTransaction("deleteBOSurveyDetail");
			try
			{
				daoSurveyDetail.SurveyDetailId = _surveyDetailId;
				daoSurveyDetail.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSurveyDetail");
				throw;
			}
		}
		
		///<Summary>
		///SurveyDetailCollection
		///This method returns the collection of BOSurveyDetail objects
		///</Summary>
		///<returns>
		///List[BOSurveyDetail]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSurveyDetail> SurveyDetailCollection()
		{
			try
			{
				IList<BOSurveyDetail> boSurveyDetailCollection = new List<BOSurveyDetail>();
				IList<DAOSurveyDetail> daoSurveyDetailCollection = DAOSurveyDetail.SelectAll();
			
				foreach(DAOSurveyDetail daoSurveyDetail in daoSurveyDetailCollection)
					boSurveyDetailCollection.Add(new BOSurveyDetail(daoSurveyDetail));
			
				return boSurveyDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyDetailCollectionCount
		///This method returns the collection count of BOSurveyDetail objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SurveyDetailCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSurveyDetail.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientSurveyDetailAnswerCollection
		///This method returns its collection of BOClientSurveyDetailAnswer objects
		///</Summary>
		///<returns>
		///IList[BOClientSurveyDetailAnswer]
		///</returns>
		///<parameters>
		///BOSurveyDetail
		///</parameters>
		public virtual IList<BOClientSurveyDetailAnswer> ClientSurveyDetailAnswerCollection()
		{
			try
			{
				if(_boClientSurveyDetailAnswerCollection == null)
					LoadClientSurveyDetailAnswerCollection();
				
				return _boClientSurveyDetailAnswerCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientSurveyDetailCollection
		///This method returns its collection of BOClientSurveyDetail objects
		///</Summary>
		///<returns>
		///IList[BOClientSurveyDetail]
		///</returns>
		///<parameters>
		///BOSurveyDetail
		///</parameters>
		public virtual IList<BOClientSurveyDetail> ClientSurveyDetailCollection()
		{
			try
			{
				if(_boClientSurveyDetailCollection == null)
					LoadClientSurveyDetailCollection();
				
				return _boClientSurveyDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SurveyDetailAnswerCollection
		///This method returns its collection of BOSurveyDetailAnswer objects
		///</Summary>
		///<returns>
		///IList[BOSurveyDetailAnswer]
		///</returns>
		///<parameters>
		///BOSurveyDetail
		///</parameters>
		public virtual IList<BOSurveyDetailAnswer> SurveyDetailAnswerCollection()
		{
			try
			{
				if(_boSurveyDetailAnswerCollection == null)
					LoadSurveyDetailAnswerCollection();
				
				return _boSurveyDetailAnswerCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSurveyDetail>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSurveyDetail.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyDetailCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSurveyDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSurveyDetailCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSurveyDetail> daoSurveyDetailCollection = DAOSurveyDetail.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSurveyDetail resdaoSurveyDetail in daoSurveyDetailCollection)
					boSurveyDetailCollection.Add((T)(object)new BOSurveyDetail(resdaoSurveyDetail));
			
				return boSurveyDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyDetailCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSurveyDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSurveyDetail.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientSurveyDetailAnswerCollection
		///This method loads the internal collection of BOClientSurveyDetailAnswer objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientSurveyDetailAnswerCollection()
		{
			try
			{
				_boClientSurveyDetailAnswerCollection = new List<BOClientSurveyDetailAnswer>();
				IList<DAOClientSurveyDetailAnswer> daoClientSurveyDetailAnswerCollection = DAOClientSurveyDetailAnswer.SelectAllBySurveyDetailId(_surveyDetailId.Value);
				
				foreach(DAOClientSurveyDetailAnswer daoClientSurveyDetailAnswer in daoClientSurveyDetailAnswerCollection)
					_boClientSurveyDetailAnswerCollection.Add(new BOClientSurveyDetailAnswer(daoClientSurveyDetailAnswer));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientSurveyDetailAnswer
		///This method persists a BOClientSurveyDetailAnswer object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientSurveyDetailAnswer
		///</parameters>
		public virtual void AddClientSurveyDetailAnswer(BOClientSurveyDetailAnswer boClientSurveyDetailAnswer)
		{
			DAOClientSurveyDetailAnswer daoClientSurveyDetailAnswer = new DAOClientSurveyDetailAnswer();
			RegisterDataObject(daoClientSurveyDetailAnswer);
			BeginTransaction("addClientSurveyDetailAnswer");
			try
			{
				daoClientSurveyDetailAnswer.ClientAnswerId = boClientSurveyDetailAnswer.ClientAnswerId;
				daoClientSurveyDetailAnswer.ClientDetailId = boClientSurveyDetailAnswer.ClientDetailId;
				daoClientSurveyDetailAnswer.DetailAnswerId = boClientSurveyDetailAnswer.DetailAnswerId;
				daoClientSurveyDetailAnswer.IsSelected = boClientSurveyDetailAnswer.IsSelected;
				daoClientSurveyDetailAnswer.ClientServeyId = boClientSurveyDetailAnswer.ClientServeyId;
				daoClientSurveyDetailAnswer.SurveyDetailId = _surveyDetailId.Value;
				daoClientSurveyDetailAnswer.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientSurveyDetailAnswer = new BOClientSurveyDetailAnswer(daoClientSurveyDetailAnswer);
				if(_boClientSurveyDetailAnswerCollection != null)
					_boClientSurveyDetailAnswerCollection.Add(boClientSurveyDetailAnswer);
			}
			catch
			{
				RollbackTransaction("addClientSurveyDetailAnswer");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientSurveyDetailAnswer
		///This method deletes all BOClientSurveyDetailAnswer objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientSurveyDetailAnswer()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientSurveyDetailA2204");
			try
			{
				DAOClientSurveyDetailAnswer.DeleteAllBySurveyDetailId(ConnectionProvider, _surveyDetailId.Value);
				CommitTransaction();
				if(_boClientSurveyDetailAnswerCollection != null)
				{
					_boClientSurveyDetailAnswerCollection.Clear();
					_boClientSurveyDetailAnswerCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientSurveyDetailA2204");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientSurveyDetailCollection
		///This method loads the internal collection of BOClientSurveyDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientSurveyDetailCollection()
		{
			try
			{
				_boClientSurveyDetailCollection = new List<BOClientSurveyDetail>();
				IList<DAOClientSurveyDetail> daoClientSurveyDetailCollection = DAOClientSurveyDetail.SelectAllBySurveyDetailId(_surveyDetailId.Value);
				
				foreach(DAOClientSurveyDetail daoClientSurveyDetail in daoClientSurveyDetailCollection)
					_boClientSurveyDetailCollection.Add(new BOClientSurveyDetail(daoClientSurveyDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientSurveyDetail
		///This method persists a BOClientSurveyDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientSurveyDetail
		///</parameters>
		public virtual void AddClientSurveyDetail(BOClientSurveyDetail boClientSurveyDetail)
		{
			DAOClientSurveyDetail daoClientSurveyDetail = new DAOClientSurveyDetail();
			RegisterDataObject(daoClientSurveyDetail);
			BeginTransaction("addClientSurveyDetail");
			try
			{
				daoClientSurveyDetail.ClientDetailId = boClientSurveyDetail.ClientDetailId;
				daoClientSurveyDetail.ClientServeyId = boClientSurveyDetail.ClientServeyId;
				daoClientSurveyDetail.SurveyDetailId = _surveyDetailId.Value;
				daoClientSurveyDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientSurveyDetail = new BOClientSurveyDetail(daoClientSurveyDetail);
				if(_boClientSurveyDetailCollection != null)
					_boClientSurveyDetailCollection.Add(boClientSurveyDetail);
			}
			catch
			{
				RollbackTransaction("addClientSurveyDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientSurveyDetail
		///This method deletes all BOClientSurveyDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientSurveyDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientSurveyDetail");
			try
			{
				DAOClientSurveyDetail.DeleteAllBySurveyDetailId(ConnectionProvider, _surveyDetailId.Value);
				CommitTransaction();
				if(_boClientSurveyDetailCollection != null)
				{
					_boClientSurveyDetailCollection.Clear();
					_boClientSurveyDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientSurveyDetail");
				throw;
			}
		}
		
		///<Summary>
		///LoadSurveyDetailAnswerCollection
		///This method loads the internal collection of BOSurveyDetailAnswer objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSurveyDetailAnswerCollection()
		{
			try
			{
				_boSurveyDetailAnswerCollection = new List<BOSurveyDetailAnswer>();
				IList<DAOSurveyDetailAnswer> daoSurveyDetailAnswerCollection = DAOSurveyDetailAnswer.SelectAllBySurveyDetailId(_surveyDetailId.Value);
				
				foreach(DAOSurveyDetailAnswer daoSurveyDetailAnswer in daoSurveyDetailAnswerCollection)
					_boSurveyDetailAnswerCollection.Add(new BOSurveyDetailAnswer(daoSurveyDetailAnswer));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSurveyDetailAnswer
		///This method persists a BOSurveyDetailAnswer object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSurveyDetailAnswer
		///</parameters>
		public virtual void AddSurveyDetailAnswer(BOSurveyDetailAnswer boSurveyDetailAnswer)
		{
			DAOSurveyDetailAnswer daoSurveyDetailAnswer = new DAOSurveyDetailAnswer();
			RegisterDataObject(daoSurveyDetailAnswer);
			BeginTransaction("addSurveyDetailAnswer");
			try
			{
				daoSurveyDetailAnswer.DetailAnswerId = boSurveyDetailAnswer.DetailAnswerId;
				daoSurveyDetailAnswer.SurveyId = boSurveyDetailAnswer.SurveyId;
				daoSurveyDetailAnswer.AnswerEn = boSurveyDetailAnswer.AnswerEn;
				daoSurveyDetailAnswer.AnswerAr = boSurveyDetailAnswer.AnswerAr;
				daoSurveyDetailAnswer.CBy = boSurveyDetailAnswer.CBy;
				daoSurveyDetailAnswer.CDate = boSurveyDetailAnswer.CDate;
				daoSurveyDetailAnswer.EBy = boSurveyDetailAnswer.EBy;
				daoSurveyDetailAnswer.EDate = boSurveyDetailAnswer.EDate;
				daoSurveyDetailAnswer.SurveyDetailId = _surveyDetailId.Value;
				daoSurveyDetailAnswer.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSurveyDetailAnswer = new BOSurveyDetailAnswer(daoSurveyDetailAnswer);
				if(_boSurveyDetailAnswerCollection != null)
					_boSurveyDetailAnswerCollection.Add(boSurveyDetailAnswer);
			}
			catch
			{
				RollbackTransaction("addSurveyDetailAnswer");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSurveyDetailAnswer
		///This method deletes all BOSurveyDetailAnswer objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSurveyDetailAnswer()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSurveyDetailAnswer");
			try
			{
				DAOSurveyDetailAnswer.DeleteAllBySurveyDetailId(ConnectionProvider, _surveyDetailId.Value);
				CommitTransaction();
				if(_boSurveyDetailAnswerCollection != null)
				{
					_boSurveyDetailAnswerCollection.Clear();
					_boSurveyDetailAnswerCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSurveyDetailAnswer");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SurveyDetailId
		{
			get
			{
				 return _surveyDetailId;
			}
			set
			{
				_surveyDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SurveyId
		{
			get
			{
				 return _surveyId;
			}
			set
			{
				_surveyId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SurveyQuestionEn
		{
			get
			{
				 return _surveyQuestionEn;
			}
			set
			{
				_surveyQuestionEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string SurveyQuestionAr
		{
			get
			{
				 return _surveyQuestionAr;
			}
			set
			{
				_surveyQuestionAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsMuliSelect
		{
			get
			{
				 return _isMuliSelect;
			}
			set
			{
				_isMuliSelect = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
