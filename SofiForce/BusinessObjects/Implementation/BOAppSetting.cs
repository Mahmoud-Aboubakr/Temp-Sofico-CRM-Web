/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppSetting.
	///</Summary>
	public partial class BOAppSetting : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _settingId;
		protected Int32? _userId;
		protected string _settingCode;
		protected string _settingValue;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppSetting()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 settingId
		///</parameters>
		public BOAppSetting(Int32 settingId)
		{
			try
			{
				DAOAppSetting daoAppSetting = DAOAppSetting.SelectOne(settingId);
				_settingId = daoAppSetting.SettingId;
				_userId = daoAppSetting.UserId;
				_settingCode = daoAppSetting.SettingCode;
				_settingValue = daoAppSetting.SettingValue;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppSetting
		///</parameters>
		protected internal BOAppSetting(DAOAppSetting daoAppSetting)
		{
			try
			{
				_settingId = daoAppSetting.SettingId;
				_userId = daoAppSetting.UserId;
				_settingCode = daoAppSetting.SettingCode;
				_settingValue = daoAppSetting.SettingValue;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppSetting record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppSetting daoAppSetting = new DAOAppSetting();
			RegisterDataObject(daoAppSetting);
			BeginTransaction("savenewBOAppSetting");
			try
			{
				daoAppSetting.SettingId = _settingId;
				daoAppSetting.UserId = _userId;
				daoAppSetting.SettingCode = _settingCode;
				daoAppSetting.SettingValue = _settingValue;
				daoAppSetting.Insert();
				CommitTransaction();
				
				_settingId = daoAppSetting.SettingId;
				_userId = daoAppSetting.UserId;
				_settingCode = daoAppSetting.SettingCode;
				_settingValue = daoAppSetting.SettingValue;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppSetting");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppSetting record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppSetting
		///</parameters>
		public virtual void Update()
		{
			DAOAppSetting daoAppSetting = new DAOAppSetting();
			RegisterDataObject(daoAppSetting);
			BeginTransaction("updateBOAppSetting");
			try
			{
				daoAppSetting.SettingId = _settingId;
				daoAppSetting.UserId = _userId;
				daoAppSetting.SettingCode = _settingCode;
				daoAppSetting.SettingValue = _settingValue;
				daoAppSetting.Update();
				CommitTransaction();
				
				_settingId = daoAppSetting.SettingId;
				_userId = daoAppSetting.UserId;
				_settingCode = daoAppSetting.SettingCode;
				_settingValue = daoAppSetting.SettingValue;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppSetting");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppSetting record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppSetting daoAppSetting = new DAOAppSetting();
			RegisterDataObject(daoAppSetting);
			BeginTransaction("deleteBOAppSetting");
			try
			{
				daoAppSetting.SettingId = _settingId;
				daoAppSetting.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppSetting");
				throw;
			}
		}
		
		///<Summary>
		///AppSettingCollection
		///This method returns the collection of BOAppSetting objects
		///</Summary>
		///<returns>
		///List[BOAppSetting]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppSetting> AppSettingCollection()
		{
			try
			{
				IList<BOAppSetting> boAppSettingCollection = new List<BOAppSetting>();
				IList<DAOAppSetting> daoAppSettingCollection = DAOAppSetting.SelectAll();
			
				foreach(DAOAppSetting daoAppSetting in daoAppSettingCollection)
					boAppSettingCollection.Add(new BOAppSetting(daoAppSetting));
			
				return boAppSettingCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppSettingCollectionCount
		///This method returns the collection count of BOAppSetting objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppSettingCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppSetting.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppSetting>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppSetting.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppSettingCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppSetting objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppSettingCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppSetting> daoAppSettingCollection = DAOAppSetting.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppSetting resdaoAppSetting in daoAppSettingCollection)
					boAppSettingCollection.Add((T)(object)new BOAppSetting(resdaoAppSetting));
			
				return boAppSettingCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppSettingCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppSetting objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppSetting.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SettingId
		{
			get
			{
				 return _settingId;
			}
			set
			{
				_settingId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SettingCode
		{
			get
			{
				 return _settingCode;
			}
			set
			{
				_settingCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string SettingValue
		{
			get
			{
				 return _settingValue;
			}
			set
			{
				_settingValue = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
