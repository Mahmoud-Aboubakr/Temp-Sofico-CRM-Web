/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOServeyGroup.
	///It maintains a collection of BOSurvey objects.
	///</Summary>
	public partial class BOServeyGroup : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _serveyGroupId;
		protected string _serveyGroupCode;
		protected string _serveyGroupNameEn;
		protected string _serveyGroupNameAr;
		protected Int32? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOSurvey> _boSurveyCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOServeyGroup()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 serveyGroupId
		///</parameters>
		public BOServeyGroup(Int32 serveyGroupId)
		{
			try
			{
				DAOServeyGroup daoServeyGroup = DAOServeyGroup.SelectOne(serveyGroupId);
				_serveyGroupId = daoServeyGroup.ServeyGroupId;
				_serveyGroupCode = daoServeyGroup.ServeyGroupCode;
				_serveyGroupNameEn = daoServeyGroup.ServeyGroupNameEn;
				_serveyGroupNameAr = daoServeyGroup.ServeyGroupNameAr;
				_isActive = daoServeyGroup.IsActive;
				_canEdit = daoServeyGroup.CanEdit;
				_canDelete = daoServeyGroup.CanDelete;
				_displayOrder = daoServeyGroup.DisplayOrder;
				_color = daoServeyGroup.Color;
				_icon = daoServeyGroup.Icon;
				_cBy = daoServeyGroup.CBy;
				_cDate = daoServeyGroup.CDate;
				_eBy = daoServeyGroup.EBy;
				_eDate = daoServeyGroup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOServeyGroup
		///</parameters>
		protected internal BOServeyGroup(DAOServeyGroup daoServeyGroup)
		{
			try
			{
				_serveyGroupId = daoServeyGroup.ServeyGroupId;
				_serveyGroupCode = daoServeyGroup.ServeyGroupCode;
				_serveyGroupNameEn = daoServeyGroup.ServeyGroupNameEn;
				_serveyGroupNameAr = daoServeyGroup.ServeyGroupNameAr;
				_isActive = daoServeyGroup.IsActive;
				_canEdit = daoServeyGroup.CanEdit;
				_canDelete = daoServeyGroup.CanDelete;
				_displayOrder = daoServeyGroup.DisplayOrder;
				_color = daoServeyGroup.Color;
				_icon = daoServeyGroup.Icon;
				_cBy = daoServeyGroup.CBy;
				_cDate = daoServeyGroup.CDate;
				_eBy = daoServeyGroup.EBy;
				_eDate = daoServeyGroup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ServeyGroup record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOServeyGroup daoServeyGroup = new DAOServeyGroup();
			RegisterDataObject(daoServeyGroup);
			BeginTransaction("savenewBOServeyGroup");
			try
			{
				daoServeyGroup.ServeyGroupCode = _serveyGroupCode;
				daoServeyGroup.ServeyGroupNameEn = _serveyGroupNameEn;
				daoServeyGroup.ServeyGroupNameAr = _serveyGroupNameAr;
				daoServeyGroup.IsActive = _isActive;
				daoServeyGroup.CanEdit = _canEdit;
				daoServeyGroup.CanDelete = _canDelete;
				daoServeyGroup.DisplayOrder = _displayOrder;
				daoServeyGroup.Color = _color;
				daoServeyGroup.Icon = _icon;
				daoServeyGroup.CBy = _cBy;
				daoServeyGroup.CDate = _cDate;
				daoServeyGroup.EBy = _eBy;
				daoServeyGroup.EDate = _eDate;
				daoServeyGroup.Insert();
				CommitTransaction();
				
				_serveyGroupId = daoServeyGroup.ServeyGroupId;
				_serveyGroupCode = daoServeyGroup.ServeyGroupCode;
				_serveyGroupNameEn = daoServeyGroup.ServeyGroupNameEn;
				_serveyGroupNameAr = daoServeyGroup.ServeyGroupNameAr;
				_isActive = daoServeyGroup.IsActive;
				_canEdit = daoServeyGroup.CanEdit;
				_canDelete = daoServeyGroup.CanDelete;
				_displayOrder = daoServeyGroup.DisplayOrder;
				_color = daoServeyGroup.Color;
				_icon = daoServeyGroup.Icon;
				_cBy = daoServeyGroup.CBy;
				_cDate = daoServeyGroup.CDate;
				_eBy = daoServeyGroup.EBy;
				_eDate = daoServeyGroup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOServeyGroup");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ServeyGroup record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOServeyGroup
		///</parameters>
		public virtual void Update()
		{
			DAOServeyGroup daoServeyGroup = new DAOServeyGroup();
			RegisterDataObject(daoServeyGroup);
			BeginTransaction("updateBOServeyGroup");
			try
			{
				daoServeyGroup.ServeyGroupId = _serveyGroupId;
				daoServeyGroup.ServeyGroupCode = _serveyGroupCode;
				daoServeyGroup.ServeyGroupNameEn = _serveyGroupNameEn;
				daoServeyGroup.ServeyGroupNameAr = _serveyGroupNameAr;
				daoServeyGroup.IsActive = _isActive;
				daoServeyGroup.CanEdit = _canEdit;
				daoServeyGroup.CanDelete = _canDelete;
				daoServeyGroup.DisplayOrder = _displayOrder;
				daoServeyGroup.Color = _color;
				daoServeyGroup.Icon = _icon;
				daoServeyGroup.CBy = _cBy;
				daoServeyGroup.CDate = _cDate;
				daoServeyGroup.EBy = _eBy;
				daoServeyGroup.EDate = _eDate;
				daoServeyGroup.Update();
				CommitTransaction();
				
				_serveyGroupId = daoServeyGroup.ServeyGroupId;
				_serveyGroupCode = daoServeyGroup.ServeyGroupCode;
				_serveyGroupNameEn = daoServeyGroup.ServeyGroupNameEn;
				_serveyGroupNameAr = daoServeyGroup.ServeyGroupNameAr;
				_isActive = daoServeyGroup.IsActive;
				_canEdit = daoServeyGroup.CanEdit;
				_canDelete = daoServeyGroup.CanDelete;
				_displayOrder = daoServeyGroup.DisplayOrder;
				_color = daoServeyGroup.Color;
				_icon = daoServeyGroup.Icon;
				_cBy = daoServeyGroup.CBy;
				_cDate = daoServeyGroup.CDate;
				_eBy = daoServeyGroup.EBy;
				_eDate = daoServeyGroup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOServeyGroup");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ServeyGroup record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOServeyGroup daoServeyGroup = new DAOServeyGroup();
			RegisterDataObject(daoServeyGroup);
			BeginTransaction("deleteBOServeyGroup");
			try
			{
				daoServeyGroup.ServeyGroupId = _serveyGroupId;
				daoServeyGroup.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOServeyGroup");
				throw;
			}
		}
		
		///<Summary>
		///ServeyGroupCollection
		///This method returns the collection of BOServeyGroup objects
		///</Summary>
		///<returns>
		///List[BOServeyGroup]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOServeyGroup> ServeyGroupCollection()
		{
			try
			{
				IList<BOServeyGroup> boServeyGroupCollection = new List<BOServeyGroup>();
				IList<DAOServeyGroup> daoServeyGroupCollection = DAOServeyGroup.SelectAll();
			
				foreach(DAOServeyGroup daoServeyGroup in daoServeyGroupCollection)
					boServeyGroupCollection.Add(new BOServeyGroup(daoServeyGroup));
			
				return boServeyGroupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ServeyGroupCollectionCount
		///This method returns the collection count of BOServeyGroup objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ServeyGroupCollectionCount()
		{
			try
			{
				Int32 objCount = DAOServeyGroup.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SurveyCollection
		///This method returns its collection of BOSurvey objects
		///</Summary>
		///<returns>
		///IList[BOSurvey]
		///</returns>
		///<parameters>
		///BOServeyGroup
		///</parameters>
		public virtual IList<BOSurvey> SurveyCollection()
		{
			try
			{
				if(_boSurveyCollection == null)
					LoadSurveyCollection();
				
				return _boSurveyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOServeyGroup>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOServeyGroup.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ServeyGroupCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOServeyGroup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boServeyGroupCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOServeyGroup> daoServeyGroupCollection = DAOServeyGroup.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOServeyGroup resdaoServeyGroup in daoServeyGroupCollection)
					boServeyGroupCollection.Add((T)(object)new BOServeyGroup(resdaoServeyGroup));
			
				return boServeyGroupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ServeyGroupCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOServeyGroup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOServeyGroup.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadSurveyCollection
		///This method loads the internal collection of BOSurvey objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSurveyCollection()
		{
			try
			{
				_boSurveyCollection = new List<BOSurvey>();
				IList<DAOSurvey> daoSurveyCollection = DAOSurvey.SelectAllByServeyGroupId(_serveyGroupId.Value);
				
				foreach(DAOSurvey daoSurvey in daoSurveyCollection)
					_boSurveyCollection.Add(new BOSurvey(daoSurvey));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSurvey
		///This method persists a BOSurvey object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSurvey
		///</parameters>
		public virtual void AddSurvey(BOSurvey boSurvey)
		{
			DAOSurvey daoSurvey = new DAOSurvey();
			RegisterDataObject(daoSurvey);
			BeginTransaction("addSurvey");
			try
			{
				daoSurvey.SurveyId = boSurvey.SurveyId;
				daoSurvey.SurveyCode = boSurvey.SurveyCode;
				daoSurvey.CreateDate = boSurvey.CreateDate;
				daoSurvey.SurveyNameEn = boSurvey.SurveyNameEn;
				daoSurvey.SurveyNameAr = boSurvey.SurveyNameAr;
				daoSurvey.IsActive = boSurvey.IsActive;
				daoSurvey.CBy = boSurvey.CBy;
				daoSurvey.CDate = boSurvey.CDate;
				daoSurvey.EBy = boSurvey.EBy;
				daoSurvey.EDate = boSurvey.EDate;
				daoSurvey.ServeyGroupId = _serveyGroupId.Value;
				daoSurvey.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSurvey = new BOSurvey(daoSurvey);
				if(_boSurveyCollection != null)
					_boSurveyCollection.Add(boSurvey);
			}
			catch
			{
				RollbackTransaction("addSurvey");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSurvey
		///This method deletes all BOSurvey objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSurvey()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSurvey");
			try
			{
				DAOSurvey.DeleteAllByServeyGroupId(ConnectionProvider, _serveyGroupId.Value);
				CommitTransaction();
				if(_boSurveyCollection != null)
				{
					_boSurveyCollection.Clear();
					_boSurveyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSurvey");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ServeyGroupId
		{
			get
			{
				 return _serveyGroupId;
			}
			set
			{
				_serveyGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ServeyGroupCode
		{
			get
			{
				 return _serveyGroupCode;
			}
			set
			{
				_serveyGroupCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ServeyGroupNameEn
		{
			get
			{
				 return _serveyGroupNameEn;
			}
			set
			{
				_serveyGroupNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ServeyGroupNameAr
		{
			get
			{
				 return _serveyGroupNameAr;
			}
			set
			{
				_serveyGroupNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
