/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/26/2023 2:26:30 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORepresentativeTrackingVw.
	///</Summary>
	public partial class BORepresentativeTrackingVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _representativeId;
		protected Int32? _branchId;
		protected Int32? _userId;
		protected Int32? _supervisorId;
		protected Int32? _kindId;
		protected Int32? _businessUnitId;
		protected string _companyCode;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _phone;
		protected double? _latitude;
		protected double? _longitude;
		protected DateTime? _lastSyncDate;
		protected bool? _isOnline;
		protected string _branchNameEn;
		protected string _branchNameAr;
		protected string _branchCode;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORepresentativeTrackingVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORepresentativeTrackingVw
		///</parameters>
		protected internal BORepresentativeTrackingVw(DAORepresentativeTrackingVw daoRepresentativeTrackingVw)
		{
			try
			{
				_representativeId = daoRepresentativeTrackingVw.RepresentativeId;
				_branchId = daoRepresentativeTrackingVw.BranchId;
				_userId = daoRepresentativeTrackingVw.UserId;
				_supervisorId = daoRepresentativeTrackingVw.SupervisorId;
				_kindId = daoRepresentativeTrackingVw.KindId;
				_businessUnitId = daoRepresentativeTrackingVw.BusinessUnitId;
				_companyCode = daoRepresentativeTrackingVw.CompanyCode;
				_representativeCode = daoRepresentativeTrackingVw.RepresentativeCode;
				_representativeNameAr = daoRepresentativeTrackingVw.RepresentativeNameAr;
				_representativeNameEn = daoRepresentativeTrackingVw.RepresentativeNameEn;
				_phone = daoRepresentativeTrackingVw.Phone;
				_latitude = daoRepresentativeTrackingVw.Latitude;
				_longitude = daoRepresentativeTrackingVw.Longitude;
				_lastSyncDate = daoRepresentativeTrackingVw.LastSyncDate;
				_isOnline = daoRepresentativeTrackingVw.IsOnline;
				_branchNameEn = daoRepresentativeTrackingVw.BranchNameEn;
				_branchNameAr = daoRepresentativeTrackingVw.BranchNameAr;
				_branchCode = daoRepresentativeTrackingVw.BranchCode;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///RepresentativeTrackingVwCollection
		///This method returns the collection of BORepresentativeTrackingVw objects
		///</Summary>
		///<returns>
		///List[BORepresentativeTrackingVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORepresentativeTrackingVw> RepresentativeTrackingVwCollection()
		{
			try
			{
				IList<BORepresentativeTrackingVw> boRepresentativeTrackingVwCollection = new List<BORepresentativeTrackingVw>();
				IList<DAORepresentativeTrackingVw> daoRepresentativeTrackingVwCollection = DAORepresentativeTrackingVw.SelectAll();
			
				foreach(DAORepresentativeTrackingVw daoRepresentativeTrackingVw in daoRepresentativeTrackingVwCollection)
					boRepresentativeTrackingVwCollection.Add(new BORepresentativeTrackingVw(daoRepresentativeTrackingVw));
			
				return boRepresentativeTrackingVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeTrackingVwCollectionCount
		///This method returns the collection count of BORepresentativeTrackingVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RepresentativeTrackingVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAORepresentativeTrackingVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORepresentativeTrackingVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORepresentativeTrackingVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeTrackingVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORepresentativeTrackingVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRepresentativeTrackingVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORepresentativeTrackingVw> daoRepresentativeTrackingVwCollection = DAORepresentativeTrackingVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORepresentativeTrackingVw resdaoRepresentativeTrackingVw in daoRepresentativeTrackingVwCollection)
					boRepresentativeTrackingVwCollection.Add((T)(object)new BORepresentativeTrackingVw(resdaoRepresentativeTrackingVw));
			
				return boRepresentativeTrackingVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeTrackingVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORepresentativeTrackingVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORepresentativeTrackingVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SupervisorId
		{
			get
			{
				 return _supervisorId;
			}
			set
			{
				_supervisorId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? KindId
		{
			get
			{
				 return _kindId;
			}
			set
			{
				_kindId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BusinessUnitId
		{
			get
			{
				 return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
				_isDirty = true;
			}
		}
		
		public virtual string CompanyCode
		{
			get
			{
				 return _companyCode;
			}
			set
			{
				_companyCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeCode
		{
			get
			{
				 return _representativeCode;
			}
			set
			{
				_representativeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeNameAr
		{
			get
			{
				 return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeNameEn
		{
			get
			{
				 return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? LastSyncDate
		{
			get
			{
				 return _lastSyncDate;
			}
			set
			{
				_lastSyncDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsOnline
		{
			get
			{
				 return _isOnline;
			}
			set
			{
				_isOnline = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
