/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSupervisorType.
	///It maintains a collection of BOSupervisor objects.
	///</Summary>
	public partial class BOSupervisorType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _supervisorTypeId;
		protected string _supervisorTypeCode;
		protected string _supervisorTypeNameEn;
		protected string _supervisorTypeNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOSupervisor> _boSupervisorCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSupervisorType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 supervisorTypeId
		///</parameters>
		public BOSupervisorType(Int32 supervisorTypeId)
		{
			try
			{
				DAOSupervisorType daoSupervisorType = DAOSupervisorType.SelectOne(supervisorTypeId);
				_supervisorTypeId = daoSupervisorType.SupervisorTypeId;
				_supervisorTypeCode = daoSupervisorType.SupervisorTypeCode;
				_supervisorTypeNameEn = daoSupervisorType.SupervisorTypeNameEn;
				_supervisorTypeNameAr = daoSupervisorType.SupervisorTypeNameAr;
				_isActive = daoSupervisorType.IsActive;
				_canEdit = daoSupervisorType.CanEdit;
				_canDelete = daoSupervisorType.CanDelete;
				_displayOrder = daoSupervisorType.DisplayOrder;
				_color = daoSupervisorType.Color;
				_icon = daoSupervisorType.Icon;
				_cBy = daoSupervisorType.CBy;
				_cDate = daoSupervisorType.CDate;
				_eBy = daoSupervisorType.EBy;
				_eDate = daoSupervisorType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSupervisorType
		///</parameters>
		protected internal BOSupervisorType(DAOSupervisorType daoSupervisorType)
		{
			try
			{
				_supervisorTypeId = daoSupervisorType.SupervisorTypeId;
				_supervisorTypeCode = daoSupervisorType.SupervisorTypeCode;
				_supervisorTypeNameEn = daoSupervisorType.SupervisorTypeNameEn;
				_supervisorTypeNameAr = daoSupervisorType.SupervisorTypeNameAr;
				_isActive = daoSupervisorType.IsActive;
				_canEdit = daoSupervisorType.CanEdit;
				_canDelete = daoSupervisorType.CanDelete;
				_displayOrder = daoSupervisorType.DisplayOrder;
				_color = daoSupervisorType.Color;
				_icon = daoSupervisorType.Icon;
				_cBy = daoSupervisorType.CBy;
				_cDate = daoSupervisorType.CDate;
				_eBy = daoSupervisorType.EBy;
				_eDate = daoSupervisorType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SupervisorType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSupervisorType daoSupervisorType = new DAOSupervisorType();
			RegisterDataObject(daoSupervisorType);
			BeginTransaction("savenewBOSupervisorType");
			try
			{
				daoSupervisorType.SupervisorTypeCode = _supervisorTypeCode;
				daoSupervisorType.SupervisorTypeNameEn = _supervisorTypeNameEn;
				daoSupervisorType.SupervisorTypeNameAr = _supervisorTypeNameAr;
				daoSupervisorType.IsActive = _isActive;
				daoSupervisorType.CanEdit = _canEdit;
				daoSupervisorType.CanDelete = _canDelete;
				daoSupervisorType.DisplayOrder = _displayOrder;
				daoSupervisorType.Color = _color;
				daoSupervisorType.Icon = _icon;
				daoSupervisorType.CBy = _cBy;
				daoSupervisorType.CDate = _cDate;
				daoSupervisorType.EBy = _eBy;
				daoSupervisorType.EDate = _eDate;
				daoSupervisorType.Insert();
				CommitTransaction();
				
				_supervisorTypeId = daoSupervisorType.SupervisorTypeId;
				_supervisorTypeCode = daoSupervisorType.SupervisorTypeCode;
				_supervisorTypeNameEn = daoSupervisorType.SupervisorTypeNameEn;
				_supervisorTypeNameAr = daoSupervisorType.SupervisorTypeNameAr;
				_isActive = daoSupervisorType.IsActive;
				_canEdit = daoSupervisorType.CanEdit;
				_canDelete = daoSupervisorType.CanDelete;
				_displayOrder = daoSupervisorType.DisplayOrder;
				_color = daoSupervisorType.Color;
				_icon = daoSupervisorType.Icon;
				_cBy = daoSupervisorType.CBy;
				_cDate = daoSupervisorType.CDate;
				_eBy = daoSupervisorType.EBy;
				_eDate = daoSupervisorType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSupervisorType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SupervisorType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupervisorType
		///</parameters>
		public virtual void Update()
		{
			DAOSupervisorType daoSupervisorType = new DAOSupervisorType();
			RegisterDataObject(daoSupervisorType);
			BeginTransaction("updateBOSupervisorType");
			try
			{
				daoSupervisorType.SupervisorTypeId = _supervisorTypeId;
				daoSupervisorType.SupervisorTypeCode = _supervisorTypeCode;
				daoSupervisorType.SupervisorTypeNameEn = _supervisorTypeNameEn;
				daoSupervisorType.SupervisorTypeNameAr = _supervisorTypeNameAr;
				daoSupervisorType.IsActive = _isActive;
				daoSupervisorType.CanEdit = _canEdit;
				daoSupervisorType.CanDelete = _canDelete;
				daoSupervisorType.DisplayOrder = _displayOrder;
				daoSupervisorType.Color = _color;
				daoSupervisorType.Icon = _icon;
				daoSupervisorType.CBy = _cBy;
				daoSupervisorType.CDate = _cDate;
				daoSupervisorType.EBy = _eBy;
				daoSupervisorType.EDate = _eDate;
				daoSupervisorType.Update();
				CommitTransaction();
				
				_supervisorTypeId = daoSupervisorType.SupervisorTypeId;
				_supervisorTypeCode = daoSupervisorType.SupervisorTypeCode;
				_supervisorTypeNameEn = daoSupervisorType.SupervisorTypeNameEn;
				_supervisorTypeNameAr = daoSupervisorType.SupervisorTypeNameAr;
				_isActive = daoSupervisorType.IsActive;
				_canEdit = daoSupervisorType.CanEdit;
				_canDelete = daoSupervisorType.CanDelete;
				_displayOrder = daoSupervisorType.DisplayOrder;
				_color = daoSupervisorType.Color;
				_icon = daoSupervisorType.Icon;
				_cBy = daoSupervisorType.CBy;
				_cDate = daoSupervisorType.CDate;
				_eBy = daoSupervisorType.EBy;
				_eDate = daoSupervisorType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSupervisorType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SupervisorType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSupervisorType daoSupervisorType = new DAOSupervisorType();
			RegisterDataObject(daoSupervisorType);
			BeginTransaction("deleteBOSupervisorType");
			try
			{
				daoSupervisorType.SupervisorTypeId = _supervisorTypeId;
				daoSupervisorType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSupervisorType");
				throw;
			}
		}
		
		///<Summary>
		///SupervisorTypeCollection
		///This method returns the collection of BOSupervisorType objects
		///</Summary>
		///<returns>
		///List[BOSupervisorType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSupervisorType> SupervisorTypeCollection()
		{
			try
			{
				IList<BOSupervisorType> boSupervisorTypeCollection = new List<BOSupervisorType>();
				IList<DAOSupervisorType> daoSupervisorTypeCollection = DAOSupervisorType.SelectAll();
			
				foreach(DAOSupervisorType daoSupervisorType in daoSupervisorTypeCollection)
					boSupervisorTypeCollection.Add(new BOSupervisorType(daoSupervisorType));
			
				return boSupervisorTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SupervisorTypeCollectionCount
		///This method returns the collection count of BOSupervisorType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SupervisorTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSupervisorType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SupervisorCollection
		///This method returns its collection of BOSupervisor objects
		///</Summary>
		///<returns>
		///IList[BOSupervisor]
		///</returns>
		///<parameters>
		///BOSupervisorType
		///</parameters>
		public virtual IList<BOSupervisor> SupervisorCollection()
		{
			try
			{
				if(_boSupervisorCollection == null)
					LoadSupervisorCollection();
				
				return _boSupervisorCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSupervisorType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSupervisorType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SupervisorTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSupervisorType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSupervisorTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSupervisorType> daoSupervisorTypeCollection = DAOSupervisorType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSupervisorType resdaoSupervisorType in daoSupervisorTypeCollection)
					boSupervisorTypeCollection.Add((T)(object)new BOSupervisorType(resdaoSupervisorType));
			
				return boSupervisorTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SupervisorTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSupervisorType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSupervisorType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadSupervisorCollection
		///This method loads the internal collection of BOSupervisor objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSupervisorCollection()
		{
			try
			{
				_boSupervisorCollection = new List<BOSupervisor>();
				IList<DAOSupervisor> daoSupervisorCollection = DAOSupervisor.SelectAllBySupervisorTypeId(_supervisorTypeId.Value);
				
				foreach(DAOSupervisor daoSupervisor in daoSupervisorCollection)
					_boSupervisorCollection.Add(new BOSupervisor(daoSupervisor));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSupervisor
		///This method persists a BOSupervisor object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupervisor
		///</parameters>
		public virtual void AddSupervisor(BOSupervisor boSupervisor)
		{
			DAOSupervisor daoSupervisor = new DAOSupervisor();
			RegisterDataObject(daoSupervisor);
			BeginTransaction("addSupervisor");
			try
			{
				daoSupervisor.SupervisorId = boSupervisor.SupervisorId;
				daoSupervisor.BusinessUnitId = boSupervisor.BusinessUnitId;
				daoSupervisor.CompanyCode = boSupervisor.CompanyCode;
				daoSupervisor.SupervisorCode = boSupervisor.SupervisorCode;
				daoSupervisor.SupervisorNameEn = boSupervisor.SupervisorNameEn;
				daoSupervisor.SupervisorNameAr = boSupervisor.SupervisorNameAr;
				daoSupervisor.Phone = boSupervisor.Phone;
				daoSupervisor.PhoneAlternative = boSupervisor.PhoneAlternative;
				daoSupervisor.JoinDate = boSupervisor.JoinDate;
				daoSupervisor.UserId = boSupervisor.UserId;
				daoSupervisor.BranchId = boSupervisor.BranchId;
				daoSupervisor.IsActive = boSupervisor.IsActive;
				daoSupervisor.Color = boSupervisor.Color;
				daoSupervisor.DisplayOrder = boSupervisor.DisplayOrder;
				daoSupervisor.Icon = boSupervisor.Icon;
				daoSupervisor.CanEdit = boSupervisor.CanEdit;
				daoSupervisor.CanDelete = boSupervisor.CanDelete;
				daoSupervisor.Notes = boSupervisor.Notes;
				daoSupervisor.IsTerminated = boSupervisor.IsTerminated;
				daoSupervisor.TerminationDate = boSupervisor.TerminationDate;
				daoSupervisor.TerminationReasonId = boSupervisor.TerminationReasonId;
				daoSupervisor.CBy = boSupervisor.CBy;
				daoSupervisor.CDate = boSupervisor.CDate;
				daoSupervisor.EBy = boSupervisor.EBy;
				daoSupervisor.EDate = boSupervisor.EDate;
				daoSupervisor.SupervisorTypeId = _supervisorTypeId.Value;
				daoSupervisor.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSupervisor = new BOSupervisor(daoSupervisor);
				if(_boSupervisorCollection != null)
					_boSupervisorCollection.Add(boSupervisor);
			}
			catch
			{
				RollbackTransaction("addSupervisor");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSupervisor
		///This method deletes all BOSupervisor objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSupervisor()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSupervisor");
			try
			{
				DAOSupervisor.DeleteAllBySupervisorTypeId(ConnectionProvider, _supervisorTypeId.Value);
				CommitTransaction();
				if(_boSupervisorCollection != null)
				{
					_boSupervisorCollection.Clear();
					_boSupervisorCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSupervisor");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SupervisorTypeId
		{
			get
			{
				 return _supervisorTypeId;
			}
			set
			{
				_supervisorTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SupervisorTypeCode
		{
			get
			{
				 return _supervisorTypeCode;
			}
			set
			{
				_supervisorTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string SupervisorTypeNameEn
		{
			get
			{
				 return _supervisorTypeNameEn;
			}
			set
			{
				_supervisorTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string SupervisorTypeNameAr
		{
			get
			{
				 return _supervisorTypeNameAr;
			}
			set
			{
				_supervisorTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
