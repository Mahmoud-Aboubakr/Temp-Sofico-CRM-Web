/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClaim.
	///It maintains a collection of BOClaimDetails objects.
	///</Summary>
	public partial class BOClaim : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _claimId;
		protected string _claimCode;
		protected DateTime? _claimDate;
		protected Int32? _clientId;
		protected Int32? _branchId;
		protected decimal? _itemTotal;
		protected decimal? _discountTotal;
		protected decimal? _taxTotal;
		protected decimal? _cashDiscountTotal;
		protected decimal? _cashPaymentValue;
		protected decimal? _chequePaymentValue;
		protected decimal? _chequePayment1Value;
		protected DateTime? _chequePayment1Date;
		protected Int32? _chequePayment1Days;
		protected decimal? _chequePayment2Value;
		protected DateTime? _chequePayment2Date;
		protected Int32? _chequePayment2Days;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClaimDetails> _boClaimDetailsCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClaim()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 claimId
		///</parameters>
		public BOClaim(Int64 claimId)
		{
			try
			{
				DAOClaim daoClaim = DAOClaim.SelectOne(claimId);
				_claimId = daoClaim.ClaimId;
				_claimCode = daoClaim.ClaimCode;
				_claimDate = daoClaim.ClaimDate;
				_clientId = daoClaim.ClientId;
				_branchId = daoClaim.BranchId;
				_itemTotal = daoClaim.ItemTotal;
				_discountTotal = daoClaim.DiscountTotal;
				_taxTotal = daoClaim.TaxTotal;
				_cashDiscountTotal = daoClaim.CashDiscountTotal;
				_cashPaymentValue = daoClaim.CashPaymentValue;
				_chequePaymentValue = daoClaim.ChequePaymentValue;
				_chequePayment1Value = daoClaim.ChequePayment1Value;
				_chequePayment1Date = daoClaim.ChequePayment1Date;
				_chequePayment1Days = daoClaim.ChequePayment1Days;
				_chequePayment2Value = daoClaim.ChequePayment2Value;
				_chequePayment2Date = daoClaim.ChequePayment2Date;
				_chequePayment2Days = daoClaim.ChequePayment2Days;
				_cBy = daoClaim.CBy;
				_cDate = daoClaim.CDate;
				_eBy = daoClaim.EBy;
				_eDate = daoClaim.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClaim
		///</parameters>
		protected internal BOClaim(DAOClaim daoClaim)
		{
			try
			{
				_claimId = daoClaim.ClaimId;
				_claimCode = daoClaim.ClaimCode;
				_claimDate = daoClaim.ClaimDate;
				_clientId = daoClaim.ClientId;
				_branchId = daoClaim.BranchId;
				_itemTotal = daoClaim.ItemTotal;
				_discountTotal = daoClaim.DiscountTotal;
				_taxTotal = daoClaim.TaxTotal;
				_cashDiscountTotal = daoClaim.CashDiscountTotal;
				_cashPaymentValue = daoClaim.CashPaymentValue;
				_chequePaymentValue = daoClaim.ChequePaymentValue;
				_chequePayment1Value = daoClaim.ChequePayment1Value;
				_chequePayment1Date = daoClaim.ChequePayment1Date;
				_chequePayment1Days = daoClaim.ChequePayment1Days;
				_chequePayment2Value = daoClaim.ChequePayment2Value;
				_chequePayment2Date = daoClaim.ChequePayment2Date;
				_chequePayment2Days = daoClaim.ChequePayment2Days;
				_cBy = daoClaim.CBy;
				_cDate = daoClaim.CDate;
				_eBy = daoClaim.EBy;
				_eDate = daoClaim.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Claim record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClaim daoClaim = new DAOClaim();
			RegisterDataObject(daoClaim);
			BeginTransaction("savenewBOClaim");
			try
			{
				daoClaim.ClaimCode = _claimCode;
				daoClaim.ClaimDate = _claimDate;
				daoClaim.ClientId = _clientId;
				daoClaim.BranchId = _branchId;
				daoClaim.ItemTotal = _itemTotal;
				daoClaim.DiscountTotal = _discountTotal;
				daoClaim.TaxTotal = _taxTotal;
				daoClaim.CashDiscountTotal = _cashDiscountTotal;
				daoClaim.CashPaymentValue = _cashPaymentValue;
				daoClaim.ChequePaymentValue = _chequePaymentValue;
				daoClaim.ChequePayment1Value = _chequePayment1Value;
				daoClaim.ChequePayment1Date = _chequePayment1Date;
				daoClaim.ChequePayment1Days = _chequePayment1Days;
				daoClaim.ChequePayment2Value = _chequePayment2Value;
				daoClaim.ChequePayment2Date = _chequePayment2Date;
				daoClaim.ChequePayment2Days = _chequePayment2Days;
				daoClaim.CBy = _cBy;
				daoClaim.CDate = _cDate;
				daoClaim.EBy = _eBy;
				daoClaim.EDate = _eDate;
				daoClaim.Insert();
				CommitTransaction();
				
				_claimId = daoClaim.ClaimId;
				_claimCode = daoClaim.ClaimCode;
				_claimDate = daoClaim.ClaimDate;
				_clientId = daoClaim.ClientId;
				_branchId = daoClaim.BranchId;
				_itemTotal = daoClaim.ItemTotal;
				_discountTotal = daoClaim.DiscountTotal;
				_taxTotal = daoClaim.TaxTotal;
				_cashDiscountTotal = daoClaim.CashDiscountTotal;
				_cashPaymentValue = daoClaim.CashPaymentValue;
				_chequePaymentValue = daoClaim.ChequePaymentValue;
				_chequePayment1Value = daoClaim.ChequePayment1Value;
				_chequePayment1Date = daoClaim.ChequePayment1Date;
				_chequePayment1Days = daoClaim.ChequePayment1Days;
				_chequePayment2Value = daoClaim.ChequePayment2Value;
				_chequePayment2Date = daoClaim.ChequePayment2Date;
				_chequePayment2Days = daoClaim.ChequePayment2Days;
				_cBy = daoClaim.CBy;
				_cDate = daoClaim.CDate;
				_eBy = daoClaim.EBy;
				_eDate = daoClaim.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClaim");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Claim record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClaim
		///</parameters>
		public virtual void Update()
		{
			DAOClaim daoClaim = new DAOClaim();
			RegisterDataObject(daoClaim);
			BeginTransaction("updateBOClaim");
			try
			{
				daoClaim.ClaimId = _claimId;
				daoClaim.ClaimCode = _claimCode;
				daoClaim.ClaimDate = _claimDate;
				daoClaim.ClientId = _clientId;
				daoClaim.BranchId = _branchId;
				daoClaim.ItemTotal = _itemTotal;
				daoClaim.DiscountTotal = _discountTotal;
				daoClaim.TaxTotal = _taxTotal;
				daoClaim.CashDiscountTotal = _cashDiscountTotal;
				daoClaim.CashPaymentValue = _cashPaymentValue;
				daoClaim.ChequePaymentValue = _chequePaymentValue;
				daoClaim.ChequePayment1Value = _chequePayment1Value;
				daoClaim.ChequePayment1Date = _chequePayment1Date;
				daoClaim.ChequePayment1Days = _chequePayment1Days;
				daoClaim.ChequePayment2Value = _chequePayment2Value;
				daoClaim.ChequePayment2Date = _chequePayment2Date;
				daoClaim.ChequePayment2Days = _chequePayment2Days;
				daoClaim.CBy = _cBy;
				daoClaim.CDate = _cDate;
				daoClaim.EBy = _eBy;
				daoClaim.EDate = _eDate;
				daoClaim.Update();
				CommitTransaction();
				
				_claimId = daoClaim.ClaimId;
				_claimCode = daoClaim.ClaimCode;
				_claimDate = daoClaim.ClaimDate;
				_clientId = daoClaim.ClientId;
				_branchId = daoClaim.BranchId;
				_itemTotal = daoClaim.ItemTotal;
				_discountTotal = daoClaim.DiscountTotal;
				_taxTotal = daoClaim.TaxTotal;
				_cashDiscountTotal = daoClaim.CashDiscountTotal;
				_cashPaymentValue = daoClaim.CashPaymentValue;
				_chequePaymentValue = daoClaim.ChequePaymentValue;
				_chequePayment1Value = daoClaim.ChequePayment1Value;
				_chequePayment1Date = daoClaim.ChequePayment1Date;
				_chequePayment1Days = daoClaim.ChequePayment1Days;
				_chequePayment2Value = daoClaim.ChequePayment2Value;
				_chequePayment2Date = daoClaim.ChequePayment2Date;
				_chequePayment2Days = daoClaim.ChequePayment2Days;
				_cBy = daoClaim.CBy;
				_cDate = daoClaim.CDate;
				_eBy = daoClaim.EBy;
				_eDate = daoClaim.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClaim");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Claim record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClaim daoClaim = new DAOClaim();
			RegisterDataObject(daoClaim);
			BeginTransaction("deleteBOClaim");
			try
			{
				daoClaim.ClaimId = _claimId;
				daoClaim.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClaim");
				throw;
			}
		}
		
		///<Summary>
		///ClaimCollection
		///This method returns the collection of BOClaim objects
		///</Summary>
		///<returns>
		///List[BOClaim]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClaim> ClaimCollection()
		{
			try
			{
				IList<BOClaim> boClaimCollection = new List<BOClaim>();
				IList<DAOClaim> daoClaimCollection = DAOClaim.SelectAll();
			
				foreach(DAOClaim daoClaim in daoClaimCollection)
					boClaimCollection.Add(new BOClaim(daoClaim));
			
				return boClaimCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClaimCollectionCount
		///This method returns the collection count of BOClaim objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClaimCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClaim.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClaimDetailsCollection
		///This method returns its collection of BOClaimDetails objects
		///</Summary>
		///<returns>
		///IList[BOClaimDetails]
		///</returns>
		///<parameters>
		///BOClaim
		///</parameters>
		public virtual IList<BOClaimDetails> ClaimDetailsCollection()
		{
			try
			{
				if(_boClaimDetailsCollection == null)
					LoadClaimDetailsCollection();
				
				return _boClaimDetailsCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClaim>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClaim.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClaimCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClaim objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClaimCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClaim> daoClaimCollection = DAOClaim.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClaim resdaoClaim in daoClaimCollection)
					boClaimCollection.Add((T)(object)new BOClaim(resdaoClaim));
			
				return boClaimCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClaimCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClaim objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClaim.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClaimDetailsCollection
		///This method loads the internal collection of BOClaimDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClaimDetailsCollection()
		{
			try
			{
				_boClaimDetailsCollection = new List<BOClaimDetails>();
				IList<DAOClaimDetails> daoClaimDetailsCollection = DAOClaimDetails.SelectAllByClaimId(_claimId.Value);
				
				foreach(DAOClaimDetails daoClaimDetails in daoClaimDetailsCollection)
					_boClaimDetailsCollection.Add(new BOClaimDetails(daoClaimDetails));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClaimDetails
		///This method persists a BOClaimDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClaimDetails
		///</parameters>
		public virtual void AddClaimDetails(BOClaimDetails boClaimDetails)
		{
			DAOClaimDetails daoClaimDetails = new DAOClaimDetails();
			RegisterDataObject(daoClaimDetails);
			BeginTransaction("addClaimDetails");
			try
			{
				daoClaimDetails.DetailId = boClaimDetails.DetailId;
				daoClaimDetails.InvoiceCode = boClaimDetails.InvoiceCode;
				daoClaimDetails.InvoiceDate = boClaimDetails.InvoiceDate;
				daoClaimDetails.InvoiceValue = boClaimDetails.InvoiceValue;
				daoClaimDetails.InvoiceType = boClaimDetails.InvoiceType;
				daoClaimDetails.ClaimId = _claimId.Value;
				daoClaimDetails.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClaimDetails = new BOClaimDetails(daoClaimDetails);
				if(_boClaimDetailsCollection != null)
					_boClaimDetailsCollection.Add(boClaimDetails);
			}
			catch
			{
				RollbackTransaction("addClaimDetails");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClaimDetails
		///This method deletes all BOClaimDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClaimDetails()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClaimDetails");
			try
			{
				DAOClaimDetails.DeleteAllByClaimId(ConnectionProvider, _claimId.Value);
				CommitTransaction();
				if(_boClaimDetailsCollection != null)
				{
					_boClaimDetailsCollection.Clear();
					_boClaimDetailsCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClaimDetails");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? ClaimId
		{
			get
			{
				 return _claimId;
			}
			set
			{
				_claimId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClaimCode
		{
			get
			{
				 return _claimCode;
			}
			set
			{
				_claimCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ClaimDate
		{
			get
			{
				 return _claimDate;
			}
			set
			{
				_claimDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ItemTotal
		{
			get
			{
				 return _itemTotal;
			}
			set
			{
				_itemTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? DiscountTotal
		{
			get
			{
				 return _discountTotal;
			}
			set
			{
				_discountTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? TaxTotal
		{
			get
			{
				 return _taxTotal;
			}
			set
			{
				_taxTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CashDiscountTotal
		{
			get
			{
				 return _cashDiscountTotal;
			}
			set
			{
				_cashDiscountTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CashPaymentValue
		{
			get
			{
				 return _cashPaymentValue;
			}
			set
			{
				_cashPaymentValue = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ChequePaymentValue
		{
			get
			{
				 return _chequePaymentValue;
			}
			set
			{
				_chequePaymentValue = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ChequePayment1Value
		{
			get
			{
				 return _chequePayment1Value;
			}
			set
			{
				_chequePayment1Value = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ChequePayment1Date
		{
			get
			{
				 return _chequePayment1Date;
			}
			set
			{
				_chequePayment1Date = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ChequePayment1Days
		{
			get
			{
				 return _chequePayment1Days;
			}
			set
			{
				_chequePayment1Days = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ChequePayment2Value
		{
			get
			{
				 return _chequePayment2Value;
			}
			set
			{
				_chequePayment2Value = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ChequePayment2Date
		{
			get
			{
				 return _chequePayment2Date;
			}
			set
			{
				_chequePayment2Date = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ChequePayment2Days
		{
			get
			{
				 return _chequePayment2Days;
			}
			set
			{
				_chequePayment2Days = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
