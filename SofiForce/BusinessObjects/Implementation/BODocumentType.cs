/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BODocumentType.
	///It maintains a collection of BOClientDocument,BOOperationRequestDetailDocument objects.
	///</Summary>
	public partial class BODocumentType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _documentTypeId;
		protected string _documentTypeCode;
		protected string _documentTypeNameEn;
		protected string _documentTypeNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected bool? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientDocument> _boClientDocumentCollection;
		List<BOOperationRequestDetailDocument> _boOperationRequestDetailDocumentCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BODocumentType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 documentTypeId
		///</parameters>
		public BODocumentType(Int32 documentTypeId)
		{
			try
			{
				DAODocumentType daoDocumentType = DAODocumentType.SelectOne(documentTypeId);
				_documentTypeId = daoDocumentType.DocumentTypeId;
				_documentTypeCode = daoDocumentType.DocumentTypeCode;
				_documentTypeNameEn = daoDocumentType.DocumentTypeNameEn;
				_documentTypeNameAr = daoDocumentType.DocumentTypeNameAr;
				_isActive = daoDocumentType.IsActive;
				_canEdit = daoDocumentType.CanEdit;
				_canDelete = daoDocumentType.CanDelete;
				_displayOrder = daoDocumentType.DisplayOrder;
				_color = daoDocumentType.Color;
				_icon = daoDocumentType.Icon;
				_cBy = daoDocumentType.CBy;
				_cDate = daoDocumentType.CDate;
				_eBy = daoDocumentType.EBy;
				_eDate = daoDocumentType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAODocumentType
		///</parameters>
		protected internal BODocumentType(DAODocumentType daoDocumentType)
		{
			try
			{
				_documentTypeId = daoDocumentType.DocumentTypeId;
				_documentTypeCode = daoDocumentType.DocumentTypeCode;
				_documentTypeNameEn = daoDocumentType.DocumentTypeNameEn;
				_documentTypeNameAr = daoDocumentType.DocumentTypeNameAr;
				_isActive = daoDocumentType.IsActive;
				_canEdit = daoDocumentType.CanEdit;
				_canDelete = daoDocumentType.CanDelete;
				_displayOrder = daoDocumentType.DisplayOrder;
				_color = daoDocumentType.Color;
				_icon = daoDocumentType.Icon;
				_cBy = daoDocumentType.CBy;
				_cDate = daoDocumentType.CDate;
				_eBy = daoDocumentType.EBy;
				_eDate = daoDocumentType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new DocumentType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAODocumentType daoDocumentType = new DAODocumentType();
			RegisterDataObject(daoDocumentType);
			BeginTransaction("savenewBODocumentType");
			try
			{
				daoDocumentType.DocumentTypeId = _documentTypeId;
				daoDocumentType.DocumentTypeCode = _documentTypeCode;
				daoDocumentType.DocumentTypeNameEn = _documentTypeNameEn;
				daoDocumentType.DocumentTypeNameAr = _documentTypeNameAr;
				daoDocumentType.IsActive = _isActive;
				daoDocumentType.CanEdit = _canEdit;
				daoDocumentType.CanDelete = _canDelete;
				daoDocumentType.DisplayOrder = _displayOrder;
				daoDocumentType.Color = _color;
				daoDocumentType.Icon = _icon;
				daoDocumentType.CBy = _cBy;
				daoDocumentType.CDate = _cDate;
				daoDocumentType.EBy = _eBy;
				daoDocumentType.EDate = _eDate;
				daoDocumentType.Insert();
				CommitTransaction();
				
				_documentTypeId = daoDocumentType.DocumentTypeId;
				_documentTypeCode = daoDocumentType.DocumentTypeCode;
				_documentTypeNameEn = daoDocumentType.DocumentTypeNameEn;
				_documentTypeNameAr = daoDocumentType.DocumentTypeNameAr;
				_isActive = daoDocumentType.IsActive;
				_canEdit = daoDocumentType.CanEdit;
				_canDelete = daoDocumentType.CanDelete;
				_displayOrder = daoDocumentType.DisplayOrder;
				_color = daoDocumentType.Color;
				_icon = daoDocumentType.Icon;
				_cBy = daoDocumentType.CBy;
				_cDate = daoDocumentType.CDate;
				_eBy = daoDocumentType.EBy;
				_eDate = daoDocumentType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBODocumentType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one DocumentType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BODocumentType
		///</parameters>
		public virtual void Update()
		{
			DAODocumentType daoDocumentType = new DAODocumentType();
			RegisterDataObject(daoDocumentType);
			BeginTransaction("updateBODocumentType");
			try
			{
				daoDocumentType.DocumentTypeId = _documentTypeId;
				daoDocumentType.DocumentTypeCode = _documentTypeCode;
				daoDocumentType.DocumentTypeNameEn = _documentTypeNameEn;
				daoDocumentType.DocumentTypeNameAr = _documentTypeNameAr;
				daoDocumentType.IsActive = _isActive;
				daoDocumentType.CanEdit = _canEdit;
				daoDocumentType.CanDelete = _canDelete;
				daoDocumentType.DisplayOrder = _displayOrder;
				daoDocumentType.Color = _color;
				daoDocumentType.Icon = _icon;
				daoDocumentType.CBy = _cBy;
				daoDocumentType.CDate = _cDate;
				daoDocumentType.EBy = _eBy;
				daoDocumentType.EDate = _eDate;
				daoDocumentType.Update();
				CommitTransaction();
				
				_documentTypeId = daoDocumentType.DocumentTypeId;
				_documentTypeCode = daoDocumentType.DocumentTypeCode;
				_documentTypeNameEn = daoDocumentType.DocumentTypeNameEn;
				_documentTypeNameAr = daoDocumentType.DocumentTypeNameAr;
				_isActive = daoDocumentType.IsActive;
				_canEdit = daoDocumentType.CanEdit;
				_canDelete = daoDocumentType.CanDelete;
				_displayOrder = daoDocumentType.DisplayOrder;
				_color = daoDocumentType.Color;
				_icon = daoDocumentType.Icon;
				_cBy = daoDocumentType.CBy;
				_cDate = daoDocumentType.CDate;
				_eBy = daoDocumentType.EBy;
				_eDate = daoDocumentType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBODocumentType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one DocumentType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAODocumentType daoDocumentType = new DAODocumentType();
			RegisterDataObject(daoDocumentType);
			BeginTransaction("deleteBODocumentType");
			try
			{
				daoDocumentType.DocumentTypeId = _documentTypeId;
				daoDocumentType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBODocumentType");
				throw;
			}
		}
		
		///<Summary>
		///DocumentTypeCollection
		///This method returns the collection of BODocumentType objects
		///</Summary>
		///<returns>
		///List[BODocumentType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BODocumentType> DocumentTypeCollection()
		{
			try
			{
				IList<BODocumentType> boDocumentTypeCollection = new List<BODocumentType>();
				IList<DAODocumentType> daoDocumentTypeCollection = DAODocumentType.SelectAll();
			
				foreach(DAODocumentType daoDocumentType in daoDocumentTypeCollection)
					boDocumentTypeCollection.Add(new BODocumentType(daoDocumentType));
			
				return boDocumentTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DocumentTypeCollectionCount
		///This method returns the collection count of BODocumentType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DocumentTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAODocumentType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientDocumentCollection
		///This method returns its collection of BOClientDocument objects
		///</Summary>
		///<returns>
		///IList[BOClientDocument]
		///</returns>
		///<parameters>
		///BODocumentType
		///</parameters>
		public virtual IList<BOClientDocument> ClientDocumentCollection()
		{
			try
			{
				if(_boClientDocumentCollection == null)
					LoadClientDocumentCollection();
				
				return _boClientDocumentCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailDocumentCollection
		///This method returns its collection of BOOperationRequestDetailDocument objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequestDetailDocument]
		///</returns>
		///<parameters>
		///BODocumentType
		///</parameters>
		public virtual IList<BOOperationRequestDetailDocument> OperationRequestDetailDocumentCollection()
		{
			try
			{
				if(_boOperationRequestDetailDocumentCollection == null)
					LoadOperationRequestDetailDocumentCollection();
				
				return _boOperationRequestDetailDocumentCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BODocumentType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAODocumentType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DocumentTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BODocumentType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boDocumentTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAODocumentType> daoDocumentTypeCollection = DAODocumentType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAODocumentType resdaoDocumentType in daoDocumentTypeCollection)
					boDocumentTypeCollection.Add((T)(object)new BODocumentType(resdaoDocumentType));
			
				return boDocumentTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DocumentTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BODocumentType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAODocumentType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientDocumentCollection
		///This method loads the internal collection of BOClientDocument objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientDocumentCollection()
		{
			try
			{
				_boClientDocumentCollection = new List<BOClientDocument>();
				IList<DAOClientDocument> daoClientDocumentCollection = DAOClientDocument.SelectAllByDocumentTypeId(_documentTypeId.Value);
				
				foreach(DAOClientDocument daoClientDocument in daoClientDocumentCollection)
					_boClientDocumentCollection.Add(new BOClientDocument(daoClientDocument));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientDocument
		///This method persists a BOClientDocument object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientDocument
		///</parameters>
		public virtual void AddClientDocument(BOClientDocument boClientDocument)
		{
			DAOClientDocument daoClientDocument = new DAOClientDocument();
			RegisterDataObject(daoClientDocument);
			BeginTransaction("addClientDocument");
			try
			{
				daoClientDocument.ClientDocumentId = boClientDocument.ClientDocumentId;
				daoClientDocument.ClientId = boClientDocument.ClientId;
				daoClientDocument.DocumentPath = boClientDocument.DocumentPath;
				daoClientDocument.UploadDate = boClientDocument.UploadDate;
				daoClientDocument.DocumentExt = boClientDocument.DocumentExt;
				daoClientDocument.DocumentSize = boClientDocument.DocumentSize;
				daoClientDocument.DocumentTypeId = _documentTypeId.Value;
				daoClientDocument.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientDocument = new BOClientDocument(daoClientDocument);
				if(_boClientDocumentCollection != null)
					_boClientDocumentCollection.Add(boClientDocument);
			}
			catch
			{
				RollbackTransaction("addClientDocument");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientDocument
		///This method deletes all BOClientDocument objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientDocument()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientDocument");
			try
			{
				DAOClientDocument.DeleteAllByDocumentTypeId(ConnectionProvider, _documentTypeId.Value);
				CommitTransaction();
				if(_boClientDocumentCollection != null)
				{
					_boClientDocumentCollection.Clear();
					_boClientDocumentCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientDocument");
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestDetailDocumentCollection
		///This method loads the internal collection of BOOperationRequestDetailDocument objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestDetailDocumentCollection()
		{
			try
			{
				_boOperationRequestDetailDocumentCollection = new List<BOOperationRequestDetailDocument>();
				IList<DAOOperationRequestDetailDocument> daoOperationRequestDetailDocumentCollection = DAOOperationRequestDetailDocument.SelectAllByDocumentTypeId(_documentTypeId.Value);
				
				foreach(DAOOperationRequestDetailDocument daoOperationRequestDetailDocument in daoOperationRequestDetailDocumentCollection)
					_boOperationRequestDetailDocumentCollection.Add(new BOOperationRequestDetailDocument(daoOperationRequestDetailDocument));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequestDetailDocument
		///This method persists a BOOperationRequestDetailDocument object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetailDocument
		///</parameters>
		public virtual void AddOperationRequestDetailDocument(BOOperationRequestDetailDocument boOperationRequestDetailDocument)
		{
			DAOOperationRequestDetailDocument daoOperationRequestDetailDocument = new DAOOperationRequestDetailDocument();
			RegisterDataObject(daoOperationRequestDetailDocument);
			BeginTransaction("addOperationRequestDetailDoc120");
			try
			{
				daoOperationRequestDetailDocument.DetailDocumentId = boOperationRequestDetailDocument.DetailDocumentId;
				daoOperationRequestDetailDocument.DetailId = boOperationRequestDetailDocument.DetailId;
				daoOperationRequestDetailDocument.DocumentPath = boOperationRequestDetailDocument.DocumentPath;
				daoOperationRequestDetailDocument.UploadDate = boOperationRequestDetailDocument.UploadDate;
				daoOperationRequestDetailDocument.DocumentExt = boOperationRequestDetailDocument.DocumentExt;
				daoOperationRequestDetailDocument.DocumentSize = boOperationRequestDetailDocument.DocumentSize;
				daoOperationRequestDetailDocument.DocumentTypeId = _documentTypeId.Value;
				daoOperationRequestDetailDocument.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequestDetailDocument = new BOOperationRequestDetailDocument(daoOperationRequestDetailDocument);
				if(_boOperationRequestDetailDocumentCollection != null)
					_boOperationRequestDetailDocumentCollection.Add(boOperationRequestDetailDocument);
			}
			catch
			{
				RollbackTransaction("addOperationRequestDetailDoc120");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequestDetailDocument
		///This method deletes all BOOperationRequestDetailDocument objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequestDetailDocument()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequestDet120");
			try
			{
				DAOOperationRequestDetailDocument.DeleteAllByDocumentTypeId(ConnectionProvider, _documentTypeId.Value);
				CommitTransaction();
				if(_boOperationRequestDetailDocumentCollection != null)
				{
					_boOperationRequestDetailDocumentCollection.Clear();
					_boOperationRequestDetailDocumentCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequestDet120");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? DocumentTypeId
		{
			get
			{
				 return _documentTypeId;
			}
			set
			{
				_documentTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentTypeCode
		{
			get
			{
				 return _documentTypeCode;
			}
			set
			{
				_documentTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentTypeNameEn
		{
			get
			{
				 return _documentTypeNameEn;
			}
			set
			{
				_documentTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentTypeNameAr
		{
			get
			{
				 return _documentTypeNameAr;
			}
			set
			{
				_documentTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
