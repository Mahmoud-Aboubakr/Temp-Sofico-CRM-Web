/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOItem.
	///It maintains a collection of BOAppUserCart,BOAppUserItemInterest,BOAppUserWish,BOClientQuota,BOItemQuota,BOItemSlider,BOItemStore,BOPurchaseOrderDetail,BORepresentativeQuota,BOSalesOrderDetail,BOSalesOrderLinePromotion objects.
	///</Summary>
	public partial class BOItem : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _itemId;
		protected Int32? _vendorId;
		protected Int32? _itemGroupId;
		protected Int32? _acceptDays;
		protected Int32? _unitId;
		protected bool? _isTaxable;
		protected string _itemCode;
		protected string _itemNameEn;
		protected string _itemNameAr;
		protected decimal? _publicPrice;
		protected decimal? _clientPrice;
		protected decimal? _returnPrice;
		protected decimal? _costPrice;
		protected decimal? _discount;
		protected bool? _isLocal;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected bool? _hasPromotion;
		protected bool? _isNewAdded;
		protected bool? _isNewStocked;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _productImage;
		protected Int32? _itemCategoryId;
		protected Int32? _itemSourceId;
		protected string _descriptionEn;
		protected string _descriptionAr;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppUserCart> _boAppUserCartCollection;
		List<BOAppUserItemInterest> _boAppUserItemInterestCollection;
		List<BOAppUserWish> _boAppUserWishCollection;
		List<BOClientQuota> _boClientQuotaCollection;
		List<BOItemQuota> _boItemQuotaCollection;
		List<BOItemSlider> _boItemSliderCollection;
		List<BOItemStore> _boItemStoreCollection;
		List<BOPurchaseOrderDetail> _boPurchaseOrderDetailCollection;
		List<BORepresentativeQuota> _boRepresentativeQuotaCollection;
		List<BOSalesOrderDetail> _boSalesOrderDetailCollection;
		List<BOSalesOrderLinePromotion> _boSalesOrderLinePromotionCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOItem()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 itemId
		///</parameters>
		public BOItem(Int32 itemId)
		{
			try
			{
				DAOItem daoItem = DAOItem.SelectOne(itemId);
				_itemId = daoItem.ItemId;
				_vendorId = daoItem.VendorId;
				_itemGroupId = daoItem.ItemGroupId;
				_acceptDays = daoItem.AcceptDays;
				_unitId = daoItem.UnitId;
				_isTaxable = daoItem.IsTaxable;
				_itemCode = daoItem.ItemCode;
				_itemNameEn = daoItem.ItemNameEn;
				_itemNameAr = daoItem.ItemNameAr;
				_publicPrice = daoItem.PublicPrice;
				_clientPrice = daoItem.ClientPrice;
				_returnPrice = daoItem.ReturnPrice;
				_costPrice = daoItem.CostPrice;
				_discount = daoItem.Discount;
				_isLocal = daoItem.IsLocal;
				_isActive = daoItem.IsActive;
				_displayOrder = daoItem.DisplayOrder;
				_color = daoItem.Color;
				_icon = daoItem.Icon;
				_hasPromotion = daoItem.HasPromotion;
				_isNewAdded = daoItem.IsNewAdded;
				_isNewStocked = daoItem.IsNewStocked;
				_canEdit = daoItem.CanEdit;
				_canDelete = daoItem.CanDelete;
				_cBy = daoItem.CBy;
				_cDate = daoItem.CDate;
				_eBy = daoItem.EBy;
				_eDate = daoItem.EDate;
				_productImage = daoItem.ProductImage;
				_itemCategoryId = daoItem.ItemCategoryId;
				_itemSourceId = daoItem.ItemSourceId;
				_descriptionEn = daoItem.DescriptionEn;
				_descriptionAr = daoItem.DescriptionAr;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOItem
		///</parameters>
		protected internal BOItem(DAOItem daoItem)
		{
			try
			{
				_itemId = daoItem.ItemId;
				_vendorId = daoItem.VendorId;
				_itemGroupId = daoItem.ItemGroupId;
				_acceptDays = daoItem.AcceptDays;
				_unitId = daoItem.UnitId;
				_isTaxable = daoItem.IsTaxable;
				_itemCode = daoItem.ItemCode;
				_itemNameEn = daoItem.ItemNameEn;
				_itemNameAr = daoItem.ItemNameAr;
				_publicPrice = daoItem.PublicPrice;
				_clientPrice = daoItem.ClientPrice;
				_returnPrice = daoItem.ReturnPrice;
				_costPrice = daoItem.CostPrice;
				_discount = daoItem.Discount;
				_isLocal = daoItem.IsLocal;
				_isActive = daoItem.IsActive;
				_displayOrder = daoItem.DisplayOrder;
				_color = daoItem.Color;
				_icon = daoItem.Icon;
				_hasPromotion = daoItem.HasPromotion;
				_isNewAdded = daoItem.IsNewAdded;
				_isNewStocked = daoItem.IsNewStocked;
				_canEdit = daoItem.CanEdit;
				_canDelete = daoItem.CanDelete;
				_cBy = daoItem.CBy;
				_cDate = daoItem.CDate;
				_eBy = daoItem.EBy;
				_eDate = daoItem.EDate;
				_productImage = daoItem.ProductImage;
				_itemCategoryId = daoItem.ItemCategoryId;
				_itemSourceId = daoItem.ItemSourceId;
				_descriptionEn = daoItem.DescriptionEn;
				_descriptionAr = daoItem.DescriptionAr;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Item record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOItem daoItem = new DAOItem();
			RegisterDataObject(daoItem);
			BeginTransaction("savenewBOItem");
			try
			{
				daoItem.VendorId = _vendorId;
				daoItem.ItemGroupId = _itemGroupId;
				daoItem.AcceptDays = _acceptDays;
				daoItem.UnitId = _unitId;
				daoItem.IsTaxable = _isTaxable;
				daoItem.ItemCode = _itemCode;
				daoItem.ItemNameEn = _itemNameEn;
				daoItem.ItemNameAr = _itemNameAr;
				daoItem.PublicPrice = _publicPrice;
				daoItem.ClientPrice = _clientPrice;
				daoItem.ReturnPrice = _returnPrice;
				daoItem.CostPrice = _costPrice;
				daoItem.Discount = _discount;
				daoItem.IsLocal = _isLocal;
				daoItem.IsActive = _isActive;
				daoItem.DisplayOrder = _displayOrder;
				daoItem.Color = _color;
				daoItem.Icon = _icon;
				daoItem.HasPromotion = _hasPromotion;
				daoItem.IsNewAdded = _isNewAdded;
				daoItem.IsNewStocked = _isNewStocked;
				daoItem.CanEdit = _canEdit;
				daoItem.CanDelete = _canDelete;
				daoItem.CBy = _cBy;
				daoItem.CDate = _cDate;
				daoItem.EBy = _eBy;
				daoItem.EDate = _eDate;
				daoItem.ProductImage = _productImage;
				daoItem.ItemCategoryId = _itemCategoryId;
				daoItem.ItemSourceId = _itemSourceId;
				daoItem.DescriptionEn = _descriptionEn;
				daoItem.DescriptionAr = _descriptionAr;
				daoItem.Insert();
				CommitTransaction();
				
				_itemId = daoItem.ItemId;
				_vendorId = daoItem.VendorId;
				_itemGroupId = daoItem.ItemGroupId;
				_acceptDays = daoItem.AcceptDays;
				_unitId = daoItem.UnitId;
				_isTaxable = daoItem.IsTaxable;
				_itemCode = daoItem.ItemCode;
				_itemNameEn = daoItem.ItemNameEn;
				_itemNameAr = daoItem.ItemNameAr;
				_publicPrice = daoItem.PublicPrice;
				_clientPrice = daoItem.ClientPrice;
				_returnPrice = daoItem.ReturnPrice;
				_costPrice = daoItem.CostPrice;
				_discount = daoItem.Discount;
				_isLocal = daoItem.IsLocal;
				_isActive = daoItem.IsActive;
				_displayOrder = daoItem.DisplayOrder;
				_color = daoItem.Color;
				_icon = daoItem.Icon;
				_hasPromotion = daoItem.HasPromotion;
				_isNewAdded = daoItem.IsNewAdded;
				_isNewStocked = daoItem.IsNewStocked;
				_canEdit = daoItem.CanEdit;
				_canDelete = daoItem.CanDelete;
				_cBy = daoItem.CBy;
				_cDate = daoItem.CDate;
				_eBy = daoItem.EBy;
				_eDate = daoItem.EDate;
				_productImage = daoItem.ProductImage;
				_itemCategoryId = daoItem.ItemCategoryId;
				_itemSourceId = daoItem.ItemSourceId;
				_descriptionEn = daoItem.DescriptionEn;
				_descriptionAr = daoItem.DescriptionAr;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOItem");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Item record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual void Update()
		{
			DAOItem daoItem = new DAOItem();
			RegisterDataObject(daoItem);
			BeginTransaction("updateBOItem");
			try
			{
				daoItem.ItemId = _itemId;
				daoItem.VendorId = _vendorId;
				daoItem.ItemGroupId = _itemGroupId;
				daoItem.AcceptDays = _acceptDays;
				daoItem.UnitId = _unitId;
				daoItem.IsTaxable = _isTaxable;
				daoItem.ItemCode = _itemCode;
				daoItem.ItemNameEn = _itemNameEn;
				daoItem.ItemNameAr = _itemNameAr;
				daoItem.PublicPrice = _publicPrice;
				daoItem.ClientPrice = _clientPrice;
				daoItem.ReturnPrice = _returnPrice;
				daoItem.CostPrice = _costPrice;
				daoItem.Discount = _discount;
				daoItem.IsLocal = _isLocal;
				daoItem.IsActive = _isActive;
				daoItem.DisplayOrder = _displayOrder;
				daoItem.Color = _color;
				daoItem.Icon = _icon;
				daoItem.HasPromotion = _hasPromotion;
				daoItem.IsNewAdded = _isNewAdded;
				daoItem.IsNewStocked = _isNewStocked;
				daoItem.CanEdit = _canEdit;
				daoItem.CanDelete = _canDelete;
				daoItem.CBy = _cBy;
				daoItem.CDate = _cDate;
				daoItem.EBy = _eBy;
				daoItem.EDate = _eDate;
				daoItem.ProductImage = _productImage;
				daoItem.ItemCategoryId = _itemCategoryId;
				daoItem.ItemSourceId = _itemSourceId;
				daoItem.DescriptionEn = _descriptionEn;
				daoItem.DescriptionAr = _descriptionAr;
				daoItem.Update();
				CommitTransaction();
				
				_itemId = daoItem.ItemId;
				_vendorId = daoItem.VendorId;
				_itemGroupId = daoItem.ItemGroupId;
				_acceptDays = daoItem.AcceptDays;
				_unitId = daoItem.UnitId;
				_isTaxable = daoItem.IsTaxable;
				_itemCode = daoItem.ItemCode;
				_itemNameEn = daoItem.ItemNameEn;
				_itemNameAr = daoItem.ItemNameAr;
				_publicPrice = daoItem.PublicPrice;
				_clientPrice = daoItem.ClientPrice;
				_returnPrice = daoItem.ReturnPrice;
				_costPrice = daoItem.CostPrice;
				_discount = daoItem.Discount;
				_isLocal = daoItem.IsLocal;
				_isActive = daoItem.IsActive;
				_displayOrder = daoItem.DisplayOrder;
				_color = daoItem.Color;
				_icon = daoItem.Icon;
				_hasPromotion = daoItem.HasPromotion;
				_isNewAdded = daoItem.IsNewAdded;
				_isNewStocked = daoItem.IsNewStocked;
				_canEdit = daoItem.CanEdit;
				_canDelete = daoItem.CanDelete;
				_cBy = daoItem.CBy;
				_cDate = daoItem.CDate;
				_eBy = daoItem.EBy;
				_eDate = daoItem.EDate;
				_productImage = daoItem.ProductImage;
				_itemCategoryId = daoItem.ItemCategoryId;
				_itemSourceId = daoItem.ItemSourceId;
				_descriptionEn = daoItem.DescriptionEn;
				_descriptionAr = daoItem.DescriptionAr;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOItem");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Item record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOItem daoItem = new DAOItem();
			RegisterDataObject(daoItem);
			BeginTransaction("deleteBOItem");
			try
			{
				daoItem.ItemId = _itemId;
				daoItem.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOItem");
				throw;
			}
		}
		
		///<Summary>
		///ItemCollection
		///This method returns the collection of BOItem objects
		///</Summary>
		///<returns>
		///List[BOItem]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOItem> ItemCollection()
		{
			try
			{
				IList<BOItem> boItemCollection = new List<BOItem>();
				IList<DAOItem> daoItemCollection = DAOItem.SelectAll();
			
				foreach(DAOItem daoItem in daoItemCollection)
					boItemCollection.Add(new BOItem(daoItem));
			
				return boItemCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemCollectionCount
		///This method returns the collection count of BOItem objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ItemCollectionCount()
		{
			try
			{
				Int32 objCount = DAOItem.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserCartCollection
		///This method returns its collection of BOAppUserCart objects
		///</Summary>
		///<returns>
		///IList[BOAppUserCart]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOAppUserCart> AppUserCartCollection()
		{
			try
			{
				if(_boAppUserCartCollection == null)
					LoadAppUserCartCollection();
				
				return _boAppUserCartCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserItemInterestCollection
		///This method returns its collection of BOAppUserItemInterest objects
		///</Summary>
		///<returns>
		///IList[BOAppUserItemInterest]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOAppUserItemInterest> AppUserItemInterestCollection()
		{
			try
			{
				if(_boAppUserItemInterestCollection == null)
					LoadAppUserItemInterestCollection();
				
				return _boAppUserItemInterestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserWishCollection
		///This method returns its collection of BOAppUserWish objects
		///</Summary>
		///<returns>
		///IList[BOAppUserWish]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOAppUserWish> AppUserWishCollection()
		{
			try
			{
				if(_boAppUserWishCollection == null)
					LoadAppUserWishCollection();
				
				return _boAppUserWishCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientQuotaCollection
		///This method returns its collection of BOClientQuota objects
		///</Summary>
		///<returns>
		///IList[BOClientQuota]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOClientQuota> ClientQuotaCollection()
		{
			try
			{
				if(_boClientQuotaCollection == null)
					LoadClientQuotaCollection();
				
				return _boClientQuotaCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ItemQuotaCollection
		///This method returns its collection of BOItemQuota objects
		///</Summary>
		///<returns>
		///IList[BOItemQuota]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOItemQuota> ItemQuotaCollection()
		{
			try
			{
				if(_boItemQuotaCollection == null)
					LoadItemQuotaCollection();
				
				return _boItemQuotaCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ItemSliderCollection
		///This method returns its collection of BOItemSlider objects
		///</Summary>
		///<returns>
		///IList[BOItemSlider]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOItemSlider> ItemSliderCollection()
		{
			try
			{
				if(_boItemSliderCollection == null)
					LoadItemSliderCollection();
				
				return _boItemSliderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ItemStoreCollection
		///This method returns its collection of BOItemStore objects
		///</Summary>
		///<returns>
		///IList[BOItemStore]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOItemStore> ItemStoreCollection()
		{
			try
			{
				if(_boItemStoreCollection == null)
					LoadItemStoreCollection();
				
				return _boItemStoreCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailCollection
		///This method returns its collection of BOPurchaseOrderDetail objects
		///</Summary>
		///<returns>
		///IList[BOPurchaseOrderDetail]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOPurchaseOrderDetail> PurchaseOrderDetailCollection()
		{
			try
			{
				if(_boPurchaseOrderDetailCollection == null)
					LoadPurchaseOrderDetailCollection();
				
				return _boPurchaseOrderDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeQuotaCollection
		///This method returns its collection of BORepresentativeQuota objects
		///</Summary>
		///<returns>
		///IList[BORepresentativeQuota]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BORepresentativeQuota> RepresentativeQuotaCollection()
		{
			try
			{
				if(_boRepresentativeQuotaCollection == null)
					LoadRepresentativeQuotaCollection();
				
				return _boRepresentativeQuotaCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderDetailCollection
		///This method returns its collection of BOSalesOrderDetail objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderDetail]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOSalesOrderDetail> SalesOrderDetailCollection()
		{
			try
			{
				if(_boSalesOrderDetailCollection == null)
					LoadSalesOrderDetailCollection();
				
				return _boSalesOrderDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderLinePromotionCollection
		///This method returns its collection of BOSalesOrderLinePromotion objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderLinePromotion]
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual IList<BOSalesOrderLinePromotion> SalesOrderLinePromotionCollection()
		{
			try
			{
				if(_boSalesOrderLinePromotionCollection == null)
					LoadSalesOrderLinePromotionCollection();
				
				return _boSalesOrderLinePromotionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOItem>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOItem.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOItem objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boItemCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOItem> daoItemCollection = DAOItem.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOItem resdaoItem in daoItemCollection)
					boItemCollection.Add((T)(object)new BOItem(resdaoItem));
			
				return boItemCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOItem objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOItem.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserCartCollection
		///This method loads the internal collection of BOAppUserCart objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserCartCollection()
		{
			try
			{
				_boAppUserCartCollection = new List<BOAppUserCart>();
				IList<DAOAppUserCart> daoAppUserCartCollection = DAOAppUserCart.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOAppUserCart daoAppUserCart in daoAppUserCartCollection)
					_boAppUserCartCollection.Add(new BOAppUserCart(daoAppUserCart));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserCart
		///This method persists a BOAppUserCart object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserCart
		///</parameters>
		public virtual void AddAppUserCart(BOAppUserCart boAppUserCart)
		{
			DAOAppUserCart daoAppUserCart = new DAOAppUserCart();
			RegisterDataObject(daoAppUserCart);
			BeginTransaction("addAppUserCart");
			try
			{
				daoAppUserCart.CartId = boAppUserCart.CartId;
				daoAppUserCart.UserId = boAppUserCart.UserId;
				daoAppUserCart.Quantity = boAppUserCart.Quantity;
				daoAppUserCart.CreateDate = boAppUserCart.CreateDate;
				daoAppUserCart.ItemId = _itemId.Value;
				daoAppUserCart.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserCart = new BOAppUserCart(daoAppUserCart);
				if(_boAppUserCartCollection != null)
					_boAppUserCartCollection.Add(boAppUserCart);
			}
			catch
			{
				RollbackTransaction("addAppUserCart");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserCart
		///This method deletes all BOAppUserCart objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserCart()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserCart");
			try
			{
				DAOAppUserCart.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boAppUserCartCollection != null)
				{
					_boAppUserCartCollection.Clear();
					_boAppUserCartCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserCart");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserItemInterestCollection
		///This method loads the internal collection of BOAppUserItemInterest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserItemInterestCollection()
		{
			try
			{
				_boAppUserItemInterestCollection = new List<BOAppUserItemInterest>();
				IList<DAOAppUserItemInterest> daoAppUserItemInterestCollection = DAOAppUserItemInterest.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOAppUserItemInterest daoAppUserItemInterest in daoAppUserItemInterestCollection)
					_boAppUserItemInterestCollection.Add(new BOAppUserItemInterest(daoAppUserItemInterest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserItemInterest
		///This method persists a BOAppUserItemInterest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserItemInterest
		///</parameters>
		public virtual void AddAppUserItemInterest(BOAppUserItemInterest boAppUserItemInterest)
		{
			DAOAppUserItemInterest daoAppUserItemInterest = new DAOAppUserItemInterest();
			RegisterDataObject(daoAppUserItemInterest);
			BeginTransaction("addAppUserItemInterest");
			try
			{
				daoAppUserItemInterest.Id = boAppUserItemInterest.Id;
				daoAppUserItemInterest.UserId = boAppUserItemInterest.UserId;
				daoAppUserItemInterest.ItemId = _itemId.Value;
				daoAppUserItemInterest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserItemInterest = new BOAppUserItemInterest(daoAppUserItemInterest);
				if(_boAppUserItemInterestCollection != null)
					_boAppUserItemInterestCollection.Add(boAppUserItemInterest);
			}
			catch
			{
				RollbackTransaction("addAppUserItemInterest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserItemInterest
		///This method deletes all BOAppUserItemInterest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserItemInterest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserItemInterest");
			try
			{
				DAOAppUserItemInterest.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boAppUserItemInterestCollection != null)
				{
					_boAppUserItemInterestCollection.Clear();
					_boAppUserItemInterestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserItemInterest");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserWishCollection
		///This method loads the internal collection of BOAppUserWish objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserWishCollection()
		{
			try
			{
				_boAppUserWishCollection = new List<BOAppUserWish>();
				IList<DAOAppUserWish> daoAppUserWishCollection = DAOAppUserWish.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOAppUserWish daoAppUserWish in daoAppUserWishCollection)
					_boAppUserWishCollection.Add(new BOAppUserWish(daoAppUserWish));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserWish
		///This method persists a BOAppUserWish object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserWish
		///</parameters>
		public virtual void AddAppUserWish(BOAppUserWish boAppUserWish)
		{
			DAOAppUserWish daoAppUserWish = new DAOAppUserWish();
			RegisterDataObject(daoAppUserWish);
			BeginTransaction("addAppUserWish");
			try
			{
				daoAppUserWish.WishId = boAppUserWish.WishId;
				daoAppUserWish.UserId = boAppUserWish.UserId;
				daoAppUserWish.WishDate = boAppUserWish.WishDate;
				daoAppUserWish.WishTime = boAppUserWish.WishTime;
				daoAppUserWish.ItemId = _itemId.Value;
				daoAppUserWish.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserWish = new BOAppUserWish(daoAppUserWish);
				if(_boAppUserWishCollection != null)
					_boAppUserWishCollection.Add(boAppUserWish);
			}
			catch
			{
				RollbackTransaction("addAppUserWish");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserWish
		///This method deletes all BOAppUserWish objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserWish()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserWish");
			try
			{
				DAOAppUserWish.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boAppUserWishCollection != null)
				{
					_boAppUserWishCollection.Clear();
					_boAppUserWishCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserWish");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientQuotaCollection
		///This method loads the internal collection of BOClientQuota objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientQuotaCollection()
		{
			try
			{
				_boClientQuotaCollection = new List<BOClientQuota>();
				IList<DAOClientQuota> daoClientQuotaCollection = DAOClientQuota.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOClientQuota daoClientQuota in daoClientQuotaCollection)
					_boClientQuotaCollection.Add(new BOClientQuota(daoClientQuota));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientQuota
		///This method persists a BOClientQuota object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientQuota
		///</parameters>
		public virtual void AddClientQuota(BOClientQuota boClientQuota)
		{
			DAOClientQuota daoClientQuota = new DAOClientQuota();
			RegisterDataObject(daoClientQuota);
			BeginTransaction("addClientQuota");
			try
			{
				daoClientQuota.QuotaId = boClientQuota.QuotaId;
				daoClientQuota.ClientId = boClientQuota.ClientId;
				daoClientQuota.Quantity = boClientQuota.Quantity;
				daoClientQuota.Remain = boClientQuota.Remain;
				daoClientQuota.FromDate = boClientQuota.FromDate;
				daoClientQuota.ToDate = boClientQuota.ToDate;
				daoClientQuota.ItemId = _itemId.Value;
				daoClientQuota.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientQuota = new BOClientQuota(daoClientQuota);
				if(_boClientQuotaCollection != null)
					_boClientQuotaCollection.Add(boClientQuota);
			}
			catch
			{
				RollbackTransaction("addClientQuota");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientQuota
		///This method deletes all BOClientQuota objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientQuota()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientQuota");
			try
			{
				DAOClientQuota.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boClientQuotaCollection != null)
				{
					_boClientQuotaCollection.Clear();
					_boClientQuotaCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientQuota");
				throw;
			}
		}
		
		///<Summary>
		///LoadItemQuotaCollection
		///This method loads the internal collection of BOItemQuota objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadItemQuotaCollection()
		{
			try
			{
				_boItemQuotaCollection = new List<BOItemQuota>();
				IList<DAOItemQuota> daoItemQuotaCollection = DAOItemQuota.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOItemQuota daoItemQuota in daoItemQuotaCollection)
					_boItemQuotaCollection.Add(new BOItemQuota(daoItemQuota));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddItemQuota
		///This method persists a BOItemQuota object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOItemQuota
		///</parameters>
		public virtual void AddItemQuota(BOItemQuota boItemQuota)
		{
			DAOItemQuota daoItemQuota = new DAOItemQuota();
			RegisterDataObject(daoItemQuota);
			BeginTransaction("addItemQuota");
			try
			{
				daoItemQuota.QuotaId = boItemQuota.QuotaId;
				daoItemQuota.Quantity = boItemQuota.Quantity;
				daoItemQuota.FromDate = boItemQuota.FromDate;
				daoItemQuota.ToDate = boItemQuota.ToDate;
				daoItemQuota.ItemId = _itemId.Value;
				daoItemQuota.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boItemQuota = new BOItemQuota(daoItemQuota);
				if(_boItemQuotaCollection != null)
					_boItemQuotaCollection.Add(boItemQuota);
			}
			catch
			{
				RollbackTransaction("addItemQuota");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllItemQuota
		///This method deletes all BOItemQuota objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllItemQuota()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllItemQuota");
			try
			{
				DAOItemQuota.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boItemQuotaCollection != null)
				{
					_boItemQuotaCollection.Clear();
					_boItemQuotaCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllItemQuota");
				throw;
			}
		}
		
		///<Summary>
		///LoadItemSliderCollection
		///This method loads the internal collection of BOItemSlider objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadItemSliderCollection()
		{
			try
			{
				_boItemSliderCollection = new List<BOItemSlider>();
				IList<DAOItemSlider> daoItemSliderCollection = DAOItemSlider.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOItemSlider daoItemSlider in daoItemSliderCollection)
					_boItemSliderCollection.Add(new BOItemSlider(daoItemSlider));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddItemSlider
		///This method persists a BOItemSlider object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOItemSlider
		///</parameters>
		public virtual void AddItemSlider(BOItemSlider boItemSlider)
		{
			DAOItemSlider daoItemSlider = new DAOItemSlider();
			RegisterDataObject(daoItemSlider);
			BeginTransaction("addItemSlider");
			try
			{
				daoItemSlider.SliderId = boItemSlider.SliderId;
				daoItemSlider.SlideImage = boItemSlider.SlideImage;
				daoItemSlider.CBy = boItemSlider.CBy;
				daoItemSlider.CDate = boItemSlider.CDate;
				daoItemSlider.EBy = boItemSlider.EBy;
				daoItemSlider.EDate = boItemSlider.EDate;
				daoItemSlider.ItemId = _itemId.Value;
				daoItemSlider.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boItemSlider = new BOItemSlider(daoItemSlider);
				if(_boItemSliderCollection != null)
					_boItemSliderCollection.Add(boItemSlider);
			}
			catch
			{
				RollbackTransaction("addItemSlider");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllItemSlider
		///This method deletes all BOItemSlider objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllItemSlider()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllItemSlider");
			try
			{
				DAOItemSlider.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boItemSliderCollection != null)
				{
					_boItemSliderCollection.Clear();
					_boItemSliderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllItemSlider");
				throw;
			}
		}
		
		///<Summary>
		///LoadItemStoreCollection
		///This method loads the internal collection of BOItemStore objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadItemStoreCollection()
		{
			try
			{
				_boItemStoreCollection = new List<BOItemStore>();
				IList<DAOItemStore> daoItemStoreCollection = DAOItemStore.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOItemStore daoItemStore in daoItemStoreCollection)
					_boItemStoreCollection.Add(new BOItemStore(daoItemStore));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddItemStore
		///This method persists a BOItemStore object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOItemStore
		///</parameters>
		public virtual void AddItemStore(BOItemStore boItemStore)
		{
			DAOItemStore daoItemStore = new DAOItemStore();
			RegisterDataObject(daoItemStore);
			BeginTransaction("addItemStore");
			try
			{
				daoItemStore.ItemStoreId = boItemStore.ItemStoreId;
				daoItemStore.BranchId = boItemStore.BranchId;
				daoItemStore.StoreId = boItemStore.StoreId;
				daoItemStore.Quantity = boItemStore.Quantity;
				daoItemStore.OnHand = boItemStore.OnHand;
				daoItemStore.ExpireDate = boItemStore.ExpireDate;
				daoItemStore.BatchNo = boItemStore.BatchNo;
				daoItemStore.IsActive = boItemStore.IsActive;
				daoItemStore.CBy = boItemStore.CBy;
				daoItemStore.CDate = boItemStore.CDate;
				daoItemStore.EBy = boItemStore.EBy;
				daoItemStore.EDate = boItemStore.EDate;
				daoItemStore.ItemId = _itemId.Value;
				daoItemStore.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boItemStore = new BOItemStore(daoItemStore);
				if(_boItemStoreCollection != null)
					_boItemStoreCollection.Add(boItemStore);
			}
			catch
			{
				RollbackTransaction("addItemStore");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllItemStore
		///This method deletes all BOItemStore objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllItemStore()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllItemStore");
			try
			{
				DAOItemStore.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boItemStoreCollection != null)
				{
					_boItemStoreCollection.Clear();
					_boItemStoreCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllItemStore");
				throw;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderDetailCollection
		///This method loads the internal collection of BOPurchaseOrderDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderDetailCollection()
		{
			try
			{
				_boPurchaseOrderDetailCollection = new List<BOPurchaseOrderDetail>();
				IList<DAOPurchaseOrderDetail> daoPurchaseOrderDetailCollection = DAOPurchaseOrderDetail.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOPurchaseOrderDetail daoPurchaseOrderDetail in daoPurchaseOrderDetailCollection)
					_boPurchaseOrderDetailCollection.Add(new BOPurchaseOrderDetail(daoPurchaseOrderDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPurchaseOrderDetail
		///This method persists a BOPurchaseOrderDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetail
		///</parameters>
		public virtual void AddPurchaseOrderDetail(BOPurchaseOrderDetail boPurchaseOrderDetail)
		{
			DAOPurchaseOrderDetail daoPurchaseOrderDetail = new DAOPurchaseOrderDetail();
			RegisterDataObject(daoPurchaseOrderDetail);
			BeginTransaction("addPurchaseOrderDetail");
			try
			{
				daoPurchaseOrderDetail.DetailId = boPurchaseOrderDetail.DetailId;
				daoPurchaseOrderDetail.PurchaseId = boPurchaseOrderDetail.PurchaseId;
				daoPurchaseOrderDetail.Quanity = boPurchaseOrderDetail.Quanity;
				daoPurchaseOrderDetail.PurchasePrice = boPurchaseOrderDetail.PurchasePrice;
				daoPurchaseOrderDetail.Currency = boPurchaseOrderDetail.Currency;
				daoPurchaseOrderDetail.ExchangeRate = boPurchaseOrderDetail.ExchangeRate;
				daoPurchaseOrderDetail.PurchasePriceLocal = boPurchaseOrderDetail.PurchasePriceLocal;
				daoPurchaseOrderDetail.UnitId = boPurchaseOrderDetail.UnitId;
				daoPurchaseOrderDetail.TaxValue = boPurchaseOrderDetail.TaxValue;
				daoPurchaseOrderDetail.DiscountValue = boPurchaseOrderDetail.DiscountValue;
				daoPurchaseOrderDetail.BatchNo = boPurchaseOrderDetail.BatchNo;
				daoPurchaseOrderDetail.ExpireDate = boPurchaseOrderDetail.ExpireDate;
				daoPurchaseOrderDetail.StatusReceipt = boPurchaseOrderDetail.StatusReceipt;
				daoPurchaseOrderDetail.ItemStoreId = boPurchaseOrderDetail.ItemStoreId;
				daoPurchaseOrderDetail.RecId = boPurchaseOrderDetail.RecId;
				daoPurchaseOrderDetail.ItemId = _itemId.Value;
				daoPurchaseOrderDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrderDetail = new BOPurchaseOrderDetail(daoPurchaseOrderDetail);
				if(_boPurchaseOrderDetailCollection != null)
					_boPurchaseOrderDetailCollection.Add(boPurchaseOrderDetail);
			}
			catch
			{
				RollbackTransaction("addPurchaseOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrderDetail
		///This method deletes all BOPurchaseOrderDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrderDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPurchaseOrderDetail");
			try
			{
				DAOPurchaseOrderDetail.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boPurchaseOrderDetailCollection != null)
				{
					_boPurchaseOrderDetailCollection.Clear();
					_boPurchaseOrderDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPurchaseOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeQuotaCollection
		///This method loads the internal collection of BORepresentativeQuota objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeQuotaCollection()
		{
			try
			{
				_boRepresentativeQuotaCollection = new List<BORepresentativeQuota>();
				IList<DAORepresentativeQuota> daoRepresentativeQuotaCollection = DAORepresentativeQuota.SelectAllByItemId(_itemId.Value);
				
				foreach(DAORepresentativeQuota daoRepresentativeQuota in daoRepresentativeQuotaCollection)
					_boRepresentativeQuotaCollection.Add(new BORepresentativeQuota(daoRepresentativeQuota));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentativeQuota
		///This method persists a BORepresentativeQuota object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeQuota
		///</parameters>
		public virtual void AddRepresentativeQuota(BORepresentativeQuota boRepresentativeQuota)
		{
			DAORepresentativeQuota daoRepresentativeQuota = new DAORepresentativeQuota();
			RegisterDataObject(daoRepresentativeQuota);
			BeginTransaction("addRepresentativeQuota");
			try
			{
				daoRepresentativeQuota.QuotaId = boRepresentativeQuota.QuotaId;
				daoRepresentativeQuota.RepresentativeId = boRepresentativeQuota.RepresentativeId;
				daoRepresentativeQuota.Quantity = boRepresentativeQuota.Quantity;
				daoRepresentativeQuota.CBy = boRepresentativeQuota.CBy;
				daoRepresentativeQuota.EBy = boRepresentativeQuota.EBy;
				daoRepresentativeQuota.CDate = boRepresentativeQuota.CDate;
				daoRepresentativeQuota.EDate = boRepresentativeQuota.EDate;
				daoRepresentativeQuota.ItemId = _itemId.Value;
				daoRepresentativeQuota.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentativeQuota = new BORepresentativeQuota(daoRepresentativeQuota);
				if(_boRepresentativeQuotaCollection != null)
					_boRepresentativeQuotaCollection.Add(boRepresentativeQuota);
			}
			catch
			{
				RollbackTransaction("addRepresentativeQuota");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentativeQuota
		///This method deletes all BORepresentativeQuota objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentativeQuota()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentativeQuota");
			try
			{
				DAORepresentativeQuota.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boRepresentativeQuotaCollection != null)
				{
					_boRepresentativeQuotaCollection.Clear();
					_boRepresentativeQuotaCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentativeQuota");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderDetailCollection
		///This method loads the internal collection of BOSalesOrderDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderDetailCollection()
		{
			try
			{
				_boSalesOrderDetailCollection = new List<BOSalesOrderDetail>();
				IList<DAOSalesOrderDetail> daoSalesOrderDetailCollection = DAOSalesOrderDetail.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOSalesOrderDetail daoSalesOrderDetail in daoSalesOrderDetailCollection)
					_boSalesOrderDetailCollection.Add(new BOSalesOrderDetail(daoSalesOrderDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderDetail
		///This method persists a BOSalesOrderDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderDetail
		///</parameters>
		public virtual void AddSalesOrderDetail(BOSalesOrderDetail boSalesOrderDetail)
		{
			DAOSalesOrderDetail daoSalesOrderDetail = new DAOSalesOrderDetail();
			RegisterDataObject(daoSalesOrderDetail);
			BeginTransaction("addSalesOrderDetail");
			try
			{
				daoSalesOrderDetail.DetailId = boSalesOrderDetail.DetailId;
				daoSalesOrderDetail.SalesId = boSalesOrderDetail.SalesId;
				daoSalesOrderDetail.PublicPrice = boSalesOrderDetail.PublicPrice;
				daoSalesOrderDetail.ClientPrice = boSalesOrderDetail.ClientPrice;
				daoSalesOrderDetail.Quantity = boSalesOrderDetail.Quantity;
				daoSalesOrderDetail.LineValue = boSalesOrderDetail.LineValue;
				daoSalesOrderDetail.Discount = boSalesOrderDetail.Discount;
				daoSalesOrderDetail.CustomDiscount = boSalesOrderDetail.CustomDiscount;
				daoSalesOrderDetail.TaxValue = boSalesOrderDetail.TaxValue;
				daoSalesOrderDetail.IsBouns = boSalesOrderDetail.IsBouns;
				daoSalesOrderDetail.PromotionCode = boSalesOrderDetail.PromotionCode;
				daoSalesOrderDetail.ItemStoreId = boSalesOrderDetail.ItemStoreId;
				daoSalesOrderDetail.Batch = boSalesOrderDetail.Batch;
				daoSalesOrderDetail.Expiration = boSalesOrderDetail.Expiration;
				daoSalesOrderDetail.RecId = boSalesOrderDetail.RecId;
				daoSalesOrderDetail.UnitId = boSalesOrderDetail.UnitId;
				daoSalesOrderDetail.PromotionId = boSalesOrderDetail.PromotionId;
				daoSalesOrderDetail.ReturnReasonId = boSalesOrderDetail.ReturnReasonId;
				daoSalesOrderDetail.ReturnQuantity = boSalesOrderDetail.ReturnQuantity;
				daoSalesOrderDetail.TotalReturn = boSalesOrderDetail.TotalReturn;
				daoSalesOrderDetail.ItemId = _itemId.Value;
				daoSalesOrderDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderDetail = new BOSalesOrderDetail(daoSalesOrderDetail);
				if(_boSalesOrderDetailCollection != null)
					_boSalesOrderDetailCollection.Add(boSalesOrderDetail);
			}
			catch
			{
				RollbackTransaction("addSalesOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderDetail
		///This method deletes all BOSalesOrderDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderDetail");
			try
			{
				DAOSalesOrderDetail.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boSalesOrderDetailCollection != null)
				{
					_boSalesOrderDetailCollection.Clear();
					_boSalesOrderDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderLinePromotionCollection
		///This method loads the internal collection of BOSalesOrderLinePromotion objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderLinePromotionCollection()
		{
			try
			{
				_boSalesOrderLinePromotionCollection = new List<BOSalesOrderLinePromotion>();
				IList<DAOSalesOrderLinePromotion> daoSalesOrderLinePromotionCollection = DAOSalesOrderLinePromotion.SelectAllByItemId(_itemId.Value);
				
				foreach(DAOSalesOrderLinePromotion daoSalesOrderLinePromotion in daoSalesOrderLinePromotionCollection)
					_boSalesOrderLinePromotionCollection.Add(new BOSalesOrderLinePromotion(daoSalesOrderLinePromotion));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderLinePromotion
		///This method persists a BOSalesOrderLinePromotion object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderLinePromotion
		///</parameters>
		public virtual void AddSalesOrderLinePromotion(BOSalesOrderLinePromotion boSalesOrderLinePromotion)
		{
			DAOSalesOrderLinePromotion daoSalesOrderLinePromotion = new DAOSalesOrderLinePromotion();
			RegisterDataObject(daoSalesOrderLinePromotion);
			BeginTransaction("addSalesOrderLinePromotion");
			try
			{
				daoSalesOrderLinePromotion.LineId = boSalesOrderLinePromotion.LineId;
				daoSalesOrderLinePromotion.SalesId = boSalesOrderLinePromotion.SalesId;
				daoSalesOrderLinePromotion.PromotionId = boSalesOrderLinePromotion.PromotionId;
				daoSalesOrderLinePromotion.Outcome = boSalesOrderLinePromotion.Outcome;
				daoSalesOrderLinePromotion.ItemStoreId = boSalesOrderLinePromotion.ItemStoreId;
				daoSalesOrderLinePromotion.OutcomeType = boSalesOrderLinePromotion.OutcomeType;
				daoSalesOrderLinePromotion.ItemId = _itemId.Value;
				daoSalesOrderLinePromotion.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderLinePromotion = new BOSalesOrderLinePromotion(daoSalesOrderLinePromotion);
				if(_boSalesOrderLinePromotionCollection != null)
					_boSalesOrderLinePromotionCollection.Add(boSalesOrderLinePromotion);
			}
			catch
			{
				RollbackTransaction("addSalesOrderLinePromotion");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderLinePromotion
		///This method deletes all BOSalesOrderLinePromotion objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderLinePromotion()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderLinePromotion");
			try
			{
				DAOSalesOrderLinePromotion.DeleteAllByItemId(ConnectionProvider, _itemId.Value);
				CommitTransaction();
				if(_boSalesOrderLinePromotionCollection != null)
				{
					_boSalesOrderLinePromotionCollection.Clear();
					_boSalesOrderLinePromotionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderLinePromotion");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ItemId
		{
			get
			{
				 return _itemId;
			}
			set
			{
				_itemId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VendorId
		{
			get
			{
				 return _vendorId;
			}
			set
			{
				_vendorId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ItemGroupId
		{
			get
			{
				 return _itemGroupId;
			}
			set
			{
				_itemGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AcceptDays
		{
			get
			{
				 return _acceptDays;
			}
			set
			{
				_acceptDays = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UnitId
		{
			get
			{
				 return _unitId;
			}
			set
			{
				_unitId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsTaxable
		{
			get
			{
				 return _isTaxable;
			}
			set
			{
				_isTaxable = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemCode
		{
			get
			{
				 return _itemCode;
			}
			set
			{
				_itemCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemNameEn
		{
			get
			{
				 return _itemNameEn;
			}
			set
			{
				_itemNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemNameAr
		{
			get
			{
				 return _itemNameAr;
			}
			set
			{
				_itemNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? PublicPrice
		{
			get
			{
				 return _publicPrice;
			}
			set
			{
				_publicPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ClientPrice
		{
			get
			{
				 return _clientPrice;
			}
			set
			{
				_clientPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ReturnPrice
		{
			get
			{
				 return _returnPrice;
			}
			set
			{
				_returnPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CostPrice
		{
			get
			{
				 return _costPrice;
			}
			set
			{
				_costPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Discount
		{
			get
			{
				 return _discount;
			}
			set
			{
				_discount = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsLocal
		{
			get
			{
				 return _isLocal;
			}
			set
			{
				_isLocal = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? HasPromotion
		{
			get
			{
				 return _hasPromotion;
			}
			set
			{
				_hasPromotion = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsNewAdded
		{
			get
			{
				 return _isNewAdded;
			}
			set
			{
				_isNewAdded = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsNewStocked
		{
			get
			{
				 return _isNewStocked;
			}
			set
			{
				_isNewStocked = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductImage
		{
			get
			{
				 return _productImage;
			}
			set
			{
				_productImage = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ItemCategoryId
		{
			get
			{
				 return _itemCategoryId;
			}
			set
			{
				_itemCategoryId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ItemSourceId
		{
			get
			{
				 return _itemSourceId;
			}
			set
			{
				_itemSourceId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DescriptionEn
		{
			get
			{
				 return _descriptionEn;
			}
			set
			{
				_descriptionEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string DescriptionAr
		{
			get
			{
				 return _descriptionAr;
			}
			set
			{
				_descriptionAr = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
