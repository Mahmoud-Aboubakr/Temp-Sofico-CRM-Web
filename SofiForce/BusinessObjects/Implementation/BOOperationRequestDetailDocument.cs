/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOperationRequestDetailDocument.
	///</Summary>
	public partial class BOOperationRequestDetailDocument : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _detailDocumentId;
		protected Int64? _detailId;
		protected Int32? _documentTypeId;
		protected string _documentPath;
		protected DateTime? _uploadDate;
		protected string _documentExt;
		protected Int32? _documentSize;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOperationRequestDetailDocument()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 detailDocumentId
		///</parameters>
		public BOOperationRequestDetailDocument(Int64 detailDocumentId)
		{
			try
			{
				DAOOperationRequestDetailDocument daoOperationRequestDetailDocument = DAOOperationRequestDetailDocument.SelectOne(detailDocumentId);
				_detailDocumentId = daoOperationRequestDetailDocument.DetailDocumentId;
				_detailId = daoOperationRequestDetailDocument.DetailId;
				_documentTypeId = daoOperationRequestDetailDocument.DocumentTypeId;
				_documentPath = daoOperationRequestDetailDocument.DocumentPath;
				_uploadDate = daoOperationRequestDetailDocument.UploadDate;
				_documentExt = daoOperationRequestDetailDocument.DocumentExt;
				_documentSize = daoOperationRequestDetailDocument.DocumentSize;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOperationRequestDetailDocument
		///</parameters>
		protected internal BOOperationRequestDetailDocument(DAOOperationRequestDetailDocument daoOperationRequestDetailDocument)
		{
			try
			{
				_detailDocumentId = daoOperationRequestDetailDocument.DetailDocumentId;
				_detailId = daoOperationRequestDetailDocument.DetailId;
				_documentTypeId = daoOperationRequestDetailDocument.DocumentTypeId;
				_documentPath = daoOperationRequestDetailDocument.DocumentPath;
				_uploadDate = daoOperationRequestDetailDocument.UploadDate;
				_documentExt = daoOperationRequestDetailDocument.DocumentExt;
				_documentSize = daoOperationRequestDetailDocument.DocumentSize;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OperationRequestDetailDocument record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOOperationRequestDetailDocument daoOperationRequestDetailDocument = new DAOOperationRequestDetailDocument();
			RegisterDataObject(daoOperationRequestDetailDocument);
			BeginTransaction("savenewBOOperationRequestDet3026");
			try
			{
				daoOperationRequestDetailDocument.DetailId = _detailId;
				daoOperationRequestDetailDocument.DocumentTypeId = _documentTypeId;
				daoOperationRequestDetailDocument.DocumentPath = _documentPath;
				daoOperationRequestDetailDocument.UploadDate = _uploadDate;
				daoOperationRequestDetailDocument.DocumentExt = _documentExt;
				daoOperationRequestDetailDocument.DocumentSize = _documentSize;
				daoOperationRequestDetailDocument.Insert();
				CommitTransaction();
				
				_detailDocumentId = daoOperationRequestDetailDocument.DetailDocumentId;
				_detailId = daoOperationRequestDetailDocument.DetailId;
				_documentTypeId = daoOperationRequestDetailDocument.DocumentTypeId;
				_documentPath = daoOperationRequestDetailDocument.DocumentPath;
				_uploadDate = daoOperationRequestDetailDocument.UploadDate;
				_documentExt = daoOperationRequestDetailDocument.DocumentExt;
				_documentSize = daoOperationRequestDetailDocument.DocumentSize;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOOperationRequestDet3026");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one OperationRequestDetailDocument record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetailDocument
		///</parameters>
		public virtual void Update()
		{
			DAOOperationRequestDetailDocument daoOperationRequestDetailDocument = new DAOOperationRequestDetailDocument();
			RegisterDataObject(daoOperationRequestDetailDocument);
			BeginTransaction("updateBOOperationRequestDeta3026");
			try
			{
				daoOperationRequestDetailDocument.DetailDocumentId = _detailDocumentId;
				daoOperationRequestDetailDocument.DetailId = _detailId;
				daoOperationRequestDetailDocument.DocumentTypeId = _documentTypeId;
				daoOperationRequestDetailDocument.DocumentPath = _documentPath;
				daoOperationRequestDetailDocument.UploadDate = _uploadDate;
				daoOperationRequestDetailDocument.DocumentExt = _documentExt;
				daoOperationRequestDetailDocument.DocumentSize = _documentSize;
				daoOperationRequestDetailDocument.Update();
				CommitTransaction();
				
				_detailDocumentId = daoOperationRequestDetailDocument.DetailDocumentId;
				_detailId = daoOperationRequestDetailDocument.DetailId;
				_documentTypeId = daoOperationRequestDetailDocument.DocumentTypeId;
				_documentPath = daoOperationRequestDetailDocument.DocumentPath;
				_uploadDate = daoOperationRequestDetailDocument.UploadDate;
				_documentExt = daoOperationRequestDetailDocument.DocumentExt;
				_documentSize = daoOperationRequestDetailDocument.DocumentSize;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOOperationRequestDeta3026");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OperationRequestDetailDocument record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOOperationRequestDetailDocument daoOperationRequestDetailDocument = new DAOOperationRequestDetailDocument();
			RegisterDataObject(daoOperationRequestDetailDocument);
			BeginTransaction("deleteBOOperationRequestDeta3026");
			try
			{
				daoOperationRequestDetailDocument.DetailDocumentId = _detailDocumentId;
				daoOperationRequestDetailDocument.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOOperationRequestDeta3026");
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailDocumentCollection
		///This method returns the collection of BOOperationRequestDetailDocument objects
		///</Summary>
		///<returns>
		///List[BOOperationRequestDetailDocument]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOOperationRequestDetailDocument> OperationRequestDetailDocumentCollection()
		{
			try
			{
				IList<BOOperationRequestDetailDocument> boOperationRequestDetailDocumentCollection = new List<BOOperationRequestDetailDocument>();
				IList<DAOOperationRequestDetailDocument> daoOperationRequestDetailDocumentCollection = DAOOperationRequestDetailDocument.SelectAll();
			
				foreach(DAOOperationRequestDetailDocument daoOperationRequestDetailDocument in daoOperationRequestDetailDocumentCollection)
					boOperationRequestDetailDocumentCollection.Add(new BOOperationRequestDetailDocument(daoOperationRequestDetailDocument));
			
				return boOperationRequestDetailDocumentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationRequestDetailDocumentCollectionCount
		///This method returns the collection count of BOOperationRequestDetailDocument objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OperationRequestDetailDocumentCollectionCount()
		{
			try
			{
				Int32 objCount = DAOOperationRequestDetailDocument.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOOperationRequestDetailDocument>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOOperationRequestDetailDocument.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationRequestDetailDocumentCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOOperationRequestDetailDocument objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOperationRequestDetailDocumentCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOOperationRequestDetailDocument> daoOperationRequestDetailDocumentCollection = DAOOperationRequestDetailDocument.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOOperationRequestDetailDocument resdaoOperationRequestDetailDocument in daoOperationRequestDetailDocumentCollection)
					boOperationRequestDetailDocumentCollection.Add((T)(object)new BOOperationRequestDetailDocument(resdaoOperationRequestDetailDocument));
			
				return boOperationRequestDetailDocumentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OperationRequestDetailDocumentCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOOperationRequestDetailDocument objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOOperationRequestDetailDocument.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? DetailDocumentId
		{
			get
			{
				 return _detailDocumentId;
			}
			set
			{
				_detailDocumentId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? DetailId
		{
			get
			{
				 return _detailId;
			}
			set
			{
				_detailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DocumentTypeId
		{
			get
			{
				 return _documentTypeId;
			}
			set
			{
				_documentTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentPath
		{
			get
			{
				 return _documentPath;
			}
			set
			{
				_documentPath = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UploadDate
		{
			get
			{
				 return _uploadDate;
			}
			set
			{
				_uploadDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string DocumentExt
		{
			get
			{
				 return _documentExt;
			}
			set
			{
				_documentExt = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DocumentSize
		{
			get
			{
				 return _documentSize;
			}
			set
			{
				_documentSize = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
