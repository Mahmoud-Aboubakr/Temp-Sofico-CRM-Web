/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPurchaseOrder.
	///It maintains a collection of BOPurchaseOrderDetail objects.
	///</Summary>
	public partial class BOPurchaseOrder : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _purchaseId;
		protected string _purchaseCode;
		protected Int32? _branchId;
		protected Int32? _storeId;
		protected Int32? _vendorId;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		protected decimal? _invoiceAmount;
		protected string _currency;
		protected decimal? _exchangeRate;
		protected decimal? _invoiceAmountLocal;
		protected decimal? _sumTax;
		protected decimal? _sumExpense;
		protected decimal? _openValue;
		protected Int64? _recId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOPurchaseOrderDetail> _boPurchaseOrderDetailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPurchaseOrder()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 purchaseId
		///</parameters>
		public BOPurchaseOrder(Int32 purchaseId)
		{
			try
			{
				DAOPurchaseOrder daoPurchaseOrder = DAOPurchaseOrder.SelectOne(purchaseId);
				_purchaseId = daoPurchaseOrder.PurchaseId;
				_purchaseCode = daoPurchaseOrder.PurchaseCode;
				_branchId = daoPurchaseOrder.BranchId;
				_storeId = daoPurchaseOrder.StoreId;
				_vendorId = daoPurchaseOrder.VendorId;
				_invoiceCode = daoPurchaseOrder.InvoiceCode;
				_invoiceDate = daoPurchaseOrder.InvoiceDate;
				_invoiceAmount = daoPurchaseOrder.InvoiceAmount;
				_currency = daoPurchaseOrder.Currency;
				_exchangeRate = daoPurchaseOrder.ExchangeRate;
				_invoiceAmountLocal = daoPurchaseOrder.InvoiceAmountLocal;
				_sumTax = daoPurchaseOrder.SumTax;
				_sumExpense = daoPurchaseOrder.SumExpense;
				_openValue = daoPurchaseOrder.OpenValue;
				_recId = daoPurchaseOrder.RecId;
				_cBy = daoPurchaseOrder.CBy;
				_cDate = daoPurchaseOrder.CDate;
				_eBy = daoPurchaseOrder.EBy;
				_eDate = daoPurchaseOrder.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPurchaseOrder
		///</parameters>
		protected internal BOPurchaseOrder(DAOPurchaseOrder daoPurchaseOrder)
		{
			try
			{
				_purchaseId = daoPurchaseOrder.PurchaseId;
				_purchaseCode = daoPurchaseOrder.PurchaseCode;
				_branchId = daoPurchaseOrder.BranchId;
				_storeId = daoPurchaseOrder.StoreId;
				_vendorId = daoPurchaseOrder.VendorId;
				_invoiceCode = daoPurchaseOrder.InvoiceCode;
				_invoiceDate = daoPurchaseOrder.InvoiceDate;
				_invoiceAmount = daoPurchaseOrder.InvoiceAmount;
				_currency = daoPurchaseOrder.Currency;
				_exchangeRate = daoPurchaseOrder.ExchangeRate;
				_invoiceAmountLocal = daoPurchaseOrder.InvoiceAmountLocal;
				_sumTax = daoPurchaseOrder.SumTax;
				_sumExpense = daoPurchaseOrder.SumExpense;
				_openValue = daoPurchaseOrder.OpenValue;
				_recId = daoPurchaseOrder.RecId;
				_cBy = daoPurchaseOrder.CBy;
				_cDate = daoPurchaseOrder.CDate;
				_eBy = daoPurchaseOrder.EBy;
				_eDate = daoPurchaseOrder.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PurchaseOrder record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOPurchaseOrder daoPurchaseOrder = new DAOPurchaseOrder();
			RegisterDataObject(daoPurchaseOrder);
			BeginTransaction("savenewBOPurchaseOrder");
			try
			{
				daoPurchaseOrder.PurchaseCode = _purchaseCode;
				daoPurchaseOrder.BranchId = _branchId;
				daoPurchaseOrder.StoreId = _storeId;
				daoPurchaseOrder.VendorId = _vendorId;
				daoPurchaseOrder.InvoiceCode = _invoiceCode;
				daoPurchaseOrder.InvoiceDate = _invoiceDate;
				daoPurchaseOrder.InvoiceAmount = _invoiceAmount;
				daoPurchaseOrder.Currency = _currency;
				daoPurchaseOrder.ExchangeRate = _exchangeRate;
				daoPurchaseOrder.InvoiceAmountLocal = _invoiceAmountLocal;
				daoPurchaseOrder.SumTax = _sumTax;
				daoPurchaseOrder.SumExpense = _sumExpense;
				daoPurchaseOrder.OpenValue = _openValue;
				daoPurchaseOrder.RecId = _recId;
				daoPurchaseOrder.CBy = _cBy;
				daoPurchaseOrder.CDate = _cDate;
				daoPurchaseOrder.EBy = _eBy;
				daoPurchaseOrder.EDate = _eDate;
				daoPurchaseOrder.Insert();
				CommitTransaction();
				
				_purchaseId = daoPurchaseOrder.PurchaseId;
				_purchaseCode = daoPurchaseOrder.PurchaseCode;
				_branchId = daoPurchaseOrder.BranchId;
				_storeId = daoPurchaseOrder.StoreId;
				_vendorId = daoPurchaseOrder.VendorId;
				_invoiceCode = daoPurchaseOrder.InvoiceCode;
				_invoiceDate = daoPurchaseOrder.InvoiceDate;
				_invoiceAmount = daoPurchaseOrder.InvoiceAmount;
				_currency = daoPurchaseOrder.Currency;
				_exchangeRate = daoPurchaseOrder.ExchangeRate;
				_invoiceAmountLocal = daoPurchaseOrder.InvoiceAmountLocal;
				_sumTax = daoPurchaseOrder.SumTax;
				_sumExpense = daoPurchaseOrder.SumExpense;
				_openValue = daoPurchaseOrder.OpenValue;
				_recId = daoPurchaseOrder.RecId;
				_cBy = daoPurchaseOrder.CBy;
				_cDate = daoPurchaseOrder.CDate;
				_eBy = daoPurchaseOrder.EBy;
				_eDate = daoPurchaseOrder.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOPurchaseOrder");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one PurchaseOrder record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrder
		///</parameters>
		public virtual void Update()
		{
			DAOPurchaseOrder daoPurchaseOrder = new DAOPurchaseOrder();
			RegisterDataObject(daoPurchaseOrder);
			BeginTransaction("updateBOPurchaseOrder");
			try
			{
				daoPurchaseOrder.PurchaseId = _purchaseId;
				daoPurchaseOrder.PurchaseCode = _purchaseCode;
				daoPurchaseOrder.BranchId = _branchId;
				daoPurchaseOrder.StoreId = _storeId;
				daoPurchaseOrder.VendorId = _vendorId;
				daoPurchaseOrder.InvoiceCode = _invoiceCode;
				daoPurchaseOrder.InvoiceDate = _invoiceDate;
				daoPurchaseOrder.InvoiceAmount = _invoiceAmount;
				daoPurchaseOrder.Currency = _currency;
				daoPurchaseOrder.ExchangeRate = _exchangeRate;
				daoPurchaseOrder.InvoiceAmountLocal = _invoiceAmountLocal;
				daoPurchaseOrder.SumTax = _sumTax;
				daoPurchaseOrder.SumExpense = _sumExpense;
				daoPurchaseOrder.OpenValue = _openValue;
				daoPurchaseOrder.RecId = _recId;
				daoPurchaseOrder.CBy = _cBy;
				daoPurchaseOrder.CDate = _cDate;
				daoPurchaseOrder.EBy = _eBy;
				daoPurchaseOrder.EDate = _eDate;
				daoPurchaseOrder.Update();
				CommitTransaction();
				
				_purchaseId = daoPurchaseOrder.PurchaseId;
				_purchaseCode = daoPurchaseOrder.PurchaseCode;
				_branchId = daoPurchaseOrder.BranchId;
				_storeId = daoPurchaseOrder.StoreId;
				_vendorId = daoPurchaseOrder.VendorId;
				_invoiceCode = daoPurchaseOrder.InvoiceCode;
				_invoiceDate = daoPurchaseOrder.InvoiceDate;
				_invoiceAmount = daoPurchaseOrder.InvoiceAmount;
				_currency = daoPurchaseOrder.Currency;
				_exchangeRate = daoPurchaseOrder.ExchangeRate;
				_invoiceAmountLocal = daoPurchaseOrder.InvoiceAmountLocal;
				_sumTax = daoPurchaseOrder.SumTax;
				_sumExpense = daoPurchaseOrder.SumExpense;
				_openValue = daoPurchaseOrder.OpenValue;
				_recId = daoPurchaseOrder.RecId;
				_cBy = daoPurchaseOrder.CBy;
				_cDate = daoPurchaseOrder.CDate;
				_eBy = daoPurchaseOrder.EBy;
				_eDate = daoPurchaseOrder.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOPurchaseOrder");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PurchaseOrder record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOPurchaseOrder daoPurchaseOrder = new DAOPurchaseOrder();
			RegisterDataObject(daoPurchaseOrder);
			BeginTransaction("deleteBOPurchaseOrder");
			try
			{
				daoPurchaseOrder.PurchaseId = _purchaseId;
				daoPurchaseOrder.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOPurchaseOrder");
				throw;
			}
		}
		
		///<Summary>
		///PurchaseOrderCollection
		///This method returns the collection of BOPurchaseOrder objects
		///</Summary>
		///<returns>
		///List[BOPurchaseOrder]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOPurchaseOrder> PurchaseOrderCollection()
		{
			try
			{
				IList<BOPurchaseOrder> boPurchaseOrderCollection = new List<BOPurchaseOrder>();
				IList<DAOPurchaseOrder> daoPurchaseOrderCollection = DAOPurchaseOrder.SelectAll();
			
				foreach(DAOPurchaseOrder daoPurchaseOrder in daoPurchaseOrderCollection)
					boPurchaseOrderCollection.Add(new BOPurchaseOrder(daoPurchaseOrder));
			
				return boPurchaseOrderCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PurchaseOrderCollectionCount
		///This method returns the collection count of BOPurchaseOrder objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PurchaseOrderCollectionCount()
		{
			try
			{
				Int32 objCount = DAOPurchaseOrder.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailCollection
		///This method returns its collection of BOPurchaseOrderDetail objects
		///</Summary>
		///<returns>
		///IList[BOPurchaseOrderDetail]
		///</returns>
		///<parameters>
		///BOPurchaseOrder
		///</parameters>
		public virtual IList<BOPurchaseOrderDetail> PurchaseOrderDetailCollection()
		{
			try
			{
				if(_boPurchaseOrderDetailCollection == null)
					LoadPurchaseOrderDetailCollection();
				
				return _boPurchaseOrderDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOPurchaseOrder>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOPurchaseOrder.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PurchaseOrderCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOPurchaseOrder objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPurchaseOrderCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOPurchaseOrder> daoPurchaseOrderCollection = DAOPurchaseOrder.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOPurchaseOrder resdaoPurchaseOrder in daoPurchaseOrderCollection)
					boPurchaseOrderCollection.Add((T)(object)new BOPurchaseOrder(resdaoPurchaseOrder));
			
				return boPurchaseOrderCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PurchaseOrderCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOPurchaseOrder objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOPurchaseOrder.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderDetailCollection
		///This method loads the internal collection of BOPurchaseOrderDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderDetailCollection()
		{
			try
			{
				_boPurchaseOrderDetailCollection = new List<BOPurchaseOrderDetail>();
				IList<DAOPurchaseOrderDetail> daoPurchaseOrderDetailCollection = DAOPurchaseOrderDetail.SelectAllByPurchaseId(_purchaseId.Value);
				
				foreach(DAOPurchaseOrderDetail daoPurchaseOrderDetail in daoPurchaseOrderDetailCollection)
					_boPurchaseOrderDetailCollection.Add(new BOPurchaseOrderDetail(daoPurchaseOrderDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPurchaseOrderDetail
		///This method persists a BOPurchaseOrderDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetail
		///</parameters>
		public virtual void AddPurchaseOrderDetail(BOPurchaseOrderDetail boPurchaseOrderDetail)
		{
			DAOPurchaseOrderDetail daoPurchaseOrderDetail = new DAOPurchaseOrderDetail();
			RegisterDataObject(daoPurchaseOrderDetail);
			BeginTransaction("addPurchaseOrderDetail");
			try
			{
				daoPurchaseOrderDetail.DetailId = boPurchaseOrderDetail.DetailId;
				daoPurchaseOrderDetail.ItemId = boPurchaseOrderDetail.ItemId;
				daoPurchaseOrderDetail.Quanity = boPurchaseOrderDetail.Quanity;
				daoPurchaseOrderDetail.PurchasePrice = boPurchaseOrderDetail.PurchasePrice;
				daoPurchaseOrderDetail.Currency = boPurchaseOrderDetail.Currency;
				daoPurchaseOrderDetail.ExchangeRate = boPurchaseOrderDetail.ExchangeRate;
				daoPurchaseOrderDetail.PurchasePriceLocal = boPurchaseOrderDetail.PurchasePriceLocal;
				daoPurchaseOrderDetail.UnitId = boPurchaseOrderDetail.UnitId;
				daoPurchaseOrderDetail.TaxValue = boPurchaseOrderDetail.TaxValue;
				daoPurchaseOrderDetail.DiscountValue = boPurchaseOrderDetail.DiscountValue;
				daoPurchaseOrderDetail.BatchNo = boPurchaseOrderDetail.BatchNo;
				daoPurchaseOrderDetail.ExpireDate = boPurchaseOrderDetail.ExpireDate;
				daoPurchaseOrderDetail.StatusReceipt = boPurchaseOrderDetail.StatusReceipt;
				daoPurchaseOrderDetail.ItemStoreId = boPurchaseOrderDetail.ItemStoreId;
				daoPurchaseOrderDetail.RecId = boPurchaseOrderDetail.RecId;
				daoPurchaseOrderDetail.PurchaseId = _purchaseId.Value;
				daoPurchaseOrderDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrderDetail = new BOPurchaseOrderDetail(daoPurchaseOrderDetail);
				if(_boPurchaseOrderDetailCollection != null)
					_boPurchaseOrderDetailCollection.Add(boPurchaseOrderDetail);
			}
			catch
			{
				RollbackTransaction("addPurchaseOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrderDetail
		///This method deletes all BOPurchaseOrderDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrderDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPurchaseOrderDetail");
			try
			{
				DAOPurchaseOrderDetail.DeleteAllByPurchaseId(ConnectionProvider, _purchaseId.Value);
				CommitTransaction();
				if(_boPurchaseOrderDetailCollection != null)
				{
					_boPurchaseOrderDetailCollection.Clear();
					_boPurchaseOrderDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPurchaseOrderDetail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? PurchaseId
		{
			get
			{
				 return _purchaseId;
			}
			set
			{
				_purchaseId = value;
				_isDirty = true;
			}
		}
		
		public virtual string PurchaseCode
		{
			get
			{
				 return _purchaseCode;
			}
			set
			{
				_purchaseCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreId
		{
			get
			{
				 return _storeId;
			}
			set
			{
				_storeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VendorId
		{
			get
			{
				 return _vendorId;
			}
			set
			{
				_vendorId = value;
				_isDirty = true;
			}
		}
		
		public virtual string InvoiceCode
		{
			get
			{
				 return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? InvoiceDate
		{
			get
			{
				 return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? InvoiceAmount
		{
			get
			{
				 return _invoiceAmount;
			}
			set
			{
				_invoiceAmount = value;
				_isDirty = true;
			}
		}
		
		public virtual string Currency
		{
			get
			{
				 return _currency;
			}
			set
			{
				_currency = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ExchangeRate
		{
			get
			{
				 return _exchangeRate;
			}
			set
			{
				_exchangeRate = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? InvoiceAmountLocal
		{
			get
			{
				 return _invoiceAmountLocal;
			}
			set
			{
				_invoiceAmountLocal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? SumTax
		{
			get
			{
				 return _sumTax;
			}
			set
			{
				_sumTax = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? SumExpense
		{
			get
			{
				 return _sumExpense;
			}
			set
			{
				_sumExpense = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? OpenValue
		{
			get
			{
				 return _openValue;
			}
			set
			{
				_openValue = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? RecId
		{
			get
			{
				 return _recId;
			}
			set
			{
				_recId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
