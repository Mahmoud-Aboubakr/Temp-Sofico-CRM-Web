/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientServiceRequestTimline.
	///</Summary>
	public partial class BOClientServiceRequestTimline : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _timelineId;
		protected Int64? _requestId;
		protected Int32? _requestStatusId;
		protected Int32? _userId;
		protected DateTime? _timelineDate;
		protected string _notes;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientServiceRequestTimline()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 timelineId
		///</parameters>
		public BOClientServiceRequestTimline(Int64 timelineId)
		{
			try
			{
				DAOClientServiceRequestTimline daoClientServiceRequestTimline = DAOClientServiceRequestTimline.SelectOne(timelineId);
				_timelineId = daoClientServiceRequestTimline.TimelineId;
				_requestId = daoClientServiceRequestTimline.RequestId;
				_requestStatusId = daoClientServiceRequestTimline.RequestStatusId;
				_userId = daoClientServiceRequestTimline.UserId;
				_timelineDate = daoClientServiceRequestTimline.TimelineDate;
				_notes = daoClientServiceRequestTimline.Notes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientServiceRequestTimline
		///</parameters>
		protected internal BOClientServiceRequestTimline(DAOClientServiceRequestTimline daoClientServiceRequestTimline)
		{
			try
			{
				_timelineId = daoClientServiceRequestTimline.TimelineId;
				_requestId = daoClientServiceRequestTimline.RequestId;
				_requestStatusId = daoClientServiceRequestTimline.RequestStatusId;
				_userId = daoClientServiceRequestTimline.UserId;
				_timelineDate = daoClientServiceRequestTimline.TimelineDate;
				_notes = daoClientServiceRequestTimline.Notes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientServiceRequestTimline record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientServiceRequestTimline daoClientServiceRequestTimline = new DAOClientServiceRequestTimline();
			RegisterDataObject(daoClientServiceRequestTimline);
			BeginTransaction("savenewBOClientServiceReques8831");
			try
			{
				daoClientServiceRequestTimline.RequestId = _requestId;
				daoClientServiceRequestTimline.RequestStatusId = _requestStatusId;
				daoClientServiceRequestTimline.UserId = _userId;
				daoClientServiceRequestTimline.TimelineDate = _timelineDate;
				daoClientServiceRequestTimline.Notes = _notes;
				daoClientServiceRequestTimline.Insert();
				CommitTransaction();
				
				_timelineId = daoClientServiceRequestTimline.TimelineId;
				_requestId = daoClientServiceRequestTimline.RequestId;
				_requestStatusId = daoClientServiceRequestTimline.RequestStatusId;
				_userId = daoClientServiceRequestTimline.UserId;
				_timelineDate = daoClientServiceRequestTimline.TimelineDate;
				_notes = daoClientServiceRequestTimline.Notes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientServiceReques8831");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientServiceRequestTimline record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequestTimline
		///</parameters>
		public virtual void Update()
		{
			DAOClientServiceRequestTimline daoClientServiceRequestTimline = new DAOClientServiceRequestTimline();
			RegisterDataObject(daoClientServiceRequestTimline);
			BeginTransaction("updateBOClientServiceRequest8831");
			try
			{
				daoClientServiceRequestTimline.TimelineId = _timelineId;
				daoClientServiceRequestTimline.RequestId = _requestId;
				daoClientServiceRequestTimline.RequestStatusId = _requestStatusId;
				daoClientServiceRequestTimline.UserId = _userId;
				daoClientServiceRequestTimline.TimelineDate = _timelineDate;
				daoClientServiceRequestTimline.Notes = _notes;
				daoClientServiceRequestTimline.Update();
				CommitTransaction();
				
				_timelineId = daoClientServiceRequestTimline.TimelineId;
				_requestId = daoClientServiceRequestTimline.RequestId;
				_requestStatusId = daoClientServiceRequestTimline.RequestStatusId;
				_userId = daoClientServiceRequestTimline.UserId;
				_timelineDate = daoClientServiceRequestTimline.TimelineDate;
				_notes = daoClientServiceRequestTimline.Notes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientServiceRequest8831");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientServiceRequestTimline record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientServiceRequestTimline daoClientServiceRequestTimline = new DAOClientServiceRequestTimline();
			RegisterDataObject(daoClientServiceRequestTimline);
			BeginTransaction("deleteBOClientServiceRequest4056");
			try
			{
				daoClientServiceRequestTimline.TimelineId = _timelineId;
				daoClientServiceRequestTimline.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientServiceRequest4056");
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestTimlineCollection
		///This method returns the collection of BOClientServiceRequestTimline objects
		///</Summary>
		///<returns>
		///List[BOClientServiceRequestTimline]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientServiceRequestTimline> ClientServiceRequestTimlineCollection()
		{
			try
			{
				IList<BOClientServiceRequestTimline> boClientServiceRequestTimlineCollection = new List<BOClientServiceRequestTimline>();
				IList<DAOClientServiceRequestTimline> daoClientServiceRequestTimlineCollection = DAOClientServiceRequestTimline.SelectAll();
			
				foreach(DAOClientServiceRequestTimline daoClientServiceRequestTimline in daoClientServiceRequestTimlineCollection)
					boClientServiceRequestTimlineCollection.Add(new BOClientServiceRequestTimline(daoClientServiceRequestTimline));
			
				return boClientServiceRequestTimlineCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServiceRequestTimlineCollectionCount
		///This method returns the collection count of BOClientServiceRequestTimline objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientServiceRequestTimlineCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientServiceRequestTimline.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientServiceRequestTimline>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientServiceRequestTimline.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServiceRequestTimlineCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientServiceRequestTimline objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientServiceRequestTimlineCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientServiceRequestTimline> daoClientServiceRequestTimlineCollection = DAOClientServiceRequestTimline.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientServiceRequestTimline resdaoClientServiceRequestTimline in daoClientServiceRequestTimlineCollection)
					boClientServiceRequestTimlineCollection.Add((T)(object)new BOClientServiceRequestTimline(resdaoClientServiceRequestTimline));
			
				return boClientServiceRequestTimlineCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServiceRequestTimlineCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientServiceRequestTimline objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientServiceRequestTimline.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? TimelineId
		{
			get
			{
				 return _timelineId;
			}
			set
			{
				_timelineId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? RequestId
		{
			get
			{
				 return _requestId;
			}
			set
			{
				_requestId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RequestStatusId
		{
			get
			{
				 return _requestStatusId;
			}
			set
			{
				_requestStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TimelineDate
		{
			get
			{
				 return _timelineDate;
			}
			set
			{
				_timelineDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
