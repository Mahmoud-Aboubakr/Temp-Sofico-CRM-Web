/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:40 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderVendorReportVW.
	///</Summary>
	public partial class BOSalesOrderVendorReportVW : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected string _branchCode;
		protected string _branchName;
		protected string _govCode;
		protected string _govName;
		protected string _cityCode;
		protected string _cityName;
		protected string _vendorCode;
		protected string _vendorName;
		protected string _itemCode;
		protected string _itemName;
		protected string _clientCode;
		protected string _clientName;
		protected DateTime? _invoiceDate;
		protected string _invoiceCode;
		protected decimal? _lineValue;
		protected Int32? _sellingQTY;
		protected Int32? _sellingBounsQTY;
		protected Int32? _returnQTY;
		protected Int32? _returnBounsQTY;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderVendorReportVW()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderVendorReportVW
		///</parameters>
		protected internal BOSalesOrderVendorReportVW(DAOSalesOrderVendorReportVW daoSalesOrderVendorReportVW)
		{
			try
			{
				_branchCode = daoSalesOrderVendorReportVW.BranchCode;
				_branchName = daoSalesOrderVendorReportVW.BranchName;
				_govCode = daoSalesOrderVendorReportVW.GovCode;
				_govName = daoSalesOrderVendorReportVW.GovName;
				_cityCode = daoSalesOrderVendorReportVW.CityCode;
				_cityName = daoSalesOrderVendorReportVW.CityName;
				_vendorCode = daoSalesOrderVendorReportVW.VendorCode;
				_vendorName = daoSalesOrderVendorReportVW.VendorName;
				_itemCode = daoSalesOrderVendorReportVW.ItemCode;
				_itemName = daoSalesOrderVendorReportVW.ItemName;
				_clientCode = daoSalesOrderVendorReportVW.ClientCode;
				_clientName = daoSalesOrderVendorReportVW.ClientName;
				_invoiceDate = daoSalesOrderVendorReportVW.InvoiceDate;
				_invoiceCode = daoSalesOrderVendorReportVW.InvoiceCode;
				_lineValue = daoSalesOrderVendorReportVW.LineValue;
				_sellingQTY = daoSalesOrderVendorReportVW.SellingQTY;
				_sellingBounsQTY = daoSalesOrderVendorReportVW.SellingBounsQTY;
				_returnQTY = daoSalesOrderVendorReportVW.ReturnQTY;
				_returnBounsQTY = daoSalesOrderVendorReportVW.ReturnBounsQTY;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///SalesOrderVendorReportVWCollection
		///This method returns the collection of BOSalesOrderVendorReportVW objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderVendorReportVW]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderVendorReportVW> SalesOrderVendorReportVWCollection()
		{
			try
			{
				IList<BOSalesOrderVendorReportVW> boSalesOrderVendorReportVWCollection = new List<BOSalesOrderVendorReportVW>();
				IList<DAOSalesOrderVendorReportVW> daoSalesOrderVendorReportVWCollection = DAOSalesOrderVendorReportVW.SelectAll();
			
				foreach(DAOSalesOrderVendorReportVW daoSalesOrderVendorReportVW in daoSalesOrderVendorReportVWCollection)
					boSalesOrderVendorReportVWCollection.Add(new BOSalesOrderVendorReportVW(daoSalesOrderVendorReportVW));
			
				return boSalesOrderVendorReportVWCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderVendorReportVWCollectionCount
		///This method returns the collection count of BOSalesOrderVendorReportVW objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderVendorReportVWCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderVendorReportVW.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderVendorReportVW>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderVendorReportVW.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderVendorReportVWCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderVendorReportVW objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderVendorReportVWCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderVendorReportVW> daoSalesOrderVendorReportVWCollection = DAOSalesOrderVendorReportVW.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderVendorReportVW resdaoSalesOrderVendorReportVW in daoSalesOrderVendorReportVWCollection)
					boSalesOrderVendorReportVWCollection.Add((T)(object)new BOSalesOrderVendorReportVW(resdaoSalesOrderVendorReportVW));
			
				return boSalesOrderVendorReportVWCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderVendorReportVWCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderVendorReportVW objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderVendorReportVW.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchName
		{
			get
			{
				 return _branchName;
			}
			set
			{
				_branchName = value;
				_isDirty = true;
			}
		}
		
		public virtual string GovCode
		{
			get
			{
				 return _govCode;
			}
			set
			{
				_govCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string GovName
		{
			get
			{
				 return _govName;
			}
			set
			{
				_govName = value;
				_isDirty = true;
			}
		}
		
		public virtual string CityCode
		{
			get
			{
				 return _cityCode;
			}
			set
			{
				_cityCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string CityName
		{
			get
			{
				 return _cityName;
			}
			set
			{
				_cityName = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorCode
		{
			get
			{
				 return _vendorCode;
			}
			set
			{
				_vendorCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorName
		{
			get
			{
				 return _vendorName;
			}
			set
			{
				_vendorName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemCode
		{
			get
			{
				 return _itemCode;
			}
			set
			{
				_itemCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemName
		{
			get
			{
				 return _itemName;
			}
			set
			{
				_itemName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientCode
		{
			get
			{
				 return _clientCode;
			}
			set
			{
				_clientCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientName
		{
			get
			{
				 return _clientName;
			}
			set
			{
				_clientName = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? InvoiceDate
		{
			get
			{
				 return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string InvoiceCode
		{
			get
			{
				 return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? LineValue
		{
			get
			{
				 return _lineValue;
			}
			set
			{
				_lineValue = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SellingQTY
		{
			get
			{
				 return _sellingQTY;
			}
			set
			{
				_sellingQTY = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SellingBounsQTY
		{
			get
			{
				 return _sellingBounsQTY;
			}
			set
			{
				_sellingBounsQTY = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ReturnQTY
		{
			get
			{
				 return _returnQTY;
			}
			set
			{
				_returnQTY = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ReturnBounsQTY
		{
			get
			{
				 return _returnBounsQTY;
			}
			set
			{
				_returnBounsQTY = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
