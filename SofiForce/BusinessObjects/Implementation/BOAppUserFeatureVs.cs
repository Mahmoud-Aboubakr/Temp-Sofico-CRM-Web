/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppUserFeatureVs.
	///</Summary>
	public partial class BOAppUserFeatureVs : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _userId;
		protected Int32? _appRoleId;
		protected string _appRoleCode;
		protected Int32? _featueId;
		protected Int32? _applicationId;
		protected string _featueCode;
		protected string _featueNameEn;
		protected string _featueNameAr;
		protected string _featuePath;
		protected bool? _isNew;
		protected bool? _isUpdated;
		protected bool? _isActive;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppUserFeatureVs()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppUserFeatureVs
		///</parameters>
		protected internal BOAppUserFeatureVs(DAOAppUserFeatureVs daoAppUserFeatureVs)
		{
			try
			{
				_userId = daoAppUserFeatureVs.UserId;
				_appRoleId = daoAppUserFeatureVs.AppRoleId;
				_appRoleCode = daoAppUserFeatureVs.AppRoleCode;
				_featueId = daoAppUserFeatureVs.FeatueId;
				_applicationId = daoAppUserFeatureVs.ApplicationId;
				_featueCode = daoAppUserFeatureVs.FeatueCode;
				_featueNameEn = daoAppUserFeatureVs.FeatueNameEn;
				_featueNameAr = daoAppUserFeatureVs.FeatueNameAr;
				_featuePath = daoAppUserFeatureVs.FeatuePath;
				_isNew = daoAppUserFeatureVs.IsNew;
				_isUpdated = daoAppUserFeatureVs.IsUpdated;
				_isActive = daoAppUserFeatureVs.IsActive;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///AppUserFeatureVsCollection
		///This method returns the collection of BOAppUserFeatureVs objects
		///</Summary>
		///<returns>
		///List[BOAppUserFeatureVs]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppUserFeatureVs> AppUserFeatureVsCollection()
		{
			try
			{
				IList<BOAppUserFeatureVs> boAppUserFeatureVsCollection = new List<BOAppUserFeatureVs>();
				IList<DAOAppUserFeatureVs> daoAppUserFeatureVsCollection = DAOAppUserFeatureVs.SelectAll();
			
				foreach(DAOAppUserFeatureVs daoAppUserFeatureVs in daoAppUserFeatureVsCollection)
					boAppUserFeatureVsCollection.Add(new BOAppUserFeatureVs(daoAppUserFeatureVs));
			
				return boAppUserFeatureVsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserFeatureVsCollectionCount
		///This method returns the collection count of BOAppUserFeatureVs objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppUserFeatureVsCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppUserFeatureVs.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppUserFeatureVs>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppUserFeatureVs.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserFeatureVsCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppUserFeatureVs objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppUserFeatureVsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppUserFeatureVs> daoAppUserFeatureVsCollection = DAOAppUserFeatureVs.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppUserFeatureVs resdaoAppUserFeatureVs in daoAppUserFeatureVsCollection)
					boAppUserFeatureVsCollection.Add((T)(object)new BOAppUserFeatureVs(resdaoAppUserFeatureVs));
			
				return boAppUserFeatureVsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserFeatureVsCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppUserFeatureVs objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppUserFeatureVs.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AppRoleId
		{
			get
			{
				 return _appRoleId;
			}
			set
			{
				_appRoleId = value;
				_isDirty = true;
			}
		}
		
		public virtual string AppRoleCode
		{
			get
			{
				 return _appRoleCode;
			}
			set
			{
				_appRoleCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FeatueId
		{
			get
			{
				 return _featueId;
			}
			set
			{
				_featueId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ApplicationId
		{
			get
			{
				 return _applicationId;
			}
			set
			{
				_applicationId = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatueCode
		{
			get
			{
				 return _featueCode;
			}
			set
			{
				_featueCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatueNameEn
		{
			get
			{
				 return _featueNameEn;
			}
			set
			{
				_featueNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatueNameAr
		{
			get
			{
				 return _featueNameAr;
			}
			set
			{
				_featueNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatuePath
		{
			get
			{
				 return _featuePath;
			}
			set
			{
				_featuePath = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsNew
		{
			get
			{
				 return _isNew;
			}
			set
			{
				_isNew = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsUpdated
		{
			get
			{
				 return _isUpdated;
			}
			set
			{
				_isUpdated = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
