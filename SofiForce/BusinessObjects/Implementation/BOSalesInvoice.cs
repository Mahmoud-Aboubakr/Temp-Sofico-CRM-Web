/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesInvoice.
	///</Summary>
	public partial class BOSalesInvoice : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _invoiceId;
		protected string _invoiceCode;
		protected string _salesCode;
		protected Int32? _invoiceTypeId;
		protected Int32? _invoiceSourceId;
		protected Int32? _clientId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesInvoice()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 invoiceId
		///</parameters>
		public BOSalesInvoice(Int32 invoiceId)
		{
			try
			{
				DAOSalesInvoice daoSalesInvoice = DAOSalesInvoice.SelectOne(invoiceId);
				_invoiceId = daoSalesInvoice.InvoiceId;
				_invoiceCode = daoSalesInvoice.InvoiceCode;
				_salesCode = daoSalesInvoice.SalesCode;
				_invoiceTypeId = daoSalesInvoice.InvoiceTypeId;
				_invoiceSourceId = daoSalesInvoice.InvoiceSourceId;
				_clientId = daoSalesInvoice.ClientId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesInvoice
		///</parameters>
		protected internal BOSalesInvoice(DAOSalesInvoice daoSalesInvoice)
		{
			try
			{
				_invoiceId = daoSalesInvoice.InvoiceId;
				_invoiceCode = daoSalesInvoice.InvoiceCode;
				_salesCode = daoSalesInvoice.SalesCode;
				_invoiceTypeId = daoSalesInvoice.InvoiceTypeId;
				_invoiceSourceId = daoSalesInvoice.InvoiceSourceId;
				_clientId = daoSalesInvoice.ClientId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesInvoice record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesInvoice daoSalesInvoice = new DAOSalesInvoice();
			RegisterDataObject(daoSalesInvoice);
			BeginTransaction("savenewBOSalesInvoice");
			try
			{
				daoSalesInvoice.InvoiceId = _invoiceId;
				daoSalesInvoice.InvoiceCode = _invoiceCode;
				daoSalesInvoice.SalesCode = _salesCode;
				daoSalesInvoice.InvoiceTypeId = _invoiceTypeId;
				daoSalesInvoice.InvoiceSourceId = _invoiceSourceId;
				daoSalesInvoice.ClientId = _clientId;
				daoSalesInvoice.Insert();
				CommitTransaction();
				
				_invoiceId = daoSalesInvoice.InvoiceId;
				_invoiceCode = daoSalesInvoice.InvoiceCode;
				_salesCode = daoSalesInvoice.SalesCode;
				_invoiceTypeId = daoSalesInvoice.InvoiceTypeId;
				_invoiceSourceId = daoSalesInvoice.InvoiceSourceId;
				_clientId = daoSalesInvoice.ClientId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesInvoice");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesInvoice record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesInvoice
		///</parameters>
		public virtual void Update()
		{
			DAOSalesInvoice daoSalesInvoice = new DAOSalesInvoice();
			RegisterDataObject(daoSalesInvoice);
			BeginTransaction("updateBOSalesInvoice");
			try
			{
				daoSalesInvoice.InvoiceId = _invoiceId;
				daoSalesInvoice.InvoiceCode = _invoiceCode;
				daoSalesInvoice.SalesCode = _salesCode;
				daoSalesInvoice.InvoiceTypeId = _invoiceTypeId;
				daoSalesInvoice.InvoiceSourceId = _invoiceSourceId;
				daoSalesInvoice.ClientId = _clientId;
				daoSalesInvoice.Update();
				CommitTransaction();
				
				_invoiceId = daoSalesInvoice.InvoiceId;
				_invoiceCode = daoSalesInvoice.InvoiceCode;
				_salesCode = daoSalesInvoice.SalesCode;
				_invoiceTypeId = daoSalesInvoice.InvoiceTypeId;
				_invoiceSourceId = daoSalesInvoice.InvoiceSourceId;
				_clientId = daoSalesInvoice.ClientId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesInvoice");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesInvoice record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesInvoice daoSalesInvoice = new DAOSalesInvoice();
			RegisterDataObject(daoSalesInvoice);
			BeginTransaction("deleteBOSalesInvoice");
			try
			{
				daoSalesInvoice.InvoiceId = _invoiceId;
				daoSalesInvoice.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesInvoice");
				throw;
			}
		}
		
		///<Summary>
		///SalesInvoiceCollection
		///This method returns the collection of BOSalesInvoice objects
		///</Summary>
		///<returns>
		///List[BOSalesInvoice]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesInvoice> SalesInvoiceCollection()
		{
			try
			{
				IList<BOSalesInvoice> boSalesInvoiceCollection = new List<BOSalesInvoice>();
				IList<DAOSalesInvoice> daoSalesInvoiceCollection = DAOSalesInvoice.SelectAll();
			
				foreach(DAOSalesInvoice daoSalesInvoice in daoSalesInvoiceCollection)
					boSalesInvoiceCollection.Add(new BOSalesInvoice(daoSalesInvoice));
			
				return boSalesInvoiceCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesInvoiceCollectionCount
		///This method returns the collection count of BOSalesInvoice objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesInvoiceCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesInvoice.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesInvoice>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesInvoice.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesInvoiceCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesInvoice objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesInvoiceCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesInvoice> daoSalesInvoiceCollection = DAOSalesInvoice.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesInvoice resdaoSalesInvoice in daoSalesInvoiceCollection)
					boSalesInvoiceCollection.Add((T)(object)new BOSalesInvoice(resdaoSalesInvoice));
			
				return boSalesInvoiceCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesInvoiceCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesInvoice objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesInvoice.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? InvoiceId
		{
			get
			{
				 return _invoiceId;
			}
			set
			{
				_invoiceId = value;
				_isDirty = true;
			}
		}
		
		public virtual string InvoiceCode
		{
			get
			{
				 return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string SalesCode
		{
			get
			{
				 return _salesCode;
			}
			set
			{
				_salesCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? InvoiceTypeId
		{
			get
			{
				 return _invoiceTypeId;
			}
			set
			{
				_invoiceTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? InvoiceSourceId
		{
			get
			{
				 return _invoiceSourceId;
			}
			set
			{
				_invoiceSourceId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
