/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 4/28/2022 3:29:52 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientServeyDetailAnswer.
	///</Summary>
	public partial class BOClientServeyDetailAnswer : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected string _detail;
		protected Int32? _detailAnswerId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientServeyDetailAnswer()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientServeyDetailAnswer
		///</parameters>
		protected internal BOClientServeyDetailAnswer(DAOClientServeyDetailAnswer daoClientServeyDetailAnswer)
		{
			try
			{
				_detail = daoClientServeyDetailAnswer.Detail;
				_detailAnswerId = daoClientServeyDetailAnswer.DetailAnswerId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientServeyDetailAnswer record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientServeyDetailAnswer daoClientServeyDetailAnswer = new DAOClientServeyDetailAnswer();
			RegisterDataObject(daoClientServeyDetailAnswer);
			BeginTransaction("savenewBOClientServeyDetailA4587");
			try
			{
				daoClientServeyDetailAnswer.Detail = _detail;
				daoClientServeyDetailAnswer.DetailAnswerId = _detailAnswerId;
				daoClientServeyDetailAnswer.Insert();
				CommitTransaction();
				
				_detail = daoClientServeyDetailAnswer.Detail;
				_detailAnswerId = daoClientServeyDetailAnswer.DetailAnswerId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientServeyDetailA4587");
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServeyDetailAnswerCollection
		///This method returns the collection of BOClientServeyDetailAnswer objects
		///</Summary>
		///<returns>
		///List[BOClientServeyDetailAnswer]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientServeyDetailAnswer> ClientServeyDetailAnswerCollection()
		{
			try
			{
				IList<BOClientServeyDetailAnswer> boClientServeyDetailAnswerCollection = new List<BOClientServeyDetailAnswer>();
				IList<DAOClientServeyDetailAnswer> daoClientServeyDetailAnswerCollection = DAOClientServeyDetailAnswer.SelectAll();
			
				foreach(DAOClientServeyDetailAnswer daoClientServeyDetailAnswer in daoClientServeyDetailAnswerCollection)
					boClientServeyDetailAnswerCollection.Add(new BOClientServeyDetailAnswer(daoClientServeyDetailAnswer));
			
				return boClientServeyDetailAnswerCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServeyDetailAnswerCollectionCount
		///This method returns the collection count of BOClientServeyDetailAnswer objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientServeyDetailAnswerCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientServeyDetailAnswer.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientServeyDetailAnswer>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientServeyDetailAnswer.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServeyDetailAnswerCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientServeyDetailAnswer objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientServeyDetailAnswerCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientServeyDetailAnswer> daoClientServeyDetailAnswerCollection = DAOClientServeyDetailAnswer.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientServeyDetailAnswer resdaoClientServeyDetailAnswer in daoClientServeyDetailAnswerCollection)
					boClientServeyDetailAnswerCollection.Add((T)(object)new BOClientServeyDetailAnswer(resdaoClientServeyDetailAnswer));
			
				return boClientServeyDetailAnswerCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientServeyDetailAnswerCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientServeyDetailAnswer objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientServeyDetailAnswer.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string Detail
		{
			get
			{
				 return _detail;
			}
			set
			{
				_detail = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DetailAnswerId
		{
			get
			{
				 return _detailAnswerId;
			}
			set
			{
				_detailAnswerId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
