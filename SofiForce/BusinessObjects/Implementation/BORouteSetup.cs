/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORouteSetup.
	///It maintains a collection of BOClientRoute,BORepresentativeJourney objects.
	///</Summary>
	public partial class BORouteSetup : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _routeId;
		protected Int32? _routeTypeId;
		protected Int32? _branchId;
		protected string _routeCode;
		protected string _routeNameEn;
		protected string _routeNameAr;
		protected bool? _isActive;
		protected string _color;
		protected string _icon;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _notes;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientRoute> _boClientRouteCollection;
		List<BORepresentativeJourney> _boRepresentativeJourneyCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORouteSetup()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 routeId
		///</parameters>
		public BORouteSetup(Int32 routeId)
		{
			try
			{
				DAORouteSetup daoRouteSetup = DAORouteSetup.SelectOne(routeId);
				_routeId = daoRouteSetup.RouteId;
				_routeTypeId = daoRouteSetup.RouteTypeId;
				_branchId = daoRouteSetup.BranchId;
				_routeCode = daoRouteSetup.RouteCode;
				_routeNameEn = daoRouteSetup.RouteNameEn;
				_routeNameAr = daoRouteSetup.RouteNameAr;
				_isActive = daoRouteSetup.IsActive;
				_color = daoRouteSetup.Color;
				_icon = daoRouteSetup.Icon;
				_canEdit = daoRouteSetup.CanEdit;
				_canDelete = daoRouteSetup.CanDelete;
				_notes = daoRouteSetup.Notes;
				_cBy = daoRouteSetup.CBy;
				_cDate = daoRouteSetup.CDate;
				_eBy = daoRouteSetup.EBy;
				_eDate = daoRouteSetup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORouteSetup
		///</parameters>
		protected internal BORouteSetup(DAORouteSetup daoRouteSetup)
		{
			try
			{
				_routeId = daoRouteSetup.RouteId;
				_routeTypeId = daoRouteSetup.RouteTypeId;
				_branchId = daoRouteSetup.BranchId;
				_routeCode = daoRouteSetup.RouteCode;
				_routeNameEn = daoRouteSetup.RouteNameEn;
				_routeNameAr = daoRouteSetup.RouteNameAr;
				_isActive = daoRouteSetup.IsActive;
				_color = daoRouteSetup.Color;
				_icon = daoRouteSetup.Icon;
				_canEdit = daoRouteSetup.CanEdit;
				_canDelete = daoRouteSetup.CanDelete;
				_notes = daoRouteSetup.Notes;
				_cBy = daoRouteSetup.CBy;
				_cDate = daoRouteSetup.CDate;
				_eBy = daoRouteSetup.EBy;
				_eDate = daoRouteSetup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new RouteSetup record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORouteSetup daoRouteSetup = new DAORouteSetup();
			RegisterDataObject(daoRouteSetup);
			BeginTransaction("savenewBORouteSetup");
			try
			{
				daoRouteSetup.RouteTypeId = _routeTypeId;
				daoRouteSetup.BranchId = _branchId;
				daoRouteSetup.RouteCode = _routeCode;
				daoRouteSetup.RouteNameEn = _routeNameEn;
				daoRouteSetup.RouteNameAr = _routeNameAr;
				daoRouteSetup.IsActive = _isActive;
				daoRouteSetup.Color = _color;
				daoRouteSetup.Icon = _icon;
				daoRouteSetup.CanEdit = _canEdit;
				daoRouteSetup.CanDelete = _canDelete;
				daoRouteSetup.Notes = _notes;
				daoRouteSetup.CBy = _cBy;
				daoRouteSetup.CDate = _cDate;
				daoRouteSetup.EBy = _eBy;
				daoRouteSetup.EDate = _eDate;
				daoRouteSetup.Insert();
				CommitTransaction();
				
				_routeId = daoRouteSetup.RouteId;
				_routeTypeId = daoRouteSetup.RouteTypeId;
				_branchId = daoRouteSetup.BranchId;
				_routeCode = daoRouteSetup.RouteCode;
				_routeNameEn = daoRouteSetup.RouteNameEn;
				_routeNameAr = daoRouteSetup.RouteNameAr;
				_isActive = daoRouteSetup.IsActive;
				_color = daoRouteSetup.Color;
				_icon = daoRouteSetup.Icon;
				_canEdit = daoRouteSetup.CanEdit;
				_canDelete = daoRouteSetup.CanDelete;
				_notes = daoRouteSetup.Notes;
				_cBy = daoRouteSetup.CBy;
				_cDate = daoRouteSetup.CDate;
				_eBy = daoRouteSetup.EBy;
				_eDate = daoRouteSetup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORouteSetup");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one RouteSetup record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORouteSetup
		///</parameters>
		public virtual void Update()
		{
			DAORouteSetup daoRouteSetup = new DAORouteSetup();
			RegisterDataObject(daoRouteSetup);
			BeginTransaction("updateBORouteSetup");
			try
			{
				daoRouteSetup.RouteId = _routeId;
				daoRouteSetup.RouteTypeId = _routeTypeId;
				daoRouteSetup.BranchId = _branchId;
				daoRouteSetup.RouteCode = _routeCode;
				daoRouteSetup.RouteNameEn = _routeNameEn;
				daoRouteSetup.RouteNameAr = _routeNameAr;
				daoRouteSetup.IsActive = _isActive;
				daoRouteSetup.Color = _color;
				daoRouteSetup.Icon = _icon;
				daoRouteSetup.CanEdit = _canEdit;
				daoRouteSetup.CanDelete = _canDelete;
				daoRouteSetup.Notes = _notes;
				daoRouteSetup.CBy = _cBy;
				daoRouteSetup.CDate = _cDate;
				daoRouteSetup.EBy = _eBy;
				daoRouteSetup.EDate = _eDate;
				daoRouteSetup.Update();
				CommitTransaction();
				
				_routeId = daoRouteSetup.RouteId;
				_routeTypeId = daoRouteSetup.RouteTypeId;
				_branchId = daoRouteSetup.BranchId;
				_routeCode = daoRouteSetup.RouteCode;
				_routeNameEn = daoRouteSetup.RouteNameEn;
				_routeNameAr = daoRouteSetup.RouteNameAr;
				_isActive = daoRouteSetup.IsActive;
				_color = daoRouteSetup.Color;
				_icon = daoRouteSetup.Icon;
				_canEdit = daoRouteSetup.CanEdit;
				_canDelete = daoRouteSetup.CanDelete;
				_notes = daoRouteSetup.Notes;
				_cBy = daoRouteSetup.CBy;
				_cDate = daoRouteSetup.CDate;
				_eBy = daoRouteSetup.EBy;
				_eDate = daoRouteSetup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORouteSetup");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one RouteSetup record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORouteSetup daoRouteSetup = new DAORouteSetup();
			RegisterDataObject(daoRouteSetup);
			BeginTransaction("deleteBORouteSetup");
			try
			{
				daoRouteSetup.RouteId = _routeId;
				daoRouteSetup.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORouteSetup");
				throw;
			}
		}
		
		///<Summary>
		///RouteSetupCollection
		///This method returns the collection of BORouteSetup objects
		///</Summary>
		///<returns>
		///List[BORouteSetup]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORouteSetup> RouteSetupCollection()
		{
			try
			{
				IList<BORouteSetup> boRouteSetupCollection = new List<BORouteSetup>();
				IList<DAORouteSetup> daoRouteSetupCollection = DAORouteSetup.SelectAll();
			
				foreach(DAORouteSetup daoRouteSetup in daoRouteSetupCollection)
					boRouteSetupCollection.Add(new BORouteSetup(daoRouteSetup));
			
				return boRouteSetupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RouteSetupCollectionCount
		///This method returns the collection count of BORouteSetup objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RouteSetupCollectionCount()
		{
			try
			{
				Int32 objCount = DAORouteSetup.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientRouteCollection
		///This method returns its collection of BOClientRoute objects
		///</Summary>
		///<returns>
		///IList[BOClientRoute]
		///</returns>
		///<parameters>
		///BORouteSetup
		///</parameters>
		public virtual IList<BOClientRoute> ClientRouteCollection()
		{
			try
			{
				if(_boClientRouteCollection == null)
					LoadClientRouteCollection();
				
				return _boClientRouteCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeJourneyCollection
		///This method returns its collection of BORepresentativeJourney objects
		///</Summary>
		///<returns>
		///IList[BORepresentativeJourney]
		///</returns>
		///<parameters>
		///BORouteSetup
		///</parameters>
		public virtual IList<BORepresentativeJourney> RepresentativeJourneyCollection()
		{
			try
			{
				if(_boRepresentativeJourneyCollection == null)
					LoadRepresentativeJourneyCollection();
				
				return _boRepresentativeJourneyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORouteSetup>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORouteSetup.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RouteSetupCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORouteSetup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRouteSetupCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORouteSetup> daoRouteSetupCollection = DAORouteSetup.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORouteSetup resdaoRouteSetup in daoRouteSetupCollection)
					boRouteSetupCollection.Add((T)(object)new BORouteSetup(resdaoRouteSetup));
			
				return boRouteSetupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RouteSetupCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORouteSetup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORouteSetup.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientRouteCollection
		///This method loads the internal collection of BOClientRoute objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientRouteCollection()
		{
			try
			{
				_boClientRouteCollection = new List<BOClientRoute>();
				IList<DAOClientRoute> daoClientRouteCollection = DAOClientRoute.SelectAllByRouteId(_routeId.Value);
				
				foreach(DAOClientRoute daoClientRoute in daoClientRouteCollection)
					_boClientRouteCollection.Add(new BOClientRoute(daoClientRoute));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientRoute
		///This method persists a BOClientRoute object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientRoute
		///</parameters>
		public virtual void AddClientRoute(BOClientRoute boClientRoute)
		{
			DAOClientRoute daoClientRoute = new DAOClientRoute();
			RegisterDataObject(daoClientRoute);
			BeginTransaction("addClientRoute");
			try
			{
				daoClientRoute.ClientRouteId = boClientRoute.ClientRouteId;
				daoClientRoute.RouteTypeId = boClientRoute.RouteTypeId;
				daoClientRoute.ClientId = boClientRoute.ClientId;
				daoClientRoute.Day1 = boClientRoute.Day1;
				daoClientRoute.Day2 = boClientRoute.Day2;
				daoClientRoute.Day3 = boClientRoute.Day3;
				daoClientRoute.Day4 = boClientRoute.Day4;
				daoClientRoute.Day5 = boClientRoute.Day5;
				daoClientRoute.Day6 = boClientRoute.Day6;
				daoClientRoute.Day7 = boClientRoute.Day7;
				daoClientRoute.CBy = boClientRoute.CBy;
				daoClientRoute.CDate = boClientRoute.CDate;
				daoClientRoute.EBy = boClientRoute.EBy;
				daoClientRoute.EDate = boClientRoute.EDate;
				daoClientRoute.RouteId = _routeId.Value;
				daoClientRoute.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientRoute = new BOClientRoute(daoClientRoute);
				if(_boClientRouteCollection != null)
					_boClientRouteCollection.Add(boClientRoute);
			}
			catch
			{
				RollbackTransaction("addClientRoute");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientRoute
		///This method deletes all BOClientRoute objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientRoute()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientRoute");
			try
			{
				DAOClientRoute.DeleteAllByRouteId(ConnectionProvider, _routeId.Value);
				CommitTransaction();
				if(_boClientRouteCollection != null)
				{
					_boClientRouteCollection.Clear();
					_boClientRouteCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientRoute");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeJourneyCollection
		///This method loads the internal collection of BORepresentativeJourney objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeJourneyCollection()
		{
			try
			{
				_boRepresentativeJourneyCollection = new List<BORepresentativeJourney>();
				IList<DAORepresentativeJourney> daoRepresentativeJourneyCollection = DAORepresentativeJourney.SelectAllByRouteId(_routeId.Value);
				
				foreach(DAORepresentativeJourney daoRepresentativeJourney in daoRepresentativeJourneyCollection)
					_boRepresentativeJourneyCollection.Add(new BORepresentativeJourney(daoRepresentativeJourney));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentativeJourney
		///This method persists a BORepresentativeJourney object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeJourney
		///</parameters>
		public virtual void AddRepresentativeJourney(BORepresentativeJourney boRepresentativeJourney)
		{
			DAORepresentativeJourney daoRepresentativeJourney = new DAORepresentativeJourney();
			RegisterDataObject(daoRepresentativeJourney);
			BeginTransaction("addRepresentativeJourney");
			try
			{
				daoRepresentativeJourney.JourneyId = boRepresentativeJourney.JourneyId;
				daoRepresentativeJourney.RepresentativeId = boRepresentativeJourney.RepresentativeId;
				daoRepresentativeJourney.CBy = boRepresentativeJourney.CBy;
				daoRepresentativeJourney.CDate = boRepresentativeJourney.CDate;
				daoRepresentativeJourney.EBy = boRepresentativeJourney.EBy;
				daoRepresentativeJourney.EDate = boRepresentativeJourney.EDate;
				daoRepresentativeJourney.RouteId = _routeId.Value;
				daoRepresentativeJourney.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentativeJourney = new BORepresentativeJourney(daoRepresentativeJourney);
				if(_boRepresentativeJourneyCollection != null)
					_boRepresentativeJourneyCollection.Add(boRepresentativeJourney);
			}
			catch
			{
				RollbackTransaction("addRepresentativeJourney");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentativeJourney
		///This method deletes all BORepresentativeJourney objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentativeJourney()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentativeJourney");
			try
			{
				DAORepresentativeJourney.DeleteAllByRouteId(ConnectionProvider, _routeId.Value);
				CommitTransaction();
				if(_boRepresentativeJourneyCollection != null)
				{
					_boRepresentativeJourneyCollection.Clear();
					_boRepresentativeJourneyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentativeJourney");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RouteId
		{
			get
			{
				 return _routeId;
			}
			set
			{
				_routeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RouteTypeId
		{
			get
			{
				 return _routeTypeId;
			}
			set
			{
				_routeTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteCode
		{
			get
			{
				 return _routeCode;
			}
			set
			{
				_routeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteNameEn
		{
			get
			{
				 return _routeNameEn;
			}
			set
			{
				_routeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string RouteNameAr
		{
			get
			{
				 return _routeNameAr;
			}
			set
			{
				_routeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
