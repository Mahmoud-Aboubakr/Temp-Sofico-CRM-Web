/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderPromotion.
	///</Summary>
	public partial class BOSalesOrderPromotion : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _salesId;
		protected Int32? _promotionId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderPromotion()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 salesId, Int32 promotionId
		///</parameters>
		public BOSalesOrderPromotion(Int64 salesId, Int32 promotionId)
		{
			try
			{
				DAOSalesOrderPromotion daoSalesOrderPromotion = DAOSalesOrderPromotion.SelectOne(salesId, promotionId);
				_salesId = daoSalesOrderPromotion.SalesId;
				_promotionId = daoSalesOrderPromotion.PromotionId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderPromotion
		///</parameters>
		protected internal BOSalesOrderPromotion(DAOSalesOrderPromotion daoSalesOrderPromotion)
		{
			try
			{
				_salesId = daoSalesOrderPromotion.SalesId;
				_promotionId = daoSalesOrderPromotion.PromotionId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesOrderPromotion record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesOrderPromotion daoSalesOrderPromotion = new DAOSalesOrderPromotion();
			RegisterDataObject(daoSalesOrderPromotion);
			BeginTransaction("savenewBOSalesOrderPromotion");
			try
			{
				daoSalesOrderPromotion.SalesId = _salesId;
				daoSalesOrderPromotion.PromotionId = _promotionId;
				daoSalesOrderPromotion.Insert();
				CommitTransaction();
				
				_salesId = daoSalesOrderPromotion.SalesId;
				_promotionId = daoSalesOrderPromotion.PromotionId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesOrderPromotion");
				throw;
			}
		}
		
		///<Summary>
		///Delete
		///This method deletes one SalesOrderPromotion record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesOrderPromotion daoSalesOrderPromotion = new DAOSalesOrderPromotion();
			RegisterDataObject(daoSalesOrderPromotion);
			BeginTransaction("deleteBOSalesOrderPromotion");
			try
			{
				daoSalesOrderPromotion.SalesId = _salesId;
				daoSalesOrderPromotion.PromotionId = _promotionId;
				daoSalesOrderPromotion.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesOrderPromotion");
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderPromotionCollection
		///This method returns the collection of BOSalesOrderPromotion objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderPromotion]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderPromotion> SalesOrderPromotionCollection()
		{
			try
			{
				IList<BOSalesOrderPromotion> boSalesOrderPromotionCollection = new List<BOSalesOrderPromotion>();
				IList<DAOSalesOrderPromotion> daoSalesOrderPromotionCollection = DAOSalesOrderPromotion.SelectAll();
			
				foreach(DAOSalesOrderPromotion daoSalesOrderPromotion in daoSalesOrderPromotionCollection)
					boSalesOrderPromotionCollection.Add(new BOSalesOrderPromotion(daoSalesOrderPromotion));
			
				return boSalesOrderPromotionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderPromotionCollectionCount
		///This method returns the collection count of BOSalesOrderPromotion objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderPromotionCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderPromotion.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderPromotion>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderPromotion.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderPromotionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderPromotion objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderPromotionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderPromotion> daoSalesOrderPromotionCollection = DAOSalesOrderPromotion.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderPromotion resdaoSalesOrderPromotion in daoSalesOrderPromotionCollection)
					boSalesOrderPromotionCollection.Add((T)(object)new BOSalesOrderPromotion(resdaoSalesOrderPromotion));
			
				return boSalesOrderPromotionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderPromotionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderPromotion objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderPromotion.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PromotionId
		{
			get
			{
				 return _promotionId;
			}
			set
			{
				_promotionId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
