/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORejectReason.
	///It maintains a collection of BOSalesOrderDispatch objects.
	///</Summary>
	public partial class BORejectReason : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _rejectReasonId;
		protected string _rejectReasonCode;
		protected string _rejectReasonNameEn;
		protected string _rejectReasonNameAr;
		protected bool? _isActive;
		protected bool? _isDeleted;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOSalesOrderDispatch> _boSalesOrderDispatchCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORejectReason()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 rejectReasonId
		///</parameters>
		public BORejectReason(Int32 rejectReasonId)
		{
			try
			{
				DAORejectReason daoRejectReason = DAORejectReason.SelectOne(rejectReasonId);
				_rejectReasonId = daoRejectReason.RejectReasonId;
				_rejectReasonCode = daoRejectReason.RejectReasonCode;
				_rejectReasonNameEn = daoRejectReason.RejectReasonNameEn;
				_rejectReasonNameAr = daoRejectReason.RejectReasonNameAr;
				_isActive = daoRejectReason.IsActive;
				_isDeleted = daoRejectReason.IsDeleted;
				_canEdit = daoRejectReason.CanEdit;
				_canDelete = daoRejectReason.CanDelete;
				_displayOrder = daoRejectReason.DisplayOrder;
				_color = daoRejectReason.Color;
				_icon = daoRejectReason.Icon;
				_cBy = daoRejectReason.CBy;
				_cDate = daoRejectReason.CDate;
				_eBy = daoRejectReason.EBy;
				_eDate = daoRejectReason.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORejectReason
		///</parameters>
		protected internal BORejectReason(DAORejectReason daoRejectReason)
		{
			try
			{
				_rejectReasonId = daoRejectReason.RejectReasonId;
				_rejectReasonCode = daoRejectReason.RejectReasonCode;
				_rejectReasonNameEn = daoRejectReason.RejectReasonNameEn;
				_rejectReasonNameAr = daoRejectReason.RejectReasonNameAr;
				_isActive = daoRejectReason.IsActive;
				_isDeleted = daoRejectReason.IsDeleted;
				_canEdit = daoRejectReason.CanEdit;
				_canDelete = daoRejectReason.CanDelete;
				_displayOrder = daoRejectReason.DisplayOrder;
				_color = daoRejectReason.Color;
				_icon = daoRejectReason.Icon;
				_cBy = daoRejectReason.CBy;
				_cDate = daoRejectReason.CDate;
				_eBy = daoRejectReason.EBy;
				_eDate = daoRejectReason.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new RejectReason record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORejectReason daoRejectReason = new DAORejectReason();
			RegisterDataObject(daoRejectReason);
			BeginTransaction("savenewBORejectReason");
			try
			{
				daoRejectReason.RejectReasonCode = _rejectReasonCode;
				daoRejectReason.RejectReasonNameEn = _rejectReasonNameEn;
				daoRejectReason.RejectReasonNameAr = _rejectReasonNameAr;
				daoRejectReason.IsActive = _isActive;
				daoRejectReason.IsDeleted = _isDeleted;
				daoRejectReason.CanEdit = _canEdit;
				daoRejectReason.CanDelete = _canDelete;
				daoRejectReason.DisplayOrder = _displayOrder;
				daoRejectReason.Color = _color;
				daoRejectReason.Icon = _icon;
				daoRejectReason.CBy = _cBy;
				daoRejectReason.CDate = _cDate;
				daoRejectReason.EBy = _eBy;
				daoRejectReason.EDate = _eDate;
				daoRejectReason.Insert();
				CommitTransaction();
				
				_rejectReasonId = daoRejectReason.RejectReasonId;
				_rejectReasonCode = daoRejectReason.RejectReasonCode;
				_rejectReasonNameEn = daoRejectReason.RejectReasonNameEn;
				_rejectReasonNameAr = daoRejectReason.RejectReasonNameAr;
				_isActive = daoRejectReason.IsActive;
				_isDeleted = daoRejectReason.IsDeleted;
				_canEdit = daoRejectReason.CanEdit;
				_canDelete = daoRejectReason.CanDelete;
				_displayOrder = daoRejectReason.DisplayOrder;
				_color = daoRejectReason.Color;
				_icon = daoRejectReason.Icon;
				_cBy = daoRejectReason.CBy;
				_cDate = daoRejectReason.CDate;
				_eBy = daoRejectReason.EBy;
				_eDate = daoRejectReason.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORejectReason");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one RejectReason record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORejectReason
		///</parameters>
		public virtual void Update()
		{
			DAORejectReason daoRejectReason = new DAORejectReason();
			RegisterDataObject(daoRejectReason);
			BeginTransaction("updateBORejectReason");
			try
			{
				daoRejectReason.RejectReasonId = _rejectReasonId;
				daoRejectReason.RejectReasonCode = _rejectReasonCode;
				daoRejectReason.RejectReasonNameEn = _rejectReasonNameEn;
				daoRejectReason.RejectReasonNameAr = _rejectReasonNameAr;
				daoRejectReason.IsActive = _isActive;
				daoRejectReason.IsDeleted = _isDeleted;
				daoRejectReason.CanEdit = _canEdit;
				daoRejectReason.CanDelete = _canDelete;
				daoRejectReason.DisplayOrder = _displayOrder;
				daoRejectReason.Color = _color;
				daoRejectReason.Icon = _icon;
				daoRejectReason.CBy = _cBy;
				daoRejectReason.CDate = _cDate;
				daoRejectReason.EBy = _eBy;
				daoRejectReason.EDate = _eDate;
				daoRejectReason.Update();
				CommitTransaction();
				
				_rejectReasonId = daoRejectReason.RejectReasonId;
				_rejectReasonCode = daoRejectReason.RejectReasonCode;
				_rejectReasonNameEn = daoRejectReason.RejectReasonNameEn;
				_rejectReasonNameAr = daoRejectReason.RejectReasonNameAr;
				_isActive = daoRejectReason.IsActive;
				_isDeleted = daoRejectReason.IsDeleted;
				_canEdit = daoRejectReason.CanEdit;
				_canDelete = daoRejectReason.CanDelete;
				_displayOrder = daoRejectReason.DisplayOrder;
				_color = daoRejectReason.Color;
				_icon = daoRejectReason.Icon;
				_cBy = daoRejectReason.CBy;
				_cDate = daoRejectReason.CDate;
				_eBy = daoRejectReason.EBy;
				_eDate = daoRejectReason.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORejectReason");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one RejectReason record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORejectReason daoRejectReason = new DAORejectReason();
			RegisterDataObject(daoRejectReason);
			BeginTransaction("deleteBORejectReason");
			try
			{
				daoRejectReason.RejectReasonId = _rejectReasonId;
				daoRejectReason.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORejectReason");
				throw;
			}
		}
		
		///<Summary>
		///RejectReasonCollection
		///This method returns the collection of BORejectReason objects
		///</Summary>
		///<returns>
		///List[BORejectReason]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORejectReason> RejectReasonCollection()
		{
			try
			{
				IList<BORejectReason> boRejectReasonCollection = new List<BORejectReason>();
				IList<DAORejectReason> daoRejectReasonCollection = DAORejectReason.SelectAll();
			
				foreach(DAORejectReason daoRejectReason in daoRejectReasonCollection)
					boRejectReasonCollection.Add(new BORejectReason(daoRejectReason));
			
				return boRejectReasonCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RejectReasonCollectionCount
		///This method returns the collection count of BORejectReason objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RejectReasonCollectionCount()
		{
			try
			{
				Int32 objCount = DAORejectReason.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderDispatchCollection
		///This method returns its collection of BOSalesOrderDispatch objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderDispatch]
		///</returns>
		///<parameters>
		///BORejectReason
		///</parameters>
		public virtual IList<BOSalesOrderDispatch> SalesOrderDispatchCollection()
		{
			try
			{
				if(_boSalesOrderDispatchCollection == null)
					LoadSalesOrderDispatchCollection();
				
				return _boSalesOrderDispatchCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORejectReason>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORejectReason.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RejectReasonCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORejectReason objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRejectReasonCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORejectReason> daoRejectReasonCollection = DAORejectReason.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORejectReason resdaoRejectReason in daoRejectReasonCollection)
					boRejectReasonCollection.Add((T)(object)new BORejectReason(resdaoRejectReason));
			
				return boRejectReasonCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RejectReasonCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORejectReason objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORejectReason.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderDispatchCollection
		///This method loads the internal collection of BOSalesOrderDispatch objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderDispatchCollection()
		{
			try
			{
				_boSalesOrderDispatchCollection = new List<BOSalesOrderDispatch>();
				IList<DAOSalesOrderDispatch> daoSalesOrderDispatchCollection = DAOSalesOrderDispatch.SelectAllByRejectReasonId(_rejectReasonId.Value);
				
				foreach(DAOSalesOrderDispatch daoSalesOrderDispatch in daoSalesOrderDispatchCollection)
					_boSalesOrderDispatchCollection.Add(new BOSalesOrderDispatch(daoSalesOrderDispatch));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderDispatch
		///This method persists a BOSalesOrderDispatch object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderDispatch
		///</parameters>
		public virtual void AddSalesOrderDispatch(BOSalesOrderDispatch boSalesOrderDispatch)
		{
			DAOSalesOrderDispatch daoSalesOrderDispatch = new DAOSalesOrderDispatch();
			RegisterDataObject(daoSalesOrderDispatch);
			BeginTransaction("addSalesOrderDispatch");
			try
			{
				daoSalesOrderDispatch.DispatchId = boSalesOrderDispatch.DispatchId;
				daoSalesOrderDispatch.SalesId = boSalesOrderDispatch.SalesId;
				daoSalesOrderDispatch.DispatchCode = boSalesOrderDispatch.DispatchCode;
				daoSalesOrderDispatch.DispatchDate = boSalesOrderDispatch.DispatchDate;
				daoSalesOrderDispatch.DispatchTime = boSalesOrderDispatch.DispatchTime;
				daoSalesOrderDispatch.ShiftDate = boSalesOrderDispatch.ShiftDate;
				daoSalesOrderDispatch.DistributorId = boSalesOrderDispatch.DistributorId;
				daoSalesOrderDispatch.CarId = boSalesOrderDispatch.CarId;
				daoSalesOrderDispatch.DriverId = boSalesOrderDispatch.DriverId;
				daoSalesOrderDispatch.InZone = boSalesOrderDispatch.InZone;
				daoSalesOrderDispatch.Distance = boSalesOrderDispatch.Distance;
				daoSalesOrderDispatch.Latitude = boSalesOrderDispatch.Latitude;
				daoSalesOrderDispatch.Longitude = boSalesOrderDispatch.Longitude;
				daoSalesOrderDispatch.FeedbackId = boSalesOrderDispatch.FeedbackId;
				daoSalesOrderDispatch.Notes = boSalesOrderDispatch.Notes;
				daoSalesOrderDispatch.EBy = boSalesOrderDispatch.EBy;
				daoSalesOrderDispatch.EDate = boSalesOrderDispatch.EDate;
				daoSalesOrderDispatch.RejectReasonNotes = boSalesOrderDispatch.RejectReasonNotes;
				daoSalesOrderDispatch.RejectReasonId = _rejectReasonId.Value;
				daoSalesOrderDispatch.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderDispatch = new BOSalesOrderDispatch(daoSalesOrderDispatch);
				if(_boSalesOrderDispatchCollection != null)
					_boSalesOrderDispatchCollection.Add(boSalesOrderDispatch);
			}
			catch
			{
				RollbackTransaction("addSalesOrderDispatch");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderDispatch
		///This method deletes all BOSalesOrderDispatch objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderDispatch()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderDispatch");
			try
			{
				DAOSalesOrderDispatch.DeleteAllByRejectReasonId(ConnectionProvider, _rejectReasonId.Value);
				CommitTransaction();
				if(_boSalesOrderDispatchCollection != null)
				{
					_boSalesOrderDispatchCollection.Clear();
					_boSalesOrderDispatchCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderDispatch");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RejectReasonId
		{
			get
			{
				 return _rejectReasonId;
			}
			set
			{
				_rejectReasonId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RejectReasonCode
		{
			get
			{
				 return _rejectReasonCode;
			}
			set
			{
				_rejectReasonCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RejectReasonNameEn
		{
			get
			{
				 return _rejectReasonNameEn;
			}
			set
			{
				_rejectReasonNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string RejectReasonNameAr
		{
			get
			{
				 return _rejectReasonNameAr;
			}
			set
			{
				_rejectReasonNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDeleted
		{
			get
			{
				 return _isDeleted;
			}
			set
			{
				_isDeleted = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
