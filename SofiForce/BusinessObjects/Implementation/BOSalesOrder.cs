/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrder.
	///It maintains a collection of BOSalesOrderAddress,BOSalesOrderDetail,BOSalesOrderDispatch,BOSalesOrderError,BOSalesOrderLinePromotion,BOSalesOrderLog,BOSalesOrderMessages,BOSalesOrderPromotion,BOSalesOrderWorkflow objects.
	///</Summary>
	public partial class BOSalesOrder : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _salesId;
		protected string _salesCode;
		protected Int32? _salesOrderTypeId;
		protected Int32? _clientId;
		protected Int32? _branchId;
		protected Int32? _agentId;
		protected Int32? _representativeId;
		protected Int32? _storeId;
		protected Int32? _priorityTypeId;
		protected Int32? _paymentTermId;
		protected DateTime? _salesDate;
		protected DateTime? _salesTime;
		protected Int32? _salesOrderStatusId;
		protected Int32? _salesOrderSourceId;
		protected Int32? _salesChannelId;
		protected Int32? _salesPoolId;
		protected bool? _isOpened;
		protected decimal? _openValue;
		protected double? _latitude;
		protected double? _longitude;
		protected decimal? _itemTotal;
		protected decimal? _itemDiscountTotal;
		protected decimal? _taxTotal;
		protected decimal? _cashDiscountTotal;
		protected Int32? _customDiscountTypeId;
		protected decimal? _customDiscountValue;
		protected decimal? _customDiscountTotal;
		protected decimal? _deliveryTotal;
		protected decimal? _netTotal;
		protected string _notes;
		protected Int32? _invoiceRetry;
		protected bool? _hasError;
		protected bool? _isInvoiced;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		protected DateTime? _createDate;
		protected Int64? _recId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected Int64? _salesPerenId;
		protected bool? _inprogress;
		protected bool? _isBackoffice;
		protected bool? _isDeleted;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOSalesOrderAddress> _boSalesOrderAddressCollection;
		List<BOSalesOrderDetail> _boSalesOrderDetailCollection;
		List<BOSalesOrderDispatch> _boSalesOrderDispatchCollection;
		List<BOSalesOrderError> _boSalesOrderErrorCollection;
		List<BOSalesOrderLinePromotion> _boSalesOrderLinePromotionCollection;
		List<BOSalesOrderLog> _boSalesOrderLogCollection;
		List<BOSalesOrderMessages> _boSalesOrderMessagesCollection;
		List<BOSalesOrderPromotion> _boSalesOrderPromotionCollection;
		List<BOSalesOrderWorkflow> _boSalesOrderWorkflowCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrder()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 salesId
		///</parameters>
		public BOSalesOrder(Int64 salesId)
		{
			try
			{
				DAOSalesOrder daoSalesOrder = DAOSalesOrder.SelectOne(salesId);
				_salesId = daoSalesOrder.SalesId;
				_salesCode = daoSalesOrder.SalesCode;
				_salesOrderTypeId = daoSalesOrder.SalesOrderTypeId;
				_clientId = daoSalesOrder.ClientId;
				_branchId = daoSalesOrder.BranchId;
				_agentId = daoSalesOrder.AgentId;
				_representativeId = daoSalesOrder.RepresentativeId;
				_storeId = daoSalesOrder.StoreId;
				_priorityTypeId = daoSalesOrder.PriorityTypeId;
				_paymentTermId = daoSalesOrder.PaymentTermId;
				_salesDate = daoSalesOrder.SalesDate;
				_salesTime = daoSalesOrder.SalesTime;
				_salesOrderStatusId = daoSalesOrder.SalesOrderStatusId;
				_salesOrderSourceId = daoSalesOrder.SalesOrderSourceId;
				_salesChannelId = daoSalesOrder.SalesChannelId;
				_salesPoolId = daoSalesOrder.SalesPoolId;
				_isOpened = daoSalesOrder.IsOpened;
				_openValue = daoSalesOrder.OpenValue;
				_latitude = daoSalesOrder.Latitude;
				_longitude = daoSalesOrder.Longitude;
				_itemTotal = daoSalesOrder.ItemTotal;
				_itemDiscountTotal = daoSalesOrder.ItemDiscountTotal;
				_taxTotal = daoSalesOrder.TaxTotal;
				_cashDiscountTotal = daoSalesOrder.CashDiscountTotal;
				_customDiscountTypeId = daoSalesOrder.CustomDiscountTypeId;
				_customDiscountValue = daoSalesOrder.CustomDiscountValue;
				_customDiscountTotal = daoSalesOrder.CustomDiscountTotal;
				_deliveryTotal = daoSalesOrder.DeliveryTotal;
				_netTotal = daoSalesOrder.NetTotal;
				_notes = daoSalesOrder.Notes;
				_invoiceRetry = daoSalesOrder.InvoiceRetry;
				_hasError = daoSalesOrder.HasError;
				_isInvoiced = daoSalesOrder.IsInvoiced;
				_invoiceCode = daoSalesOrder.InvoiceCode;
				_invoiceDate = daoSalesOrder.InvoiceDate;
				_createDate = daoSalesOrder.CreateDate;
				_recId = daoSalesOrder.RecId;
				_cBy = daoSalesOrder.CBy;
				_cDate = daoSalesOrder.CDate;
				_eBy = daoSalesOrder.EBy;
				_eDate = daoSalesOrder.EDate;
				_salesPerenId = daoSalesOrder.SalesPerenId;
				_inprogress = daoSalesOrder.Inprogress;
				_isBackoffice = daoSalesOrder.IsBackoffice;
				_isDeleted = daoSalesOrder.IsDeleted;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrder
		///</parameters>
		protected internal BOSalesOrder(DAOSalesOrder daoSalesOrder)
		{
			try
			{
				_salesId = daoSalesOrder.SalesId;
				_salesCode = daoSalesOrder.SalesCode;
				_salesOrderTypeId = daoSalesOrder.SalesOrderTypeId;
				_clientId = daoSalesOrder.ClientId;
				_branchId = daoSalesOrder.BranchId;
				_agentId = daoSalesOrder.AgentId;
				_representativeId = daoSalesOrder.RepresentativeId;
				_storeId = daoSalesOrder.StoreId;
				_priorityTypeId = daoSalesOrder.PriorityTypeId;
				_paymentTermId = daoSalesOrder.PaymentTermId;
				_salesDate = daoSalesOrder.SalesDate;
				_salesTime = daoSalesOrder.SalesTime;
				_salesOrderStatusId = daoSalesOrder.SalesOrderStatusId;
				_salesOrderSourceId = daoSalesOrder.SalesOrderSourceId;
				_salesChannelId = daoSalesOrder.SalesChannelId;
				_salesPoolId = daoSalesOrder.SalesPoolId;
				_isOpened = daoSalesOrder.IsOpened;
				_openValue = daoSalesOrder.OpenValue;
				_latitude = daoSalesOrder.Latitude;
				_longitude = daoSalesOrder.Longitude;
				_itemTotal = daoSalesOrder.ItemTotal;
				_itemDiscountTotal = daoSalesOrder.ItemDiscountTotal;
				_taxTotal = daoSalesOrder.TaxTotal;
				_cashDiscountTotal = daoSalesOrder.CashDiscountTotal;
				_customDiscountTypeId = daoSalesOrder.CustomDiscountTypeId;
				_customDiscountValue = daoSalesOrder.CustomDiscountValue;
				_customDiscountTotal = daoSalesOrder.CustomDiscountTotal;
				_deliveryTotal = daoSalesOrder.DeliveryTotal;
				_netTotal = daoSalesOrder.NetTotal;
				_notes = daoSalesOrder.Notes;
				_invoiceRetry = daoSalesOrder.InvoiceRetry;
				_hasError = daoSalesOrder.HasError;
				_isInvoiced = daoSalesOrder.IsInvoiced;
				_invoiceCode = daoSalesOrder.InvoiceCode;
				_invoiceDate = daoSalesOrder.InvoiceDate;
				_createDate = daoSalesOrder.CreateDate;
				_recId = daoSalesOrder.RecId;
				_cBy = daoSalesOrder.CBy;
				_cDate = daoSalesOrder.CDate;
				_eBy = daoSalesOrder.EBy;
				_eDate = daoSalesOrder.EDate;
				_salesPerenId = daoSalesOrder.SalesPerenId;
				_inprogress = daoSalesOrder.Inprogress;
				_isBackoffice = daoSalesOrder.IsBackoffice;
				_isDeleted = daoSalesOrder.IsDeleted;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesOrder record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("savenewBOSalesOrder");
			try
			{
				daoSalesOrder.SalesCode = _salesCode;
				daoSalesOrder.SalesOrderTypeId = _salesOrderTypeId;
				daoSalesOrder.ClientId = _clientId;
				daoSalesOrder.BranchId = _branchId;
				daoSalesOrder.AgentId = _agentId;
				daoSalesOrder.RepresentativeId = _representativeId;
				daoSalesOrder.StoreId = _storeId;
				daoSalesOrder.PriorityTypeId = _priorityTypeId;
				daoSalesOrder.PaymentTermId = _paymentTermId;
				daoSalesOrder.SalesDate = _salesDate;
				daoSalesOrder.SalesTime = _salesTime;
				daoSalesOrder.SalesOrderStatusId = _salesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = _salesOrderSourceId;
				daoSalesOrder.SalesChannelId = _salesChannelId;
				daoSalesOrder.SalesPoolId = _salesPoolId;
				daoSalesOrder.IsOpened = _isOpened;
				daoSalesOrder.OpenValue = _openValue;
				daoSalesOrder.Latitude = _latitude;
				daoSalesOrder.Longitude = _longitude;
				daoSalesOrder.ItemTotal = _itemTotal;
				daoSalesOrder.ItemDiscountTotal = _itemDiscountTotal;
				daoSalesOrder.TaxTotal = _taxTotal;
				daoSalesOrder.CashDiscountTotal = _cashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = _customDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = _customDiscountValue;
				daoSalesOrder.CustomDiscountTotal = _customDiscountTotal;
				daoSalesOrder.DeliveryTotal = _deliveryTotal;
				daoSalesOrder.NetTotal = _netTotal;
				daoSalesOrder.Notes = _notes;
				daoSalesOrder.InvoiceRetry = _invoiceRetry;
				daoSalesOrder.HasError = _hasError;
				daoSalesOrder.IsInvoiced = _isInvoiced;
				daoSalesOrder.InvoiceCode = _invoiceCode;
				daoSalesOrder.InvoiceDate = _invoiceDate;
				daoSalesOrder.CreateDate = _createDate;
				daoSalesOrder.RecId = _recId;
				daoSalesOrder.CBy = _cBy;
				daoSalesOrder.CDate = _cDate;
				daoSalesOrder.EBy = _eBy;
				daoSalesOrder.EDate = _eDate;
				daoSalesOrder.SalesPerenId = _salesPerenId;
				daoSalesOrder.Inprogress = _inprogress;
				daoSalesOrder.IsBackoffice = _isBackoffice;
				daoSalesOrder.IsDeleted = _isDeleted;
				daoSalesOrder.Insert();
				CommitTransaction();
				
				_salesId = daoSalesOrder.SalesId;
				_salesCode = daoSalesOrder.SalesCode;
				_salesOrderTypeId = daoSalesOrder.SalesOrderTypeId;
				_clientId = daoSalesOrder.ClientId;
				_branchId = daoSalesOrder.BranchId;
				_agentId = daoSalesOrder.AgentId;
				_representativeId = daoSalesOrder.RepresentativeId;
				_storeId = daoSalesOrder.StoreId;
				_priorityTypeId = daoSalesOrder.PriorityTypeId;
				_paymentTermId = daoSalesOrder.PaymentTermId;
				_salesDate = daoSalesOrder.SalesDate;
				_salesTime = daoSalesOrder.SalesTime;
				_salesOrderStatusId = daoSalesOrder.SalesOrderStatusId;
				_salesOrderSourceId = daoSalesOrder.SalesOrderSourceId;
				_salesChannelId = daoSalesOrder.SalesChannelId;
				_salesPoolId = daoSalesOrder.SalesPoolId;
				_isOpened = daoSalesOrder.IsOpened;
				_openValue = daoSalesOrder.OpenValue;
				_latitude = daoSalesOrder.Latitude;
				_longitude = daoSalesOrder.Longitude;
				_itemTotal = daoSalesOrder.ItemTotal;
				_itemDiscountTotal = daoSalesOrder.ItemDiscountTotal;
				_taxTotal = daoSalesOrder.TaxTotal;
				_cashDiscountTotal = daoSalesOrder.CashDiscountTotal;
				_customDiscountTypeId = daoSalesOrder.CustomDiscountTypeId;
				_customDiscountValue = daoSalesOrder.CustomDiscountValue;
				_customDiscountTotal = daoSalesOrder.CustomDiscountTotal;
				_deliveryTotal = daoSalesOrder.DeliveryTotal;
				_netTotal = daoSalesOrder.NetTotal;
				_notes = daoSalesOrder.Notes;
				_invoiceRetry = daoSalesOrder.InvoiceRetry;
				_hasError = daoSalesOrder.HasError;
				_isInvoiced = daoSalesOrder.IsInvoiced;
				_invoiceCode = daoSalesOrder.InvoiceCode;
				_invoiceDate = daoSalesOrder.InvoiceDate;
				_createDate = daoSalesOrder.CreateDate;
				_recId = daoSalesOrder.RecId;
				_cBy = daoSalesOrder.CBy;
				_cDate = daoSalesOrder.CDate;
				_eBy = daoSalesOrder.EBy;
				_eDate = daoSalesOrder.EDate;
				_salesPerenId = daoSalesOrder.SalesPerenId;
				_inprogress = daoSalesOrder.Inprogress;
				_isBackoffice = daoSalesOrder.IsBackoffice;
				_isDeleted = daoSalesOrder.IsDeleted;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesOrder record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual void Update()
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("updateBOSalesOrder");
			try
			{
				daoSalesOrder.SalesId = _salesId;
				daoSalesOrder.SalesCode = _salesCode;
				daoSalesOrder.SalesOrderTypeId = _salesOrderTypeId;
				daoSalesOrder.ClientId = _clientId;
				daoSalesOrder.BranchId = _branchId;
				daoSalesOrder.AgentId = _agentId;
				daoSalesOrder.RepresentativeId = _representativeId;
				daoSalesOrder.StoreId = _storeId;
				daoSalesOrder.PriorityTypeId = _priorityTypeId;
				daoSalesOrder.PaymentTermId = _paymentTermId;
				daoSalesOrder.SalesDate = _salesDate;
				daoSalesOrder.SalesTime = _salesTime;
				daoSalesOrder.SalesOrderStatusId = _salesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = _salesOrderSourceId;
				daoSalesOrder.SalesChannelId = _salesChannelId;
				daoSalesOrder.SalesPoolId = _salesPoolId;
				daoSalesOrder.IsOpened = _isOpened;
				daoSalesOrder.OpenValue = _openValue;
				daoSalesOrder.Latitude = _latitude;
				daoSalesOrder.Longitude = _longitude;
				daoSalesOrder.ItemTotal = _itemTotal;
				daoSalesOrder.ItemDiscountTotal = _itemDiscountTotal;
				daoSalesOrder.TaxTotal = _taxTotal;
				daoSalesOrder.CashDiscountTotal = _cashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = _customDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = _customDiscountValue;
				daoSalesOrder.CustomDiscountTotal = _customDiscountTotal;
				daoSalesOrder.DeliveryTotal = _deliveryTotal;
				daoSalesOrder.NetTotal = _netTotal;
				daoSalesOrder.Notes = _notes;
				daoSalesOrder.InvoiceRetry = _invoiceRetry;
				daoSalesOrder.HasError = _hasError;
				daoSalesOrder.IsInvoiced = _isInvoiced;
				daoSalesOrder.InvoiceCode = _invoiceCode;
				daoSalesOrder.InvoiceDate = _invoiceDate;
				daoSalesOrder.CreateDate = _createDate;
				daoSalesOrder.RecId = _recId;
				daoSalesOrder.CBy = _cBy;
				daoSalesOrder.CDate = _cDate;
				daoSalesOrder.EBy = _eBy;
				daoSalesOrder.EDate = _eDate;
				daoSalesOrder.SalesPerenId = _salesPerenId;
				daoSalesOrder.Inprogress = _inprogress;
				daoSalesOrder.IsBackoffice = _isBackoffice;
				daoSalesOrder.IsDeleted = _isDeleted;
				daoSalesOrder.Update();
				CommitTransaction();
				
				_salesId = daoSalesOrder.SalesId;
				_salesCode = daoSalesOrder.SalesCode;
				_salesOrderTypeId = daoSalesOrder.SalesOrderTypeId;
				_clientId = daoSalesOrder.ClientId;
				_branchId = daoSalesOrder.BranchId;
				_agentId = daoSalesOrder.AgentId;
				_representativeId = daoSalesOrder.RepresentativeId;
				_storeId = daoSalesOrder.StoreId;
				_priorityTypeId = daoSalesOrder.PriorityTypeId;
				_paymentTermId = daoSalesOrder.PaymentTermId;
				_salesDate = daoSalesOrder.SalesDate;
				_salesTime = daoSalesOrder.SalesTime;
				_salesOrderStatusId = daoSalesOrder.SalesOrderStatusId;
				_salesOrderSourceId = daoSalesOrder.SalesOrderSourceId;
				_salesChannelId = daoSalesOrder.SalesChannelId;
				_salesPoolId = daoSalesOrder.SalesPoolId;
				_isOpened = daoSalesOrder.IsOpened;
				_openValue = daoSalesOrder.OpenValue;
				_latitude = daoSalesOrder.Latitude;
				_longitude = daoSalesOrder.Longitude;
				_itemTotal = daoSalesOrder.ItemTotal;
				_itemDiscountTotal = daoSalesOrder.ItemDiscountTotal;
				_taxTotal = daoSalesOrder.TaxTotal;
				_cashDiscountTotal = daoSalesOrder.CashDiscountTotal;
				_customDiscountTypeId = daoSalesOrder.CustomDiscountTypeId;
				_customDiscountValue = daoSalesOrder.CustomDiscountValue;
				_customDiscountTotal = daoSalesOrder.CustomDiscountTotal;
				_deliveryTotal = daoSalesOrder.DeliveryTotal;
				_netTotal = daoSalesOrder.NetTotal;
				_notes = daoSalesOrder.Notes;
				_invoiceRetry = daoSalesOrder.InvoiceRetry;
				_hasError = daoSalesOrder.HasError;
				_isInvoiced = daoSalesOrder.IsInvoiced;
				_invoiceCode = daoSalesOrder.InvoiceCode;
				_invoiceDate = daoSalesOrder.InvoiceDate;
				_createDate = daoSalesOrder.CreateDate;
				_recId = daoSalesOrder.RecId;
				_cBy = daoSalesOrder.CBy;
				_cDate = daoSalesOrder.CDate;
				_eBy = daoSalesOrder.EBy;
				_eDate = daoSalesOrder.EDate;
				_salesPerenId = daoSalesOrder.SalesPerenId;
				_inprogress = daoSalesOrder.Inprogress;
				_isBackoffice = daoSalesOrder.IsBackoffice;
				_isDeleted = daoSalesOrder.IsDeleted;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesOrder");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesOrder record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("deleteBOSalesOrder");
			try
			{
				daoSalesOrder.SalesId = _salesId;
				daoSalesOrder.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderCollection
		///This method returns the collection of BOSalesOrder objects
		///</Summary>
		///<returns>
		///List[BOSalesOrder]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrder> SalesOrderCollection()
		{
			try
			{
				IList<BOSalesOrder> boSalesOrderCollection = new List<BOSalesOrder>();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAll();
			
				foreach(DAOSalesOrder daoSalesOrder in daoSalesOrderCollection)
					boSalesOrderCollection.Add(new BOSalesOrder(daoSalesOrder));
			
				return boSalesOrderCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderCollectionCount
		///This method returns the collection count of BOSalesOrder objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrder.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderAddressCollection
		///This method returns its collection of BOSalesOrderAddress objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderAddress]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderAddress> SalesOrderAddressCollection()
		{
			try
			{
				if(_boSalesOrderAddressCollection == null)
					LoadSalesOrderAddressCollection();
				
				return _boSalesOrderAddressCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderDetailCollection
		///This method returns its collection of BOSalesOrderDetail objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderDetail]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderDetail> SalesOrderDetailCollection()
		{
			try
			{
				if(_boSalesOrderDetailCollection == null)
					LoadSalesOrderDetailCollection();
				
				return _boSalesOrderDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderDispatchCollection
		///This method returns its collection of BOSalesOrderDispatch objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderDispatch]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderDispatch> SalesOrderDispatchCollection()
		{
			try
			{
				if(_boSalesOrderDispatchCollection == null)
					LoadSalesOrderDispatchCollection();
				
				return _boSalesOrderDispatchCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderErrorCollection
		///This method returns its collection of BOSalesOrderError objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderError]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderError> SalesOrderErrorCollection()
		{
			try
			{
				if(_boSalesOrderErrorCollection == null)
					LoadSalesOrderErrorCollection();
				
				return _boSalesOrderErrorCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderLinePromotionCollection
		///This method returns its collection of BOSalesOrderLinePromotion objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderLinePromotion]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderLinePromotion> SalesOrderLinePromotionCollection()
		{
			try
			{
				if(_boSalesOrderLinePromotionCollection == null)
					LoadSalesOrderLinePromotionCollection();
				
				return _boSalesOrderLinePromotionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderLogCollection
		///This method returns its collection of BOSalesOrderLog objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderLog]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderLog> SalesOrderLogCollection()
		{
			try
			{
				if(_boSalesOrderLogCollection == null)
					LoadSalesOrderLogCollection();
				
				return _boSalesOrderLogCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderMessagesCollection
		///This method returns its collection of BOSalesOrderMessages objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderMessages]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderMessages> SalesOrderMessagesCollection()
		{
			try
			{
				if(_boSalesOrderMessagesCollection == null)
					LoadSalesOrderMessagesCollection();
				
				return _boSalesOrderMessagesCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderPromotionCollection
		///This method returns its collection of BOSalesOrderPromotion objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderPromotion]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderPromotion> SalesOrderPromotionCollection()
		{
			try
			{
				if(_boSalesOrderPromotionCollection == null)
					LoadSalesOrderPromotionCollection();
				
				return _boSalesOrderPromotionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderWorkflowCollection
		///This method returns its collection of BOSalesOrderWorkflow objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrderWorkflow]
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual IList<BOSalesOrderWorkflow> SalesOrderWorkflowCollection()
		{
			try
			{
				if(_boSalesOrderWorkflowCollection == null)
					LoadSalesOrderWorkflowCollection();
				
				return _boSalesOrderWorkflowCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrder>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrder.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrder objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrder resdaoSalesOrder in daoSalesOrderCollection)
					boSalesOrderCollection.Add((T)(object)new BOSalesOrder(resdaoSalesOrder));
			
				return boSalesOrderCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrder objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrder.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderAddressCollection
		///This method loads the internal collection of BOSalesOrderAddress objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderAddressCollection()
		{
			try
			{
				_boSalesOrderAddressCollection = new List<BOSalesOrderAddress>();
				IList<DAOSalesOrderAddress> daoSalesOrderAddressCollection = DAOSalesOrderAddress.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderAddress daoSalesOrderAddress in daoSalesOrderAddressCollection)
					_boSalesOrderAddressCollection.Add(new BOSalesOrderAddress(daoSalesOrderAddress));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderAddress
		///This method persists a BOSalesOrderAddress object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderAddress
		///</parameters>
		public virtual void AddSalesOrderAddress(BOSalesOrderAddress boSalesOrderAddress)
		{
			DAOSalesOrderAddress daoSalesOrderAddress = new DAOSalesOrderAddress();
			RegisterDataObject(daoSalesOrderAddress);
			BeginTransaction("addSalesOrderAddress");
			try
			{
				daoSalesOrderAddress.SalesAddressId = boSalesOrderAddress.SalesAddressId;
				daoSalesOrderAddress.RegionId = boSalesOrderAddress.RegionId;
				daoSalesOrderAddress.GovernerateId = boSalesOrderAddress.GovernerateId;
				daoSalesOrderAddress.CityId = boSalesOrderAddress.CityId;
				daoSalesOrderAddress.Address = boSalesOrderAddress.Address;
				daoSalesOrderAddress.Landmark = boSalesOrderAddress.Landmark;
				daoSalesOrderAddress.Latitude = boSalesOrderAddress.Latitude;
				daoSalesOrderAddress.Longitude = boSalesOrderAddress.Longitude;
				daoSalesOrderAddress.Building = boSalesOrderAddress.Building;
				daoSalesOrderAddress.Floor = boSalesOrderAddress.Floor;
				daoSalesOrderAddress.Property = boSalesOrderAddress.Property;
				daoSalesOrderAddress.Mobile = boSalesOrderAddress.Mobile;
				daoSalesOrderAddress.WhatsApp = boSalesOrderAddress.WhatsApp;
				daoSalesOrderAddress.Phone = boSalesOrderAddress.Phone;
				daoSalesOrderAddress.EBy = boSalesOrderAddress.EBy;
				daoSalesOrderAddress.EDate = boSalesOrderAddress.EDate;
				daoSalesOrderAddress.SalesId = _salesId.Value;
				daoSalesOrderAddress.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderAddress = new BOSalesOrderAddress(daoSalesOrderAddress);
				if(_boSalesOrderAddressCollection != null)
					_boSalesOrderAddressCollection.Add(boSalesOrderAddress);
			}
			catch
			{
				RollbackTransaction("addSalesOrderAddress");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderAddress
		///This method deletes all BOSalesOrderAddress objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderAddress()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderAddress");
			try
			{
				DAOSalesOrderAddress.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderAddressCollection != null)
				{
					_boSalesOrderAddressCollection.Clear();
					_boSalesOrderAddressCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderAddress");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderDetailCollection
		///This method loads the internal collection of BOSalesOrderDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderDetailCollection()
		{
			try
			{
				_boSalesOrderDetailCollection = new List<BOSalesOrderDetail>();
				IList<DAOSalesOrderDetail> daoSalesOrderDetailCollection = DAOSalesOrderDetail.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderDetail daoSalesOrderDetail in daoSalesOrderDetailCollection)
					_boSalesOrderDetailCollection.Add(new BOSalesOrderDetail(daoSalesOrderDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderDetail
		///This method persists a BOSalesOrderDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderDetail
		///</parameters>
		public virtual void AddSalesOrderDetail(BOSalesOrderDetail boSalesOrderDetail)
		{
			DAOSalesOrderDetail daoSalesOrderDetail = new DAOSalesOrderDetail();
			RegisterDataObject(daoSalesOrderDetail);
			BeginTransaction("addSalesOrderDetail");
			try
			{
				daoSalesOrderDetail.DetailId = boSalesOrderDetail.DetailId;
				daoSalesOrderDetail.ItemId = boSalesOrderDetail.ItemId;
				daoSalesOrderDetail.PublicPrice = boSalesOrderDetail.PublicPrice;
				daoSalesOrderDetail.ClientPrice = boSalesOrderDetail.ClientPrice;
				daoSalesOrderDetail.Quantity = boSalesOrderDetail.Quantity;
				daoSalesOrderDetail.LineValue = boSalesOrderDetail.LineValue;
				daoSalesOrderDetail.Discount = boSalesOrderDetail.Discount;
				daoSalesOrderDetail.CustomDiscount = boSalesOrderDetail.CustomDiscount;
				daoSalesOrderDetail.TaxValue = boSalesOrderDetail.TaxValue;
				daoSalesOrderDetail.IsBouns = boSalesOrderDetail.IsBouns;
				daoSalesOrderDetail.PromotionCode = boSalesOrderDetail.PromotionCode;
				daoSalesOrderDetail.ItemStoreId = boSalesOrderDetail.ItemStoreId;
				daoSalesOrderDetail.Batch = boSalesOrderDetail.Batch;
				daoSalesOrderDetail.Expiration = boSalesOrderDetail.Expiration;
				daoSalesOrderDetail.RecId = boSalesOrderDetail.RecId;
				daoSalesOrderDetail.UnitId = boSalesOrderDetail.UnitId;
				daoSalesOrderDetail.PromotionId = boSalesOrderDetail.PromotionId;
				daoSalesOrderDetail.ReturnReasonId = boSalesOrderDetail.ReturnReasonId;
				daoSalesOrderDetail.ReturnQuantity = boSalesOrderDetail.ReturnQuantity;
				daoSalesOrderDetail.TotalReturn = boSalesOrderDetail.TotalReturn;
				daoSalesOrderDetail.SalesId = _salesId.Value;
				daoSalesOrderDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderDetail = new BOSalesOrderDetail(daoSalesOrderDetail);
				if(_boSalesOrderDetailCollection != null)
					_boSalesOrderDetailCollection.Add(boSalesOrderDetail);
			}
			catch
			{
				RollbackTransaction("addSalesOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderDetail
		///This method deletes all BOSalesOrderDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderDetail");
			try
			{
				DAOSalesOrderDetail.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderDetailCollection != null)
				{
					_boSalesOrderDetailCollection.Clear();
					_boSalesOrderDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderDispatchCollection
		///This method loads the internal collection of BOSalesOrderDispatch objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderDispatchCollection()
		{
			try
			{
				_boSalesOrderDispatchCollection = new List<BOSalesOrderDispatch>();
				IList<DAOSalesOrderDispatch> daoSalesOrderDispatchCollection = DAOSalesOrderDispatch.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderDispatch daoSalesOrderDispatch in daoSalesOrderDispatchCollection)
					_boSalesOrderDispatchCollection.Add(new BOSalesOrderDispatch(daoSalesOrderDispatch));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderDispatch
		///This method persists a BOSalesOrderDispatch object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderDispatch
		///</parameters>
		public virtual void AddSalesOrderDispatch(BOSalesOrderDispatch boSalesOrderDispatch)
		{
			DAOSalesOrderDispatch daoSalesOrderDispatch = new DAOSalesOrderDispatch();
			RegisterDataObject(daoSalesOrderDispatch);
			BeginTransaction("addSalesOrderDispatch");
			try
			{
				daoSalesOrderDispatch.DispatchId = boSalesOrderDispatch.DispatchId;
				daoSalesOrderDispatch.DispatchCode = boSalesOrderDispatch.DispatchCode;
				daoSalesOrderDispatch.DispatchDate = boSalesOrderDispatch.DispatchDate;
				daoSalesOrderDispatch.DispatchTime = boSalesOrderDispatch.DispatchTime;
				daoSalesOrderDispatch.ShiftDate = boSalesOrderDispatch.ShiftDate;
				daoSalesOrderDispatch.DistributorId = boSalesOrderDispatch.DistributorId;
				daoSalesOrderDispatch.CarId = boSalesOrderDispatch.CarId;
				daoSalesOrderDispatch.DriverId = boSalesOrderDispatch.DriverId;
				daoSalesOrderDispatch.InZone = boSalesOrderDispatch.InZone;
				daoSalesOrderDispatch.Distance = boSalesOrderDispatch.Distance;
				daoSalesOrderDispatch.Latitude = boSalesOrderDispatch.Latitude;
				daoSalesOrderDispatch.Longitude = boSalesOrderDispatch.Longitude;
				daoSalesOrderDispatch.FeedbackId = boSalesOrderDispatch.FeedbackId;
				daoSalesOrderDispatch.Notes = boSalesOrderDispatch.Notes;
				daoSalesOrderDispatch.EBy = boSalesOrderDispatch.EBy;
				daoSalesOrderDispatch.EDate = boSalesOrderDispatch.EDate;
				daoSalesOrderDispatch.RejectReasonId = boSalesOrderDispatch.RejectReasonId;
				daoSalesOrderDispatch.RejectReasonNotes = boSalesOrderDispatch.RejectReasonNotes;
				daoSalesOrderDispatch.SalesId = _salesId.Value;
				daoSalesOrderDispatch.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderDispatch = new BOSalesOrderDispatch(daoSalesOrderDispatch);
				if(_boSalesOrderDispatchCollection != null)
					_boSalesOrderDispatchCollection.Add(boSalesOrderDispatch);
			}
			catch
			{
				RollbackTransaction("addSalesOrderDispatch");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderDispatch
		///This method deletes all BOSalesOrderDispatch objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderDispatch()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderDispatch");
			try
			{
				DAOSalesOrderDispatch.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderDispatchCollection != null)
				{
					_boSalesOrderDispatchCollection.Clear();
					_boSalesOrderDispatchCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderDispatch");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderErrorCollection
		///This method loads the internal collection of BOSalesOrderError objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderErrorCollection()
		{
			try
			{
				_boSalesOrderErrorCollection = new List<BOSalesOrderError>();
				IList<DAOSalesOrderError> daoSalesOrderErrorCollection = DAOSalesOrderError.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderError daoSalesOrderError in daoSalesOrderErrorCollection)
					_boSalesOrderErrorCollection.Add(new BOSalesOrderError(daoSalesOrderError));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderError
		///This method persists a BOSalesOrderError object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderError
		///</parameters>
		public virtual void AddSalesOrderError(BOSalesOrderError boSalesOrderError)
		{
			DAOSalesOrderError daoSalesOrderError = new DAOSalesOrderError();
			RegisterDataObject(daoSalesOrderError);
			BeginTransaction("addSalesOrderError");
			try
			{
				daoSalesOrderError.ErrorId = boSalesOrderError.ErrorId;
				daoSalesOrderError.ErrorDetail = boSalesOrderError.ErrorDetail;
				daoSalesOrderError.ErrorDate = boSalesOrderError.ErrorDate;
				daoSalesOrderError.SalesId = _salesId.Value;
				daoSalesOrderError.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderError = new BOSalesOrderError(daoSalesOrderError);
				if(_boSalesOrderErrorCollection != null)
					_boSalesOrderErrorCollection.Add(boSalesOrderError);
			}
			catch
			{
				RollbackTransaction("addSalesOrderError");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderError
		///This method deletes all BOSalesOrderError objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderError()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderError");
			try
			{
				DAOSalesOrderError.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderErrorCollection != null)
				{
					_boSalesOrderErrorCollection.Clear();
					_boSalesOrderErrorCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderError");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderLinePromotionCollection
		///This method loads the internal collection of BOSalesOrderLinePromotion objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderLinePromotionCollection()
		{
			try
			{
				_boSalesOrderLinePromotionCollection = new List<BOSalesOrderLinePromotion>();
				IList<DAOSalesOrderLinePromotion> daoSalesOrderLinePromotionCollection = DAOSalesOrderLinePromotion.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderLinePromotion daoSalesOrderLinePromotion in daoSalesOrderLinePromotionCollection)
					_boSalesOrderLinePromotionCollection.Add(new BOSalesOrderLinePromotion(daoSalesOrderLinePromotion));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderLinePromotion
		///This method persists a BOSalesOrderLinePromotion object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderLinePromotion
		///</parameters>
		public virtual void AddSalesOrderLinePromotion(BOSalesOrderLinePromotion boSalesOrderLinePromotion)
		{
			DAOSalesOrderLinePromotion daoSalesOrderLinePromotion = new DAOSalesOrderLinePromotion();
			RegisterDataObject(daoSalesOrderLinePromotion);
			BeginTransaction("addSalesOrderLinePromotion");
			try
			{
				daoSalesOrderLinePromotion.LineId = boSalesOrderLinePromotion.LineId;
				daoSalesOrderLinePromotion.ItemId = boSalesOrderLinePromotion.ItemId;
				daoSalesOrderLinePromotion.PromotionId = boSalesOrderLinePromotion.PromotionId;
				daoSalesOrderLinePromotion.Outcome = boSalesOrderLinePromotion.Outcome;
				daoSalesOrderLinePromotion.ItemStoreId = boSalesOrderLinePromotion.ItemStoreId;
				daoSalesOrderLinePromotion.OutcomeType = boSalesOrderLinePromotion.OutcomeType;
				daoSalesOrderLinePromotion.SalesId = _salesId.Value;
				daoSalesOrderLinePromotion.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderLinePromotion = new BOSalesOrderLinePromotion(daoSalesOrderLinePromotion);
				if(_boSalesOrderLinePromotionCollection != null)
					_boSalesOrderLinePromotionCollection.Add(boSalesOrderLinePromotion);
			}
			catch
			{
				RollbackTransaction("addSalesOrderLinePromotion");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderLinePromotion
		///This method deletes all BOSalesOrderLinePromotion objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderLinePromotion()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderLinePromotion");
			try
			{
				DAOSalesOrderLinePromotion.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderLinePromotionCollection != null)
				{
					_boSalesOrderLinePromotionCollection.Clear();
					_boSalesOrderLinePromotionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderLinePromotion");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderLogCollection
		///This method loads the internal collection of BOSalesOrderLog objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderLogCollection()
		{
			try
			{
				_boSalesOrderLogCollection = new List<BOSalesOrderLog>();
				IList<DAOSalesOrderLog> daoSalesOrderLogCollection = DAOSalesOrderLog.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderLog daoSalesOrderLog in daoSalesOrderLogCollection)
					_boSalesOrderLogCollection.Add(new BOSalesOrderLog(daoSalesOrderLog));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderLog
		///This method persists a BOSalesOrderLog object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderLog
		///</parameters>
		public virtual void AddSalesOrderLog(BOSalesOrderLog boSalesOrderLog)
		{
			DAOSalesOrderLog daoSalesOrderLog = new DAOSalesOrderLog();
			RegisterDataObject(daoSalesOrderLog);
			BeginTransaction("addSalesOrderLog");
			try
			{
				daoSalesOrderLog.LogId = boSalesOrderLog.LogId;
				daoSalesOrderLog.SalesOrderLogTypeId = boSalesOrderLog.SalesOrderLogTypeId;
				daoSalesOrderLog.LogDate = boSalesOrderLog.LogDate;
				daoSalesOrderLog.UserId = boSalesOrderLog.UserId;
				daoSalesOrderLog.SalesId = _salesId.Value;
				daoSalesOrderLog.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderLog = new BOSalesOrderLog(daoSalesOrderLog);
				if(_boSalesOrderLogCollection != null)
					_boSalesOrderLogCollection.Add(boSalesOrderLog);
			}
			catch
			{
				RollbackTransaction("addSalesOrderLog");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderLog
		///This method deletes all BOSalesOrderLog objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderLog()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderLog");
			try
			{
				DAOSalesOrderLog.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderLogCollection != null)
				{
					_boSalesOrderLogCollection.Clear();
					_boSalesOrderLogCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderLog");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderMessagesCollection
		///This method loads the internal collection of BOSalesOrderMessages objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderMessagesCollection()
		{
			try
			{
				_boSalesOrderMessagesCollection = new List<BOSalesOrderMessages>();
				IList<DAOSalesOrderMessages> daoSalesOrderMessagesCollection = DAOSalesOrderMessages.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderMessages daoSalesOrderMessages in daoSalesOrderMessagesCollection)
					_boSalesOrderMessagesCollection.Add(new BOSalesOrderMessages(daoSalesOrderMessages));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderMessages
		///This method persists a BOSalesOrderMessages object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderMessages
		///</parameters>
		public virtual void AddSalesOrderMessages(BOSalesOrderMessages boSalesOrderMessages)
		{
			DAOSalesOrderMessages daoSalesOrderMessages = new DAOSalesOrderMessages();
			RegisterDataObject(daoSalesOrderMessages);
			BeginTransaction("addSalesOrderMessages");
			try
			{
				daoSalesOrderMessages.SalesMessageId = boSalesOrderMessages.SalesMessageId;
				daoSalesOrderMessages.UserId = boSalesOrderMessages.UserId;
				daoSalesOrderMessages.MessageDate = boSalesOrderMessages.MessageDate;
				daoSalesOrderMessages.Message = boSalesOrderMessages.Message;
				daoSalesOrderMessages.SalesId = _salesId.Value;
				daoSalesOrderMessages.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderMessages = new BOSalesOrderMessages(daoSalesOrderMessages);
				if(_boSalesOrderMessagesCollection != null)
					_boSalesOrderMessagesCollection.Add(boSalesOrderMessages);
			}
			catch
			{
				RollbackTransaction("addSalesOrderMessages");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderMessages
		///This method deletes all BOSalesOrderMessages objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderMessages()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderMessages");
			try
			{
				DAOSalesOrderMessages.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderMessagesCollection != null)
				{
					_boSalesOrderMessagesCollection.Clear();
					_boSalesOrderMessagesCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderMessages");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderPromotionCollection
		///This method loads the internal collection of BOSalesOrderPromotion objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderPromotionCollection()
		{
			try
			{
				_boSalesOrderPromotionCollection = new List<BOSalesOrderPromotion>();
				IList<DAOSalesOrderPromotion> daoSalesOrderPromotionCollection = DAOSalesOrderPromotion.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderPromotion daoSalesOrderPromotion in daoSalesOrderPromotionCollection)
					_boSalesOrderPromotionCollection.Add(new BOSalesOrderPromotion(daoSalesOrderPromotion));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderPromotion
		///This method persists a BOSalesOrderPromotion object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderPromotion
		///</parameters>
		public virtual void AddSalesOrderPromotion(BOSalesOrderPromotion boSalesOrderPromotion)
		{
			DAOSalesOrderPromotion daoSalesOrderPromotion = new DAOSalesOrderPromotion();
			RegisterDataObject(daoSalesOrderPromotion);
			BeginTransaction("addSalesOrderPromotion");
			try
			{
				daoSalesOrderPromotion.PromotionId = boSalesOrderPromotion.PromotionId;
				daoSalesOrderPromotion.SalesId = _salesId.Value;
				daoSalesOrderPromotion.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderPromotion = new BOSalesOrderPromotion(daoSalesOrderPromotion);
				if(_boSalesOrderPromotionCollection != null)
					_boSalesOrderPromotionCollection.Add(boSalesOrderPromotion);
			}
			catch
			{
				RollbackTransaction("addSalesOrderPromotion");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderPromotion
		///This method deletes all BOSalesOrderPromotion objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderPromotion()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderPromotion");
			try
			{
				DAOSalesOrderPromotion.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderPromotionCollection != null)
				{
					_boSalesOrderPromotionCollection.Clear();
					_boSalesOrderPromotionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderPromotion");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderWorkflowCollection
		///This method loads the internal collection of BOSalesOrderWorkflow objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderWorkflowCollection()
		{
			try
			{
				_boSalesOrderWorkflowCollection = new List<BOSalesOrderWorkflow>();
				IList<DAOSalesOrderWorkflow> daoSalesOrderWorkflowCollection = DAOSalesOrderWorkflow.SelectAllBySalesId(_salesId.Value);
				
				foreach(DAOSalesOrderWorkflow daoSalesOrderWorkflow in daoSalesOrderWorkflowCollection)
					_boSalesOrderWorkflowCollection.Add(new BOSalesOrderWorkflow(daoSalesOrderWorkflow));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrderWorkflow
		///This method persists a BOSalesOrderWorkflow object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderWorkflow
		///</parameters>
		public virtual void AddSalesOrderWorkflow(BOSalesOrderWorkflow boSalesOrderWorkflow)
		{
			DAOSalesOrderWorkflow daoSalesOrderWorkflow = new DAOSalesOrderWorkflow();
			RegisterDataObject(daoSalesOrderWorkflow);
			BeginTransaction("addSalesOrderWorkflow");
			try
			{
				daoSalesOrderWorkflow.WorkflowId = boSalesOrderWorkflow.WorkflowId;
				daoSalesOrderWorkflow.SalesOrderStatusId = boSalesOrderWorkflow.SalesOrderStatusId;
				daoSalesOrderWorkflow.AgentId = boSalesOrderWorkflow.AgentId;
				daoSalesOrderWorkflow.WorkflowDate = boSalesOrderWorkflow.WorkflowDate;
				daoSalesOrderWorkflow.SalesId = _salesId.Value;
				daoSalesOrderWorkflow.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrderWorkflow = new BOSalesOrderWorkflow(daoSalesOrderWorkflow);
				if(_boSalesOrderWorkflowCollection != null)
					_boSalesOrderWorkflowCollection.Add(boSalesOrderWorkflow);
			}
			catch
			{
				RollbackTransaction("addSalesOrderWorkflow");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrderWorkflow
		///This method deletes all BOSalesOrderWorkflow objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrderWorkflow()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrderWorkflow");
			try
			{
				DAOSalesOrderWorkflow.DeleteAllBySalesId(ConnectionProvider, _salesId.Value);
				CommitTransaction();
				if(_boSalesOrderWorkflowCollection != null)
				{
					_boSalesOrderWorkflowCollection.Clear();
					_boSalesOrderWorkflowCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrderWorkflow");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SalesCode
		{
			get
			{
				 return _salesCode;
			}
			set
			{
				_salesCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesOrderTypeId
		{
			get
			{
				 return _salesOrderTypeId;
			}
			set
			{
				_salesOrderTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AgentId
		{
			get
			{
				 return _agentId;
			}
			set
			{
				_agentId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreId
		{
			get
			{
				 return _storeId;
			}
			set
			{
				_storeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PriorityTypeId
		{
			get
			{
				 return _priorityTypeId;
			}
			set
			{
				_priorityTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PaymentTermId
		{
			get
			{
				 return _paymentTermId;
			}
			set
			{
				_paymentTermId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? SalesDate
		{
			get
			{
				 return _salesDate;
			}
			set
			{
				_salesDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? SalesTime
		{
			get
			{
				 return _salesTime;
			}
			set
			{
				_salesTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesOrderStatusId
		{
			get
			{
				 return _salesOrderStatusId;
			}
			set
			{
				_salesOrderStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesOrderSourceId
		{
			get
			{
				 return _salesOrderSourceId;
			}
			set
			{
				_salesOrderSourceId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesChannelId
		{
			get
			{
				 return _salesChannelId;
			}
			set
			{
				_salesChannelId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesPoolId
		{
			get
			{
				 return _salesPoolId;
			}
			set
			{
				_salesPoolId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsOpened
		{
			get
			{
				 return _isOpened;
			}
			set
			{
				_isOpened = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? OpenValue
		{
			get
			{
				 return _openValue;
			}
			set
			{
				_openValue = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ItemTotal
		{
			get
			{
				 return _itemTotal;
			}
			set
			{
				_itemTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ItemDiscountTotal
		{
			get
			{
				 return _itemDiscountTotal;
			}
			set
			{
				_itemDiscountTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? TaxTotal
		{
			get
			{
				 return _taxTotal;
			}
			set
			{
				_taxTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CashDiscountTotal
		{
			get
			{
				 return _cashDiscountTotal;
			}
			set
			{
				_cashDiscountTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CustomDiscountTypeId
		{
			get
			{
				 return _customDiscountTypeId;
			}
			set
			{
				_customDiscountTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CustomDiscountValue
		{
			get
			{
				 return _customDiscountValue;
			}
			set
			{
				_customDiscountValue = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CustomDiscountTotal
		{
			get
			{
				 return _customDiscountTotal;
			}
			set
			{
				_customDiscountTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? DeliveryTotal
		{
			get
			{
				 return _deliveryTotal;
			}
			set
			{
				_deliveryTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? NetTotal
		{
			get
			{
				 return _netTotal;
			}
			set
			{
				_netTotal = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? InvoiceRetry
		{
			get
			{
				 return _invoiceRetry;
			}
			set
			{
				_invoiceRetry = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? HasError
		{
			get
			{
				 return _hasError;
			}
			set
			{
				_hasError = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsInvoiced
		{
			get
			{
				 return _isInvoiced;
			}
			set
			{
				_isInvoiced = value;
				_isDirty = true;
			}
		}
		
		public virtual string InvoiceCode
		{
			get
			{
				 return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? InvoiceDate
		{
			get
			{
				 return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CreateDate
		{
			get
			{
				 return _createDate;
			}
			set
			{
				_createDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? RecId
		{
			get
			{
				 return _recId;
			}
			set
			{
				_recId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesPerenId
		{
			get
			{
				 return _salesPerenId;
			}
			set
			{
				_salesPerenId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Inprogress
		{
			get
			{
				 return _inprogress;
			}
			set
			{
				_inprogress = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsBackoffice
		{
			get
			{
				 return _isBackoffice;
			}
			set
			{
				_isBackoffice = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDeleted
		{
			get
			{
				 return _isDeleted;
			}
			set
			{
				_isDeleted = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
