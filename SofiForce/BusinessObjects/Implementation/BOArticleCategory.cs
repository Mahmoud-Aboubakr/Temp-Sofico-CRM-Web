/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOArticleCategory.
	///It maintains a collection of BOArticle objects.
	///</Summary>
	public partial class BOArticleCategory : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _articleCategoryId;
		protected string _articleCategoryCode;
		protected string _articleCategoryNameEn;
		protected string _articleCategoryNameAr;
		protected string _color;
		protected string _icon;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOArticle> _boArticleCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOArticleCategory()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 articleCategoryId
		///</parameters>
		public BOArticleCategory(Int32 articleCategoryId)
		{
			try
			{
				DAOArticleCategory daoArticleCategory = DAOArticleCategory.SelectOne(articleCategoryId);
				_articleCategoryId = daoArticleCategory.ArticleCategoryId;
				_articleCategoryCode = daoArticleCategory.ArticleCategoryCode;
				_articleCategoryNameEn = daoArticleCategory.ArticleCategoryNameEn;
				_articleCategoryNameAr = daoArticleCategory.ArticleCategoryNameAr;
				_color = daoArticleCategory.Color;
				_icon = daoArticleCategory.Icon;
				_displayOrder = daoArticleCategory.DisplayOrder;
				_isActive = daoArticleCategory.IsActive;
				_canEdit = daoArticleCategory.CanEdit;
				_canDelete = daoArticleCategory.CanDelete;
				_cBy = daoArticleCategory.CBy;
				_cDate = daoArticleCategory.CDate;
				_eBy = daoArticleCategory.EBy;
				_eDate = daoArticleCategory.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOArticleCategory
		///</parameters>
		protected internal BOArticleCategory(DAOArticleCategory daoArticleCategory)
		{
			try
			{
				_articleCategoryId = daoArticleCategory.ArticleCategoryId;
				_articleCategoryCode = daoArticleCategory.ArticleCategoryCode;
				_articleCategoryNameEn = daoArticleCategory.ArticleCategoryNameEn;
				_articleCategoryNameAr = daoArticleCategory.ArticleCategoryNameAr;
				_color = daoArticleCategory.Color;
				_icon = daoArticleCategory.Icon;
				_displayOrder = daoArticleCategory.DisplayOrder;
				_isActive = daoArticleCategory.IsActive;
				_canEdit = daoArticleCategory.CanEdit;
				_canDelete = daoArticleCategory.CanDelete;
				_cBy = daoArticleCategory.CBy;
				_cDate = daoArticleCategory.CDate;
				_eBy = daoArticleCategory.EBy;
				_eDate = daoArticleCategory.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ArticleCategory record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOArticleCategory daoArticleCategory = new DAOArticleCategory();
			RegisterDataObject(daoArticleCategory);
			BeginTransaction("savenewBOArticleCategory");
			try
			{
				daoArticleCategory.ArticleCategoryId = _articleCategoryId;
				daoArticleCategory.ArticleCategoryCode = _articleCategoryCode;
				daoArticleCategory.ArticleCategoryNameEn = _articleCategoryNameEn;
				daoArticleCategory.ArticleCategoryNameAr = _articleCategoryNameAr;
				daoArticleCategory.Color = _color;
				daoArticleCategory.Icon = _icon;
				daoArticleCategory.DisplayOrder = _displayOrder;
				daoArticleCategory.IsActive = _isActive;
				daoArticleCategory.CanEdit = _canEdit;
				daoArticleCategory.CanDelete = _canDelete;
				daoArticleCategory.CBy = _cBy;
				daoArticleCategory.CDate = _cDate;
				daoArticleCategory.EBy = _eBy;
				daoArticleCategory.EDate = _eDate;
				daoArticleCategory.Insert();
				CommitTransaction();
				
				_articleCategoryId = daoArticleCategory.ArticleCategoryId;
				_articleCategoryCode = daoArticleCategory.ArticleCategoryCode;
				_articleCategoryNameEn = daoArticleCategory.ArticleCategoryNameEn;
				_articleCategoryNameAr = daoArticleCategory.ArticleCategoryNameAr;
				_color = daoArticleCategory.Color;
				_icon = daoArticleCategory.Icon;
				_displayOrder = daoArticleCategory.DisplayOrder;
				_isActive = daoArticleCategory.IsActive;
				_canEdit = daoArticleCategory.CanEdit;
				_canDelete = daoArticleCategory.CanDelete;
				_cBy = daoArticleCategory.CBy;
				_cDate = daoArticleCategory.CDate;
				_eBy = daoArticleCategory.EBy;
				_eDate = daoArticleCategory.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOArticleCategory");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ArticleCategory record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOArticleCategory
		///</parameters>
		public virtual void Update()
		{
			DAOArticleCategory daoArticleCategory = new DAOArticleCategory();
			RegisterDataObject(daoArticleCategory);
			BeginTransaction("updateBOArticleCategory");
			try
			{
				daoArticleCategory.ArticleCategoryId = _articleCategoryId;
				daoArticleCategory.ArticleCategoryCode = _articleCategoryCode;
				daoArticleCategory.ArticleCategoryNameEn = _articleCategoryNameEn;
				daoArticleCategory.ArticleCategoryNameAr = _articleCategoryNameAr;
				daoArticleCategory.Color = _color;
				daoArticleCategory.Icon = _icon;
				daoArticleCategory.DisplayOrder = _displayOrder;
				daoArticleCategory.IsActive = _isActive;
				daoArticleCategory.CanEdit = _canEdit;
				daoArticleCategory.CanDelete = _canDelete;
				daoArticleCategory.CBy = _cBy;
				daoArticleCategory.CDate = _cDate;
				daoArticleCategory.EBy = _eBy;
				daoArticleCategory.EDate = _eDate;
				daoArticleCategory.Update();
				CommitTransaction();
				
				_articleCategoryId = daoArticleCategory.ArticleCategoryId;
				_articleCategoryCode = daoArticleCategory.ArticleCategoryCode;
				_articleCategoryNameEn = daoArticleCategory.ArticleCategoryNameEn;
				_articleCategoryNameAr = daoArticleCategory.ArticleCategoryNameAr;
				_color = daoArticleCategory.Color;
				_icon = daoArticleCategory.Icon;
				_displayOrder = daoArticleCategory.DisplayOrder;
				_isActive = daoArticleCategory.IsActive;
				_canEdit = daoArticleCategory.CanEdit;
				_canDelete = daoArticleCategory.CanDelete;
				_cBy = daoArticleCategory.CBy;
				_cDate = daoArticleCategory.CDate;
				_eBy = daoArticleCategory.EBy;
				_eDate = daoArticleCategory.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOArticleCategory");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ArticleCategory record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOArticleCategory daoArticleCategory = new DAOArticleCategory();
			RegisterDataObject(daoArticleCategory);
			BeginTransaction("deleteBOArticleCategory");
			try
			{
				daoArticleCategory.ArticleCategoryId = _articleCategoryId;
				daoArticleCategory.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOArticleCategory");
				throw;
			}
		}
		
		///<Summary>
		///ArticleCategoryCollection
		///This method returns the collection of BOArticleCategory objects
		///</Summary>
		///<returns>
		///List[BOArticleCategory]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOArticleCategory> ArticleCategoryCollection()
		{
			try
			{
				IList<BOArticleCategory> boArticleCategoryCollection = new List<BOArticleCategory>();
				IList<DAOArticleCategory> daoArticleCategoryCollection = DAOArticleCategory.SelectAll();
			
				foreach(DAOArticleCategory daoArticleCategory in daoArticleCategoryCollection)
					boArticleCategoryCollection.Add(new BOArticleCategory(daoArticleCategory));
			
				return boArticleCategoryCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ArticleCategoryCollectionCount
		///This method returns the collection count of BOArticleCategory objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ArticleCategoryCollectionCount()
		{
			try
			{
				Int32 objCount = DAOArticleCategory.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ArticleCollection
		///This method returns its collection of BOArticle objects
		///</Summary>
		///<returns>
		///IList[BOArticle]
		///</returns>
		///<parameters>
		///BOArticleCategory
		///</parameters>
		public virtual IList<BOArticle> ArticleCollection()
		{
			try
			{
				if(_boArticleCollection == null)
					LoadArticleCollection();
				
				return _boArticleCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOArticleCategory>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOArticleCategory.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ArticleCategoryCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOArticleCategory objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boArticleCategoryCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOArticleCategory> daoArticleCategoryCollection = DAOArticleCategory.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOArticleCategory resdaoArticleCategory in daoArticleCategoryCollection)
					boArticleCategoryCollection.Add((T)(object)new BOArticleCategory(resdaoArticleCategory));
			
				return boArticleCategoryCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ArticleCategoryCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOArticleCategory objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOArticleCategory.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadArticleCollection
		///This method loads the internal collection of BOArticle objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadArticleCollection()
		{
			try
			{
				_boArticleCollection = new List<BOArticle>();
				IList<DAOArticle> daoArticleCollection = DAOArticle.SelectAllByArticleCategoryId(_articleCategoryId.Value);
				
				foreach(DAOArticle daoArticle in daoArticleCollection)
					_boArticleCollection.Add(new BOArticle(daoArticle));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddArticle
		///This method persists a BOArticle object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOArticle
		///</parameters>
		public virtual void AddArticle(BOArticle boArticle)
		{
			DAOArticle daoArticle = new DAOArticle();
			RegisterDataObject(daoArticle);
			BeginTransaction("addArticle");
			try
			{
				daoArticle.ArticleId = boArticle.ArticleId;
				daoArticle.ArticleCode = boArticle.ArticleCode;
				daoArticle.ArticleDate = boArticle.ArticleDate;
				daoArticle.ArticleTime = boArticle.ArticleTime;
				daoArticle.ArticleTitleAr = boArticle.ArticleTitleAr;
				daoArticle.ArticleTitleEn = boArticle.ArticleTitleEn;
				daoArticle.IsActive = boArticle.IsActive;
				daoArticle.ArticleImage = boArticle.ArticleImage;
				daoArticle.CBy = boArticle.CBy;
				daoArticle.CDate = boArticle.CDate;
				daoArticle.EBy = boArticle.EBy;
				daoArticle.EDate = boArticle.EDate;
				daoArticle.ArticleCategoryId = _articleCategoryId.Value;
				daoArticle.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boArticle = new BOArticle(daoArticle);
				if(_boArticleCollection != null)
					_boArticleCollection.Add(boArticle);
			}
			catch
			{
				RollbackTransaction("addArticle");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllArticle
		///This method deletes all BOArticle objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllArticle()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllArticle");
			try
			{
				DAOArticle.DeleteAllByArticleCategoryId(ConnectionProvider, _articleCategoryId.Value);
				CommitTransaction();
				if(_boArticleCollection != null)
				{
					_boArticleCollection.Clear();
					_boArticleCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllArticle");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ArticleCategoryId
		{
			get
			{
				 return _articleCategoryId;
			}
			set
			{
				_articleCategoryId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ArticleCategoryCode
		{
			get
			{
				 return _articleCategoryCode;
			}
			set
			{
				_articleCategoryCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ArticleCategoryNameEn
		{
			get
			{
				 return _articleCategoryNameEn;
			}
			set
			{
				_articleCategoryNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ArticleCategoryNameAr
		{
			get
			{
				 return _articleCategoryNameAr;
			}
			set
			{
				_articleCategoryNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
