/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOApplicationFeaturePermission.
	///It maintains a collection of BOAppRoleFeaturePermission objects.
	///</Summary>
	public partial class BOApplicationFeaturePermission : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _featurePermissionId;
		protected Int32? _featueId;
		protected string _featurePermissionCode;
		protected string _featurePermissionNameEn;
		protected string _featurePermissionNameAr;
		protected string _icon;
		protected string _color;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppRoleFeaturePermission> _boAppRoleFeaturePermissionCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOApplicationFeaturePermission()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 featurePermissionId
		///</parameters>
		public BOApplicationFeaturePermission(Int32 featurePermissionId)
		{
			try
			{
				DAOApplicationFeaturePermission daoApplicationFeaturePermission = DAOApplicationFeaturePermission.SelectOne(featurePermissionId);
				_featurePermissionId = daoApplicationFeaturePermission.FeaturePermissionId;
				_featueId = daoApplicationFeaturePermission.FeatueId;
				_featurePermissionCode = daoApplicationFeaturePermission.FeaturePermissionCode;
				_featurePermissionNameEn = daoApplicationFeaturePermission.FeaturePermissionNameEn;
				_featurePermissionNameAr = daoApplicationFeaturePermission.FeaturePermissionNameAr;
				_icon = daoApplicationFeaturePermission.Icon;
				_color = daoApplicationFeaturePermission.Color;
				_isActive = daoApplicationFeaturePermission.IsActive;
				_canEdit = daoApplicationFeaturePermission.CanEdit;
				_canDelete = daoApplicationFeaturePermission.CanDelete;
				_cBy = daoApplicationFeaturePermission.CBy;
				_cDate = daoApplicationFeaturePermission.CDate;
				_eBy = daoApplicationFeaturePermission.EBy;
				_eDate = daoApplicationFeaturePermission.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOApplicationFeaturePermission
		///</parameters>
		protected internal BOApplicationFeaturePermission(DAOApplicationFeaturePermission daoApplicationFeaturePermission)
		{
			try
			{
				_featurePermissionId = daoApplicationFeaturePermission.FeaturePermissionId;
				_featueId = daoApplicationFeaturePermission.FeatueId;
				_featurePermissionCode = daoApplicationFeaturePermission.FeaturePermissionCode;
				_featurePermissionNameEn = daoApplicationFeaturePermission.FeaturePermissionNameEn;
				_featurePermissionNameAr = daoApplicationFeaturePermission.FeaturePermissionNameAr;
				_icon = daoApplicationFeaturePermission.Icon;
				_color = daoApplicationFeaturePermission.Color;
				_isActive = daoApplicationFeaturePermission.IsActive;
				_canEdit = daoApplicationFeaturePermission.CanEdit;
				_canDelete = daoApplicationFeaturePermission.CanDelete;
				_cBy = daoApplicationFeaturePermission.CBy;
				_cDate = daoApplicationFeaturePermission.CDate;
				_eBy = daoApplicationFeaturePermission.EBy;
				_eDate = daoApplicationFeaturePermission.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ApplicationFeaturePermission record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOApplicationFeaturePermission daoApplicationFeaturePermission = new DAOApplicationFeaturePermission();
			RegisterDataObject(daoApplicationFeaturePermission);
			BeginTransaction("savenewBOApplicationFeatureP2810");
			try
			{
				daoApplicationFeaturePermission.FeatueId = _featueId;
				daoApplicationFeaturePermission.FeaturePermissionCode = _featurePermissionCode;
				daoApplicationFeaturePermission.FeaturePermissionNameEn = _featurePermissionNameEn;
				daoApplicationFeaturePermission.FeaturePermissionNameAr = _featurePermissionNameAr;
				daoApplicationFeaturePermission.Icon = _icon;
				daoApplicationFeaturePermission.Color = _color;
				daoApplicationFeaturePermission.IsActive = _isActive;
				daoApplicationFeaturePermission.CanEdit = _canEdit;
				daoApplicationFeaturePermission.CanDelete = _canDelete;
				daoApplicationFeaturePermission.CBy = _cBy;
				daoApplicationFeaturePermission.CDate = _cDate;
				daoApplicationFeaturePermission.EBy = _eBy;
				daoApplicationFeaturePermission.EDate = _eDate;
				daoApplicationFeaturePermission.Insert();
				CommitTransaction();
				
				_featurePermissionId = daoApplicationFeaturePermission.FeaturePermissionId;
				_featueId = daoApplicationFeaturePermission.FeatueId;
				_featurePermissionCode = daoApplicationFeaturePermission.FeaturePermissionCode;
				_featurePermissionNameEn = daoApplicationFeaturePermission.FeaturePermissionNameEn;
				_featurePermissionNameAr = daoApplicationFeaturePermission.FeaturePermissionNameAr;
				_icon = daoApplicationFeaturePermission.Icon;
				_color = daoApplicationFeaturePermission.Color;
				_isActive = daoApplicationFeaturePermission.IsActive;
				_canEdit = daoApplicationFeaturePermission.CanEdit;
				_canDelete = daoApplicationFeaturePermission.CanDelete;
				_cBy = daoApplicationFeaturePermission.CBy;
				_cDate = daoApplicationFeaturePermission.CDate;
				_eBy = daoApplicationFeaturePermission.EBy;
				_eDate = daoApplicationFeaturePermission.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOApplicationFeatureP2810");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ApplicationFeaturePermission record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOApplicationFeaturePermission
		///</parameters>
		public virtual void Update()
		{
			DAOApplicationFeaturePermission daoApplicationFeaturePermission = new DAOApplicationFeaturePermission();
			RegisterDataObject(daoApplicationFeaturePermission);
			BeginTransaction("updateBOApplicationFeaturePe2810");
			try
			{
				daoApplicationFeaturePermission.FeaturePermissionId = _featurePermissionId;
				daoApplicationFeaturePermission.FeatueId = _featueId;
				daoApplicationFeaturePermission.FeaturePermissionCode = _featurePermissionCode;
				daoApplicationFeaturePermission.FeaturePermissionNameEn = _featurePermissionNameEn;
				daoApplicationFeaturePermission.FeaturePermissionNameAr = _featurePermissionNameAr;
				daoApplicationFeaturePermission.Icon = _icon;
				daoApplicationFeaturePermission.Color = _color;
				daoApplicationFeaturePermission.IsActive = _isActive;
				daoApplicationFeaturePermission.CanEdit = _canEdit;
				daoApplicationFeaturePermission.CanDelete = _canDelete;
				daoApplicationFeaturePermission.CBy = _cBy;
				daoApplicationFeaturePermission.CDate = _cDate;
				daoApplicationFeaturePermission.EBy = _eBy;
				daoApplicationFeaturePermission.EDate = _eDate;
				daoApplicationFeaturePermission.Update();
				CommitTransaction();
				
				_featurePermissionId = daoApplicationFeaturePermission.FeaturePermissionId;
				_featueId = daoApplicationFeaturePermission.FeatueId;
				_featurePermissionCode = daoApplicationFeaturePermission.FeaturePermissionCode;
				_featurePermissionNameEn = daoApplicationFeaturePermission.FeaturePermissionNameEn;
				_featurePermissionNameAr = daoApplicationFeaturePermission.FeaturePermissionNameAr;
				_icon = daoApplicationFeaturePermission.Icon;
				_color = daoApplicationFeaturePermission.Color;
				_isActive = daoApplicationFeaturePermission.IsActive;
				_canEdit = daoApplicationFeaturePermission.CanEdit;
				_canDelete = daoApplicationFeaturePermission.CanDelete;
				_cBy = daoApplicationFeaturePermission.CBy;
				_cDate = daoApplicationFeaturePermission.CDate;
				_eBy = daoApplicationFeaturePermission.EBy;
				_eDate = daoApplicationFeaturePermission.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOApplicationFeaturePe2810");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ApplicationFeaturePermission record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOApplicationFeaturePermission daoApplicationFeaturePermission = new DAOApplicationFeaturePermission();
			RegisterDataObject(daoApplicationFeaturePermission);
			BeginTransaction("deleteBOApplicationFeaturePe8034");
			try
			{
				daoApplicationFeaturePermission.FeaturePermissionId = _featurePermissionId;
				daoApplicationFeaturePermission.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOApplicationFeaturePe8034");
				throw;
			}
		}
		
		///<Summary>
		///ApplicationFeaturePermissionCollection
		///This method returns the collection of BOApplicationFeaturePermission objects
		///</Summary>
		///<returns>
		///List[BOApplicationFeaturePermission]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOApplicationFeaturePermission> ApplicationFeaturePermissionCollection()
		{
			try
			{
				IList<BOApplicationFeaturePermission> boApplicationFeaturePermissionCollection = new List<BOApplicationFeaturePermission>();
				IList<DAOApplicationFeaturePermission> daoApplicationFeaturePermissionCollection = DAOApplicationFeaturePermission.SelectAll();
			
				foreach(DAOApplicationFeaturePermission daoApplicationFeaturePermission in daoApplicationFeaturePermissionCollection)
					boApplicationFeaturePermissionCollection.Add(new BOApplicationFeaturePermission(daoApplicationFeaturePermission));
			
				return boApplicationFeaturePermissionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationFeaturePermissionCollectionCount
		///This method returns the collection count of BOApplicationFeaturePermission objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ApplicationFeaturePermissionCollectionCount()
		{
			try
			{
				Int32 objCount = DAOApplicationFeaturePermission.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppRoleFeaturePermissionCollection
		///This method returns its collection of BOAppRoleFeaturePermission objects
		///</Summary>
		///<returns>
		///IList[BOAppRoleFeaturePermission]
		///</returns>
		///<parameters>
		///BOApplicationFeaturePermission
		///</parameters>
		public virtual IList<BOAppRoleFeaturePermission> AppRoleFeaturePermissionCollection()
		{
			try
			{
				if(_boAppRoleFeaturePermissionCollection == null)
					LoadAppRoleFeaturePermissionCollection();
				
				return _boAppRoleFeaturePermissionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOApplicationFeaturePermission>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOApplicationFeaturePermission.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationFeaturePermissionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOApplicationFeaturePermission objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boApplicationFeaturePermissionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOApplicationFeaturePermission> daoApplicationFeaturePermissionCollection = DAOApplicationFeaturePermission.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOApplicationFeaturePermission resdaoApplicationFeaturePermission in daoApplicationFeaturePermissionCollection)
					boApplicationFeaturePermissionCollection.Add((T)(object)new BOApplicationFeaturePermission(resdaoApplicationFeaturePermission));
			
				return boApplicationFeaturePermissionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationFeaturePermissionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOApplicationFeaturePermission objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOApplicationFeaturePermission.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppRoleFeaturePermissionCollection
		///This method loads the internal collection of BOAppRoleFeaturePermission objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppRoleFeaturePermissionCollection()
		{
			try
			{
				_boAppRoleFeaturePermissionCollection = new List<BOAppRoleFeaturePermission>();
				IList<DAOAppRoleFeaturePermission> daoAppRoleFeaturePermissionCollection = DAOAppRoleFeaturePermission.SelectAllByFeaturePermissionId(_featurePermissionId.Value);
				
				foreach(DAOAppRoleFeaturePermission daoAppRoleFeaturePermission in daoAppRoleFeaturePermissionCollection)
					_boAppRoleFeaturePermissionCollection.Add(new BOAppRoleFeaturePermission(daoAppRoleFeaturePermission));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppRoleFeaturePermission
		///This method persists a BOAppRoleFeaturePermission object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppRoleFeaturePermission
		///</parameters>
		public virtual void AddAppRoleFeaturePermission(BOAppRoleFeaturePermission boAppRoleFeaturePermission)
		{
			DAOAppRoleFeaturePermission daoAppRoleFeaturePermission = new DAOAppRoleFeaturePermission();
			RegisterDataObject(daoAppRoleFeaturePermission);
			BeginTransaction("addAppRoleFeaturePermission");
			try
			{
				daoAppRoleFeaturePermission.RolePermissionId = boAppRoleFeaturePermission.RolePermissionId;
				daoAppRoleFeaturePermission.AppRoleFeatueId = boAppRoleFeaturePermission.AppRoleFeatueId;
				daoAppRoleFeaturePermission.CBy = boAppRoleFeaturePermission.CBy;
				daoAppRoleFeaturePermission.CDate = boAppRoleFeaturePermission.CDate;
				daoAppRoleFeaturePermission.EBy = boAppRoleFeaturePermission.EBy;
				daoAppRoleFeaturePermission.EDate = boAppRoleFeaturePermission.EDate;
				daoAppRoleFeaturePermission.FeaturePermissionId = _featurePermissionId.Value;
				daoAppRoleFeaturePermission.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppRoleFeaturePermission = new BOAppRoleFeaturePermission(daoAppRoleFeaturePermission);
				if(_boAppRoleFeaturePermissionCollection != null)
					_boAppRoleFeaturePermissionCollection.Add(boAppRoleFeaturePermission);
			}
			catch
			{
				RollbackTransaction("addAppRoleFeaturePermission");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppRoleFeaturePermission
		///This method deletes all BOAppRoleFeaturePermission objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppRoleFeaturePermission()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppRoleFeaturePermi8034");
			try
			{
				DAOAppRoleFeaturePermission.DeleteAllByFeaturePermissionId(ConnectionProvider, _featurePermissionId.Value);
				CommitTransaction();
				if(_boAppRoleFeaturePermissionCollection != null)
				{
					_boAppRoleFeaturePermissionCollection.Clear();
					_boAppRoleFeaturePermissionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppRoleFeaturePermi8034");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? FeaturePermissionId
		{
			get
			{
				 return _featurePermissionId;
			}
			set
			{
				_featurePermissionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FeatueId
		{
			get
			{
				 return _featueId;
			}
			set
			{
				_featueId = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeaturePermissionCode
		{
			get
			{
				 return _featurePermissionCode;
			}
			set
			{
				_featurePermissionCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeaturePermissionNameEn
		{
			get
			{
				 return _featurePermissionNameEn;
			}
			set
			{
				_featurePermissionNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeaturePermissionNameAr
		{
			get
			{
				 return _featurePermissionNameAr;
			}
			set
			{
				_featurePermissionNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
