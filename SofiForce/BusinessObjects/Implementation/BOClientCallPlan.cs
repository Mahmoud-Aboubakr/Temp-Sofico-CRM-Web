/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientCallPlan.
	///</Summary>
	public partial class BOClientCallPlan : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _calPlanId;
		protected Int32? _clientId;
		protected Int32? _day1;
		protected Int32? _day2;
		protected Int32? _day3;
		protected Int32? _day4;
		protected Int32? _day5;
		protected Int32? _day6;
		protected Int32? _day7;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientCallPlan()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 calPlanId
		///</parameters>
		public BOClientCallPlan(Int32 calPlanId)
		{
			try
			{
				DAOClientCallPlan daoClientCallPlan = DAOClientCallPlan.SelectOne(calPlanId);
				_calPlanId = daoClientCallPlan.CalPlanId;
				_clientId = daoClientCallPlan.ClientId;
				_day1 = daoClientCallPlan.Day1;
				_day2 = daoClientCallPlan.Day2;
				_day3 = daoClientCallPlan.Day3;
				_day4 = daoClientCallPlan.Day4;
				_day5 = daoClientCallPlan.Day5;
				_day6 = daoClientCallPlan.Day6;
				_day7 = daoClientCallPlan.Day7;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientCallPlan
		///</parameters>
		protected internal BOClientCallPlan(DAOClientCallPlan daoClientCallPlan)
		{
			try
			{
				_calPlanId = daoClientCallPlan.CalPlanId;
				_clientId = daoClientCallPlan.ClientId;
				_day1 = daoClientCallPlan.Day1;
				_day2 = daoClientCallPlan.Day2;
				_day3 = daoClientCallPlan.Day3;
				_day4 = daoClientCallPlan.Day4;
				_day5 = daoClientCallPlan.Day5;
				_day6 = daoClientCallPlan.Day6;
				_day7 = daoClientCallPlan.Day7;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientCallPlan record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientCallPlan daoClientCallPlan = new DAOClientCallPlan();
			RegisterDataObject(daoClientCallPlan);
			BeginTransaction("savenewBOClientCallPlan");
			try
			{
				daoClientCallPlan.ClientId = _clientId;
				daoClientCallPlan.Day1 = _day1;
				daoClientCallPlan.Day2 = _day2;
				daoClientCallPlan.Day3 = _day3;
				daoClientCallPlan.Day4 = _day4;
				daoClientCallPlan.Day5 = _day5;
				daoClientCallPlan.Day6 = _day6;
				daoClientCallPlan.Day7 = _day7;
				daoClientCallPlan.Insert();
				CommitTransaction();
				
				_calPlanId = daoClientCallPlan.CalPlanId;
				_clientId = daoClientCallPlan.ClientId;
				_day1 = daoClientCallPlan.Day1;
				_day2 = daoClientCallPlan.Day2;
				_day3 = daoClientCallPlan.Day3;
				_day4 = daoClientCallPlan.Day4;
				_day5 = daoClientCallPlan.Day5;
				_day6 = daoClientCallPlan.Day6;
				_day7 = daoClientCallPlan.Day7;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientCallPlan");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientCallPlan record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientCallPlan
		///</parameters>
		public virtual void Update()
		{
			DAOClientCallPlan daoClientCallPlan = new DAOClientCallPlan();
			RegisterDataObject(daoClientCallPlan);
			BeginTransaction("updateBOClientCallPlan");
			try
			{
				daoClientCallPlan.CalPlanId = _calPlanId;
				daoClientCallPlan.ClientId = _clientId;
				daoClientCallPlan.Day1 = _day1;
				daoClientCallPlan.Day2 = _day2;
				daoClientCallPlan.Day3 = _day3;
				daoClientCallPlan.Day4 = _day4;
				daoClientCallPlan.Day5 = _day5;
				daoClientCallPlan.Day6 = _day6;
				daoClientCallPlan.Day7 = _day7;
				daoClientCallPlan.Update();
				CommitTransaction();
				
				_calPlanId = daoClientCallPlan.CalPlanId;
				_clientId = daoClientCallPlan.ClientId;
				_day1 = daoClientCallPlan.Day1;
				_day2 = daoClientCallPlan.Day2;
				_day3 = daoClientCallPlan.Day3;
				_day4 = daoClientCallPlan.Day4;
				_day5 = daoClientCallPlan.Day5;
				_day6 = daoClientCallPlan.Day6;
				_day7 = daoClientCallPlan.Day7;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientCallPlan");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientCallPlan record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientCallPlan daoClientCallPlan = new DAOClientCallPlan();
			RegisterDataObject(daoClientCallPlan);
			BeginTransaction("deleteBOClientCallPlan");
			try
			{
				daoClientCallPlan.CalPlanId = _calPlanId;
				daoClientCallPlan.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientCallPlan");
				throw;
			}
		}
		
		///<Summary>
		///ClientCallPlanCollection
		///This method returns the collection of BOClientCallPlan objects
		///</Summary>
		///<returns>
		///List[BOClientCallPlan]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientCallPlan> ClientCallPlanCollection()
		{
			try
			{
				IList<BOClientCallPlan> boClientCallPlanCollection = new List<BOClientCallPlan>();
				IList<DAOClientCallPlan> daoClientCallPlanCollection = DAOClientCallPlan.SelectAll();
			
				foreach(DAOClientCallPlan daoClientCallPlan in daoClientCallPlanCollection)
					boClientCallPlanCollection.Add(new BOClientCallPlan(daoClientCallPlan));
			
				return boClientCallPlanCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCallPlanCollectionCount
		///This method returns the collection count of BOClientCallPlan objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientCallPlanCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientCallPlan.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientCallPlan>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientCallPlan.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCallPlanCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientCallPlan objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientCallPlanCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientCallPlan> daoClientCallPlanCollection = DAOClientCallPlan.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientCallPlan resdaoClientCallPlan in daoClientCallPlanCollection)
					boClientCallPlanCollection.Add((T)(object)new BOClientCallPlan(resdaoClientCallPlan));
			
				return boClientCallPlanCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCallPlanCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientCallPlan objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientCallPlan.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? CalPlanId
		{
			get
			{
				 return _calPlanId;
			}
			set
			{
				_calPlanId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day1
		{
			get
			{
				 return _day1;
			}
			set
			{
				_day1 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day2
		{
			get
			{
				 return _day2;
			}
			set
			{
				_day2 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day3
		{
			get
			{
				 return _day3;
			}
			set
			{
				_day3 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day4
		{
			get
			{
				 return _day4;
			}
			set
			{
				_day4 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day5
		{
			get
			{
				 return _day5;
			}
			set
			{
				_day5 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day6
		{
			get
			{
				 return _day6;
			}
			set
			{
				_day6 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Day7
		{
			get
			{
				 return _day7;
			}
			set
			{
				_day7 = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
