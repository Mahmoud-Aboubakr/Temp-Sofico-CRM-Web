/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesOrderAddress.
	///</Summary>
	public partial class BOSalesOrderAddress : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _salesAddressId;
		protected Int64? _salesId;
		protected Int32? _regionId;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected string _address;
		protected string _landmark;
		protected double? _latitude;
		protected double? _longitude;
		protected string _building;
		protected string _floor;
		protected string _property;
		protected string _mobile;
		protected string _whatsApp;
		protected string _phone;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesOrderAddress()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 salesAddressId
		///</parameters>
		public BOSalesOrderAddress(Int64 salesAddressId)
		{
			try
			{
				DAOSalesOrderAddress daoSalesOrderAddress = DAOSalesOrderAddress.SelectOne(salesAddressId);
				_salesAddressId = daoSalesOrderAddress.SalesAddressId;
				_salesId = daoSalesOrderAddress.SalesId;
				_regionId = daoSalesOrderAddress.RegionId;
				_governerateId = daoSalesOrderAddress.GovernerateId;
				_cityId = daoSalesOrderAddress.CityId;
				_address = daoSalesOrderAddress.Address;
				_landmark = daoSalesOrderAddress.Landmark;
				_latitude = daoSalesOrderAddress.Latitude;
				_longitude = daoSalesOrderAddress.Longitude;
				_building = daoSalesOrderAddress.Building;
				_floor = daoSalesOrderAddress.Floor;
				_property = daoSalesOrderAddress.Property;
				_mobile = daoSalesOrderAddress.Mobile;
				_whatsApp = daoSalesOrderAddress.WhatsApp;
				_phone = daoSalesOrderAddress.Phone;
				_eBy = daoSalesOrderAddress.EBy;
				_eDate = daoSalesOrderAddress.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesOrderAddress
		///</parameters>
		protected internal BOSalesOrderAddress(DAOSalesOrderAddress daoSalesOrderAddress)
		{
			try
			{
				_salesAddressId = daoSalesOrderAddress.SalesAddressId;
				_salesId = daoSalesOrderAddress.SalesId;
				_regionId = daoSalesOrderAddress.RegionId;
				_governerateId = daoSalesOrderAddress.GovernerateId;
				_cityId = daoSalesOrderAddress.CityId;
				_address = daoSalesOrderAddress.Address;
				_landmark = daoSalesOrderAddress.Landmark;
				_latitude = daoSalesOrderAddress.Latitude;
				_longitude = daoSalesOrderAddress.Longitude;
				_building = daoSalesOrderAddress.Building;
				_floor = daoSalesOrderAddress.Floor;
				_property = daoSalesOrderAddress.Property;
				_mobile = daoSalesOrderAddress.Mobile;
				_whatsApp = daoSalesOrderAddress.WhatsApp;
				_phone = daoSalesOrderAddress.Phone;
				_eBy = daoSalesOrderAddress.EBy;
				_eDate = daoSalesOrderAddress.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesOrderAddress record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSalesOrderAddress daoSalesOrderAddress = new DAOSalesOrderAddress();
			RegisterDataObject(daoSalesOrderAddress);
			BeginTransaction("savenewBOSalesOrderAddress");
			try
			{
				daoSalesOrderAddress.SalesId = _salesId;
				daoSalesOrderAddress.RegionId = _regionId;
				daoSalesOrderAddress.GovernerateId = _governerateId;
				daoSalesOrderAddress.CityId = _cityId;
				daoSalesOrderAddress.Address = _address;
				daoSalesOrderAddress.Landmark = _landmark;
				daoSalesOrderAddress.Latitude = _latitude;
				daoSalesOrderAddress.Longitude = _longitude;
				daoSalesOrderAddress.Building = _building;
				daoSalesOrderAddress.Floor = _floor;
				daoSalesOrderAddress.Property = _property;
				daoSalesOrderAddress.Mobile = _mobile;
				daoSalesOrderAddress.WhatsApp = _whatsApp;
				daoSalesOrderAddress.Phone = _phone;
				daoSalesOrderAddress.EBy = _eBy;
				daoSalesOrderAddress.EDate = _eDate;
				daoSalesOrderAddress.Insert();
				CommitTransaction();
				
				_salesAddressId = daoSalesOrderAddress.SalesAddressId;
				_salesId = daoSalesOrderAddress.SalesId;
				_regionId = daoSalesOrderAddress.RegionId;
				_governerateId = daoSalesOrderAddress.GovernerateId;
				_cityId = daoSalesOrderAddress.CityId;
				_address = daoSalesOrderAddress.Address;
				_landmark = daoSalesOrderAddress.Landmark;
				_latitude = daoSalesOrderAddress.Latitude;
				_longitude = daoSalesOrderAddress.Longitude;
				_building = daoSalesOrderAddress.Building;
				_floor = daoSalesOrderAddress.Floor;
				_property = daoSalesOrderAddress.Property;
				_mobile = daoSalesOrderAddress.Mobile;
				_whatsApp = daoSalesOrderAddress.WhatsApp;
				_phone = daoSalesOrderAddress.Phone;
				_eBy = daoSalesOrderAddress.EBy;
				_eDate = daoSalesOrderAddress.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSalesOrderAddress");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SalesOrderAddress record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrderAddress
		///</parameters>
		public virtual void Update()
		{
			DAOSalesOrderAddress daoSalesOrderAddress = new DAOSalesOrderAddress();
			RegisterDataObject(daoSalesOrderAddress);
			BeginTransaction("updateBOSalesOrderAddress");
			try
			{
				daoSalesOrderAddress.SalesAddressId = _salesAddressId;
				daoSalesOrderAddress.SalesId = _salesId;
				daoSalesOrderAddress.RegionId = _regionId;
				daoSalesOrderAddress.GovernerateId = _governerateId;
				daoSalesOrderAddress.CityId = _cityId;
				daoSalesOrderAddress.Address = _address;
				daoSalesOrderAddress.Landmark = _landmark;
				daoSalesOrderAddress.Latitude = _latitude;
				daoSalesOrderAddress.Longitude = _longitude;
				daoSalesOrderAddress.Building = _building;
				daoSalesOrderAddress.Floor = _floor;
				daoSalesOrderAddress.Property = _property;
				daoSalesOrderAddress.Mobile = _mobile;
				daoSalesOrderAddress.WhatsApp = _whatsApp;
				daoSalesOrderAddress.Phone = _phone;
				daoSalesOrderAddress.EBy = _eBy;
				daoSalesOrderAddress.EDate = _eDate;
				daoSalesOrderAddress.Update();
				CommitTransaction();
				
				_salesAddressId = daoSalesOrderAddress.SalesAddressId;
				_salesId = daoSalesOrderAddress.SalesId;
				_regionId = daoSalesOrderAddress.RegionId;
				_governerateId = daoSalesOrderAddress.GovernerateId;
				_cityId = daoSalesOrderAddress.CityId;
				_address = daoSalesOrderAddress.Address;
				_landmark = daoSalesOrderAddress.Landmark;
				_latitude = daoSalesOrderAddress.Latitude;
				_longitude = daoSalesOrderAddress.Longitude;
				_building = daoSalesOrderAddress.Building;
				_floor = daoSalesOrderAddress.Floor;
				_property = daoSalesOrderAddress.Property;
				_mobile = daoSalesOrderAddress.Mobile;
				_whatsApp = daoSalesOrderAddress.WhatsApp;
				_phone = daoSalesOrderAddress.Phone;
				_eBy = daoSalesOrderAddress.EBy;
				_eDate = daoSalesOrderAddress.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSalesOrderAddress");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesOrderAddress record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSalesOrderAddress daoSalesOrderAddress = new DAOSalesOrderAddress();
			RegisterDataObject(daoSalesOrderAddress);
			BeginTransaction("deleteBOSalesOrderAddress");
			try
			{
				daoSalesOrderAddress.SalesAddressId = _salesAddressId;
				daoSalesOrderAddress.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSalesOrderAddress");
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderAddressCollection
		///This method returns the collection of BOSalesOrderAddress objects
		///</Summary>
		///<returns>
		///List[BOSalesOrderAddress]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSalesOrderAddress> SalesOrderAddressCollection()
		{
			try
			{
				IList<BOSalesOrderAddress> boSalesOrderAddressCollection = new List<BOSalesOrderAddress>();
				IList<DAOSalesOrderAddress> daoSalesOrderAddressCollection = DAOSalesOrderAddress.SelectAll();
			
				foreach(DAOSalesOrderAddress daoSalesOrderAddress in daoSalesOrderAddressCollection)
					boSalesOrderAddressCollection.Add(new BOSalesOrderAddress(daoSalesOrderAddress));
			
				return boSalesOrderAddressCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderAddressCollectionCount
		///This method returns the collection count of BOSalesOrderAddress objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesOrderAddressCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSalesOrderAddress.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSalesOrderAddress>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSalesOrderAddress.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderAddressCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSalesOrderAddress objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesOrderAddressCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSalesOrderAddress> daoSalesOrderAddressCollection = DAOSalesOrderAddress.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSalesOrderAddress resdaoSalesOrderAddress in daoSalesOrderAddressCollection)
					boSalesOrderAddressCollection.Add((T)(object)new BOSalesOrderAddress(resdaoSalesOrderAddress));
			
				return boSalesOrderAddressCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SalesOrderAddressCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSalesOrderAddress objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSalesOrderAddress.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? SalesAddressId
		{
			get
			{
				 return _salesAddressId;
			}
			set
			{
				_salesAddressId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SalesId
		{
			get
			{
				 return _salesId;
			}
			set
			{
				_salesId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RegionId
		{
			get
			{
				 return _regionId;
			}
			set
			{
				_regionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? GovernerateId
		{
			get
			{
				 return _governerateId;
			}
			set
			{
				_governerateId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CityId
		{
			get
			{
				 return _cityId;
			}
			set
			{
				_cityId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string Landmark
		{
			get
			{
				 return _landmark;
			}
			set
			{
				_landmark = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual string Building
		{
			get
			{
				 return _building;
			}
			set
			{
				_building = value;
				_isDirty = true;
			}
		}
		
		public virtual string Floor
		{
			get
			{
				 return _floor;
			}
			set
			{
				_floor = value;
				_isDirty = true;
			}
		}
		
		public virtual string Property
		{
			get
			{
				 return _property;
			}
			set
			{
				_property = value;
				_isDirty = true;
			}
		}
		
		public virtual string Mobile
		{
			get
			{
				 return _mobile;
			}
			set
			{
				_mobile = value;
				_isDirty = true;
			}
		}
		
		public virtual string WhatsApp
		{
			get
			{
				 return _whatsApp;
			}
			set
			{
				_whatsApp = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
