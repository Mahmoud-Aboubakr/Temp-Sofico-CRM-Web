/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOBusinessUnit.
	///It maintains a collection of BOClient,BORepresentative,BOSupervisor objects.
	///</Summary>
	public partial class BOBusinessUnit : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _businessUnitId;
		protected Int32? _branchId;
		protected string _businessUnitCode;
		protected string _businessUnitNameEn;
		protected string _businessUnitNameAr;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _notes;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClient> _boClientCollection;
		List<BORepresentative> _boRepresentativeCollection;
		List<BOSupervisor> _boSupervisorCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOBusinessUnit()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 businessUnitId
		///</parameters>
		public BOBusinessUnit(Int32 businessUnitId)
		{
			try
			{
				DAOBusinessUnit daoBusinessUnit = DAOBusinessUnit.SelectOne(businessUnitId);
				_businessUnitId = daoBusinessUnit.BusinessUnitId;
				_branchId = daoBusinessUnit.BranchId;
				_businessUnitCode = daoBusinessUnit.BusinessUnitCode;
				_businessUnitNameEn = daoBusinessUnit.BusinessUnitNameEn;
				_businessUnitNameAr = daoBusinessUnit.BusinessUnitNameAr;
				_icon = daoBusinessUnit.Icon;
				_color = daoBusinessUnit.Color;
				_displayOrder = daoBusinessUnit.DisplayOrder;
				_isActive = daoBusinessUnit.IsActive;
				_canEdit = daoBusinessUnit.CanEdit;
				_canDelete = daoBusinessUnit.CanDelete;
				_notes = daoBusinessUnit.Notes;
				_cBy = daoBusinessUnit.CBy;
				_cDate = daoBusinessUnit.CDate;
				_eBy = daoBusinessUnit.EBy;
				_eDate = daoBusinessUnit.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOBusinessUnit
		///</parameters>
		protected internal BOBusinessUnit(DAOBusinessUnit daoBusinessUnit)
		{
			try
			{
				_businessUnitId = daoBusinessUnit.BusinessUnitId;
				_branchId = daoBusinessUnit.BranchId;
				_businessUnitCode = daoBusinessUnit.BusinessUnitCode;
				_businessUnitNameEn = daoBusinessUnit.BusinessUnitNameEn;
				_businessUnitNameAr = daoBusinessUnit.BusinessUnitNameAr;
				_icon = daoBusinessUnit.Icon;
				_color = daoBusinessUnit.Color;
				_displayOrder = daoBusinessUnit.DisplayOrder;
				_isActive = daoBusinessUnit.IsActive;
				_canEdit = daoBusinessUnit.CanEdit;
				_canDelete = daoBusinessUnit.CanDelete;
				_notes = daoBusinessUnit.Notes;
				_cBy = daoBusinessUnit.CBy;
				_cDate = daoBusinessUnit.CDate;
				_eBy = daoBusinessUnit.EBy;
				_eDate = daoBusinessUnit.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new BusinessUnit record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOBusinessUnit daoBusinessUnit = new DAOBusinessUnit();
			RegisterDataObject(daoBusinessUnit);
			BeginTransaction("savenewBOBusinessUnit");
			try
			{
				daoBusinessUnit.BranchId = _branchId;
				daoBusinessUnit.BusinessUnitCode = _businessUnitCode;
				daoBusinessUnit.BusinessUnitNameEn = _businessUnitNameEn;
				daoBusinessUnit.BusinessUnitNameAr = _businessUnitNameAr;
				daoBusinessUnit.Icon = _icon;
				daoBusinessUnit.Color = _color;
				daoBusinessUnit.DisplayOrder = _displayOrder;
				daoBusinessUnit.IsActive = _isActive;
				daoBusinessUnit.CanEdit = _canEdit;
				daoBusinessUnit.CanDelete = _canDelete;
				daoBusinessUnit.Notes = _notes;
				daoBusinessUnit.CBy = _cBy;
				daoBusinessUnit.CDate = _cDate;
				daoBusinessUnit.EBy = _eBy;
				daoBusinessUnit.EDate = _eDate;
				daoBusinessUnit.Insert();
				CommitTransaction();
				
				_businessUnitId = daoBusinessUnit.BusinessUnitId;
				_branchId = daoBusinessUnit.BranchId;
				_businessUnitCode = daoBusinessUnit.BusinessUnitCode;
				_businessUnitNameEn = daoBusinessUnit.BusinessUnitNameEn;
				_businessUnitNameAr = daoBusinessUnit.BusinessUnitNameAr;
				_icon = daoBusinessUnit.Icon;
				_color = daoBusinessUnit.Color;
				_displayOrder = daoBusinessUnit.DisplayOrder;
				_isActive = daoBusinessUnit.IsActive;
				_canEdit = daoBusinessUnit.CanEdit;
				_canDelete = daoBusinessUnit.CanDelete;
				_notes = daoBusinessUnit.Notes;
				_cBy = daoBusinessUnit.CBy;
				_cDate = daoBusinessUnit.CDate;
				_eBy = daoBusinessUnit.EBy;
				_eDate = daoBusinessUnit.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOBusinessUnit");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one BusinessUnit record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOBusinessUnit
		///</parameters>
		public virtual void Update()
		{
			DAOBusinessUnit daoBusinessUnit = new DAOBusinessUnit();
			RegisterDataObject(daoBusinessUnit);
			BeginTransaction("updateBOBusinessUnit");
			try
			{
				daoBusinessUnit.BusinessUnitId = _businessUnitId;
				daoBusinessUnit.BranchId = _branchId;
				daoBusinessUnit.BusinessUnitCode = _businessUnitCode;
				daoBusinessUnit.BusinessUnitNameEn = _businessUnitNameEn;
				daoBusinessUnit.BusinessUnitNameAr = _businessUnitNameAr;
				daoBusinessUnit.Icon = _icon;
				daoBusinessUnit.Color = _color;
				daoBusinessUnit.DisplayOrder = _displayOrder;
				daoBusinessUnit.IsActive = _isActive;
				daoBusinessUnit.CanEdit = _canEdit;
				daoBusinessUnit.CanDelete = _canDelete;
				daoBusinessUnit.Notes = _notes;
				daoBusinessUnit.CBy = _cBy;
				daoBusinessUnit.CDate = _cDate;
				daoBusinessUnit.EBy = _eBy;
				daoBusinessUnit.EDate = _eDate;
				daoBusinessUnit.Update();
				CommitTransaction();
				
				_businessUnitId = daoBusinessUnit.BusinessUnitId;
				_branchId = daoBusinessUnit.BranchId;
				_businessUnitCode = daoBusinessUnit.BusinessUnitCode;
				_businessUnitNameEn = daoBusinessUnit.BusinessUnitNameEn;
				_businessUnitNameAr = daoBusinessUnit.BusinessUnitNameAr;
				_icon = daoBusinessUnit.Icon;
				_color = daoBusinessUnit.Color;
				_displayOrder = daoBusinessUnit.DisplayOrder;
				_isActive = daoBusinessUnit.IsActive;
				_canEdit = daoBusinessUnit.CanEdit;
				_canDelete = daoBusinessUnit.CanDelete;
				_notes = daoBusinessUnit.Notes;
				_cBy = daoBusinessUnit.CBy;
				_cDate = daoBusinessUnit.CDate;
				_eBy = daoBusinessUnit.EBy;
				_eDate = daoBusinessUnit.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOBusinessUnit");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one BusinessUnit record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOBusinessUnit daoBusinessUnit = new DAOBusinessUnit();
			RegisterDataObject(daoBusinessUnit);
			BeginTransaction("deleteBOBusinessUnit");
			try
			{
				daoBusinessUnit.BusinessUnitId = _businessUnitId;
				daoBusinessUnit.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOBusinessUnit");
				throw;
			}
		}
		
		///<Summary>
		///BusinessUnitCollection
		///This method returns the collection of BOBusinessUnit objects
		///</Summary>
		///<returns>
		///List[BOBusinessUnit]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOBusinessUnit> BusinessUnitCollection()
		{
			try
			{
				IList<BOBusinessUnit> boBusinessUnitCollection = new List<BOBusinessUnit>();
				IList<DAOBusinessUnit> daoBusinessUnitCollection = DAOBusinessUnit.SelectAll();
			
				foreach(DAOBusinessUnit daoBusinessUnit in daoBusinessUnitCollection)
					boBusinessUnitCollection.Add(new BOBusinessUnit(daoBusinessUnit));
			
				return boBusinessUnitCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BusinessUnitCollectionCount
		///This method returns the collection count of BOBusinessUnit objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 BusinessUnitCollectionCount()
		{
			try
			{
				Int32 objCount = DAOBusinessUnit.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientCollection
		///This method returns its collection of BOClient objects
		///</Summary>
		///<returns>
		///IList[BOClient]
		///</returns>
		///<parameters>
		///BOBusinessUnit
		///</parameters>
		public virtual IList<BOClient> ClientCollection()
		{
			try
			{
				if(_boClientCollection == null)
					LoadClientCollection();
				
				return _boClientCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeCollection
		///This method returns its collection of BORepresentative objects
		///</Summary>
		///<returns>
		///IList[BORepresentative]
		///</returns>
		///<parameters>
		///BOBusinessUnit
		///</parameters>
		public virtual IList<BORepresentative> RepresentativeCollection()
		{
			try
			{
				if(_boRepresentativeCollection == null)
					LoadRepresentativeCollection();
				
				return _boRepresentativeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SupervisorCollection
		///This method returns its collection of BOSupervisor objects
		///</Summary>
		///<returns>
		///IList[BOSupervisor]
		///</returns>
		///<parameters>
		///BOBusinessUnit
		///</parameters>
		public virtual IList<BOSupervisor> SupervisorCollection()
		{
			try
			{
				if(_boSupervisorCollection == null)
					LoadSupervisorCollection();
				
				return _boSupervisorCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOBusinessUnit>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOBusinessUnit.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BusinessUnitCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOBusinessUnit objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boBusinessUnitCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOBusinessUnit> daoBusinessUnitCollection = DAOBusinessUnit.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOBusinessUnit resdaoBusinessUnit in daoBusinessUnitCollection)
					boBusinessUnitCollection.Add((T)(object)new BOBusinessUnit(resdaoBusinessUnit));
			
				return boBusinessUnitCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BusinessUnitCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOBusinessUnit objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOBusinessUnit.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientCollection
		///This method loads the internal collection of BOClient objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientCollection()
		{
			try
			{
				_boClientCollection = new List<BOClient>();
				IList<DAOClient> daoClientCollection = DAOClient.SelectAllByBusinessUnitId(_businessUnitId.Value);
				
				foreach(DAOClient daoClient in daoClientCollection)
					_boClientCollection.Add(new BOClient(daoClient));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClient
		///This method persists a BOClient object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual void AddClient(BOClient boClient)
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("addClient");
			try
			{
				daoClient.ClientId = boClient.ClientId;
				daoClient.ClientAccountId = boClient.ClientAccountId;
				daoClient.ClientTypeId = boClient.ClientTypeId;
				daoClient.ClientCode = boClient.ClientCode;
				daoClient.ClientNameAr = boClient.ClientNameAr;
				daoClient.ClientNameEn = boClient.ClientNameEn;
				daoClient.BranchId = boClient.BranchId;
				daoClient.RegionId = boClient.RegionId;
				daoClient.GovernerateId = boClient.GovernerateId;
				daoClient.CityId = boClient.CityId;
				daoClient.LocationLevelId = boClient.LocationLevelId;
				daoClient.ClientGroupId = boClient.ClientGroupId;
				daoClient.ClientGroupSubId = boClient.ClientGroupSubId;
				daoClient.ClientClassificationId = boClient.ClientClassificationId;
				daoClient.CreditLimit = boClient.CreditLimit;
				daoClient.CreditBalance = boClient.CreditBalance;
				daoClient.PaymentTermId = boClient.PaymentTermId;
				daoClient.IsChain = boClient.IsChain;
				daoClient.Building = boClient.Building;
				daoClient.Floor = boClient.Floor;
				daoClient.Property = boClient.Property;
				daoClient.Address = boClient.Address;
				daoClient.Landmark = boClient.Landmark;
				daoClient.Phone = boClient.Phone;
				daoClient.Mobile = boClient.Mobile;
				daoClient.WhatsApp = boClient.WhatsApp;
				daoClient.IsActive = boClient.IsActive;
				daoClient.Latitude = boClient.Latitude;
				daoClient.Longitude = boClient.Longitude;
				daoClient.CBy = boClient.CBy;
				daoClient.CDate = boClient.CDate;
				daoClient.EBy = boClient.EBy;
				daoClient.EDate = boClient.EDate;
				daoClient.IsTaxable = boClient.IsTaxable;
				daoClient.IsCashDiscount = boClient.IsCashDiscount;
				daoClient.ResponsibleNameAr = boClient.ResponsibleNameAr;
				daoClient.ResponsibleNameEn = boClient.ResponsibleNameEn;
				daoClient.TaxCode = boClient.TaxCode;
				daoClient.CommercialCode = boClient.CommercialCode;
				daoClient.IsNew = boClient.IsNew;
				daoClient.NeedValidation = boClient.NeedValidation;
				daoClient.CashGroupId = boClient.CashGroupId;
				daoClient.InRoute = boClient.InRoute;
				daoClient.SalesChannelId = boClient.SalesChannelId;
				daoClient.SalesPoolId = boClient.SalesPoolId;
				daoClient.UserId = boClient.UserId;
				daoClient.Points = boClient.Points;
				daoClient.Wallet = boClient.Wallet;
				daoClient.DealId = boClient.DealId;
				daoClient.BusinessUnitId = _businessUnitId.Value;
				daoClient.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClient = new BOClient(daoClient);
				if(_boClientCollection != null)
					_boClientCollection.Add(boClient);
			}
			catch
			{
				RollbackTransaction("addClient");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClient
		///This method deletes all BOClient objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClient()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClient");
			try
			{
				DAOClient.DeleteAllByBusinessUnitId(ConnectionProvider, _businessUnitId.Value);
				CommitTransaction();
				if(_boClientCollection != null)
				{
					_boClientCollection.Clear();
					_boClientCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClient");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeCollection
		///This method loads the internal collection of BORepresentative objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeCollection()
		{
			try
			{
				_boRepresentativeCollection = new List<BORepresentative>();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAllByBusinessUnitId(_businessUnitId.Value);
				
				foreach(DAORepresentative daoRepresentative in daoRepresentativeCollection)
					_boRepresentativeCollection.Add(new BORepresentative(daoRepresentative));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentative
		///This method persists a BORepresentative object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual void AddRepresentative(BORepresentative boRepresentative)
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("addRepresentative");
			try
			{
				daoRepresentative.RepresentativeId = boRepresentative.RepresentativeId;
				daoRepresentative.BranchId = boRepresentative.BranchId;
				daoRepresentative.UserId = boRepresentative.UserId;
				daoRepresentative.SupervisorId = boRepresentative.SupervisorId;
				daoRepresentative.KindId = boRepresentative.KindId;
				daoRepresentative.CompanyCode = boRepresentative.CompanyCode;
				daoRepresentative.RepresentativeCode = boRepresentative.RepresentativeCode;
				daoRepresentative.RepresentativeNameAr = boRepresentative.RepresentativeNameAr;
				daoRepresentative.RepresentativeNameEn = boRepresentative.RepresentativeNameEn;
				daoRepresentative.Phone = boRepresentative.Phone;
				daoRepresentative.PhoneAlternative = boRepresentative.PhoneAlternative;
				daoRepresentative.IsActive = boRepresentative.IsActive;
				daoRepresentative.DisplayOrder = boRepresentative.DisplayOrder;
				daoRepresentative.CanEdit = boRepresentative.CanEdit;
				daoRepresentative.CanDelete = boRepresentative.CanDelete;
				daoRepresentative.JoinDate = boRepresentative.JoinDate;
				daoRepresentative.Notes = boRepresentative.Notes;
				daoRepresentative.Icon = boRepresentative.Icon;
				daoRepresentative.Color = boRepresentative.Color;
				daoRepresentative.IsTerminated = boRepresentative.IsTerminated;
				daoRepresentative.TerminationDate = boRepresentative.TerminationDate;
				daoRepresentative.TerminationReasonId = boRepresentative.TerminationReasonId;
				daoRepresentative.CBy = boRepresentative.CBy;
				daoRepresentative.CDate = boRepresentative.CDate;
				daoRepresentative.EBy = boRepresentative.EBy;
				daoRepresentative.EDate = boRepresentative.EDate;
				daoRepresentative.BusinessUnitId = _businessUnitId.Value;
				daoRepresentative.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentative = new BORepresentative(daoRepresentative);
				if(_boRepresentativeCollection != null)
					_boRepresentativeCollection.Add(boRepresentative);
			}
			catch
			{
				RollbackTransaction("addRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentative
		///This method deletes all BORepresentative objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentative()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentative");
			try
			{
				DAORepresentative.DeleteAllByBusinessUnitId(ConnectionProvider, _businessUnitId.Value);
				CommitTransaction();
				if(_boRepresentativeCollection != null)
				{
					_boRepresentativeCollection.Clear();
					_boRepresentativeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///LoadSupervisorCollection
		///This method loads the internal collection of BOSupervisor objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSupervisorCollection()
		{
			try
			{
				_boSupervisorCollection = new List<BOSupervisor>();
				IList<DAOSupervisor> daoSupervisorCollection = DAOSupervisor.SelectAllByBusinessUnitId(_businessUnitId.Value);
				
				foreach(DAOSupervisor daoSupervisor in daoSupervisorCollection)
					_boSupervisorCollection.Add(new BOSupervisor(daoSupervisor));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSupervisor
		///This method persists a BOSupervisor object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupervisor
		///</parameters>
		public virtual void AddSupervisor(BOSupervisor boSupervisor)
		{
			DAOSupervisor daoSupervisor = new DAOSupervisor();
			RegisterDataObject(daoSupervisor);
			BeginTransaction("addSupervisor");
			try
			{
				daoSupervisor.SupervisorId = boSupervisor.SupervisorId;
				daoSupervisor.SupervisorTypeId = boSupervisor.SupervisorTypeId;
				daoSupervisor.CompanyCode = boSupervisor.CompanyCode;
				daoSupervisor.SupervisorCode = boSupervisor.SupervisorCode;
				daoSupervisor.SupervisorNameEn = boSupervisor.SupervisorNameEn;
				daoSupervisor.SupervisorNameAr = boSupervisor.SupervisorNameAr;
				daoSupervisor.Phone = boSupervisor.Phone;
				daoSupervisor.PhoneAlternative = boSupervisor.PhoneAlternative;
				daoSupervisor.JoinDate = boSupervisor.JoinDate;
				daoSupervisor.UserId = boSupervisor.UserId;
				daoSupervisor.BranchId = boSupervisor.BranchId;
				daoSupervisor.IsActive = boSupervisor.IsActive;
				daoSupervisor.Color = boSupervisor.Color;
				daoSupervisor.DisplayOrder = boSupervisor.DisplayOrder;
				daoSupervisor.Icon = boSupervisor.Icon;
				daoSupervisor.CanEdit = boSupervisor.CanEdit;
				daoSupervisor.CanDelete = boSupervisor.CanDelete;
				daoSupervisor.Notes = boSupervisor.Notes;
				daoSupervisor.IsTerminated = boSupervisor.IsTerminated;
				daoSupervisor.TerminationDate = boSupervisor.TerminationDate;
				daoSupervisor.TerminationReasonId = boSupervisor.TerminationReasonId;
				daoSupervisor.CBy = boSupervisor.CBy;
				daoSupervisor.CDate = boSupervisor.CDate;
				daoSupervisor.EBy = boSupervisor.EBy;
				daoSupervisor.EDate = boSupervisor.EDate;
				daoSupervisor.BusinessUnitId = _businessUnitId.Value;
				daoSupervisor.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSupervisor = new BOSupervisor(daoSupervisor);
				if(_boSupervisorCollection != null)
					_boSupervisorCollection.Add(boSupervisor);
			}
			catch
			{
				RollbackTransaction("addSupervisor");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSupervisor
		///This method deletes all BOSupervisor objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSupervisor()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSupervisor");
			try
			{
				DAOSupervisor.DeleteAllByBusinessUnitId(ConnectionProvider, _businessUnitId.Value);
				CommitTransaction();
				if(_boSupervisorCollection != null)
				{
					_boSupervisorCollection.Clear();
					_boSupervisorCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSupervisor");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? BusinessUnitId
		{
			get
			{
				 return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessUnitCode
		{
			get
			{
				 return _businessUnitCode;
			}
			set
			{
				_businessUnitCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessUnitNameEn
		{
			get
			{
				 return _businessUnitNameEn;
			}
			set
			{
				_businessUnitNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessUnitNameAr
		{
			get
			{
				 return _businessUnitNameAr;
			}
			set
			{
				_businessUnitNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
