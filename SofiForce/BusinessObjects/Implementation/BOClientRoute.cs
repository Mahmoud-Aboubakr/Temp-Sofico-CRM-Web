/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientRoute.
	///</Summary>
	public partial class BOClientRoute : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _clientRouteId;
		protected Int32? _routeTypeId;
		protected Int32? _routeId;
		protected Int32? _clientId;
		protected bool? _day1;
		protected bool? _day2;
		protected bool? _day3;
		protected bool? _day4;
		protected bool? _day5;
		protected bool? _day6;
		protected bool? _day7;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientRoute()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 clientRouteId
		///</parameters>
		public BOClientRoute(Int32 clientRouteId)
		{
			try
			{
				DAOClientRoute daoClientRoute = DAOClientRoute.SelectOne(clientRouteId);
				_clientRouteId = daoClientRoute.ClientRouteId;
				_routeTypeId = daoClientRoute.RouteTypeId;
				_routeId = daoClientRoute.RouteId;
				_clientId = daoClientRoute.ClientId;
				_day1 = daoClientRoute.Day1;
				_day2 = daoClientRoute.Day2;
				_day3 = daoClientRoute.Day3;
				_day4 = daoClientRoute.Day4;
				_day5 = daoClientRoute.Day5;
				_day6 = daoClientRoute.Day6;
				_day7 = daoClientRoute.Day7;
				_cBy = daoClientRoute.CBy;
				_cDate = daoClientRoute.CDate;
				_eBy = daoClientRoute.EBy;
				_eDate = daoClientRoute.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientRoute
		///</parameters>
		protected internal BOClientRoute(DAOClientRoute daoClientRoute)
		{
			try
			{
				_clientRouteId = daoClientRoute.ClientRouteId;
				_routeTypeId = daoClientRoute.RouteTypeId;
				_routeId = daoClientRoute.RouteId;
				_clientId = daoClientRoute.ClientId;
				_day1 = daoClientRoute.Day1;
				_day2 = daoClientRoute.Day2;
				_day3 = daoClientRoute.Day3;
				_day4 = daoClientRoute.Day4;
				_day5 = daoClientRoute.Day5;
				_day6 = daoClientRoute.Day6;
				_day7 = daoClientRoute.Day7;
				_cBy = daoClientRoute.CBy;
				_cDate = daoClientRoute.CDate;
				_eBy = daoClientRoute.EBy;
				_eDate = daoClientRoute.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientRoute record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientRoute daoClientRoute = new DAOClientRoute();
			RegisterDataObject(daoClientRoute);
			BeginTransaction("savenewBOClientRoute");
			try
			{
				daoClientRoute.RouteTypeId = _routeTypeId;
				daoClientRoute.RouteId = _routeId;
				daoClientRoute.ClientId = _clientId;
				daoClientRoute.Day1 = _day1;
				daoClientRoute.Day2 = _day2;
				daoClientRoute.Day3 = _day3;
				daoClientRoute.Day4 = _day4;
				daoClientRoute.Day5 = _day5;
				daoClientRoute.Day6 = _day6;
				daoClientRoute.Day7 = _day7;
				daoClientRoute.CBy = _cBy;
				daoClientRoute.CDate = _cDate;
				daoClientRoute.EBy = _eBy;
				daoClientRoute.EDate = _eDate;
				daoClientRoute.Insert();
				CommitTransaction();
				
				_clientRouteId = daoClientRoute.ClientRouteId;
				_routeTypeId = daoClientRoute.RouteTypeId;
				_routeId = daoClientRoute.RouteId;
				_clientId = daoClientRoute.ClientId;
				_day1 = daoClientRoute.Day1;
				_day2 = daoClientRoute.Day2;
				_day3 = daoClientRoute.Day3;
				_day4 = daoClientRoute.Day4;
				_day5 = daoClientRoute.Day5;
				_day6 = daoClientRoute.Day6;
				_day7 = daoClientRoute.Day7;
				_cBy = daoClientRoute.CBy;
				_cDate = daoClientRoute.CDate;
				_eBy = daoClientRoute.EBy;
				_eDate = daoClientRoute.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientRoute");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientRoute record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientRoute
		///</parameters>
		public virtual void Update()
		{
			DAOClientRoute daoClientRoute = new DAOClientRoute();
			RegisterDataObject(daoClientRoute);
			BeginTransaction("updateBOClientRoute");
			try
			{
				daoClientRoute.ClientRouteId = _clientRouteId;
				daoClientRoute.RouteTypeId = _routeTypeId;
				daoClientRoute.RouteId = _routeId;
				daoClientRoute.ClientId = _clientId;
				daoClientRoute.Day1 = _day1;
				daoClientRoute.Day2 = _day2;
				daoClientRoute.Day3 = _day3;
				daoClientRoute.Day4 = _day4;
				daoClientRoute.Day5 = _day5;
				daoClientRoute.Day6 = _day6;
				daoClientRoute.Day7 = _day7;
				daoClientRoute.CBy = _cBy;
				daoClientRoute.CDate = _cDate;
				daoClientRoute.EBy = _eBy;
				daoClientRoute.EDate = _eDate;
				daoClientRoute.Update();
				CommitTransaction();
				
				_clientRouteId = daoClientRoute.ClientRouteId;
				_routeTypeId = daoClientRoute.RouteTypeId;
				_routeId = daoClientRoute.RouteId;
				_clientId = daoClientRoute.ClientId;
				_day1 = daoClientRoute.Day1;
				_day2 = daoClientRoute.Day2;
				_day3 = daoClientRoute.Day3;
				_day4 = daoClientRoute.Day4;
				_day5 = daoClientRoute.Day5;
				_day6 = daoClientRoute.Day6;
				_day7 = daoClientRoute.Day7;
				_cBy = daoClientRoute.CBy;
				_cDate = daoClientRoute.CDate;
				_eBy = daoClientRoute.EBy;
				_eDate = daoClientRoute.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientRoute");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientRoute record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientRoute daoClientRoute = new DAOClientRoute();
			RegisterDataObject(daoClientRoute);
			BeginTransaction("deleteBOClientRoute");
			try
			{
				daoClientRoute.ClientRouteId = _clientRouteId;
				daoClientRoute.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientRoute");
				throw;
			}
		}
		
		///<Summary>
		///ClientRouteCollection
		///This method returns the collection of BOClientRoute objects
		///</Summary>
		///<returns>
		///List[BOClientRoute]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientRoute> ClientRouteCollection()
		{
			try
			{
				IList<BOClientRoute> boClientRouteCollection = new List<BOClientRoute>();
				IList<DAOClientRoute> daoClientRouteCollection = DAOClientRoute.SelectAll();
			
				foreach(DAOClientRoute daoClientRoute in daoClientRouteCollection)
					boClientRouteCollection.Add(new BOClientRoute(daoClientRoute));
			
				return boClientRouteCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientRouteCollectionCount
		///This method returns the collection count of BOClientRoute objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientRouteCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientRoute.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientRoute>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientRoute.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientRouteCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientRoute objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientRouteCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientRoute> daoClientRouteCollection = DAOClientRoute.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientRoute resdaoClientRoute in daoClientRouteCollection)
					boClientRouteCollection.Add((T)(object)new BOClientRoute(resdaoClientRoute));
			
				return boClientRouteCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientRouteCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientRoute objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientRoute.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ClientRouteId
		{
			get
			{
				 return _clientRouteId;
			}
			set
			{
				_clientRouteId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RouteTypeId
		{
			get
			{
				 return _routeTypeId;
			}
			set
			{
				_routeTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RouteId
		{
			get
			{
				 return _routeId;
			}
			set
			{
				_routeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Day1
		{
			get
			{
				 return _day1;
			}
			set
			{
				_day1 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Day2
		{
			get
			{
				 return _day2;
			}
			set
			{
				_day2 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Day3
		{
			get
			{
				 return _day3;
			}
			set
			{
				_day3 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Day4
		{
			get
			{
				 return _day4;
			}
			set
			{
				_day4 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Day5
		{
			get
			{
				 return _day5;
			}
			set
			{
				_day5 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Day6
		{
			get
			{
				 return _day6;
			}
			set
			{
				_day6 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Day7
		{
			get
			{
				 return _day7;
			}
			set
			{
				_day7 = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
