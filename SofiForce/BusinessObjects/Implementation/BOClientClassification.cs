/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientClassification.
	///It maintains a collection of BOClient objects.
	///</Summary>
	public partial class BOClientClassification : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _clientClassificationId;
		protected string _clientClassificationNameEn;
		protected string _clientClassificationNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _clientClassificationCode;
		protected string _notes;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClient> _boClientCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientClassification()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 clientClassificationId
		///</parameters>
		public BOClientClassification(Int32 clientClassificationId)
		{
			try
			{
				DAOClientClassification daoClientClassification = DAOClientClassification.SelectOne(clientClassificationId);
				_clientClassificationId = daoClientClassification.ClientClassificationId;
				_clientClassificationNameEn = daoClientClassification.ClientClassificationNameEn;
				_clientClassificationNameAr = daoClientClassification.ClientClassificationNameAr;
				_isActive = daoClientClassification.IsActive;
				_canEdit = daoClientClassification.CanEdit;
				_canDelete = daoClientClassification.CanDelete;
				_icon = daoClientClassification.Icon;
				_color = daoClientClassification.Color;
				_displayOrder = daoClientClassification.DisplayOrder;
				_cBy = daoClientClassification.CBy;
				_cDate = daoClientClassification.CDate;
				_eBy = daoClientClassification.EBy;
				_eDate = daoClientClassification.EDate;
				_clientClassificationCode = daoClientClassification.ClientClassificationCode;
				_notes = daoClientClassification.Notes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientClassification
		///</parameters>
		protected internal BOClientClassification(DAOClientClassification daoClientClassification)
		{
			try
			{
				_clientClassificationId = daoClientClassification.ClientClassificationId;
				_clientClassificationNameEn = daoClientClassification.ClientClassificationNameEn;
				_clientClassificationNameAr = daoClientClassification.ClientClassificationNameAr;
				_isActive = daoClientClassification.IsActive;
				_canEdit = daoClientClassification.CanEdit;
				_canDelete = daoClientClassification.CanDelete;
				_icon = daoClientClassification.Icon;
				_color = daoClientClassification.Color;
				_displayOrder = daoClientClassification.DisplayOrder;
				_cBy = daoClientClassification.CBy;
				_cDate = daoClientClassification.CDate;
				_eBy = daoClientClassification.EBy;
				_eDate = daoClientClassification.EDate;
				_clientClassificationCode = daoClientClassification.ClientClassificationCode;
				_notes = daoClientClassification.Notes;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientClassification record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientClassification daoClientClassification = new DAOClientClassification();
			RegisterDataObject(daoClientClassification);
			BeginTransaction("savenewBOClientClassification");
			try
			{
				daoClientClassification.ClientClassificationNameEn = _clientClassificationNameEn;
				daoClientClassification.ClientClassificationNameAr = _clientClassificationNameAr;
				daoClientClassification.IsActive = _isActive;
				daoClientClassification.CanEdit = _canEdit;
				daoClientClassification.CanDelete = _canDelete;
				daoClientClassification.Icon = _icon;
				daoClientClassification.Color = _color;
				daoClientClassification.DisplayOrder = _displayOrder;
				daoClientClassification.CBy = _cBy;
				daoClientClassification.CDate = _cDate;
				daoClientClassification.EBy = _eBy;
				daoClientClassification.EDate = _eDate;
				daoClientClassification.ClientClassificationCode = _clientClassificationCode;
				daoClientClassification.Notes = _notes;
				daoClientClassification.Insert();
				CommitTransaction();
				
				_clientClassificationId = daoClientClassification.ClientClassificationId;
				_clientClassificationNameEn = daoClientClassification.ClientClassificationNameEn;
				_clientClassificationNameAr = daoClientClassification.ClientClassificationNameAr;
				_isActive = daoClientClassification.IsActive;
				_canEdit = daoClientClassification.CanEdit;
				_canDelete = daoClientClassification.CanDelete;
				_icon = daoClientClassification.Icon;
				_color = daoClientClassification.Color;
				_displayOrder = daoClientClassification.DisplayOrder;
				_cBy = daoClientClassification.CBy;
				_cDate = daoClientClassification.CDate;
				_eBy = daoClientClassification.EBy;
				_eDate = daoClientClassification.EDate;
				_clientClassificationCode = daoClientClassification.ClientClassificationCode;
				_notes = daoClientClassification.Notes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientClassification");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientClassification record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientClassification
		///</parameters>
		public virtual void Update()
		{
			DAOClientClassification daoClientClassification = new DAOClientClassification();
			RegisterDataObject(daoClientClassification);
			BeginTransaction("updateBOClientClassification");
			try
			{
				daoClientClassification.ClientClassificationId = _clientClassificationId;
				daoClientClassification.ClientClassificationNameEn = _clientClassificationNameEn;
				daoClientClassification.ClientClassificationNameAr = _clientClassificationNameAr;
				daoClientClassification.IsActive = _isActive;
				daoClientClassification.CanEdit = _canEdit;
				daoClientClassification.CanDelete = _canDelete;
				daoClientClassification.Icon = _icon;
				daoClientClassification.Color = _color;
				daoClientClassification.DisplayOrder = _displayOrder;
				daoClientClassification.CBy = _cBy;
				daoClientClassification.CDate = _cDate;
				daoClientClassification.EBy = _eBy;
				daoClientClassification.EDate = _eDate;
				daoClientClassification.ClientClassificationCode = _clientClassificationCode;
				daoClientClassification.Notes = _notes;
				daoClientClassification.Update();
				CommitTransaction();
				
				_clientClassificationId = daoClientClassification.ClientClassificationId;
				_clientClassificationNameEn = daoClientClassification.ClientClassificationNameEn;
				_clientClassificationNameAr = daoClientClassification.ClientClassificationNameAr;
				_isActive = daoClientClassification.IsActive;
				_canEdit = daoClientClassification.CanEdit;
				_canDelete = daoClientClassification.CanDelete;
				_icon = daoClientClassification.Icon;
				_color = daoClientClassification.Color;
				_displayOrder = daoClientClassification.DisplayOrder;
				_cBy = daoClientClassification.CBy;
				_cDate = daoClientClassification.CDate;
				_eBy = daoClientClassification.EBy;
				_eDate = daoClientClassification.EDate;
				_clientClassificationCode = daoClientClassification.ClientClassificationCode;
				_notes = daoClientClassification.Notes;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientClassification");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientClassification record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientClassification daoClientClassification = new DAOClientClassification();
			RegisterDataObject(daoClientClassification);
			BeginTransaction("deleteBOClientClassification");
			try
			{
				daoClientClassification.ClientClassificationId = _clientClassificationId;
				daoClientClassification.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientClassification");
				throw;
			}
		}
		
		///<Summary>
		///ClientClassificationCollection
		///This method returns the collection of BOClientClassification objects
		///</Summary>
		///<returns>
		///List[BOClientClassification]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientClassification> ClientClassificationCollection()
		{
			try
			{
				IList<BOClientClassification> boClientClassificationCollection = new List<BOClientClassification>();
				IList<DAOClientClassification> daoClientClassificationCollection = DAOClientClassification.SelectAll();
			
				foreach(DAOClientClassification daoClientClassification in daoClientClassificationCollection)
					boClientClassificationCollection.Add(new BOClientClassification(daoClientClassification));
			
				return boClientClassificationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientClassificationCollectionCount
		///This method returns the collection count of BOClientClassification objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientClassificationCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientClassification.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientCollection
		///This method returns its collection of BOClient objects
		///</Summary>
		///<returns>
		///IList[BOClient]
		///</returns>
		///<parameters>
		///BOClientClassification
		///</parameters>
		public virtual IList<BOClient> ClientCollection()
		{
			try
			{
				if(_boClientCollection == null)
					LoadClientCollection();
				
				return _boClientCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientClassification>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientClassification.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientClassificationCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientClassification objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientClassificationCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientClassification> daoClientClassificationCollection = DAOClientClassification.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientClassification resdaoClientClassification in daoClientClassificationCollection)
					boClientClassificationCollection.Add((T)(object)new BOClientClassification(resdaoClientClassification));
			
				return boClientClassificationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientClassificationCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientClassification objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientClassification.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientCollection
		///This method loads the internal collection of BOClient objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientCollection()
		{
			try
			{
				_boClientCollection = new List<BOClient>();
				IList<DAOClient> daoClientCollection = DAOClient.SelectAllByClientClassificationId(_clientClassificationId.Value);
				
				foreach(DAOClient daoClient in daoClientCollection)
					_boClientCollection.Add(new BOClient(daoClient));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClient
		///This method persists a BOClient object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual void AddClient(BOClient boClient)
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("addClient");
			try
			{
				daoClient.ClientId = boClient.ClientId;
				daoClient.ClientAccountId = boClient.ClientAccountId;
				daoClient.ClientTypeId = boClient.ClientTypeId;
				daoClient.ClientCode = boClient.ClientCode;
				daoClient.ClientNameAr = boClient.ClientNameAr;
				daoClient.ClientNameEn = boClient.ClientNameEn;
				daoClient.BusinessUnitId = boClient.BusinessUnitId;
				daoClient.BranchId = boClient.BranchId;
				daoClient.RegionId = boClient.RegionId;
				daoClient.GovernerateId = boClient.GovernerateId;
				daoClient.CityId = boClient.CityId;
				daoClient.LocationLevelId = boClient.LocationLevelId;
				daoClient.ClientGroupId = boClient.ClientGroupId;
				daoClient.ClientGroupSubId = boClient.ClientGroupSubId;
				daoClient.CreditLimit = boClient.CreditLimit;
				daoClient.CreditBalance = boClient.CreditBalance;
				daoClient.PaymentTermId = boClient.PaymentTermId;
				daoClient.IsChain = boClient.IsChain;
				daoClient.Building = boClient.Building;
				daoClient.Floor = boClient.Floor;
				daoClient.Property = boClient.Property;
				daoClient.Address = boClient.Address;
				daoClient.Landmark = boClient.Landmark;
				daoClient.Phone = boClient.Phone;
				daoClient.Mobile = boClient.Mobile;
				daoClient.WhatsApp = boClient.WhatsApp;
				daoClient.IsActive = boClient.IsActive;
				daoClient.Latitude = boClient.Latitude;
				daoClient.Longitude = boClient.Longitude;
				daoClient.CBy = boClient.CBy;
				daoClient.CDate = boClient.CDate;
				daoClient.EBy = boClient.EBy;
				daoClient.EDate = boClient.EDate;
				daoClient.IsTaxable = boClient.IsTaxable;
				daoClient.IsCashDiscount = boClient.IsCashDiscount;
				daoClient.ResponsibleNameAr = boClient.ResponsibleNameAr;
				daoClient.ResponsibleNameEn = boClient.ResponsibleNameEn;
				daoClient.TaxCode = boClient.TaxCode;
				daoClient.CommercialCode = boClient.CommercialCode;
				daoClient.IsNew = boClient.IsNew;
				daoClient.NeedValidation = boClient.NeedValidation;
				daoClient.CashGroupId = boClient.CashGroupId;
				daoClient.InRoute = boClient.InRoute;
				daoClient.SalesChannelId = boClient.SalesChannelId;
				daoClient.SalesPoolId = boClient.SalesPoolId;
				daoClient.UserId = boClient.UserId;
				daoClient.Points = boClient.Points;
				daoClient.Wallet = boClient.Wallet;
				daoClient.DealId = boClient.DealId;
				daoClient.ClientClassificationId = _clientClassificationId.Value;
				daoClient.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClient = new BOClient(daoClient);
				if(_boClientCollection != null)
					_boClientCollection.Add(boClient);
			}
			catch
			{
				RollbackTransaction("addClient");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClient
		///This method deletes all BOClient objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClient()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClient");
			try
			{
				DAOClient.DeleteAllByClientClassificationId(ConnectionProvider, _clientClassificationId.Value);
				CommitTransaction();
				if(_boClientCollection != null)
				{
					_boClientCollection.Clear();
					_boClientCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClient");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ClientClassificationId
		{
			get
			{
				 return _clientClassificationId;
			}
			set
			{
				_clientClassificationId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientClassificationNameEn
		{
			get
			{
				 return _clientClassificationNameEn;
			}
			set
			{
				_clientClassificationNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientClassificationNameAr
		{
			get
			{
				 return _clientClassificationNameAr;
			}
			set
			{
				_clientClassificationNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientClassificationCode
		{
			get
			{
				 return _clientClassificationCode;
			}
			set
			{
				_clientClassificationCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
