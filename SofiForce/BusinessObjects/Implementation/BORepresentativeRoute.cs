/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/21/2022 4:49:17 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORepresentativeRoute.
	///</Summary>
	public partial class BORepresentativeRoute : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _routeId;
		protected Int32? _representativeId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORepresentativeRoute()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BORepresentativeRoute(Int32 id)
		{
			try
			{
				DAORepresentativeRoute daoRepresentativeRoute = DAORepresentativeRoute.SelectOne(id);
				_id = daoRepresentativeRoute.Id;
				_routeId = daoRepresentativeRoute.RouteId;
				_representativeId = daoRepresentativeRoute.RepresentativeId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORepresentativeRoute
		///</parameters>
		protected internal BORepresentativeRoute(DAORepresentativeRoute daoRepresentativeRoute)
		{
			try
			{
				_id = daoRepresentativeRoute.Id;
				_routeId = daoRepresentativeRoute.RouteId;
				_representativeId = daoRepresentativeRoute.RepresentativeId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new RepresentativeRoute record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORepresentativeRoute daoRepresentativeRoute = new DAORepresentativeRoute();
			RegisterDataObject(daoRepresentativeRoute);
			BeginTransaction("savenewBORepresentativeRoute");
			try
			{
				daoRepresentativeRoute.Id = _id;
				daoRepresentativeRoute.RouteId = _routeId;
				daoRepresentativeRoute.RepresentativeId = _representativeId;
				daoRepresentativeRoute.Insert();
				CommitTransaction();
				
				_id = daoRepresentativeRoute.Id;
				_routeId = daoRepresentativeRoute.RouteId;
				_representativeId = daoRepresentativeRoute.RepresentativeId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORepresentativeRoute");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one RepresentativeRoute record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentativeRoute
		///</parameters>
		public virtual void Update()
		{
			DAORepresentativeRoute daoRepresentativeRoute = new DAORepresentativeRoute();
			RegisterDataObject(daoRepresentativeRoute);
			BeginTransaction("updateBORepresentativeRoute");
			try
			{
				daoRepresentativeRoute.Id = _id;
				daoRepresentativeRoute.RouteId = _routeId;
				daoRepresentativeRoute.RepresentativeId = _representativeId;
				daoRepresentativeRoute.Update();
				CommitTransaction();
				
				_id = daoRepresentativeRoute.Id;
				_routeId = daoRepresentativeRoute.RouteId;
				_representativeId = daoRepresentativeRoute.RepresentativeId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORepresentativeRoute");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one RepresentativeRoute record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORepresentativeRoute daoRepresentativeRoute = new DAORepresentativeRoute();
			RegisterDataObject(daoRepresentativeRoute);
			BeginTransaction("deleteBORepresentativeRoute");
			try
			{
				daoRepresentativeRoute.Id = _id;
				daoRepresentativeRoute.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORepresentativeRoute");
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeRouteCollection
		///This method returns the collection of BORepresentativeRoute objects
		///</Summary>
		///<returns>
		///List[BORepresentativeRoute]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORepresentativeRoute> RepresentativeRouteCollection()
		{
			try
			{
				IList<BORepresentativeRoute> boRepresentativeRouteCollection = new List<BORepresentativeRoute>();
				IList<DAORepresentativeRoute> daoRepresentativeRouteCollection = DAORepresentativeRoute.SelectAll();
			
				foreach(DAORepresentativeRoute daoRepresentativeRoute in daoRepresentativeRouteCollection)
					boRepresentativeRouteCollection.Add(new BORepresentativeRoute(daoRepresentativeRoute));
			
				return boRepresentativeRouteCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeRouteCollectionCount
		///This method returns the collection count of BORepresentativeRoute objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RepresentativeRouteCollectionCount()
		{
			try
			{
				Int32 objCount = DAORepresentativeRoute.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORepresentativeRoute>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORepresentativeRoute.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeRouteCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORepresentativeRoute objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRepresentativeRouteCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORepresentativeRoute> daoRepresentativeRouteCollection = DAORepresentativeRoute.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORepresentativeRoute resdaoRepresentativeRoute in daoRepresentativeRouteCollection)
					boRepresentativeRouteCollection.Add((T)(object)new BORepresentativeRoute(resdaoRepresentativeRoute));
			
				return boRepresentativeRouteCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RepresentativeRouteCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORepresentativeRoute objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORepresentativeRoute.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RouteId
		{
			get
			{
				 return _routeId;
			}
			set
			{
				_routeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
