/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOComplainType.
	///It maintains a collection of BOClientComplain,BOComplainTypeDetail objects.
	///</Summary>
	public partial class BOComplainType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _complainTypeId;
		protected string _complainTypeCode;
		protected string _complainTypeNameAr;
		protected string _complainTypeNameEn;
		protected bool? _isActive;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientComplain> _boClientComplainCollection;
		List<BOComplainTypeDetail> _boComplainTypeDetailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOComplainType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 complainTypeId
		///</parameters>
		public BOComplainType(Int32 complainTypeId)
		{
			try
			{
				DAOComplainType daoComplainType = DAOComplainType.SelectOne(complainTypeId);
				_complainTypeId = daoComplainType.ComplainTypeId;
				_complainTypeCode = daoComplainType.ComplainTypeCode;
				_complainTypeNameAr = daoComplainType.ComplainTypeNameAr;
				_complainTypeNameEn = daoComplainType.ComplainTypeNameEn;
				_isActive = daoComplainType.IsActive;
				_canDelete = daoComplainType.CanDelete;
				_canEdit = daoComplainType.CanEdit;
				_displayOrder = daoComplainType.DisplayOrder;
				_color = daoComplainType.Color;
				_icon = daoComplainType.Icon;
				_cBy = daoComplainType.CBy;
				_cDate = daoComplainType.CDate;
				_eBy = daoComplainType.EBy;
				_eDate = daoComplainType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOComplainType
		///</parameters>
		protected internal BOComplainType(DAOComplainType daoComplainType)
		{
			try
			{
				_complainTypeId = daoComplainType.ComplainTypeId;
				_complainTypeCode = daoComplainType.ComplainTypeCode;
				_complainTypeNameAr = daoComplainType.ComplainTypeNameAr;
				_complainTypeNameEn = daoComplainType.ComplainTypeNameEn;
				_isActive = daoComplainType.IsActive;
				_canDelete = daoComplainType.CanDelete;
				_canEdit = daoComplainType.CanEdit;
				_displayOrder = daoComplainType.DisplayOrder;
				_color = daoComplainType.Color;
				_icon = daoComplainType.Icon;
				_cBy = daoComplainType.CBy;
				_cDate = daoComplainType.CDate;
				_eBy = daoComplainType.EBy;
				_eDate = daoComplainType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ComplainType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOComplainType daoComplainType = new DAOComplainType();
			RegisterDataObject(daoComplainType);
			BeginTransaction("savenewBOComplainType");
			try
			{
				daoComplainType.ComplainTypeCode = _complainTypeCode;
				daoComplainType.ComplainTypeNameAr = _complainTypeNameAr;
				daoComplainType.ComplainTypeNameEn = _complainTypeNameEn;
				daoComplainType.IsActive = _isActive;
				daoComplainType.CanDelete = _canDelete;
				daoComplainType.CanEdit = _canEdit;
				daoComplainType.DisplayOrder = _displayOrder;
				daoComplainType.Color = _color;
				daoComplainType.Icon = _icon;
				daoComplainType.CBy = _cBy;
				daoComplainType.CDate = _cDate;
				daoComplainType.EBy = _eBy;
				daoComplainType.EDate = _eDate;
				daoComplainType.Insert();
				CommitTransaction();
				
				_complainTypeId = daoComplainType.ComplainTypeId;
				_complainTypeCode = daoComplainType.ComplainTypeCode;
				_complainTypeNameAr = daoComplainType.ComplainTypeNameAr;
				_complainTypeNameEn = daoComplainType.ComplainTypeNameEn;
				_isActive = daoComplainType.IsActive;
				_canDelete = daoComplainType.CanDelete;
				_canEdit = daoComplainType.CanEdit;
				_displayOrder = daoComplainType.DisplayOrder;
				_color = daoComplainType.Color;
				_icon = daoComplainType.Icon;
				_cBy = daoComplainType.CBy;
				_cDate = daoComplainType.CDate;
				_eBy = daoComplainType.EBy;
				_eDate = daoComplainType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOComplainType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ComplainType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOComplainType
		///</parameters>
		public virtual void Update()
		{
			DAOComplainType daoComplainType = new DAOComplainType();
			RegisterDataObject(daoComplainType);
			BeginTransaction("updateBOComplainType");
			try
			{
				daoComplainType.ComplainTypeId = _complainTypeId;
				daoComplainType.ComplainTypeCode = _complainTypeCode;
				daoComplainType.ComplainTypeNameAr = _complainTypeNameAr;
				daoComplainType.ComplainTypeNameEn = _complainTypeNameEn;
				daoComplainType.IsActive = _isActive;
				daoComplainType.CanDelete = _canDelete;
				daoComplainType.CanEdit = _canEdit;
				daoComplainType.DisplayOrder = _displayOrder;
				daoComplainType.Color = _color;
				daoComplainType.Icon = _icon;
				daoComplainType.CBy = _cBy;
				daoComplainType.CDate = _cDate;
				daoComplainType.EBy = _eBy;
				daoComplainType.EDate = _eDate;
				daoComplainType.Update();
				CommitTransaction();
				
				_complainTypeId = daoComplainType.ComplainTypeId;
				_complainTypeCode = daoComplainType.ComplainTypeCode;
				_complainTypeNameAr = daoComplainType.ComplainTypeNameAr;
				_complainTypeNameEn = daoComplainType.ComplainTypeNameEn;
				_isActive = daoComplainType.IsActive;
				_canDelete = daoComplainType.CanDelete;
				_canEdit = daoComplainType.CanEdit;
				_displayOrder = daoComplainType.DisplayOrder;
				_color = daoComplainType.Color;
				_icon = daoComplainType.Icon;
				_cBy = daoComplainType.CBy;
				_cDate = daoComplainType.CDate;
				_eBy = daoComplainType.EBy;
				_eDate = daoComplainType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOComplainType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ComplainType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOComplainType daoComplainType = new DAOComplainType();
			RegisterDataObject(daoComplainType);
			BeginTransaction("deleteBOComplainType");
			try
			{
				daoComplainType.ComplainTypeId = _complainTypeId;
				daoComplainType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOComplainType");
				throw;
			}
		}
		
		///<Summary>
		///ComplainTypeCollection
		///This method returns the collection of BOComplainType objects
		///</Summary>
		///<returns>
		///List[BOComplainType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOComplainType> ComplainTypeCollection()
		{
			try
			{
				IList<BOComplainType> boComplainTypeCollection = new List<BOComplainType>();
				IList<DAOComplainType> daoComplainTypeCollection = DAOComplainType.SelectAll();
			
				foreach(DAOComplainType daoComplainType in daoComplainTypeCollection)
					boComplainTypeCollection.Add(new BOComplainType(daoComplainType));
			
				return boComplainTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainTypeCollectionCount
		///This method returns the collection count of BOComplainType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ComplainTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOComplainType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BOComplainType
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ComplainTypeDetailCollection
		///This method returns its collection of BOComplainTypeDetail objects
		///</Summary>
		///<returns>
		///IList[BOComplainTypeDetail]
		///</returns>
		///<parameters>
		///BOComplainType
		///</parameters>
		public virtual IList<BOComplainTypeDetail> ComplainTypeDetailCollection()
		{
			try
			{
				if(_boComplainTypeDetailCollection == null)
					LoadComplainTypeDetailCollection();
				
				return _boComplainTypeDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOComplainType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOComplainType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOComplainType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boComplainTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOComplainType> daoComplainTypeCollection = DAOComplainType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOComplainType resdaoComplainType in daoComplainTypeCollection)
					boComplainTypeCollection.Add((T)(object)new BOComplainType(resdaoComplainType));
			
				return boComplainTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOComplainType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOComplainType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByComplainTypeId(_complainTypeId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.BranchId = boClientComplain.BranchId;
				daoClientComplain.RepresentativeId = boClientComplain.RepresentativeId;
				daoClientComplain.ClientId = boClientComplain.ClientId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeDetailId = boClientComplain.ComplainTypeDetailId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.PriorityId = boClientComplain.PriorityId;
				daoClientComplain.ComplainStatusId = boClientComplain.ComplainStatusId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.DepartmentId = boClientComplain.DepartmentId;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.ComplainTypeId = _complainTypeId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByComplainTypeId(ConnectionProvider, _complainTypeId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///LoadComplainTypeDetailCollection
		///This method loads the internal collection of BOComplainTypeDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadComplainTypeDetailCollection()
		{
			try
			{
				_boComplainTypeDetailCollection = new List<BOComplainTypeDetail>();
				IList<DAOComplainTypeDetail> daoComplainTypeDetailCollection = DAOComplainTypeDetail.SelectAllByComplainTypeId(_complainTypeId.Value);
				
				foreach(DAOComplainTypeDetail daoComplainTypeDetail in daoComplainTypeDetailCollection)
					_boComplainTypeDetailCollection.Add(new BOComplainTypeDetail(daoComplainTypeDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddComplainTypeDetail
		///This method persists a BOComplainTypeDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOComplainTypeDetail
		///</parameters>
		public virtual void AddComplainTypeDetail(BOComplainTypeDetail boComplainTypeDetail)
		{
			DAOComplainTypeDetail daoComplainTypeDetail = new DAOComplainTypeDetail();
			RegisterDataObject(daoComplainTypeDetail);
			BeginTransaction("addComplainTypeDetail");
			try
			{
				daoComplainTypeDetail.ComplainTypeDetailId = boComplainTypeDetail.ComplainTypeDetailId;
				daoComplainTypeDetail.ComplainTypeDetailCode = boComplainTypeDetail.ComplainTypeDetailCode;
				daoComplainTypeDetail.ComplainTypeDetailNameAr = boComplainTypeDetail.ComplainTypeDetailNameAr;
				daoComplainTypeDetail.ComplainTypeDetailNameEn = boComplainTypeDetail.ComplainTypeDetailNameEn;
				daoComplainTypeDetail.IsActive = boComplainTypeDetail.IsActive;
				daoComplainTypeDetail.CanEdit = boComplainTypeDetail.CanEdit;
				daoComplainTypeDetail.CanDelete = boComplainTypeDetail.CanDelete;
				daoComplainTypeDetail.DisplayOrder = boComplainTypeDetail.DisplayOrder;
				daoComplainTypeDetail.Color = boComplainTypeDetail.Color;
				daoComplainTypeDetail.Icon = boComplainTypeDetail.Icon;
				daoComplainTypeDetail.CBy = boComplainTypeDetail.CBy;
				daoComplainTypeDetail.CDate = boComplainTypeDetail.CDate;
				daoComplainTypeDetail.EBy = boComplainTypeDetail.EBy;
				daoComplainTypeDetail.EDate = boComplainTypeDetail.EDate;
				daoComplainTypeDetail.ComplainTypeId = _complainTypeId.Value;
				daoComplainTypeDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boComplainTypeDetail = new BOComplainTypeDetail(daoComplainTypeDetail);
				if(_boComplainTypeDetailCollection != null)
					_boComplainTypeDetailCollection.Add(boComplainTypeDetail);
			}
			catch
			{
				RollbackTransaction("addComplainTypeDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllComplainTypeDetail
		///This method deletes all BOComplainTypeDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllComplainTypeDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllComplainTypeDetail");
			try
			{
				DAOComplainTypeDetail.DeleteAllByComplainTypeId(ConnectionProvider, _complainTypeId.Value);
				CommitTransaction();
				if(_boComplainTypeDetailCollection != null)
				{
					_boComplainTypeDetailCollection.Clear();
					_boComplainTypeDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllComplainTypeDetail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ComplainTypeId
		{
			get
			{
				 return _complainTypeId;
			}
			set
			{
				_complainTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainTypeCode
		{
			get
			{
				 return _complainTypeCode;
			}
			set
			{
				_complainTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainTypeNameAr
		{
			get
			{
				 return _complainTypeNameAr;
			}
			set
			{
				_complainTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainTypeNameEn
		{
			get
			{
				 return _complainTypeNameEn;
			}
			set
			{
				_complainTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
