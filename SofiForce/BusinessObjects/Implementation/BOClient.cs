/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClient.
	///It maintains a collection of BOClientActivity,BOClientAddress,BOClientCallPlan,BOClientComplain,BOClientCreditLimit,BOClientDocument,BOClientLandmark,BOClientPayment,BOClientPlan,BOClientPreferredTime,BOClientQuota,BOClientRoute,BOClientServiceRequest,BOClientSurvey,BOClientTransaction,BOOperationRequestDetail,BOPromotionOrderHistory,BOSalesOrder objects.
	///</Summary>
	public partial class BOClient : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _clientId;
		protected Int32? _clientAccountId;
		protected Int32? _clientTypeId;
		protected string _clientCode;
		protected string _clientNameAr;
		protected string _clientNameEn;
		protected Int32? _businessUnitId;
		protected Int32? _branchId;
		protected Int32? _regionId;
		protected Int32? _governerateId;
		protected Int32? _cityId;
		protected Int32? _locationLevelId;
		protected Int32? _clientGroupId;
		protected Int32? _clientGroupSubId;
		protected Int32? _clientClassificationId;
		protected decimal? _creditLimit;
		protected decimal? _creditBalance;
		protected Int32? _paymentTermId;
		protected bool? _isChain;
		protected string _building;
		protected string _floor;
		protected string _property;
		protected string _address;
		protected string _landmark;
		protected string _phone;
		protected string _mobile;
		protected string _whatsApp;
		protected bool? _isActive;
		protected double? _latitude;
		protected double? _longitude;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool? _isTaxable;
		protected bool? _isCashDiscount;
		protected string _responsibleNameAr;
		protected string _responsibleNameEn;
		protected string _taxCode;
		protected string _commercialCode;
		protected bool? _isNew;
		protected bool? _needValidation;
		protected Int32? _cashGroupId;
		protected bool? _inRoute;
		protected Int32? _salesChannelId;
		protected Int32? _salesPoolId;
		protected Int32? _userId;
		protected Int32? _points;
		protected decimal? _wallet;
		protected Int32? _dealId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientActivity> _boClientActivityCollection;
		List<BOClientAddress> _boClientAddressCollection;
		List<BOClientCallPlan> _boClientCallPlanCollection;
		List<BOClientComplain> _boClientComplainCollection;
		List<BOClientCreditLimit> _boClientCreditLimitCollection;
		List<BOClientDocument> _boClientDocumentCollection;
		List<BOClientLandmark> _boClientLandmarkCollection;
		List<BOClientPayment> _boClientPaymentCollection;
		List<BOClientPlan> _boClientPlanCollection;
		List<BOClientPreferredTime> _boClientPreferredTimeCollection;
		List<BOClientQuota> _boClientQuotaCollection;
		List<BOClientRoute> _boClientRouteCollection;
		List<BOClientServiceRequest> _boClientServiceRequestCollection;
		List<BOClientSurvey> _boClientSurveyCollection;
		List<BOClientTransaction> _boClientTransactionCollection;
		List<BOOperationRequestDetail> _boOperationRequestDetailCollection;
		List<BOPromotionOrderHistory> _boPromotionOrderHistoryCollection;
		List<BOSalesOrder> _boSalesOrderCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClient()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 clientId
		///</parameters>
		public BOClient(Int32 clientId)
		{
			try
			{
				DAOClient daoClient = DAOClient.SelectOne(clientId);
				_clientId = daoClient.ClientId;
				_clientAccountId = daoClient.ClientAccountId;
				_clientTypeId = daoClient.ClientTypeId;
				_clientCode = daoClient.ClientCode;
				_clientNameAr = daoClient.ClientNameAr;
				_clientNameEn = daoClient.ClientNameEn;
				_businessUnitId = daoClient.BusinessUnitId;
				_branchId = daoClient.BranchId;
				_regionId = daoClient.RegionId;
				_governerateId = daoClient.GovernerateId;
				_cityId = daoClient.CityId;
				_locationLevelId = daoClient.LocationLevelId;
				_clientGroupId = daoClient.ClientGroupId;
				_clientGroupSubId = daoClient.ClientGroupSubId;
				_clientClassificationId = daoClient.ClientClassificationId;
				_creditLimit = daoClient.CreditLimit;
				_creditBalance = daoClient.CreditBalance;
				_paymentTermId = daoClient.PaymentTermId;
				_isChain = daoClient.IsChain;
				_building = daoClient.Building;
				_floor = daoClient.Floor;
				_property = daoClient.Property;
				_address = daoClient.Address;
				_landmark = daoClient.Landmark;
				_phone = daoClient.Phone;
				_mobile = daoClient.Mobile;
				_whatsApp = daoClient.WhatsApp;
				_isActive = daoClient.IsActive;
				_latitude = daoClient.Latitude;
				_longitude = daoClient.Longitude;
				_cBy = daoClient.CBy;
				_cDate = daoClient.CDate;
				_eBy = daoClient.EBy;
				_eDate = daoClient.EDate;
				_isTaxable = daoClient.IsTaxable;
				_isCashDiscount = daoClient.IsCashDiscount;
				_responsibleNameAr = daoClient.ResponsibleNameAr;
				_responsibleNameEn = daoClient.ResponsibleNameEn;
				_taxCode = daoClient.TaxCode;
				_commercialCode = daoClient.CommercialCode;
				_isNew = daoClient.IsNew;
				_needValidation = daoClient.NeedValidation;
				_cashGroupId = daoClient.CashGroupId;
				_inRoute = daoClient.InRoute;
				_salesChannelId = daoClient.SalesChannelId;
				_salesPoolId = daoClient.SalesPoolId;
				_userId = daoClient.UserId;
				_points = daoClient.Points;
				_wallet = daoClient.Wallet;
				_dealId = daoClient.DealId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClient
		///</parameters>
		protected internal BOClient(DAOClient daoClient)
		{
			try
			{
				_clientId = daoClient.ClientId;
				_clientAccountId = daoClient.ClientAccountId;
				_clientTypeId = daoClient.ClientTypeId;
				_clientCode = daoClient.ClientCode;
				_clientNameAr = daoClient.ClientNameAr;
				_clientNameEn = daoClient.ClientNameEn;
				_businessUnitId = daoClient.BusinessUnitId;
				_branchId = daoClient.BranchId;
				_regionId = daoClient.RegionId;
				_governerateId = daoClient.GovernerateId;
				_cityId = daoClient.CityId;
				_locationLevelId = daoClient.LocationLevelId;
				_clientGroupId = daoClient.ClientGroupId;
				_clientGroupSubId = daoClient.ClientGroupSubId;
				_clientClassificationId = daoClient.ClientClassificationId;
				_creditLimit = daoClient.CreditLimit;
				_creditBalance = daoClient.CreditBalance;
				_paymentTermId = daoClient.PaymentTermId;
				_isChain = daoClient.IsChain;
				_building = daoClient.Building;
				_floor = daoClient.Floor;
				_property = daoClient.Property;
				_address = daoClient.Address;
				_landmark = daoClient.Landmark;
				_phone = daoClient.Phone;
				_mobile = daoClient.Mobile;
				_whatsApp = daoClient.WhatsApp;
				_isActive = daoClient.IsActive;
				_latitude = daoClient.Latitude;
				_longitude = daoClient.Longitude;
				_cBy = daoClient.CBy;
				_cDate = daoClient.CDate;
				_eBy = daoClient.EBy;
				_eDate = daoClient.EDate;
				_isTaxable = daoClient.IsTaxable;
				_isCashDiscount = daoClient.IsCashDiscount;
				_responsibleNameAr = daoClient.ResponsibleNameAr;
				_responsibleNameEn = daoClient.ResponsibleNameEn;
				_taxCode = daoClient.TaxCode;
				_commercialCode = daoClient.CommercialCode;
				_isNew = daoClient.IsNew;
				_needValidation = daoClient.NeedValidation;
				_cashGroupId = daoClient.CashGroupId;
				_inRoute = daoClient.InRoute;
				_salesChannelId = daoClient.SalesChannelId;
				_salesPoolId = daoClient.SalesPoolId;
				_userId = daoClient.UserId;
				_points = daoClient.Points;
				_wallet = daoClient.Wallet;
				_dealId = daoClient.DealId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Client record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("savenewBOClient");
			try
			{
				daoClient.ClientAccountId = _clientAccountId;
				daoClient.ClientTypeId = _clientTypeId;
				daoClient.ClientCode = _clientCode;
				daoClient.ClientNameAr = _clientNameAr;
				daoClient.ClientNameEn = _clientNameEn;
				daoClient.BusinessUnitId = _businessUnitId;
				daoClient.BranchId = _branchId;
				daoClient.RegionId = _regionId;
				daoClient.GovernerateId = _governerateId;
				daoClient.CityId = _cityId;
				daoClient.LocationLevelId = _locationLevelId;
				daoClient.ClientGroupId = _clientGroupId;
				daoClient.ClientGroupSubId = _clientGroupSubId;
				daoClient.ClientClassificationId = _clientClassificationId;
				daoClient.CreditLimit = _creditLimit;
				daoClient.CreditBalance = _creditBalance;
				daoClient.PaymentTermId = _paymentTermId;
				daoClient.IsChain = _isChain;
				daoClient.Building = _building;
				daoClient.Floor = _floor;
				daoClient.Property = _property;
				daoClient.Address = _address;
				daoClient.Landmark = _landmark;
				daoClient.Phone = _phone;
				daoClient.Mobile = _mobile;
				daoClient.WhatsApp = _whatsApp;
				daoClient.IsActive = _isActive;
				daoClient.Latitude = _latitude;
				daoClient.Longitude = _longitude;
				daoClient.CBy = _cBy;
				daoClient.CDate = _cDate;
				daoClient.EBy = _eBy;
				daoClient.EDate = _eDate;
				daoClient.IsTaxable = _isTaxable;
				daoClient.IsCashDiscount = _isCashDiscount;
				daoClient.ResponsibleNameAr = _responsibleNameAr;
				daoClient.ResponsibleNameEn = _responsibleNameEn;
				daoClient.TaxCode = _taxCode;
				daoClient.CommercialCode = _commercialCode;
				daoClient.IsNew = _isNew;
				daoClient.NeedValidation = _needValidation;
				daoClient.CashGroupId = _cashGroupId;
				daoClient.InRoute = _inRoute;
				daoClient.SalesChannelId = _salesChannelId;
				daoClient.SalesPoolId = _salesPoolId;
				daoClient.UserId = _userId;
				daoClient.Points = _points;
				daoClient.Wallet = _wallet;
				daoClient.DealId = _dealId;
				daoClient.Insert();
				CommitTransaction();
				
				_clientId = daoClient.ClientId;
				_clientAccountId = daoClient.ClientAccountId;
				_clientTypeId = daoClient.ClientTypeId;
				_clientCode = daoClient.ClientCode;
				_clientNameAr = daoClient.ClientNameAr;
				_clientNameEn = daoClient.ClientNameEn;
				_businessUnitId = daoClient.BusinessUnitId;
				_branchId = daoClient.BranchId;
				_regionId = daoClient.RegionId;
				_governerateId = daoClient.GovernerateId;
				_cityId = daoClient.CityId;
				_locationLevelId = daoClient.LocationLevelId;
				_clientGroupId = daoClient.ClientGroupId;
				_clientGroupSubId = daoClient.ClientGroupSubId;
				_clientClassificationId = daoClient.ClientClassificationId;
				_creditLimit = daoClient.CreditLimit;
				_creditBalance = daoClient.CreditBalance;
				_paymentTermId = daoClient.PaymentTermId;
				_isChain = daoClient.IsChain;
				_building = daoClient.Building;
				_floor = daoClient.Floor;
				_property = daoClient.Property;
				_address = daoClient.Address;
				_landmark = daoClient.Landmark;
				_phone = daoClient.Phone;
				_mobile = daoClient.Mobile;
				_whatsApp = daoClient.WhatsApp;
				_isActive = daoClient.IsActive;
				_latitude = daoClient.Latitude;
				_longitude = daoClient.Longitude;
				_cBy = daoClient.CBy;
				_cDate = daoClient.CDate;
				_eBy = daoClient.EBy;
				_eDate = daoClient.EDate;
				_isTaxable = daoClient.IsTaxable;
				_isCashDiscount = daoClient.IsCashDiscount;
				_responsibleNameAr = daoClient.ResponsibleNameAr;
				_responsibleNameEn = daoClient.ResponsibleNameEn;
				_taxCode = daoClient.TaxCode;
				_commercialCode = daoClient.CommercialCode;
				_isNew = daoClient.IsNew;
				_needValidation = daoClient.NeedValidation;
				_cashGroupId = daoClient.CashGroupId;
				_inRoute = daoClient.InRoute;
				_salesChannelId = daoClient.SalesChannelId;
				_salesPoolId = daoClient.SalesPoolId;
				_userId = daoClient.UserId;
				_points = daoClient.Points;
				_wallet = daoClient.Wallet;
				_dealId = daoClient.DealId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClient");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Client record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual void Update()
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("updateBOClient");
			try
			{
				daoClient.ClientId = _clientId;
				daoClient.ClientAccountId = _clientAccountId;
				daoClient.ClientTypeId = _clientTypeId;
				daoClient.ClientCode = _clientCode;
				daoClient.ClientNameAr = _clientNameAr;
				daoClient.ClientNameEn = _clientNameEn;
				daoClient.BusinessUnitId = _businessUnitId;
				daoClient.BranchId = _branchId;
				daoClient.RegionId = _regionId;
				daoClient.GovernerateId = _governerateId;
				daoClient.CityId = _cityId;
				daoClient.LocationLevelId = _locationLevelId;
				daoClient.ClientGroupId = _clientGroupId;
				daoClient.ClientGroupSubId = _clientGroupSubId;
				daoClient.ClientClassificationId = _clientClassificationId;
				daoClient.CreditLimit = _creditLimit;
				daoClient.CreditBalance = _creditBalance;
				daoClient.PaymentTermId = _paymentTermId;
				daoClient.IsChain = _isChain;
				daoClient.Building = _building;
				daoClient.Floor = _floor;
				daoClient.Property = _property;
				daoClient.Address = _address;
				daoClient.Landmark = _landmark;
				daoClient.Phone = _phone;
				daoClient.Mobile = _mobile;
				daoClient.WhatsApp = _whatsApp;
				daoClient.IsActive = _isActive;
				daoClient.Latitude = _latitude;
				daoClient.Longitude = _longitude;
				daoClient.CBy = _cBy;
				daoClient.CDate = _cDate;
				daoClient.EBy = _eBy;
				daoClient.EDate = _eDate;
				daoClient.IsTaxable = _isTaxable;
				daoClient.IsCashDiscount = _isCashDiscount;
				daoClient.ResponsibleNameAr = _responsibleNameAr;
				daoClient.ResponsibleNameEn = _responsibleNameEn;
				daoClient.TaxCode = _taxCode;
				daoClient.CommercialCode = _commercialCode;
				daoClient.IsNew = _isNew;
				daoClient.NeedValidation = _needValidation;
				daoClient.CashGroupId = _cashGroupId;
				daoClient.InRoute = _inRoute;
				daoClient.SalesChannelId = _salesChannelId;
				daoClient.SalesPoolId = _salesPoolId;
				daoClient.UserId = _userId;
				daoClient.Points = _points;
				daoClient.Wallet = _wallet;
				daoClient.DealId = _dealId;
				daoClient.Update();
				CommitTransaction();
				
				_clientId = daoClient.ClientId;
				_clientAccountId = daoClient.ClientAccountId;
				_clientTypeId = daoClient.ClientTypeId;
				_clientCode = daoClient.ClientCode;
				_clientNameAr = daoClient.ClientNameAr;
				_clientNameEn = daoClient.ClientNameEn;
				_businessUnitId = daoClient.BusinessUnitId;
				_branchId = daoClient.BranchId;
				_regionId = daoClient.RegionId;
				_governerateId = daoClient.GovernerateId;
				_cityId = daoClient.CityId;
				_locationLevelId = daoClient.LocationLevelId;
				_clientGroupId = daoClient.ClientGroupId;
				_clientGroupSubId = daoClient.ClientGroupSubId;
				_clientClassificationId = daoClient.ClientClassificationId;
				_creditLimit = daoClient.CreditLimit;
				_creditBalance = daoClient.CreditBalance;
				_paymentTermId = daoClient.PaymentTermId;
				_isChain = daoClient.IsChain;
				_building = daoClient.Building;
				_floor = daoClient.Floor;
				_property = daoClient.Property;
				_address = daoClient.Address;
				_landmark = daoClient.Landmark;
				_phone = daoClient.Phone;
				_mobile = daoClient.Mobile;
				_whatsApp = daoClient.WhatsApp;
				_isActive = daoClient.IsActive;
				_latitude = daoClient.Latitude;
				_longitude = daoClient.Longitude;
				_cBy = daoClient.CBy;
				_cDate = daoClient.CDate;
				_eBy = daoClient.EBy;
				_eDate = daoClient.EDate;
				_isTaxable = daoClient.IsTaxable;
				_isCashDiscount = daoClient.IsCashDiscount;
				_responsibleNameAr = daoClient.ResponsibleNameAr;
				_responsibleNameEn = daoClient.ResponsibleNameEn;
				_taxCode = daoClient.TaxCode;
				_commercialCode = daoClient.CommercialCode;
				_isNew = daoClient.IsNew;
				_needValidation = daoClient.NeedValidation;
				_cashGroupId = daoClient.CashGroupId;
				_inRoute = daoClient.InRoute;
				_salesChannelId = daoClient.SalesChannelId;
				_salesPoolId = daoClient.SalesPoolId;
				_userId = daoClient.UserId;
				_points = daoClient.Points;
				_wallet = daoClient.Wallet;
				_dealId = daoClient.DealId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClient");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Client record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClient daoClient = new DAOClient();
			RegisterDataObject(daoClient);
			BeginTransaction("deleteBOClient");
			try
			{
				daoClient.ClientId = _clientId;
				daoClient.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClient");
				throw;
			}
		}
		
		///<Summary>
		///ClientCollection
		///This method returns the collection of BOClient objects
		///</Summary>
		///<returns>
		///List[BOClient]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClient> ClientCollection()
		{
			try
			{
				IList<BOClient> boClientCollection = new List<BOClient>();
				IList<DAOClient> daoClientCollection = DAOClient.SelectAll();
			
				foreach(DAOClient daoClient in daoClientCollection)
					boClientCollection.Add(new BOClient(daoClient));
			
				return boClientCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCollectionCount
		///This method returns the collection count of BOClient objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClient.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientActivityCollection
		///This method returns its collection of BOClientActivity objects
		///</Summary>
		///<returns>
		///IList[BOClientActivity]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientActivity> ClientActivityCollection()
		{
			try
			{
				if(_boClientActivityCollection == null)
					LoadClientActivityCollection();
				
				return _boClientActivityCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientAddressCollection
		///This method returns its collection of BOClientAddress objects
		///</Summary>
		///<returns>
		///IList[BOClientAddress]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientAddress> ClientAddressCollection()
		{
			try
			{
				if(_boClientAddressCollection == null)
					LoadClientAddressCollection();
				
				return _boClientAddressCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientCallPlanCollection
		///This method returns its collection of BOClientCallPlan objects
		///</Summary>
		///<returns>
		///IList[BOClientCallPlan]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientCallPlan> ClientCallPlanCollection()
		{
			try
			{
				if(_boClientCallPlanCollection == null)
					LoadClientCallPlanCollection();
				
				return _boClientCallPlanCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientCreditLimitCollection
		///This method returns its collection of BOClientCreditLimit objects
		///</Summary>
		///<returns>
		///IList[BOClientCreditLimit]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientCreditLimit> ClientCreditLimitCollection()
		{
			try
			{
				if(_boClientCreditLimitCollection == null)
					LoadClientCreditLimitCollection();
				
				return _boClientCreditLimitCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientDocumentCollection
		///This method returns its collection of BOClientDocument objects
		///</Summary>
		///<returns>
		///IList[BOClientDocument]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientDocument> ClientDocumentCollection()
		{
			try
			{
				if(_boClientDocumentCollection == null)
					LoadClientDocumentCollection();
				
				return _boClientDocumentCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientLandmarkCollection
		///This method returns its collection of BOClientLandmark objects
		///</Summary>
		///<returns>
		///IList[BOClientLandmark]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientLandmark> ClientLandmarkCollection()
		{
			try
			{
				if(_boClientLandmarkCollection == null)
					LoadClientLandmarkCollection();
				
				return _boClientLandmarkCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientPaymentCollection
		///This method returns its collection of BOClientPayment objects
		///</Summary>
		///<returns>
		///IList[BOClientPayment]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientPayment> ClientPaymentCollection()
		{
			try
			{
				if(_boClientPaymentCollection == null)
					LoadClientPaymentCollection();
				
				return _boClientPaymentCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientPlanCollection
		///This method returns its collection of BOClientPlan objects
		///</Summary>
		///<returns>
		///IList[BOClientPlan]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientPlan> ClientPlanCollection()
		{
			try
			{
				if(_boClientPlanCollection == null)
					LoadClientPlanCollection();
				
				return _boClientPlanCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientPreferredTimeCollection
		///This method returns its collection of BOClientPreferredTime objects
		///</Summary>
		///<returns>
		///IList[BOClientPreferredTime]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientPreferredTime> ClientPreferredTimeCollection()
		{
			try
			{
				if(_boClientPreferredTimeCollection == null)
					LoadClientPreferredTimeCollection();
				
				return _boClientPreferredTimeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientQuotaCollection
		///This method returns its collection of BOClientQuota objects
		///</Summary>
		///<returns>
		///IList[BOClientQuota]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientQuota> ClientQuotaCollection()
		{
			try
			{
				if(_boClientQuotaCollection == null)
					LoadClientQuotaCollection();
				
				return _boClientQuotaCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientRouteCollection
		///This method returns its collection of BOClientRoute objects
		///</Summary>
		///<returns>
		///IList[BOClientRoute]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientRoute> ClientRouteCollection()
		{
			try
			{
				if(_boClientRouteCollection == null)
					LoadClientRouteCollection();
				
				return _boClientRouteCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestCollection
		///This method returns its collection of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequest]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientServiceRequest> ClientServiceRequestCollection()
		{
			try
			{
				if(_boClientServiceRequestCollection == null)
					LoadClientServiceRequestCollection();
				
				return _boClientServiceRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientSurveyCollection
		///This method returns its collection of BOClientSurvey objects
		///</Summary>
		///<returns>
		///IList[BOClientSurvey]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientSurvey> ClientSurveyCollection()
		{
			try
			{
				if(_boClientSurveyCollection == null)
					LoadClientSurveyCollection();
				
				return _boClientSurveyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientTransactionCollection
		///This method returns its collection of BOClientTransaction objects
		///</Summary>
		///<returns>
		///IList[BOClientTransaction]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOClientTransaction> ClientTransactionCollection()
		{
			try
			{
				if(_boClientTransactionCollection == null)
					LoadClientTransactionCollection();
				
				return _boClientTransactionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OperationRequestDetailCollection
		///This method returns its collection of BOOperationRequestDetail objects
		///</Summary>
		///<returns>
		///IList[BOOperationRequestDetail]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOOperationRequestDetail> OperationRequestDetailCollection()
		{
			try
			{
				if(_boOperationRequestDetailCollection == null)
					LoadOperationRequestDetailCollection();
				
				return _boOperationRequestDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PromotionOrderHistoryCollection
		///This method returns its collection of BOPromotionOrderHistory objects
		///</Summary>
		///<returns>
		///IList[BOPromotionOrderHistory]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOPromotionOrderHistory> PromotionOrderHistoryCollection()
		{
			try
			{
				if(_boPromotionOrderHistoryCollection == null)
					LoadPromotionOrderHistoryCollection();
				
				return _boPromotionOrderHistoryCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderCollection
		///This method returns its collection of BOSalesOrder objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrder]
		///</returns>
		///<parameters>
		///BOClient
		///</parameters>
		public virtual IList<BOSalesOrder> SalesOrderCollection()
		{
			try
			{
				if(_boSalesOrderCollection == null)
					LoadSalesOrderCollection();
				
				return _boSalesOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClient>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClient.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClient objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClient> daoClientCollection = DAOClient.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClient resdaoClient in daoClientCollection)
					boClientCollection.Add((T)(object)new BOClient(resdaoClient));
			
				return boClientCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClient objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClient.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientActivityCollection
		///This method loads the internal collection of BOClientActivity objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientActivityCollection()
		{
			try
			{
				_boClientActivityCollection = new List<BOClientActivity>();
				IList<DAOClientActivity> daoClientActivityCollection = DAOClientActivity.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientActivity daoClientActivity in daoClientActivityCollection)
					_boClientActivityCollection.Add(new BOClientActivity(daoClientActivity));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientActivity
		///This method persists a BOClientActivity object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientActivity
		///</parameters>
		public virtual void AddClientActivity(BOClientActivity boClientActivity)
		{
			DAOClientActivity daoClientActivity = new DAOClientActivity();
			RegisterDataObject(daoClientActivity);
			BeginTransaction("addClientActivity");
			try
			{
				daoClientActivity.ActivityId = boClientActivity.ActivityId;
				daoClientActivity.RepresentativeId = boClientActivity.RepresentativeId;
				daoClientActivity.ActivityDate = boClientActivity.ActivityDate;
				daoClientActivity.ActivityTime = boClientActivity.ActivityTime;
				daoClientActivity.Duration = boClientActivity.Duration;
				daoClientActivity.InJourney = boClientActivity.InJourney;
				daoClientActivity.IsPositive = boClientActivity.IsPositive;
				daoClientActivity.InZone = boClientActivity.InZone;
				daoClientActivity.ActivityTypeId = boClientActivity.ActivityTypeId;
				daoClientActivity.Latitude = boClientActivity.Latitude;
				daoClientActivity.Longitude = boClientActivity.Longitude;
				daoClientActivity.Distance = boClientActivity.Distance;
				daoClientActivity.SalesId = boClientActivity.SalesId;
				daoClientActivity.CallAgain = boClientActivity.CallAgain;
				daoClientActivity.Notes = boClientActivity.Notes;
				daoClientActivity.CBy = boClientActivity.CBy;
				daoClientActivity.CDate = boClientActivity.CDate;
				daoClientActivity.EBy = boClientActivity.EBy;
				daoClientActivity.EDate = boClientActivity.EDate;
				daoClientActivity.ClientId = _clientId.Value;
				daoClientActivity.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientActivity = new BOClientActivity(daoClientActivity);
				if(_boClientActivityCollection != null)
					_boClientActivityCollection.Add(boClientActivity);
			}
			catch
			{
				RollbackTransaction("addClientActivity");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientActivity
		///This method deletes all BOClientActivity objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientActivity()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientActivity");
			try
			{
				DAOClientActivity.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientActivityCollection != null)
				{
					_boClientActivityCollection.Clear();
					_boClientActivityCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientActivity");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientAddressCollection
		///This method loads the internal collection of BOClientAddress objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientAddressCollection()
		{
			try
			{
				_boClientAddressCollection = new List<BOClientAddress>();
				IList<DAOClientAddress> daoClientAddressCollection = DAOClientAddress.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientAddress daoClientAddress in daoClientAddressCollection)
					_boClientAddressCollection.Add(new BOClientAddress(daoClientAddress));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientAddress
		///This method persists a BOClientAddress object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientAddress
		///</parameters>
		public virtual void AddClientAddress(BOClientAddress boClientAddress)
		{
			DAOClientAddress daoClientAddress = new DAOClientAddress();
			RegisterDataObject(daoClientAddress);
			BeginTransaction("addClientAddress");
			try
			{
				daoClientAddress.AddressId = boClientAddress.AddressId;
				daoClientAddress.IsDefault = boClientAddress.IsDefault;
				daoClientAddress.GovernerateId = boClientAddress.GovernerateId;
				daoClientAddress.CityId = boClientAddress.CityId;
				daoClientAddress.Address = boClientAddress.Address;
				daoClientAddress.Landmark = boClientAddress.Landmark;
				daoClientAddress.Building = boClientAddress.Building;
				daoClientAddress.Floor = boClientAddress.Floor;
				daoClientAddress.Property = boClientAddress.Property;
				daoClientAddress.Email = boClientAddress.Email;
				daoClientAddress.Phone = boClientAddress.Phone;
				daoClientAddress.Lat = boClientAddress.Lat;
				daoClientAddress.Lng = boClientAddress.Lng;
				daoClientAddress.NeedValidation = boClientAddress.NeedValidation;
				daoClientAddress.CBy = boClientAddress.CBy;
				daoClientAddress.CDate = boClientAddress.CDate;
				daoClientAddress.EBy = boClientAddress.EBy;
				daoClientAddress.EDate = boClientAddress.EDate;
				daoClientAddress.ClientId = _clientId.Value;
				daoClientAddress.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientAddress = new BOClientAddress(daoClientAddress);
				if(_boClientAddressCollection != null)
					_boClientAddressCollection.Add(boClientAddress);
			}
			catch
			{
				RollbackTransaction("addClientAddress");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientAddress
		///This method deletes all BOClientAddress objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientAddress()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientAddress");
			try
			{
				DAOClientAddress.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientAddressCollection != null)
				{
					_boClientAddressCollection.Clear();
					_boClientAddressCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientAddress");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientCallPlanCollection
		///This method loads the internal collection of BOClientCallPlan objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientCallPlanCollection()
		{
			try
			{
				_boClientCallPlanCollection = new List<BOClientCallPlan>();
				IList<DAOClientCallPlan> daoClientCallPlanCollection = DAOClientCallPlan.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientCallPlan daoClientCallPlan in daoClientCallPlanCollection)
					_boClientCallPlanCollection.Add(new BOClientCallPlan(daoClientCallPlan));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientCallPlan
		///This method persists a BOClientCallPlan object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientCallPlan
		///</parameters>
		public virtual void AddClientCallPlan(BOClientCallPlan boClientCallPlan)
		{
			DAOClientCallPlan daoClientCallPlan = new DAOClientCallPlan();
			RegisterDataObject(daoClientCallPlan);
			BeginTransaction("addClientCallPlan");
			try
			{
				daoClientCallPlan.CalPlanId = boClientCallPlan.CalPlanId;
				daoClientCallPlan.Day1 = boClientCallPlan.Day1;
				daoClientCallPlan.Day2 = boClientCallPlan.Day2;
				daoClientCallPlan.Day3 = boClientCallPlan.Day3;
				daoClientCallPlan.Day4 = boClientCallPlan.Day4;
				daoClientCallPlan.Day5 = boClientCallPlan.Day5;
				daoClientCallPlan.Day6 = boClientCallPlan.Day6;
				daoClientCallPlan.Day7 = boClientCallPlan.Day7;
				daoClientCallPlan.ClientId = _clientId.Value;
				daoClientCallPlan.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientCallPlan = new BOClientCallPlan(daoClientCallPlan);
				if(_boClientCallPlanCollection != null)
					_boClientCallPlanCollection.Add(boClientCallPlan);
			}
			catch
			{
				RollbackTransaction("addClientCallPlan");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientCallPlan
		///This method deletes all BOClientCallPlan objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientCallPlan()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientCallPlan");
			try
			{
				DAOClientCallPlan.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientCallPlanCollection != null)
				{
					_boClientCallPlanCollection.Clear();
					_boClientCallPlanCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientCallPlan");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.BranchId = boClientComplain.BranchId;
				daoClientComplain.RepresentativeId = boClientComplain.RepresentativeId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeId = boClientComplain.ComplainTypeId;
				daoClientComplain.ComplainTypeDetailId = boClientComplain.ComplainTypeDetailId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.PriorityId = boClientComplain.PriorityId;
				daoClientComplain.ComplainStatusId = boClientComplain.ComplainStatusId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.DepartmentId = boClientComplain.DepartmentId;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.ClientId = _clientId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientCreditLimitCollection
		///This method loads the internal collection of BOClientCreditLimit objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientCreditLimitCollection()
		{
			try
			{
				_boClientCreditLimitCollection = new List<BOClientCreditLimit>();
				IList<DAOClientCreditLimit> daoClientCreditLimitCollection = DAOClientCreditLimit.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientCreditLimit daoClientCreditLimit in daoClientCreditLimitCollection)
					_boClientCreditLimitCollection.Add(new BOClientCreditLimit(daoClientCreditLimit));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientCreditLimit
		///This method persists a BOClientCreditLimit object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientCreditLimit
		///</parameters>
		public virtual void AddClientCreditLimit(BOClientCreditLimit boClientCreditLimit)
		{
			DAOClientCreditLimit daoClientCreditLimit = new DAOClientCreditLimit();
			RegisterDataObject(daoClientCreditLimit);
			BeginTransaction("addClientCreditLimit");
			try
			{
				daoClientCreditLimit.LimitId = boClientCreditLimit.LimitId;
				daoClientCreditLimit.LimitYear = boClientCreditLimit.LimitYear;
				daoClientCreditLimit.LimitMonth = boClientCreditLimit.LimitMonth;
				daoClientCreditLimit.LimitValue = boClientCreditLimit.LimitValue;
				daoClientCreditLimit.CBy = boClientCreditLimit.CBy;
				daoClientCreditLimit.CDate = boClientCreditLimit.CDate;
				daoClientCreditLimit.EBy = boClientCreditLimit.EBy;
				daoClientCreditLimit.EDate = boClientCreditLimit.EDate;
				daoClientCreditLimit.ClientId = _clientId.Value;
				daoClientCreditLimit.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientCreditLimit = new BOClientCreditLimit(daoClientCreditLimit);
				if(_boClientCreditLimitCollection != null)
					_boClientCreditLimitCollection.Add(boClientCreditLimit);
			}
			catch
			{
				RollbackTransaction("addClientCreditLimit");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientCreditLimit
		///This method deletes all BOClientCreditLimit objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientCreditLimit()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientCreditLimit");
			try
			{
				DAOClientCreditLimit.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientCreditLimitCollection != null)
				{
					_boClientCreditLimitCollection.Clear();
					_boClientCreditLimitCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientCreditLimit");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientDocumentCollection
		///This method loads the internal collection of BOClientDocument objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientDocumentCollection()
		{
			try
			{
				_boClientDocumentCollection = new List<BOClientDocument>();
				IList<DAOClientDocument> daoClientDocumentCollection = DAOClientDocument.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientDocument daoClientDocument in daoClientDocumentCollection)
					_boClientDocumentCollection.Add(new BOClientDocument(daoClientDocument));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientDocument
		///This method persists a BOClientDocument object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientDocument
		///</parameters>
		public virtual void AddClientDocument(BOClientDocument boClientDocument)
		{
			DAOClientDocument daoClientDocument = new DAOClientDocument();
			RegisterDataObject(daoClientDocument);
			BeginTransaction("addClientDocument");
			try
			{
				daoClientDocument.ClientDocumentId = boClientDocument.ClientDocumentId;
				daoClientDocument.DocumentTypeId = boClientDocument.DocumentTypeId;
				daoClientDocument.DocumentPath = boClientDocument.DocumentPath;
				daoClientDocument.UploadDate = boClientDocument.UploadDate;
				daoClientDocument.DocumentExt = boClientDocument.DocumentExt;
				daoClientDocument.DocumentSize = boClientDocument.DocumentSize;
				daoClientDocument.ClientId = _clientId.Value;
				daoClientDocument.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientDocument = new BOClientDocument(daoClientDocument);
				if(_boClientDocumentCollection != null)
					_boClientDocumentCollection.Add(boClientDocument);
			}
			catch
			{
				RollbackTransaction("addClientDocument");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientDocument
		///This method deletes all BOClientDocument objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientDocument()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientDocument");
			try
			{
				DAOClientDocument.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientDocumentCollection != null)
				{
					_boClientDocumentCollection.Clear();
					_boClientDocumentCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientDocument");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientLandmarkCollection
		///This method loads the internal collection of BOClientLandmark objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientLandmarkCollection()
		{
			try
			{
				_boClientLandmarkCollection = new List<BOClientLandmark>();
				IList<DAOClientLandmark> daoClientLandmarkCollection = DAOClientLandmark.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientLandmark daoClientLandmark in daoClientLandmarkCollection)
					_boClientLandmarkCollection.Add(new BOClientLandmark(daoClientLandmark));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientLandmark
		///This method persists a BOClientLandmark object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientLandmark
		///</parameters>
		public virtual void AddClientLandmark(BOClientLandmark boClientLandmark)
		{
			DAOClientLandmark daoClientLandmark = new DAOClientLandmark();
			RegisterDataObject(daoClientLandmark);
			BeginTransaction("addClientLandmark");
			try
			{
				daoClientLandmark.LandmarkId = boClientLandmark.LandmarkId;
				daoClientLandmark.DetaillandId = boClientLandmark.DetaillandId;
				daoClientLandmark.ClientId = _clientId.Value;
				daoClientLandmark.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientLandmark = new BOClientLandmark(daoClientLandmark);
				if(_boClientLandmarkCollection != null)
					_boClientLandmarkCollection.Add(boClientLandmark);
			}
			catch
			{
				RollbackTransaction("addClientLandmark");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientLandmark
		///This method deletes all BOClientLandmark objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientLandmark()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientLandmark");
			try
			{
				DAOClientLandmark.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientLandmarkCollection != null)
				{
					_boClientLandmarkCollection.Clear();
					_boClientLandmarkCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientLandmark");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientPaymentCollection
		///This method loads the internal collection of BOClientPayment objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientPaymentCollection()
		{
			try
			{
				_boClientPaymentCollection = new List<BOClientPayment>();
				IList<DAOClientPayment> daoClientPaymentCollection = DAOClientPayment.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientPayment daoClientPayment in daoClientPaymentCollection)
					_boClientPaymentCollection.Add(new BOClientPayment(daoClientPayment));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientPayment
		///This method persists a BOClientPayment object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientPayment
		///</parameters>
		public virtual void AddClientPayment(BOClientPayment boClientPayment)
		{
			DAOClientPayment daoClientPayment = new DAOClientPayment();
			RegisterDataObject(daoClientPayment);
			BeginTransaction("addClientPayment");
			try
			{
				daoClientPayment.PaymentId = boClientPayment.PaymentId;
				daoClientPayment.PaymentDate = boClientPayment.PaymentDate;
				daoClientPayment.PaymentMethodId = boClientPayment.PaymentMethodId;
				daoClientPayment.PaymentValue = boClientPayment.PaymentValue;
				daoClientPayment.PaymentCode = boClientPayment.PaymentCode;
				daoClientPayment.RepresentativeId = boClientPayment.RepresentativeId;
				daoClientPayment.BankId = boClientPayment.BankId;
				daoClientPayment.DueDate = boClientPayment.DueDate;
				daoClientPayment.IsRejected = boClientPayment.IsRejected;
				daoClientPayment.CBy = boClientPayment.CBy;
				daoClientPayment.CDate = boClientPayment.CDate;
				daoClientPayment.EBy = boClientPayment.EBy;
				daoClientPayment.EDate = boClientPayment.EDate;
				daoClientPayment.ClientId = _clientId.Value;
				daoClientPayment.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientPayment = new BOClientPayment(daoClientPayment);
				if(_boClientPaymentCollection != null)
					_boClientPaymentCollection.Add(boClientPayment);
			}
			catch
			{
				RollbackTransaction("addClientPayment");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientPayment
		///This method deletes all BOClientPayment objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientPayment()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientPayment");
			try
			{
				DAOClientPayment.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientPaymentCollection != null)
				{
					_boClientPaymentCollection.Clear();
					_boClientPaymentCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientPayment");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientPlanCollection
		///This method loads the internal collection of BOClientPlan objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientPlanCollection()
		{
			try
			{
				_boClientPlanCollection = new List<BOClientPlan>();
				IList<DAOClientPlan> daoClientPlanCollection = DAOClientPlan.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientPlan daoClientPlan in daoClientPlanCollection)
					_boClientPlanCollection.Add(new BOClientPlan(daoClientPlan));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientPlan
		///This method persists a BOClientPlan object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientPlan
		///</parameters>
		public virtual void AddClientPlan(BOClientPlan boClientPlan)
		{
			DAOClientPlan daoClientPlan = new DAOClientPlan();
			RegisterDataObject(daoClientPlan);
			BeginTransaction("addClientPlan");
			try
			{
				daoClientPlan.PlanId = boClientPlan.PlanId;
				daoClientPlan.TargetDate = boClientPlan.TargetDate;
				daoClientPlan.TargetValue = boClientPlan.TargetValue;
				daoClientPlan.TargetVisit = boClientPlan.TargetVisit;
				daoClientPlan.TargetCall = boClientPlan.TargetCall;
				daoClientPlan.CBy = boClientPlan.CBy;
				daoClientPlan.CDate = boClientPlan.CDate;
				daoClientPlan.EBy = boClientPlan.EBy;
				daoClientPlan.EDate = boClientPlan.EDate;
				daoClientPlan.ClientId = _clientId.Value;
				daoClientPlan.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientPlan = new BOClientPlan(daoClientPlan);
				if(_boClientPlanCollection != null)
					_boClientPlanCollection.Add(boClientPlan);
			}
			catch
			{
				RollbackTransaction("addClientPlan");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientPlan
		///This method deletes all BOClientPlan objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientPlan()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientPlan");
			try
			{
				DAOClientPlan.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientPlanCollection != null)
				{
					_boClientPlanCollection.Clear();
					_boClientPlanCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientPlan");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientPreferredTimeCollection
		///This method loads the internal collection of BOClientPreferredTime objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientPreferredTimeCollection()
		{
			try
			{
				_boClientPreferredTimeCollection = new List<BOClientPreferredTime>();
				IList<DAOClientPreferredTime> daoClientPreferredTimeCollection = DAOClientPreferredTime.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientPreferredTime daoClientPreferredTime in daoClientPreferredTimeCollection)
					_boClientPreferredTimeCollection.Add(new BOClientPreferredTime(daoClientPreferredTime));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientPreferredTime
		///This method persists a BOClientPreferredTime object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientPreferredTime
		///</parameters>
		public virtual void AddClientPreferredTime(BOClientPreferredTime boClientPreferredTime)
		{
			DAOClientPreferredTime daoClientPreferredTime = new DAOClientPreferredTime();
			RegisterDataObject(daoClientPreferredTime);
			BeginTransaction("addClientPreferredTime");
			try
			{
				daoClientPreferredTime.PreferredId = boClientPreferredTime.PreferredId;
				daoClientPreferredTime.PreferredOperationId = boClientPreferredTime.PreferredOperationId;
				daoClientPreferredTime.WeekDayId = boClientPreferredTime.WeekDayId;
				daoClientPreferredTime.FromTime = boClientPreferredTime.FromTime;
				daoClientPreferredTime.ToTime = boClientPreferredTime.ToTime;
				daoClientPreferredTime.ClientId = _clientId.Value;
				daoClientPreferredTime.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientPreferredTime = new BOClientPreferredTime(daoClientPreferredTime);
				if(_boClientPreferredTimeCollection != null)
					_boClientPreferredTimeCollection.Add(boClientPreferredTime);
			}
			catch
			{
				RollbackTransaction("addClientPreferredTime");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientPreferredTime
		///This method deletes all BOClientPreferredTime objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientPreferredTime()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientPreferredTime");
			try
			{
				DAOClientPreferredTime.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientPreferredTimeCollection != null)
				{
					_boClientPreferredTimeCollection.Clear();
					_boClientPreferredTimeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientPreferredTime");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientQuotaCollection
		///This method loads the internal collection of BOClientQuota objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientQuotaCollection()
		{
			try
			{
				_boClientQuotaCollection = new List<BOClientQuota>();
				IList<DAOClientQuota> daoClientQuotaCollection = DAOClientQuota.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientQuota daoClientQuota in daoClientQuotaCollection)
					_boClientQuotaCollection.Add(new BOClientQuota(daoClientQuota));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientQuota
		///This method persists a BOClientQuota object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientQuota
		///</parameters>
		public virtual void AddClientQuota(BOClientQuota boClientQuota)
		{
			DAOClientQuota daoClientQuota = new DAOClientQuota();
			RegisterDataObject(daoClientQuota);
			BeginTransaction("addClientQuota");
			try
			{
				daoClientQuota.QuotaId = boClientQuota.QuotaId;
				daoClientQuota.ItemId = boClientQuota.ItemId;
				daoClientQuota.Quantity = boClientQuota.Quantity;
				daoClientQuota.Remain = boClientQuota.Remain;
				daoClientQuota.FromDate = boClientQuota.FromDate;
				daoClientQuota.ToDate = boClientQuota.ToDate;
				daoClientQuota.ClientId = _clientId.Value;
				daoClientQuota.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientQuota = new BOClientQuota(daoClientQuota);
				if(_boClientQuotaCollection != null)
					_boClientQuotaCollection.Add(boClientQuota);
			}
			catch
			{
				RollbackTransaction("addClientQuota");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientQuota
		///This method deletes all BOClientQuota objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientQuota()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientQuota");
			try
			{
				DAOClientQuota.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientQuotaCollection != null)
				{
					_boClientQuotaCollection.Clear();
					_boClientQuotaCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientQuota");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientRouteCollection
		///This method loads the internal collection of BOClientRoute objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientRouteCollection()
		{
			try
			{
				_boClientRouteCollection = new List<BOClientRoute>();
				IList<DAOClientRoute> daoClientRouteCollection = DAOClientRoute.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientRoute daoClientRoute in daoClientRouteCollection)
					_boClientRouteCollection.Add(new BOClientRoute(daoClientRoute));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientRoute
		///This method persists a BOClientRoute object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientRoute
		///</parameters>
		public virtual void AddClientRoute(BOClientRoute boClientRoute)
		{
			DAOClientRoute daoClientRoute = new DAOClientRoute();
			RegisterDataObject(daoClientRoute);
			BeginTransaction("addClientRoute");
			try
			{
				daoClientRoute.ClientRouteId = boClientRoute.ClientRouteId;
				daoClientRoute.RouteTypeId = boClientRoute.RouteTypeId;
				daoClientRoute.RouteId = boClientRoute.RouteId;
				daoClientRoute.Day1 = boClientRoute.Day1;
				daoClientRoute.Day2 = boClientRoute.Day2;
				daoClientRoute.Day3 = boClientRoute.Day3;
				daoClientRoute.Day4 = boClientRoute.Day4;
				daoClientRoute.Day5 = boClientRoute.Day5;
				daoClientRoute.Day6 = boClientRoute.Day6;
				daoClientRoute.Day7 = boClientRoute.Day7;
				daoClientRoute.CBy = boClientRoute.CBy;
				daoClientRoute.CDate = boClientRoute.CDate;
				daoClientRoute.EBy = boClientRoute.EBy;
				daoClientRoute.EDate = boClientRoute.EDate;
				daoClientRoute.ClientId = _clientId.Value;
				daoClientRoute.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientRoute = new BOClientRoute(daoClientRoute);
				if(_boClientRouteCollection != null)
					_boClientRouteCollection.Add(boClientRoute);
			}
			catch
			{
				RollbackTransaction("addClientRoute");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientRoute
		///This method deletes all BOClientRoute objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientRoute()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientRoute");
			try
			{
				DAOClientRoute.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientRouteCollection != null)
				{
					_boClientRouteCollection.Clear();
					_boClientRouteCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientRoute");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestCollection
		///This method loads the internal collection of BOClientServiceRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestCollection()
		{
			try
			{
				_boClientServiceRequestCollection = new List<BOClientServiceRequest>();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientServiceRequest daoClientServiceRequest in daoClientServiceRequestCollection)
					_boClientServiceRequestCollection.Add(new BOClientServiceRequest(daoClientServiceRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequest
		///This method persists a BOClientServiceRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual void AddClientServiceRequest(BOClientServiceRequest boClientServiceRequest)
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("addClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = boClientServiceRequest.RequestId;
				daoClientServiceRequest.RequestCode = boClientServiceRequest.RequestCode;
				daoClientServiceRequest.BranchId = boClientServiceRequest.BranchId;
				daoClientServiceRequest.RepresentativeId = boClientServiceRequest.RepresentativeId;
				daoClientServiceRequest.RequestDate = boClientServiceRequest.RequestDate;
				daoClientServiceRequest.RequestTime = boClientServiceRequest.RequestTime;
				daoClientServiceRequest.RequestTypeId = boClientServiceRequest.RequestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = boClientServiceRequest.RequestTypeDetailId;
				daoClientServiceRequest.Phone = boClientServiceRequest.Phone;
				daoClientServiceRequest.PhoneAlternative = boClientServiceRequest.PhoneAlternative;
				daoClientServiceRequest.PriorityId = boClientServiceRequest.PriorityId;
				daoClientServiceRequest.RequestStatusId = boClientServiceRequest.RequestStatusId;
				daoClientServiceRequest.IsClosed = boClientServiceRequest.IsClosed;
				daoClientServiceRequest.CloseDate = boClientServiceRequest.CloseDate;
				daoClientServiceRequest.Duration = boClientServiceRequest.Duration;
				daoClientServiceRequest.Latitude = boClientServiceRequest.Latitude;
				daoClientServiceRequest.Longitude = boClientServiceRequest.Longitude;
				daoClientServiceRequest.InZone = boClientServiceRequest.InZone;
				daoClientServiceRequest.Distance = boClientServiceRequest.Distance;
				daoClientServiceRequest.Notes = boClientServiceRequest.Notes;
				daoClientServiceRequest.DepartmentId = boClientServiceRequest.DepartmentId;
				daoClientServiceRequest.CBy = boClientServiceRequest.CBy;
				daoClientServiceRequest.CDate = boClientServiceRequest.CDate;
				daoClientServiceRequest.EBy = boClientServiceRequest.EBy;
				daoClientServiceRequest.EDate = boClientServiceRequest.EDate;
				daoClientServiceRequest.Replay = boClientServiceRequest.Replay;
				daoClientServiceRequest.RequestTitle = boClientServiceRequest.RequestTitle;
				daoClientServiceRequest.ClientId = _clientId.Value;
				daoClientServiceRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequest = new BOClientServiceRequest(daoClientServiceRequest);
				if(_boClientServiceRequestCollection != null)
					_boClientServiceRequestCollection.Add(boClientServiceRequest);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequest
		///This method deletes all BOClientServiceRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceRequest");
			try
			{
				DAOClientServiceRequest.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientServiceRequestCollection != null)
				{
					_boClientServiceRequestCollection.Clear();
					_boClientServiceRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientSurveyCollection
		///This method loads the internal collection of BOClientSurvey objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientSurveyCollection()
		{
			try
			{
				_boClientSurveyCollection = new List<BOClientSurvey>();
				IList<DAOClientSurvey> daoClientSurveyCollection = DAOClientSurvey.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientSurvey daoClientSurvey in daoClientSurveyCollection)
					_boClientSurveyCollection.Add(new BOClientSurvey(daoClientSurvey));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientSurvey
		///This method persists a BOClientSurvey object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientSurvey
		///</parameters>
		public virtual void AddClientSurvey(BOClientSurvey boClientSurvey)
		{
			DAOClientSurvey daoClientSurvey = new DAOClientSurvey();
			RegisterDataObject(daoClientSurvey);
			BeginTransaction("addClientSurvey");
			try
			{
				daoClientSurvey.ClientServeyId = boClientSurvey.ClientServeyId;
				daoClientSurvey.SurveyId = boClientSurvey.SurveyId;
				daoClientSurvey.BranchId = boClientSurvey.BranchId;
				daoClientSurvey.RepresentativeId = boClientSurvey.RepresentativeId;
				daoClientSurvey.ServeyStatusId = boClientSurvey.ServeyStatusId;
				daoClientSurvey.CreateDate = boClientSurvey.CreateDate;
				daoClientSurvey.CreateTime = boClientSurvey.CreateTime;
				daoClientSurvey.StartDate = boClientSurvey.StartDate;
				daoClientSurvey.StartTime = boClientSurvey.StartTime;
				daoClientSurvey.IsClosed = boClientSurvey.IsClosed;
				daoClientSurvey.Notes = boClientSurvey.Notes;
				daoClientSurvey.Latitude = boClientSurvey.Latitude;
				daoClientSurvey.Longitude = boClientSurvey.Longitude;
				daoClientSurvey.InZone = boClientSurvey.InZone;
				daoClientSurvey.Distance = boClientSurvey.Distance;
				daoClientSurvey.CanDelete = boClientSurvey.CanDelete;
				daoClientSurvey.CBy = boClientSurvey.CBy;
				daoClientSurvey.CDate = boClientSurvey.CDate;
				daoClientSurvey.EBy = boClientSurvey.EBy;
				daoClientSurvey.EDate = boClientSurvey.EDate;
				daoClientSurvey.ClientId = _clientId.Value;
				daoClientSurvey.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientSurvey = new BOClientSurvey(daoClientSurvey);
				if(_boClientSurveyCollection != null)
					_boClientSurveyCollection.Add(boClientSurvey);
			}
			catch
			{
				RollbackTransaction("addClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientSurvey
		///This method deletes all BOClientSurvey objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientSurvey()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientSurvey");
			try
			{
				DAOClientSurvey.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientSurveyCollection != null)
				{
					_boClientSurveyCollection.Clear();
					_boClientSurveyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientTransactionCollection
		///This method loads the internal collection of BOClientTransaction objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientTransactionCollection()
		{
			try
			{
				_boClientTransactionCollection = new List<BOClientTransaction>();
				IList<DAOClientTransaction> daoClientTransactionCollection = DAOClientTransaction.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOClientTransaction daoClientTransaction in daoClientTransactionCollection)
					_boClientTransactionCollection.Add(new BOClientTransaction(daoClientTransaction));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientTransaction
		///This method persists a BOClientTransaction object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientTransaction
		///</parameters>
		public virtual void AddClientTransaction(BOClientTransaction boClientTransaction)
		{
			DAOClientTransaction daoClientTransaction = new DAOClientTransaction();
			RegisterDataObject(daoClientTransaction);
			BeginTransaction("addClientTransaction");
			try
			{
				daoClientTransaction.TransactionId = boClientTransaction.TransactionId;
				daoClientTransaction.TransactionTypeId = boClientTransaction.TransactionTypeId;
				daoClientTransaction.TransactionCode = boClientTransaction.TransactionCode;
				daoClientTransaction.TransactionDate = boClientTransaction.TransactionDate;
				daoClientTransaction.TransactionValue = boClientTransaction.TransactionValue;
				daoClientTransaction.CBy = boClientTransaction.CBy;
				daoClientTransaction.CDate = boClientTransaction.CDate;
				daoClientTransaction.EBy = boClientTransaction.EBy;
				daoClientTransaction.EDate = boClientTransaction.EDate;
				daoClientTransaction.ClientId = _clientId.Value;
				daoClientTransaction.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientTransaction = new BOClientTransaction(daoClientTransaction);
				if(_boClientTransactionCollection != null)
					_boClientTransactionCollection.Add(boClientTransaction);
			}
			catch
			{
				RollbackTransaction("addClientTransaction");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientTransaction
		///This method deletes all BOClientTransaction objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientTransaction()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientTransaction");
			try
			{
				DAOClientTransaction.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boClientTransactionCollection != null)
				{
					_boClientTransactionCollection.Clear();
					_boClientTransactionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientTransaction");
				throw;
			}
		}
		
		///<Summary>
		///LoadOperationRequestDetailCollection
		///This method loads the internal collection of BOOperationRequestDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOperationRequestDetailCollection()
		{
			try
			{
				_boOperationRequestDetailCollection = new List<BOOperationRequestDetail>();
				IList<DAOOperationRequestDetail> daoOperationRequestDetailCollection = DAOOperationRequestDetail.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOOperationRequestDetail daoOperationRequestDetail in daoOperationRequestDetailCollection)
					_boOperationRequestDetailCollection.Add(new BOOperationRequestDetail(daoOperationRequestDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOperationRequestDetail
		///This method persists a BOOperationRequestDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOperationRequestDetail
		///</parameters>
		public virtual void AddOperationRequestDetail(BOOperationRequestDetail boOperationRequestDetail)
		{
			DAOOperationRequestDetail daoOperationRequestDetail = new DAOOperationRequestDetail();
			RegisterDataObject(daoOperationRequestDetail);
			BeginTransaction("addOperationRequestDetail");
			try
			{
				daoOperationRequestDetail.DetailId = boOperationRequestDetail.DetailId;
				daoOperationRequestDetail.OperationId = boOperationRequestDetail.OperationId;
				daoOperationRequestDetail.OperationDate = boOperationRequestDetail.OperationDate;
				daoOperationRequestDetail.ClientTypeId = boOperationRequestDetail.ClientTypeId;
				daoOperationRequestDetail.ClientNameAr = boOperationRequestDetail.ClientNameAr;
				daoOperationRequestDetail.ClientNameEn = boOperationRequestDetail.ClientNameEn;
				daoOperationRequestDetail.RegionId = boOperationRequestDetail.RegionId;
				daoOperationRequestDetail.GovernerateId = boOperationRequestDetail.GovernerateId;
				daoOperationRequestDetail.CityId = boOperationRequestDetail.CityId;
				daoOperationRequestDetail.LocationLevelId = boOperationRequestDetail.LocationLevelId;
				daoOperationRequestDetail.IsChain = boOperationRequestDetail.IsChain;
				daoOperationRequestDetail.ResponsibleNameEn = boOperationRequestDetail.ResponsibleNameEn;
				daoOperationRequestDetail.ResponsibleNameAr = boOperationRequestDetail.ResponsibleNameAr;
				daoOperationRequestDetail.Building = boOperationRequestDetail.Building;
				daoOperationRequestDetail.Floor = boOperationRequestDetail.Floor;
				daoOperationRequestDetail.Property = boOperationRequestDetail.Property;
				daoOperationRequestDetail.Address = boOperationRequestDetail.Address;
				daoOperationRequestDetail.Landmark = boOperationRequestDetail.Landmark;
				daoOperationRequestDetail.Phone = boOperationRequestDetail.Phone;
				daoOperationRequestDetail.Mobile = boOperationRequestDetail.Mobile;
				daoOperationRequestDetail.WhatsApp = boOperationRequestDetail.WhatsApp;
				daoOperationRequestDetail.Latitude = boOperationRequestDetail.Latitude;
				daoOperationRequestDetail.Longitude = boOperationRequestDetail.Longitude;
				daoOperationRequestDetail.Accuracy = boOperationRequestDetail.Accuracy;
				daoOperationRequestDetail.InZone = boOperationRequestDetail.InZone;
				daoOperationRequestDetail.OperationStatusId = boOperationRequestDetail.OperationStatusId;
				daoOperationRequestDetail.CBy = boOperationRequestDetail.CBy;
				daoOperationRequestDetail.CDate = boOperationRequestDetail.CDate;
				daoOperationRequestDetail.EBy = boOperationRequestDetail.EBy;
				daoOperationRequestDetail.EDate = boOperationRequestDetail.EDate;
				daoOperationRequestDetail.TaxCode = boOperationRequestDetail.TaxCode;
				daoOperationRequestDetail.CommercialCode = boOperationRequestDetail.CommercialCode;
				daoOperationRequestDetail.OperationRejectReasonId = boOperationRequestDetail.OperationRejectReasonId;
				daoOperationRequestDetail.ClientId = _clientId.Value;
				daoOperationRequestDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOperationRequestDetail = new BOOperationRequestDetail(daoOperationRequestDetail);
				if(_boOperationRequestDetailCollection != null)
					_boOperationRequestDetailCollection.Add(boOperationRequestDetail);
			}
			catch
			{
				RollbackTransaction("addOperationRequestDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOperationRequestDetail
		///This method deletes all BOOperationRequestDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOperationRequestDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOperationRequestDetail");
			try
			{
				DAOOperationRequestDetail.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boOperationRequestDetailCollection != null)
				{
					_boOperationRequestDetailCollection.Clear();
					_boOperationRequestDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOperationRequestDetail");
				throw;
			}
		}
		
		///<Summary>
		///LoadPromotionOrderHistoryCollection
		///This method loads the internal collection of BOPromotionOrderHistory objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPromotionOrderHistoryCollection()
		{
			try
			{
				_boPromotionOrderHistoryCollection = new List<BOPromotionOrderHistory>();
				IList<DAOPromotionOrderHistory> daoPromotionOrderHistoryCollection = DAOPromotionOrderHistory.SelectAllByHistoryId(_clientId.Value);
				
				foreach(DAOPromotionOrderHistory daoPromotionOrderHistory in daoPromotionOrderHistoryCollection)
					_boPromotionOrderHistoryCollection.Add(new BOPromotionOrderHistory(daoPromotionOrderHistory));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPromotionOrderHistory
		///This method persists a BOPromotionOrderHistory object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionOrderHistory
		///</parameters>
		public virtual void AddPromotionOrderHistory(BOPromotionOrderHistory boPromotionOrderHistory)
		{
			DAOPromotionOrderHistory daoPromotionOrderHistory = new DAOPromotionOrderHistory();
			RegisterDataObject(daoPromotionOrderHistory);
			BeginTransaction("addPromotionOrderHistory");
			try
			{
				daoPromotionOrderHistory.PromotionId = boPromotionOrderHistory.PromotionId;
				daoPromotionOrderHistory.ClientId = boPromotionOrderHistory.ClientId;
				daoPromotionOrderHistory.InvoiceCode = boPromotionOrderHistory.InvoiceCode;
				daoPromotionOrderHistory.InvoiceDate = boPromotionOrderHistory.InvoiceDate;
				daoPromotionOrderHistory.HistoryId = _clientId.Value;
				daoPromotionOrderHistory.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPromotionOrderHistory = new BOPromotionOrderHistory(daoPromotionOrderHistory);
				if(_boPromotionOrderHistoryCollection != null)
					_boPromotionOrderHistoryCollection.Add(boPromotionOrderHistory);
			}
			catch
			{
				RollbackTransaction("addPromotionOrderHistory");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPromotionOrderHistory
		///This method deletes all BOPromotionOrderHistory objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPromotionOrderHistory()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPromotionOrderHistory");
			try
			{
				DAOPromotionOrderHistory.DeleteAllByHistoryId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boPromotionOrderHistoryCollection != null)
				{
					_boPromotionOrderHistoryCollection.Clear();
					_boPromotionOrderHistoryCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPromotionOrderHistory");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderCollection
		///This method loads the internal collection of BOSalesOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderCollection()
		{
			try
			{
				_boSalesOrderCollection = new List<BOSalesOrder>();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAllByClientId(_clientId.Value);
				
				foreach(DAOSalesOrder daoSalesOrder in daoSalesOrderCollection)
					_boSalesOrderCollection.Add(new BOSalesOrder(daoSalesOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrder
		///This method persists a BOSalesOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual void AddSalesOrder(BOSalesOrder boSalesOrder)
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("addSalesOrder");
			try
			{
				daoSalesOrder.SalesId = boSalesOrder.SalesId;
				daoSalesOrder.SalesCode = boSalesOrder.SalesCode;
				daoSalesOrder.SalesOrderTypeId = boSalesOrder.SalesOrderTypeId;
				daoSalesOrder.BranchId = boSalesOrder.BranchId;
				daoSalesOrder.AgentId = boSalesOrder.AgentId;
				daoSalesOrder.RepresentativeId = boSalesOrder.RepresentativeId;
				daoSalesOrder.StoreId = boSalesOrder.StoreId;
				daoSalesOrder.PriorityTypeId = boSalesOrder.PriorityTypeId;
				daoSalesOrder.PaymentTermId = boSalesOrder.PaymentTermId;
				daoSalesOrder.SalesDate = boSalesOrder.SalesDate;
				daoSalesOrder.SalesTime = boSalesOrder.SalesTime;
				daoSalesOrder.SalesOrderStatusId = boSalesOrder.SalesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = boSalesOrder.SalesOrderSourceId;
				daoSalesOrder.SalesChannelId = boSalesOrder.SalesChannelId;
				daoSalesOrder.SalesPoolId = boSalesOrder.SalesPoolId;
				daoSalesOrder.IsOpened = boSalesOrder.IsOpened;
				daoSalesOrder.OpenValue = boSalesOrder.OpenValue;
				daoSalesOrder.Latitude = boSalesOrder.Latitude;
				daoSalesOrder.Longitude = boSalesOrder.Longitude;
				daoSalesOrder.ItemTotal = boSalesOrder.ItemTotal;
				daoSalesOrder.ItemDiscountTotal = boSalesOrder.ItemDiscountTotal;
				daoSalesOrder.TaxTotal = boSalesOrder.TaxTotal;
				daoSalesOrder.CashDiscountTotal = boSalesOrder.CashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = boSalesOrder.CustomDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = boSalesOrder.CustomDiscountValue;
				daoSalesOrder.CustomDiscountTotal = boSalesOrder.CustomDiscountTotal;
				daoSalesOrder.DeliveryTotal = boSalesOrder.DeliveryTotal;
				daoSalesOrder.NetTotal = boSalesOrder.NetTotal;
				daoSalesOrder.Notes = boSalesOrder.Notes;
				daoSalesOrder.InvoiceRetry = boSalesOrder.InvoiceRetry;
				daoSalesOrder.HasError = boSalesOrder.HasError;
				daoSalesOrder.IsInvoiced = boSalesOrder.IsInvoiced;
				daoSalesOrder.InvoiceCode = boSalesOrder.InvoiceCode;
				daoSalesOrder.InvoiceDate = boSalesOrder.InvoiceDate;
				daoSalesOrder.CreateDate = boSalesOrder.CreateDate;
				daoSalesOrder.RecId = boSalesOrder.RecId;
				daoSalesOrder.CBy = boSalesOrder.CBy;
				daoSalesOrder.CDate = boSalesOrder.CDate;
				daoSalesOrder.EBy = boSalesOrder.EBy;
				daoSalesOrder.EDate = boSalesOrder.EDate;
				daoSalesOrder.SalesPerenId = boSalesOrder.SalesPerenId;
				daoSalesOrder.Inprogress = boSalesOrder.Inprogress;
				daoSalesOrder.IsBackoffice = boSalesOrder.IsBackoffice;
				daoSalesOrder.IsDeleted = boSalesOrder.IsDeleted;
				daoSalesOrder.ClientId = _clientId.Value;
				daoSalesOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrder = new BOSalesOrder(daoSalesOrder);
				if(_boSalesOrderCollection != null)
					_boSalesOrderCollection.Add(boSalesOrder);
			}
			catch
			{
				RollbackTransaction("addSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrder
		///This method deletes all BOSalesOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrder");
			try
			{
				DAOSalesOrder.DeleteAllByClientId(ConnectionProvider, _clientId.Value);
				CommitTransaction();
				if(_boSalesOrderCollection != null)
				{
					_boSalesOrderCollection.Clear();
					_boSalesOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrder");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientAccountId
		{
			get
			{
				 return _clientAccountId;
			}
			set
			{
				_clientAccountId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientTypeId
		{
			get
			{
				 return _clientTypeId;
			}
			set
			{
				_clientTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientCode
		{
			get
			{
				 return _clientCode;
			}
			set
			{
				_clientCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientNameAr
		{
			get
			{
				 return _clientNameAr;
			}
			set
			{
				_clientNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClientNameEn
		{
			get
			{
				 return _clientNameEn;
			}
			set
			{
				_clientNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BusinessUnitId
		{
			get
			{
				 return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RegionId
		{
			get
			{
				 return _regionId;
			}
			set
			{
				_regionId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? GovernerateId
		{
			get
			{
				 return _governerateId;
			}
			set
			{
				_governerateId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CityId
		{
			get
			{
				 return _cityId;
			}
			set
			{
				_cityId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? LocationLevelId
		{
			get
			{
				 return _locationLevelId;
			}
			set
			{
				_locationLevelId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientGroupId
		{
			get
			{
				 return _clientGroupId;
			}
			set
			{
				_clientGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientGroupSubId
		{
			get
			{
				 return _clientGroupSubId;
			}
			set
			{
				_clientGroupSubId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientClassificationId
		{
			get
			{
				 return _clientClassificationId;
			}
			set
			{
				_clientClassificationId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CreditLimit
		{
			get
			{
				 return _creditLimit;
			}
			set
			{
				_creditLimit = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? CreditBalance
		{
			get
			{
				 return _creditBalance;
			}
			set
			{
				_creditBalance = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PaymentTermId
		{
			get
			{
				 return _paymentTermId;
			}
			set
			{
				_paymentTermId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsChain
		{
			get
			{
				 return _isChain;
			}
			set
			{
				_isChain = value;
				_isDirty = true;
			}
		}
		
		public virtual string Building
		{
			get
			{
				 return _building;
			}
			set
			{
				_building = value;
				_isDirty = true;
			}
		}
		
		public virtual string Floor
		{
			get
			{
				 return _floor;
			}
			set
			{
				_floor = value;
				_isDirty = true;
			}
		}
		
		public virtual string Property
		{
			get
			{
				 return _property;
			}
			set
			{
				_property = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string Landmark
		{
			get
			{
				 return _landmark;
			}
			set
			{
				_landmark = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string Mobile
		{
			get
			{
				 return _mobile;
			}
			set
			{
				_mobile = value;
				_isDirty = true;
			}
		}
		
		public virtual string WhatsApp
		{
			get
			{
				 return _whatsApp;
			}
			set
			{
				_whatsApp = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsTaxable
		{
			get
			{
				 return _isTaxable;
			}
			set
			{
				_isTaxable = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsCashDiscount
		{
			get
			{
				 return _isCashDiscount;
			}
			set
			{
				_isCashDiscount = value;
				_isDirty = true;
			}
		}
		
		public virtual string ResponsibleNameAr
		{
			get
			{
				 return _responsibleNameAr;
			}
			set
			{
				_responsibleNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ResponsibleNameEn
		{
			get
			{
				 return _responsibleNameEn;
			}
			set
			{
				_responsibleNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string TaxCode
		{
			get
			{
				 return _taxCode;
			}
			set
			{
				_taxCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string CommercialCode
		{
			get
			{
				 return _commercialCode;
			}
			set
			{
				_commercialCode = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsNew
		{
			get
			{
				 return _isNew;
			}
			set
			{
				_isNew = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? NeedValidation
		{
			get
			{
				 return _needValidation;
			}
			set
			{
				_needValidation = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CashGroupId
		{
			get
			{
				 return _cashGroupId;
			}
			set
			{
				_cashGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? InRoute
		{
			get
			{
				 return _inRoute;
			}
			set
			{
				_inRoute = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesChannelId
		{
			get
			{
				 return _salesChannelId;
			}
			set
			{
				_salesChannelId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SalesPoolId
		{
			get
			{
				 return _salesPoolId;
			}
			set
			{
				_salesPoolId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Points
		{
			get
			{
				 return _points;
			}
			set
			{
				_points = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Wallet
		{
			get
			{
				 return _wallet;
			}
			set
			{
				_wallet = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DealId
		{
			get
			{
				 return _dealId;
			}
			set
			{
				_dealId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
