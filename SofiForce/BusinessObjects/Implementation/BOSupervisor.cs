/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSupervisor.
	///It maintains a collection of BORepresentative,BOSupervisorComission objects.
	///</Summary>
	public partial class BOSupervisor : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _supervisorId;
		protected Int32? _supervisorTypeId;
		protected Int32? _businessUnitId;
		protected string _companyCode;
		protected string _supervisorCode;
		protected string _supervisorNameEn;
		protected string _supervisorNameAr;
		protected string _phone;
		protected string _phoneAlternative;
		protected DateTime? _joinDate;
		protected Int32? _userId;
		protected Int32? _branchId;
		protected bool? _isActive;
		protected string _color;
		protected Int32? _displayOrder;
		protected string _icon;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _notes;
		protected bool? _isTerminated;
		protected DateTime? _terminationDate;
		protected Int32? _terminationReasonId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BORepresentative> _boRepresentativeCollection;
		List<BOSupervisorComission> _boSupervisorComissionCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSupervisor()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 supervisorId
		///</parameters>
		public BOSupervisor(Int32 supervisorId)
		{
			try
			{
				DAOSupervisor daoSupervisor = DAOSupervisor.SelectOne(supervisorId);
				_supervisorId = daoSupervisor.SupervisorId;
				_supervisorTypeId = daoSupervisor.SupervisorTypeId;
				_businessUnitId = daoSupervisor.BusinessUnitId;
				_companyCode = daoSupervisor.CompanyCode;
				_supervisorCode = daoSupervisor.SupervisorCode;
				_supervisorNameEn = daoSupervisor.SupervisorNameEn;
				_supervisorNameAr = daoSupervisor.SupervisorNameAr;
				_phone = daoSupervisor.Phone;
				_phoneAlternative = daoSupervisor.PhoneAlternative;
				_joinDate = daoSupervisor.JoinDate;
				_userId = daoSupervisor.UserId;
				_branchId = daoSupervisor.BranchId;
				_isActive = daoSupervisor.IsActive;
				_color = daoSupervisor.Color;
				_displayOrder = daoSupervisor.DisplayOrder;
				_icon = daoSupervisor.Icon;
				_canEdit = daoSupervisor.CanEdit;
				_canDelete = daoSupervisor.CanDelete;
				_notes = daoSupervisor.Notes;
				_isTerminated = daoSupervisor.IsTerminated;
				_terminationDate = daoSupervisor.TerminationDate;
				_terminationReasonId = daoSupervisor.TerminationReasonId;
				_cBy = daoSupervisor.CBy;
				_cDate = daoSupervisor.CDate;
				_eBy = daoSupervisor.EBy;
				_eDate = daoSupervisor.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSupervisor
		///</parameters>
		protected internal BOSupervisor(DAOSupervisor daoSupervisor)
		{
			try
			{
				_supervisorId = daoSupervisor.SupervisorId;
				_supervisorTypeId = daoSupervisor.SupervisorTypeId;
				_businessUnitId = daoSupervisor.BusinessUnitId;
				_companyCode = daoSupervisor.CompanyCode;
				_supervisorCode = daoSupervisor.SupervisorCode;
				_supervisorNameEn = daoSupervisor.SupervisorNameEn;
				_supervisorNameAr = daoSupervisor.SupervisorNameAr;
				_phone = daoSupervisor.Phone;
				_phoneAlternative = daoSupervisor.PhoneAlternative;
				_joinDate = daoSupervisor.JoinDate;
				_userId = daoSupervisor.UserId;
				_branchId = daoSupervisor.BranchId;
				_isActive = daoSupervisor.IsActive;
				_color = daoSupervisor.Color;
				_displayOrder = daoSupervisor.DisplayOrder;
				_icon = daoSupervisor.Icon;
				_canEdit = daoSupervisor.CanEdit;
				_canDelete = daoSupervisor.CanDelete;
				_notes = daoSupervisor.Notes;
				_isTerminated = daoSupervisor.IsTerminated;
				_terminationDate = daoSupervisor.TerminationDate;
				_terminationReasonId = daoSupervisor.TerminationReasonId;
				_cBy = daoSupervisor.CBy;
				_cDate = daoSupervisor.CDate;
				_eBy = daoSupervisor.EBy;
				_eDate = daoSupervisor.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Supervisor record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSupervisor daoSupervisor = new DAOSupervisor();
			RegisterDataObject(daoSupervisor);
			BeginTransaction("savenewBOSupervisor");
			try
			{
				daoSupervisor.SupervisorTypeId = _supervisorTypeId;
				daoSupervisor.BusinessUnitId = _businessUnitId;
				daoSupervisor.CompanyCode = _companyCode;
				daoSupervisor.SupervisorCode = _supervisorCode;
				daoSupervisor.SupervisorNameEn = _supervisorNameEn;
				daoSupervisor.SupervisorNameAr = _supervisorNameAr;
				daoSupervisor.Phone = _phone;
				daoSupervisor.PhoneAlternative = _phoneAlternative;
				daoSupervisor.JoinDate = _joinDate;
				daoSupervisor.UserId = _userId;
				daoSupervisor.BranchId = _branchId;
				daoSupervisor.IsActive = _isActive;
				daoSupervisor.Color = _color;
				daoSupervisor.DisplayOrder = _displayOrder;
				daoSupervisor.Icon = _icon;
				daoSupervisor.CanEdit = _canEdit;
				daoSupervisor.CanDelete = _canDelete;
				daoSupervisor.Notes = _notes;
				daoSupervisor.IsTerminated = _isTerminated;
				daoSupervisor.TerminationDate = _terminationDate;
				daoSupervisor.TerminationReasonId = _terminationReasonId;
				daoSupervisor.CBy = _cBy;
				daoSupervisor.CDate = _cDate;
				daoSupervisor.EBy = _eBy;
				daoSupervisor.EDate = _eDate;
				daoSupervisor.Insert();
				CommitTransaction();
				
				_supervisorId = daoSupervisor.SupervisorId;
				_supervisorTypeId = daoSupervisor.SupervisorTypeId;
				_businessUnitId = daoSupervisor.BusinessUnitId;
				_companyCode = daoSupervisor.CompanyCode;
				_supervisorCode = daoSupervisor.SupervisorCode;
				_supervisorNameEn = daoSupervisor.SupervisorNameEn;
				_supervisorNameAr = daoSupervisor.SupervisorNameAr;
				_phone = daoSupervisor.Phone;
				_phoneAlternative = daoSupervisor.PhoneAlternative;
				_joinDate = daoSupervisor.JoinDate;
				_userId = daoSupervisor.UserId;
				_branchId = daoSupervisor.BranchId;
				_isActive = daoSupervisor.IsActive;
				_color = daoSupervisor.Color;
				_displayOrder = daoSupervisor.DisplayOrder;
				_icon = daoSupervisor.Icon;
				_canEdit = daoSupervisor.CanEdit;
				_canDelete = daoSupervisor.CanDelete;
				_notes = daoSupervisor.Notes;
				_isTerminated = daoSupervisor.IsTerminated;
				_terminationDate = daoSupervisor.TerminationDate;
				_terminationReasonId = daoSupervisor.TerminationReasonId;
				_cBy = daoSupervisor.CBy;
				_cDate = daoSupervisor.CDate;
				_eBy = daoSupervisor.EBy;
				_eDate = daoSupervisor.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSupervisor");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Supervisor record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupervisor
		///</parameters>
		public virtual void Update()
		{
			DAOSupervisor daoSupervisor = new DAOSupervisor();
			RegisterDataObject(daoSupervisor);
			BeginTransaction("updateBOSupervisor");
			try
			{
				daoSupervisor.SupervisorId = _supervisorId;
				daoSupervisor.SupervisorTypeId = _supervisorTypeId;
				daoSupervisor.BusinessUnitId = _businessUnitId;
				daoSupervisor.CompanyCode = _companyCode;
				daoSupervisor.SupervisorCode = _supervisorCode;
				daoSupervisor.SupervisorNameEn = _supervisorNameEn;
				daoSupervisor.SupervisorNameAr = _supervisorNameAr;
				daoSupervisor.Phone = _phone;
				daoSupervisor.PhoneAlternative = _phoneAlternative;
				daoSupervisor.JoinDate = _joinDate;
				daoSupervisor.UserId = _userId;
				daoSupervisor.BranchId = _branchId;
				daoSupervisor.IsActive = _isActive;
				daoSupervisor.Color = _color;
				daoSupervisor.DisplayOrder = _displayOrder;
				daoSupervisor.Icon = _icon;
				daoSupervisor.CanEdit = _canEdit;
				daoSupervisor.CanDelete = _canDelete;
				daoSupervisor.Notes = _notes;
				daoSupervisor.IsTerminated = _isTerminated;
				daoSupervisor.TerminationDate = _terminationDate;
				daoSupervisor.TerminationReasonId = _terminationReasonId;
				daoSupervisor.CBy = _cBy;
				daoSupervisor.CDate = _cDate;
				daoSupervisor.EBy = _eBy;
				daoSupervisor.EDate = _eDate;
				daoSupervisor.Update();
				CommitTransaction();
				
				_supervisorId = daoSupervisor.SupervisorId;
				_supervisorTypeId = daoSupervisor.SupervisorTypeId;
				_businessUnitId = daoSupervisor.BusinessUnitId;
				_companyCode = daoSupervisor.CompanyCode;
				_supervisorCode = daoSupervisor.SupervisorCode;
				_supervisorNameEn = daoSupervisor.SupervisorNameEn;
				_supervisorNameAr = daoSupervisor.SupervisorNameAr;
				_phone = daoSupervisor.Phone;
				_phoneAlternative = daoSupervisor.PhoneAlternative;
				_joinDate = daoSupervisor.JoinDate;
				_userId = daoSupervisor.UserId;
				_branchId = daoSupervisor.BranchId;
				_isActive = daoSupervisor.IsActive;
				_color = daoSupervisor.Color;
				_displayOrder = daoSupervisor.DisplayOrder;
				_icon = daoSupervisor.Icon;
				_canEdit = daoSupervisor.CanEdit;
				_canDelete = daoSupervisor.CanDelete;
				_notes = daoSupervisor.Notes;
				_isTerminated = daoSupervisor.IsTerminated;
				_terminationDate = daoSupervisor.TerminationDate;
				_terminationReasonId = daoSupervisor.TerminationReasonId;
				_cBy = daoSupervisor.CBy;
				_cDate = daoSupervisor.CDate;
				_eBy = daoSupervisor.EBy;
				_eDate = daoSupervisor.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSupervisor");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Supervisor record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSupervisor daoSupervisor = new DAOSupervisor();
			RegisterDataObject(daoSupervisor);
			BeginTransaction("deleteBOSupervisor");
			try
			{
				daoSupervisor.SupervisorId = _supervisorId;
				daoSupervisor.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSupervisor");
				throw;
			}
		}
		
		///<Summary>
		///SupervisorCollection
		///This method returns the collection of BOSupervisor objects
		///</Summary>
		///<returns>
		///List[BOSupervisor]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSupervisor> SupervisorCollection()
		{
			try
			{
				IList<BOSupervisor> boSupervisorCollection = new List<BOSupervisor>();
				IList<DAOSupervisor> daoSupervisorCollection = DAOSupervisor.SelectAll();
			
				foreach(DAOSupervisor daoSupervisor in daoSupervisorCollection)
					boSupervisorCollection.Add(new BOSupervisor(daoSupervisor));
			
				return boSupervisorCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SupervisorCollectionCount
		///This method returns the collection count of BOSupervisor objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SupervisorCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSupervisor.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeCollection
		///This method returns its collection of BORepresentative objects
		///</Summary>
		///<returns>
		///IList[BORepresentative]
		///</returns>
		///<parameters>
		///BOSupervisor
		///</parameters>
		public virtual IList<BORepresentative> RepresentativeCollection()
		{
			try
			{
				if(_boRepresentativeCollection == null)
					LoadRepresentativeCollection();
				
				return _boRepresentativeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SupervisorComissionCollection
		///This method returns its collection of BOSupervisorComission objects
		///</Summary>
		///<returns>
		///IList[BOSupervisorComission]
		///</returns>
		///<parameters>
		///BOSupervisor
		///</parameters>
		public virtual IList<BOSupervisorComission> SupervisorComissionCollection()
		{
			try
			{
				if(_boSupervisorComissionCollection == null)
					LoadSupervisorComissionCollection();
				
				return _boSupervisorComissionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSupervisor>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSupervisor.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SupervisorCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSupervisor objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSupervisorCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSupervisor> daoSupervisorCollection = DAOSupervisor.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSupervisor resdaoSupervisor in daoSupervisorCollection)
					boSupervisorCollection.Add((T)(object)new BOSupervisor(resdaoSupervisor));
			
				return boSupervisorCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SupervisorCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSupervisor objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSupervisor.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeCollection
		///This method loads the internal collection of BORepresentative objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeCollection()
		{
			try
			{
				_boRepresentativeCollection = new List<BORepresentative>();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAllBySupervisorId(_supervisorId.Value);
				
				foreach(DAORepresentative daoRepresentative in daoRepresentativeCollection)
					_boRepresentativeCollection.Add(new BORepresentative(daoRepresentative));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentative
		///This method persists a BORepresentative object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual void AddRepresentative(BORepresentative boRepresentative)
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("addRepresentative");
			try
			{
				daoRepresentative.RepresentativeId = boRepresentative.RepresentativeId;
				daoRepresentative.BranchId = boRepresentative.BranchId;
				daoRepresentative.UserId = boRepresentative.UserId;
				daoRepresentative.KindId = boRepresentative.KindId;
				daoRepresentative.BusinessUnitId = boRepresentative.BusinessUnitId;
				daoRepresentative.CompanyCode = boRepresentative.CompanyCode;
				daoRepresentative.RepresentativeCode = boRepresentative.RepresentativeCode;
				daoRepresentative.RepresentativeNameAr = boRepresentative.RepresentativeNameAr;
				daoRepresentative.RepresentativeNameEn = boRepresentative.RepresentativeNameEn;
				daoRepresentative.Phone = boRepresentative.Phone;
				daoRepresentative.PhoneAlternative = boRepresentative.PhoneAlternative;
				daoRepresentative.IsActive = boRepresentative.IsActive;
				daoRepresentative.DisplayOrder = boRepresentative.DisplayOrder;
				daoRepresentative.CanEdit = boRepresentative.CanEdit;
				daoRepresentative.CanDelete = boRepresentative.CanDelete;
				daoRepresentative.JoinDate = boRepresentative.JoinDate;
				daoRepresentative.Notes = boRepresentative.Notes;
				daoRepresentative.Icon = boRepresentative.Icon;
				daoRepresentative.Color = boRepresentative.Color;
				daoRepresentative.IsTerminated = boRepresentative.IsTerminated;
				daoRepresentative.TerminationDate = boRepresentative.TerminationDate;
				daoRepresentative.TerminationReasonId = boRepresentative.TerminationReasonId;
				daoRepresentative.CBy = boRepresentative.CBy;
				daoRepresentative.CDate = boRepresentative.CDate;
				daoRepresentative.EBy = boRepresentative.EBy;
				daoRepresentative.EDate = boRepresentative.EDate;
				daoRepresentative.SupervisorId = _supervisorId.Value;
				daoRepresentative.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentative = new BORepresentative(daoRepresentative);
				if(_boRepresentativeCollection != null)
					_boRepresentativeCollection.Add(boRepresentative);
			}
			catch
			{
				RollbackTransaction("addRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentative
		///This method deletes all BORepresentative objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentative()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentative");
			try
			{
				DAORepresentative.DeleteAllBySupervisorId(ConnectionProvider, _supervisorId.Value);
				CommitTransaction();
				if(_boRepresentativeCollection != null)
				{
					_boRepresentativeCollection.Clear();
					_boRepresentativeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///LoadSupervisorComissionCollection
		///This method loads the internal collection of BOSupervisorComission objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSupervisorComissionCollection()
		{
			try
			{
				_boSupervisorComissionCollection = new List<BOSupervisorComission>();
				IList<DAOSupervisorComission> daoSupervisorComissionCollection = DAOSupervisorComission.SelectAllBySupervisorId(_supervisorId.Value);
				
				foreach(DAOSupervisorComission daoSupervisorComission in daoSupervisorComissionCollection)
					_boSupervisorComissionCollection.Add(new BOSupervisorComission(daoSupervisorComission));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSupervisorComission
		///This method persists a BOSupervisorComission object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupervisorComission
		///</parameters>
		public virtual void AddSupervisorComission(BOSupervisorComission boSupervisorComission)
		{
			DAOSupervisorComission daoSupervisorComission = new DAOSupervisorComission();
			RegisterDataObject(daoSupervisorComission);
			BeginTransaction("addSupervisorComission");
			try
			{
				daoSupervisorComission.ComissionId = boSupervisorComission.ComissionId;
				daoSupervisorComission.ComissionDate = boSupervisorComission.ComissionDate;
				daoSupervisorComission.ComissionValue = boSupervisorComission.ComissionValue;
				daoSupervisorComission.IsApproved = boSupervisorComission.IsApproved;
				daoSupervisorComission.ComissionTypeId = boSupervisorComission.ComissionTypeId;
				daoSupervisorComission.Notes = boSupervisorComission.Notes;
				daoSupervisorComission.CBy = boSupervisorComission.CBy;
				daoSupervisorComission.CDate = boSupervisorComission.CDate;
				daoSupervisorComission.EBy = boSupervisorComission.EBy;
				daoSupervisorComission.EDate = boSupervisorComission.EDate;
				daoSupervisorComission.SupervisorId = _supervisorId.Value;
				daoSupervisorComission.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSupervisorComission = new BOSupervisorComission(daoSupervisorComission);
				if(_boSupervisorComissionCollection != null)
					_boSupervisorComissionCollection.Add(boSupervisorComission);
			}
			catch
			{
				RollbackTransaction("addSupervisorComission");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSupervisorComission
		///This method deletes all BOSupervisorComission objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSupervisorComission()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSupervisorComission");
			try
			{
				DAOSupervisorComission.DeleteAllBySupervisorId(ConnectionProvider, _supervisorId.Value);
				CommitTransaction();
				if(_boSupervisorComissionCollection != null)
				{
					_boSupervisorComissionCollection.Clear();
					_boSupervisorComissionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSupervisorComission");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SupervisorId
		{
			get
			{
				 return _supervisorId;
			}
			set
			{
				_supervisorId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SupervisorTypeId
		{
			get
			{
				 return _supervisorTypeId;
			}
			set
			{
				_supervisorTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BusinessUnitId
		{
			get
			{
				 return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
				_isDirty = true;
			}
		}
		
		public virtual string CompanyCode
		{
			get
			{
				 return _companyCode;
			}
			set
			{
				_companyCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string SupervisorCode
		{
			get
			{
				 return _supervisorCode;
			}
			set
			{
				_supervisorCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string SupervisorNameEn
		{
			get
			{
				 return _supervisorNameEn;
			}
			set
			{
				_supervisorNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string SupervisorNameAr
		{
			get
			{
				 return _supervisorNameAr;
			}
			set
			{
				_supervisorNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string PhoneAlternative
		{
			get
			{
				 return _phoneAlternative;
			}
			set
			{
				_phoneAlternative = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? JoinDate
		{
			get
			{
				 return _joinDate;
			}
			set
			{
				_joinDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsTerminated
		{
			get
			{
				 return _isTerminated;
			}
			set
			{
				_isTerminated = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TerminationDate
		{
			get
			{
				 return _terminationDate;
			}
			set
			{
				_terminationDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TerminationReasonId
		{
			get
			{
				 return _terminationReasonId;
			}
			set
			{
				_terminationReasonId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
