/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPromotionMixGroup.
	///</Summary>
	public partial class BOPromotionMixGroup : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _groupId;
		protected Int32? _groupNo;
		protected Int32? _promotionId;
		protected decimal? _slice;
		protected bool? _isActive;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPromotionMixGroup()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 groupId
		///</parameters>
		public BOPromotionMixGroup(Int32 groupId)
		{
			try
			{
				DAOPromotionMixGroup daoPromotionMixGroup = DAOPromotionMixGroup.SelectOne(groupId);
				_groupId = daoPromotionMixGroup.GroupId;
				_groupNo = daoPromotionMixGroup.GroupNo;
				_promotionId = daoPromotionMixGroup.PromotionId;
				_slice = daoPromotionMixGroup.Slice;
				_isActive = daoPromotionMixGroup.IsActive;
				_cBy = daoPromotionMixGroup.CBy;
				_cDate = daoPromotionMixGroup.CDate;
				_eBy = daoPromotionMixGroup.EBy;
				_eDate = daoPromotionMixGroup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPromotionMixGroup
		///</parameters>
		protected internal BOPromotionMixGroup(DAOPromotionMixGroup daoPromotionMixGroup)
		{
			try
			{
				_groupId = daoPromotionMixGroup.GroupId;
				_groupNo = daoPromotionMixGroup.GroupNo;
				_promotionId = daoPromotionMixGroup.PromotionId;
				_slice = daoPromotionMixGroup.Slice;
				_isActive = daoPromotionMixGroup.IsActive;
				_cBy = daoPromotionMixGroup.CBy;
				_cDate = daoPromotionMixGroup.CDate;
				_eBy = daoPromotionMixGroup.EBy;
				_eDate = daoPromotionMixGroup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PromotionMixGroup record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOPromotionMixGroup daoPromotionMixGroup = new DAOPromotionMixGroup();
			RegisterDataObject(daoPromotionMixGroup);
			BeginTransaction("savenewBOPromotionMixGroup");
			try
			{
				daoPromotionMixGroup.GroupNo = _groupNo;
				daoPromotionMixGroup.PromotionId = _promotionId;
				daoPromotionMixGroup.Slice = _slice;
				daoPromotionMixGroup.IsActive = _isActive;
				daoPromotionMixGroup.CBy = _cBy;
				daoPromotionMixGroup.CDate = _cDate;
				daoPromotionMixGroup.EBy = _eBy;
				daoPromotionMixGroup.EDate = _eDate;
				daoPromotionMixGroup.Insert();
				CommitTransaction();
				
				_groupId = daoPromotionMixGroup.GroupId;
				_groupNo = daoPromotionMixGroup.GroupNo;
				_promotionId = daoPromotionMixGroup.PromotionId;
				_slice = daoPromotionMixGroup.Slice;
				_isActive = daoPromotionMixGroup.IsActive;
				_cBy = daoPromotionMixGroup.CBy;
				_cDate = daoPromotionMixGroup.CDate;
				_eBy = daoPromotionMixGroup.EBy;
				_eDate = daoPromotionMixGroup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOPromotionMixGroup");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one PromotionMixGroup record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionMixGroup
		///</parameters>
		public virtual void Update()
		{
			DAOPromotionMixGroup daoPromotionMixGroup = new DAOPromotionMixGroup();
			RegisterDataObject(daoPromotionMixGroup);
			BeginTransaction("updateBOPromotionMixGroup");
			try
			{
				daoPromotionMixGroup.GroupId = _groupId;
				daoPromotionMixGroup.GroupNo = _groupNo;
				daoPromotionMixGroup.PromotionId = _promotionId;
				daoPromotionMixGroup.Slice = _slice;
				daoPromotionMixGroup.IsActive = _isActive;
				daoPromotionMixGroup.CBy = _cBy;
				daoPromotionMixGroup.CDate = _cDate;
				daoPromotionMixGroup.EBy = _eBy;
				daoPromotionMixGroup.EDate = _eDate;
				daoPromotionMixGroup.Update();
				CommitTransaction();
				
				_groupId = daoPromotionMixGroup.GroupId;
				_groupNo = daoPromotionMixGroup.GroupNo;
				_promotionId = daoPromotionMixGroup.PromotionId;
				_slice = daoPromotionMixGroup.Slice;
				_isActive = daoPromotionMixGroup.IsActive;
				_cBy = daoPromotionMixGroup.CBy;
				_cDate = daoPromotionMixGroup.CDate;
				_eBy = daoPromotionMixGroup.EBy;
				_eDate = daoPromotionMixGroup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOPromotionMixGroup");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PromotionMixGroup record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOPromotionMixGroup daoPromotionMixGroup = new DAOPromotionMixGroup();
			RegisterDataObject(daoPromotionMixGroup);
			BeginTransaction("deleteBOPromotionMixGroup");
			try
			{
				daoPromotionMixGroup.GroupId = _groupId;
				daoPromotionMixGroup.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOPromotionMixGroup");
				throw;
			}
		}
		
		///<Summary>
		///PromotionMixGroupCollection
		///This method returns the collection of BOPromotionMixGroup objects
		///</Summary>
		///<returns>
		///List[BOPromotionMixGroup]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOPromotionMixGroup> PromotionMixGroupCollection()
		{
			try
			{
				IList<BOPromotionMixGroup> boPromotionMixGroupCollection = new List<BOPromotionMixGroup>();
				IList<DAOPromotionMixGroup> daoPromotionMixGroupCollection = DAOPromotionMixGroup.SelectAll();
			
				foreach(DAOPromotionMixGroup daoPromotionMixGroup in daoPromotionMixGroupCollection)
					boPromotionMixGroupCollection.Add(new BOPromotionMixGroup(daoPromotionMixGroup));
			
				return boPromotionMixGroupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionMixGroupCollectionCount
		///This method returns the collection count of BOPromotionMixGroup objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PromotionMixGroupCollectionCount()
		{
			try
			{
				Int32 objCount = DAOPromotionMixGroup.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOPromotionMixGroup>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOPromotionMixGroup.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionMixGroupCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOPromotionMixGroup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPromotionMixGroupCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOPromotionMixGroup> daoPromotionMixGroupCollection = DAOPromotionMixGroup.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOPromotionMixGroup resdaoPromotionMixGroup in daoPromotionMixGroupCollection)
					boPromotionMixGroupCollection.Add((T)(object)new BOPromotionMixGroup(resdaoPromotionMixGroup));
			
				return boPromotionMixGroupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionMixGroupCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOPromotionMixGroup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOPromotionMixGroup.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? GroupId
		{
			get
			{
				 return _groupId;
			}
			set
			{
				_groupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? GroupNo
		{
			get
			{
				 return _groupNo;
			}
			set
			{
				_groupNo = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PromotionId
		{
			get
			{
				 return _promotionId;
			}
			set
			{
				_promotionId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Slice
		{
			get
			{
				 return _slice;
			}
			set
			{
				_slice = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
