/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPromotionOutcome.
	///</Summary>
	public partial class BOPromotionOutcome : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _outcomeId;
		protected Int32? _promotionId;
		protected bool? _isActive;
		protected Int32? _count;
		protected Int32? _displayOrder;
		protected string _itemCode;
		protected decimal? _slice;
		protected decimal? _value;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPromotionOutcome()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 outcomeId
		///</parameters>
		public BOPromotionOutcome(Int32 outcomeId)
		{
			try
			{
				DAOPromotionOutcome daoPromotionOutcome = DAOPromotionOutcome.SelectOne(outcomeId);
				_outcomeId = daoPromotionOutcome.OutcomeId;
				_promotionId = daoPromotionOutcome.PromotionId;
				_isActive = daoPromotionOutcome.IsActive;
				_count = daoPromotionOutcome.Count;
				_displayOrder = daoPromotionOutcome.DisplayOrder;
				_itemCode = daoPromotionOutcome.ItemCode;
				_slice = daoPromotionOutcome.Slice;
				_value = daoPromotionOutcome.Value;
				_cBy = daoPromotionOutcome.CBy;
				_cDate = daoPromotionOutcome.CDate;
				_eBy = daoPromotionOutcome.EBy;
				_eDate = daoPromotionOutcome.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPromotionOutcome
		///</parameters>
		protected internal BOPromotionOutcome(DAOPromotionOutcome daoPromotionOutcome)
		{
			try
			{
				_outcomeId = daoPromotionOutcome.OutcomeId;
				_promotionId = daoPromotionOutcome.PromotionId;
				_isActive = daoPromotionOutcome.IsActive;
				_count = daoPromotionOutcome.Count;
				_displayOrder = daoPromotionOutcome.DisplayOrder;
				_itemCode = daoPromotionOutcome.ItemCode;
				_slice = daoPromotionOutcome.Slice;
				_value = daoPromotionOutcome.Value;
				_cBy = daoPromotionOutcome.CBy;
				_cDate = daoPromotionOutcome.CDate;
				_eBy = daoPromotionOutcome.EBy;
				_eDate = daoPromotionOutcome.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PromotionOutcome record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOPromotionOutcome daoPromotionOutcome = new DAOPromotionOutcome();
			RegisterDataObject(daoPromotionOutcome);
			BeginTransaction("savenewBOPromotionOutcome");
			try
			{
				daoPromotionOutcome.PromotionId = _promotionId;
				daoPromotionOutcome.IsActive = _isActive;
				daoPromotionOutcome.Count = _count;
				daoPromotionOutcome.DisplayOrder = _displayOrder;
				daoPromotionOutcome.ItemCode = _itemCode;
				daoPromotionOutcome.Slice = _slice;
				daoPromotionOutcome.Value = _value;
				daoPromotionOutcome.CBy = _cBy;
				daoPromotionOutcome.CDate = _cDate;
				daoPromotionOutcome.EBy = _eBy;
				daoPromotionOutcome.EDate = _eDate;
				daoPromotionOutcome.Insert();
				CommitTransaction();
				
				_outcomeId = daoPromotionOutcome.OutcomeId;
				_promotionId = daoPromotionOutcome.PromotionId;
				_isActive = daoPromotionOutcome.IsActive;
				_count = daoPromotionOutcome.Count;
				_displayOrder = daoPromotionOutcome.DisplayOrder;
				_itemCode = daoPromotionOutcome.ItemCode;
				_slice = daoPromotionOutcome.Slice;
				_value = daoPromotionOutcome.Value;
				_cBy = daoPromotionOutcome.CBy;
				_cDate = daoPromotionOutcome.CDate;
				_eBy = daoPromotionOutcome.EBy;
				_eDate = daoPromotionOutcome.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOPromotionOutcome");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one PromotionOutcome record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionOutcome
		///</parameters>
		public virtual void Update()
		{
			DAOPromotionOutcome daoPromotionOutcome = new DAOPromotionOutcome();
			RegisterDataObject(daoPromotionOutcome);
			BeginTransaction("updateBOPromotionOutcome");
			try
			{
				daoPromotionOutcome.OutcomeId = _outcomeId;
				daoPromotionOutcome.PromotionId = _promotionId;
				daoPromotionOutcome.IsActive = _isActive;
				daoPromotionOutcome.Count = _count;
				daoPromotionOutcome.DisplayOrder = _displayOrder;
				daoPromotionOutcome.ItemCode = _itemCode;
				daoPromotionOutcome.Slice = _slice;
				daoPromotionOutcome.Value = _value;
				daoPromotionOutcome.CBy = _cBy;
				daoPromotionOutcome.CDate = _cDate;
				daoPromotionOutcome.EBy = _eBy;
				daoPromotionOutcome.EDate = _eDate;
				daoPromotionOutcome.Update();
				CommitTransaction();
				
				_outcomeId = daoPromotionOutcome.OutcomeId;
				_promotionId = daoPromotionOutcome.PromotionId;
				_isActive = daoPromotionOutcome.IsActive;
				_count = daoPromotionOutcome.Count;
				_displayOrder = daoPromotionOutcome.DisplayOrder;
				_itemCode = daoPromotionOutcome.ItemCode;
				_slice = daoPromotionOutcome.Slice;
				_value = daoPromotionOutcome.Value;
				_cBy = daoPromotionOutcome.CBy;
				_cDate = daoPromotionOutcome.CDate;
				_eBy = daoPromotionOutcome.EBy;
				_eDate = daoPromotionOutcome.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOPromotionOutcome");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PromotionOutcome record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOPromotionOutcome daoPromotionOutcome = new DAOPromotionOutcome();
			RegisterDataObject(daoPromotionOutcome);
			BeginTransaction("deleteBOPromotionOutcome");
			try
			{
				daoPromotionOutcome.OutcomeId = _outcomeId;
				daoPromotionOutcome.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOPromotionOutcome");
				throw;
			}
		}
		
		///<Summary>
		///PromotionOutcomeCollection
		///This method returns the collection of BOPromotionOutcome objects
		///</Summary>
		///<returns>
		///List[BOPromotionOutcome]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOPromotionOutcome> PromotionOutcomeCollection()
		{
			try
			{
				IList<BOPromotionOutcome> boPromotionOutcomeCollection = new List<BOPromotionOutcome>();
				IList<DAOPromotionOutcome> daoPromotionOutcomeCollection = DAOPromotionOutcome.SelectAll();
			
				foreach(DAOPromotionOutcome daoPromotionOutcome in daoPromotionOutcomeCollection)
					boPromotionOutcomeCollection.Add(new BOPromotionOutcome(daoPromotionOutcome));
			
				return boPromotionOutcomeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionOutcomeCollectionCount
		///This method returns the collection count of BOPromotionOutcome objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PromotionOutcomeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOPromotionOutcome.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOPromotionOutcome>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOPromotionOutcome.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionOutcomeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOPromotionOutcome objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPromotionOutcomeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOPromotionOutcome> daoPromotionOutcomeCollection = DAOPromotionOutcome.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOPromotionOutcome resdaoPromotionOutcome in daoPromotionOutcomeCollection)
					boPromotionOutcomeCollection.Add((T)(object)new BOPromotionOutcome(resdaoPromotionOutcome));
			
				return boPromotionOutcomeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionOutcomeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOPromotionOutcome objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOPromotionOutcome.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? OutcomeId
		{
			get
			{
				 return _outcomeId;
			}
			set
			{
				_outcomeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PromotionId
		{
			get
			{
				 return _promotionId;
			}
			set
			{
				_promotionId = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Count
		{
			get
			{
				 return _count;
			}
			set
			{
				_count = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string ItemCode
		{
			get
			{
				 return _itemCode;
			}
			set
			{
				_itemCode = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Slice
		{
			get
			{
				 return _slice;
			}
			set
			{
				_slice = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Value
		{
			get
			{
				 return _value;
			}
			set
			{
				_value = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
