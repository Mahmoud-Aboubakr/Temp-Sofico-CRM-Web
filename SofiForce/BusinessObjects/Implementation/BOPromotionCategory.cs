/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPromotionCategory.
	///It maintains a collection of BOPromotion objects.
	///</Summary>
	public partial class BOPromotionCategory : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _promotionCategoryId;
		protected string _promotionCategoryCode;
		protected string _promotionCategoryNameEn;
		protected string _promotionCategoryNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _icon;
		protected string _color;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOPromotion> _boPromotionCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPromotionCategory()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 promotionCategoryId
		///</parameters>
		public BOPromotionCategory(Int32 promotionCategoryId)
		{
			try
			{
				DAOPromotionCategory daoPromotionCategory = DAOPromotionCategory.SelectOne(promotionCategoryId);
				_promotionCategoryId = daoPromotionCategory.PromotionCategoryId;
				_promotionCategoryCode = daoPromotionCategory.PromotionCategoryCode;
				_promotionCategoryNameEn = daoPromotionCategory.PromotionCategoryNameEn;
				_promotionCategoryNameAr = daoPromotionCategory.PromotionCategoryNameAr;
				_isActive = daoPromotionCategory.IsActive;
				_canEdit = daoPromotionCategory.CanEdit;
				_canDelete = daoPromotionCategory.CanDelete;
				_displayOrder = daoPromotionCategory.DisplayOrder;
				_icon = daoPromotionCategory.Icon;
				_color = daoPromotionCategory.Color;
				_cBy = daoPromotionCategory.CBy;
				_cDate = daoPromotionCategory.CDate;
				_eBy = daoPromotionCategory.EBy;
				_eDate = daoPromotionCategory.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPromotionCategory
		///</parameters>
		protected internal BOPromotionCategory(DAOPromotionCategory daoPromotionCategory)
		{
			try
			{
				_promotionCategoryId = daoPromotionCategory.PromotionCategoryId;
				_promotionCategoryCode = daoPromotionCategory.PromotionCategoryCode;
				_promotionCategoryNameEn = daoPromotionCategory.PromotionCategoryNameEn;
				_promotionCategoryNameAr = daoPromotionCategory.PromotionCategoryNameAr;
				_isActive = daoPromotionCategory.IsActive;
				_canEdit = daoPromotionCategory.CanEdit;
				_canDelete = daoPromotionCategory.CanDelete;
				_displayOrder = daoPromotionCategory.DisplayOrder;
				_icon = daoPromotionCategory.Icon;
				_color = daoPromotionCategory.Color;
				_cBy = daoPromotionCategory.CBy;
				_cDate = daoPromotionCategory.CDate;
				_eBy = daoPromotionCategory.EBy;
				_eDate = daoPromotionCategory.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PromotionCategory record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOPromotionCategory daoPromotionCategory = new DAOPromotionCategory();
			RegisterDataObject(daoPromotionCategory);
			BeginTransaction("savenewBOPromotionCategory");
			try
			{
				daoPromotionCategory.PromotionCategoryId = _promotionCategoryId;
				daoPromotionCategory.PromotionCategoryCode = _promotionCategoryCode;
				daoPromotionCategory.PromotionCategoryNameEn = _promotionCategoryNameEn;
				daoPromotionCategory.PromotionCategoryNameAr = _promotionCategoryNameAr;
				daoPromotionCategory.IsActive = _isActive;
				daoPromotionCategory.CanEdit = _canEdit;
				daoPromotionCategory.CanDelete = _canDelete;
				daoPromotionCategory.DisplayOrder = _displayOrder;
				daoPromotionCategory.Icon = _icon;
				daoPromotionCategory.Color = _color;
				daoPromotionCategory.CBy = _cBy;
				daoPromotionCategory.CDate = _cDate;
				daoPromotionCategory.EBy = _eBy;
				daoPromotionCategory.EDate = _eDate;
				daoPromotionCategory.Insert();
				CommitTransaction();
				
				_promotionCategoryId = daoPromotionCategory.PromotionCategoryId;
				_promotionCategoryCode = daoPromotionCategory.PromotionCategoryCode;
				_promotionCategoryNameEn = daoPromotionCategory.PromotionCategoryNameEn;
				_promotionCategoryNameAr = daoPromotionCategory.PromotionCategoryNameAr;
				_isActive = daoPromotionCategory.IsActive;
				_canEdit = daoPromotionCategory.CanEdit;
				_canDelete = daoPromotionCategory.CanDelete;
				_displayOrder = daoPromotionCategory.DisplayOrder;
				_icon = daoPromotionCategory.Icon;
				_color = daoPromotionCategory.Color;
				_cBy = daoPromotionCategory.CBy;
				_cDate = daoPromotionCategory.CDate;
				_eBy = daoPromotionCategory.EBy;
				_eDate = daoPromotionCategory.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOPromotionCategory");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one PromotionCategory record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionCategory
		///</parameters>
		public virtual void Update()
		{
			DAOPromotionCategory daoPromotionCategory = new DAOPromotionCategory();
			RegisterDataObject(daoPromotionCategory);
			BeginTransaction("updateBOPromotionCategory");
			try
			{
				daoPromotionCategory.PromotionCategoryId = _promotionCategoryId;
				daoPromotionCategory.PromotionCategoryCode = _promotionCategoryCode;
				daoPromotionCategory.PromotionCategoryNameEn = _promotionCategoryNameEn;
				daoPromotionCategory.PromotionCategoryNameAr = _promotionCategoryNameAr;
				daoPromotionCategory.IsActive = _isActive;
				daoPromotionCategory.CanEdit = _canEdit;
				daoPromotionCategory.CanDelete = _canDelete;
				daoPromotionCategory.DisplayOrder = _displayOrder;
				daoPromotionCategory.Icon = _icon;
				daoPromotionCategory.Color = _color;
				daoPromotionCategory.CBy = _cBy;
				daoPromotionCategory.CDate = _cDate;
				daoPromotionCategory.EBy = _eBy;
				daoPromotionCategory.EDate = _eDate;
				daoPromotionCategory.Update();
				CommitTransaction();
				
				_promotionCategoryId = daoPromotionCategory.PromotionCategoryId;
				_promotionCategoryCode = daoPromotionCategory.PromotionCategoryCode;
				_promotionCategoryNameEn = daoPromotionCategory.PromotionCategoryNameEn;
				_promotionCategoryNameAr = daoPromotionCategory.PromotionCategoryNameAr;
				_isActive = daoPromotionCategory.IsActive;
				_canEdit = daoPromotionCategory.CanEdit;
				_canDelete = daoPromotionCategory.CanDelete;
				_displayOrder = daoPromotionCategory.DisplayOrder;
				_icon = daoPromotionCategory.Icon;
				_color = daoPromotionCategory.Color;
				_cBy = daoPromotionCategory.CBy;
				_cDate = daoPromotionCategory.CDate;
				_eBy = daoPromotionCategory.EBy;
				_eDate = daoPromotionCategory.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOPromotionCategory");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PromotionCategory record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOPromotionCategory daoPromotionCategory = new DAOPromotionCategory();
			RegisterDataObject(daoPromotionCategory);
			BeginTransaction("deleteBOPromotionCategory");
			try
			{
				daoPromotionCategory.PromotionCategoryId = _promotionCategoryId;
				daoPromotionCategory.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOPromotionCategory");
				throw;
			}
		}
		
		///<Summary>
		///PromotionCategoryCollection
		///This method returns the collection of BOPromotionCategory objects
		///</Summary>
		///<returns>
		///List[BOPromotionCategory]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOPromotionCategory> PromotionCategoryCollection()
		{
			try
			{
				IList<BOPromotionCategory> boPromotionCategoryCollection = new List<BOPromotionCategory>();
				IList<DAOPromotionCategory> daoPromotionCategoryCollection = DAOPromotionCategory.SelectAll();
			
				foreach(DAOPromotionCategory daoPromotionCategory in daoPromotionCategoryCollection)
					boPromotionCategoryCollection.Add(new BOPromotionCategory(daoPromotionCategory));
			
				return boPromotionCategoryCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionCategoryCollectionCount
		///This method returns the collection count of BOPromotionCategory objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PromotionCategoryCollectionCount()
		{
			try
			{
				Int32 objCount = DAOPromotionCategory.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PromotionCollection
		///This method returns its collection of BOPromotion objects
		///</Summary>
		///<returns>
		///IList[BOPromotion]
		///</returns>
		///<parameters>
		///BOPromotionCategory
		///</parameters>
		public virtual IList<BOPromotion> PromotionCollection()
		{
			try
			{
				if(_boPromotionCollection == null)
					LoadPromotionCollection();
				
				return _boPromotionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOPromotionCategory>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOPromotionCategory.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionCategoryCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOPromotionCategory objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPromotionCategoryCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOPromotionCategory> daoPromotionCategoryCollection = DAOPromotionCategory.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOPromotionCategory resdaoPromotionCategory in daoPromotionCategoryCollection)
					boPromotionCategoryCollection.Add((T)(object)new BOPromotionCategory(resdaoPromotionCategory));
			
				return boPromotionCategoryCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionCategoryCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOPromotionCategory objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOPromotionCategory.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadPromotionCollection
		///This method loads the internal collection of BOPromotion objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPromotionCollection()
		{
			try
			{
				_boPromotionCollection = new List<BOPromotion>();
				IList<DAOPromotion> daoPromotionCollection = DAOPromotion.SelectAllByPromotionCategoryId(_promotionCategoryId.Value);
				
				foreach(DAOPromotion daoPromotion in daoPromotionCollection)
					_boPromotionCollection.Add(new BOPromotion(daoPromotion));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPromotion
		///This method persists a BOPromotion object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual void AddPromotion(BOPromotion boPromotion)
		{
			DAOPromotion daoPromotion = new DAOPromotion();
			RegisterDataObject(daoPromotion);
			BeginTransaction("addPromotion");
			try
			{
				daoPromotion.PromotionId = boPromotion.PromotionId;
				daoPromotion.PromotionCode = boPromotion.PromotionCode;
				daoPromotion.VendorCode = boPromotion.VendorCode;
				daoPromotion.CompanyId = boPromotion.CompanyId;
				daoPromotion.ValidFrom = boPromotion.ValidFrom;
				daoPromotion.ValidTo = boPromotion.ValidTo;
				daoPromotion.IsActive = boPromotion.IsActive;
				daoPromotion.PromotionTypeId = boPromotion.PromotionTypeId;
				daoPromotion.Priority = boPromotion.Priority;
				daoPromotion.Repeats = boPromotion.Repeats;
				daoPromotion.Icon = boPromotion.Icon;
				daoPromotion.Color = boPromotion.Color;
				daoPromotion.PromotionDesc = boPromotion.PromotionDesc;
				daoPromotion.PromotionGroupId = boPromotion.PromotionGroupId;
				daoPromotion.DisplayOrder = boPromotion.DisplayOrder;
				daoPromotion.EnableNotification = boPromotion.EnableNotification;
				daoPromotion.NotificationDate = boPromotion.NotificationDate;
				daoPromotion.NotificationDone = boPromotion.NotificationDone;
				daoPromotion.CBy = boPromotion.CBy;
				daoPromotion.CDate = boPromotion.CDate;
				daoPromotion.EBy = boPromotion.EBy;
				daoPromotion.EDate = boPromotion.EDate;
				daoPromotion.IsApproved = boPromotion.IsApproved;
				daoPromotion.RepeatTypeId = boPromotion.RepeatTypeId;
				daoPromotion.PromotionCategoryId = _promotionCategoryId.Value;
				daoPromotion.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPromotion = new BOPromotion(daoPromotion);
				if(_boPromotionCollection != null)
					_boPromotionCollection.Add(boPromotion);
			}
			catch
			{
				RollbackTransaction("addPromotion");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPromotion
		///This method deletes all BOPromotion objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPromotion()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPromotion");
			try
			{
				DAOPromotion.DeleteAllByPromotionCategoryId(ConnectionProvider, _promotionCategoryId.Value);
				CommitTransaction();
				if(_boPromotionCollection != null)
				{
					_boPromotionCollection.Clear();
					_boPromotionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPromotion");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? PromotionCategoryId
		{
			get
			{
				 return _promotionCategoryId;
			}
			set
			{
				_promotionCategoryId = value;
				_isDirty = true;
			}
		}
		
		public virtual string PromotionCategoryCode
		{
			get
			{
				 return _promotionCategoryCode;
			}
			set
			{
				_promotionCategoryCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string PromotionCategoryNameEn
		{
			get
			{
				 return _promotionCategoryNameEn;
			}
			set
			{
				_promotionCategoryNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string PromotionCategoryNameAr
		{
			get
			{
				 return _promotionCategoryNameAr;
			}
			set
			{
				_promotionCategoryNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
