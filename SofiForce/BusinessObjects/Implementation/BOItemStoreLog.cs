/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOItemStoreLog.
	///</Summary>
	public partial class BOItemStoreLog : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _logId;
		protected DateTime? _logDate;
		protected Int32? _itemId;
		protected Int32? _branchId;
		protected Int32? _storeId;
		protected Int32? _quantity;
		protected Int32? _onHand;
		protected DateTime? _expireDate;
		protected string _batchNo;
		protected bool? _isActive;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOItemStoreLog()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOItemStoreLog
		///</parameters>
		protected internal BOItemStoreLog(DAOItemStoreLog daoItemStoreLog)
		{
			try
			{
				_logId = daoItemStoreLog.LogId;
				_logDate = daoItemStoreLog.LogDate;
				_itemId = daoItemStoreLog.ItemId;
				_branchId = daoItemStoreLog.BranchId;
				_storeId = daoItemStoreLog.StoreId;
				_quantity = daoItemStoreLog.Quantity;
				_onHand = daoItemStoreLog.OnHand;
				_expireDate = daoItemStoreLog.ExpireDate;
				_batchNo = daoItemStoreLog.BatchNo;
				_isActive = daoItemStoreLog.IsActive;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ItemStoreLog record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOItemStoreLog daoItemStoreLog = new DAOItemStoreLog();
			RegisterDataObject(daoItemStoreLog);
			BeginTransaction("savenewBOItemStoreLog");
			try
			{
				daoItemStoreLog.LogDate = _logDate;
				daoItemStoreLog.ItemId = _itemId;
				daoItemStoreLog.BranchId = _branchId;
				daoItemStoreLog.StoreId = _storeId;
				daoItemStoreLog.Quantity = _quantity;
				daoItemStoreLog.OnHand = _onHand;
				daoItemStoreLog.ExpireDate = _expireDate;
				daoItemStoreLog.BatchNo = _batchNo;
				daoItemStoreLog.IsActive = _isActive;
				daoItemStoreLog.Insert();
				CommitTransaction();
				
				_logId = daoItemStoreLog.LogId;
				_logDate = daoItemStoreLog.LogDate;
				_itemId = daoItemStoreLog.ItemId;
				_branchId = daoItemStoreLog.BranchId;
				_storeId = daoItemStoreLog.StoreId;
				_quantity = daoItemStoreLog.Quantity;
				_onHand = daoItemStoreLog.OnHand;
				_expireDate = daoItemStoreLog.ExpireDate;
				_batchNo = daoItemStoreLog.BatchNo;
				_isActive = daoItemStoreLog.IsActive;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOItemStoreLog");
				throw;
			}
		}
		
		
		///<Summary>
		///ItemStoreLogCollection
		///This method returns the collection of BOItemStoreLog objects
		///</Summary>
		///<returns>
		///List[BOItemStoreLog]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOItemStoreLog> ItemStoreLogCollection()
		{
			try
			{
				IList<BOItemStoreLog> boItemStoreLogCollection = new List<BOItemStoreLog>();
				IList<DAOItemStoreLog> daoItemStoreLogCollection = DAOItemStoreLog.SelectAll();
			
				foreach(DAOItemStoreLog daoItemStoreLog in daoItemStoreLogCollection)
					boItemStoreLogCollection.Add(new BOItemStoreLog(daoItemStoreLog));
			
				return boItemStoreLogCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemStoreLogCollectionCount
		///This method returns the collection count of BOItemStoreLog objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ItemStoreLogCollectionCount()
		{
			try
			{
				Int32 objCount = DAOItemStoreLog.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOItemStoreLog>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOItemStoreLog.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemStoreLogCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOItemStoreLog objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boItemStoreLogCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOItemStoreLog> daoItemStoreLogCollection = DAOItemStoreLog.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOItemStoreLog resdaoItemStoreLog in daoItemStoreLogCollection)
					boItemStoreLogCollection.Add((T)(object)new BOItemStoreLog(resdaoItemStoreLog));
			
				return boItemStoreLogCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ItemStoreLogCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOItemStoreLog objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOItemStoreLog.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? LogId
		{
			get
			{
				 return _logId;
			}
			set
			{
				_logId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? LogDate
		{
			get
			{
				 return _logDate;
			}
			set
			{
				_logDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ItemId
		{
			get
			{
				 return _itemId;
			}
			set
			{
				_itemId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? StoreId
		{
			get
			{
				 return _storeId;
			}
			set
			{
				_storeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? OnHand
		{
			get
			{
				 return _onHand;
			}
			set
			{
				_onHand = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ExpireDate
		{
			get
			{
				 return _expireDate;
			}
			set
			{
				_expireDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string BatchNo
		{
			get
			{
				 return _batchNo;
			}
			set
			{
				_batchNo = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
