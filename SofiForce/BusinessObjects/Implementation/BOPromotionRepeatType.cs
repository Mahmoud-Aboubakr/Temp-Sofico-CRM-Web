/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPromotionRepeatType.
	///It maintains a collection of BOPromotion objects.
	///</Summary>
	public partial class BOPromotionRepeatType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _repeatTypeId;
		protected string _repeatTypeCode;
		protected string _repeatTypeNameEn;
		protected string _repeatTypeNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOPromotion> _boPromotionCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPromotionRepeatType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 repeatTypeId
		///</parameters>
		public BOPromotionRepeatType(Int32 repeatTypeId)
		{
			try
			{
				DAOPromotionRepeatType daoPromotionRepeatType = DAOPromotionRepeatType.SelectOne(repeatTypeId);
				_repeatTypeId = daoPromotionRepeatType.RepeatTypeId;
				_repeatTypeCode = daoPromotionRepeatType.RepeatTypeCode;
				_repeatTypeNameEn = daoPromotionRepeatType.RepeatTypeNameEn;
				_repeatTypeNameAr = daoPromotionRepeatType.RepeatTypeNameAr;
				_isActive = daoPromotionRepeatType.IsActive;
				_canEdit = daoPromotionRepeatType.CanEdit;
				_canDelete = daoPromotionRepeatType.CanDelete;
				_displayOrder = daoPromotionRepeatType.DisplayOrder;
				_color = daoPromotionRepeatType.Color;
				_icon = daoPromotionRepeatType.Icon;
				_cBy = daoPromotionRepeatType.CBy;
				_cDate = daoPromotionRepeatType.CDate;
				_eBy = daoPromotionRepeatType.EBy;
				_eDate = daoPromotionRepeatType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPromotionRepeatType
		///</parameters>
		protected internal BOPromotionRepeatType(DAOPromotionRepeatType daoPromotionRepeatType)
		{
			try
			{
				_repeatTypeId = daoPromotionRepeatType.RepeatTypeId;
				_repeatTypeCode = daoPromotionRepeatType.RepeatTypeCode;
				_repeatTypeNameEn = daoPromotionRepeatType.RepeatTypeNameEn;
				_repeatTypeNameAr = daoPromotionRepeatType.RepeatTypeNameAr;
				_isActive = daoPromotionRepeatType.IsActive;
				_canEdit = daoPromotionRepeatType.CanEdit;
				_canDelete = daoPromotionRepeatType.CanDelete;
				_displayOrder = daoPromotionRepeatType.DisplayOrder;
				_color = daoPromotionRepeatType.Color;
				_icon = daoPromotionRepeatType.Icon;
				_cBy = daoPromotionRepeatType.CBy;
				_cDate = daoPromotionRepeatType.CDate;
				_eBy = daoPromotionRepeatType.EBy;
				_eDate = daoPromotionRepeatType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PromotionRepeatType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOPromotionRepeatType daoPromotionRepeatType = new DAOPromotionRepeatType();
			RegisterDataObject(daoPromotionRepeatType);
			BeginTransaction("savenewBOPromotionRepeatType");
			try
			{
				daoPromotionRepeatType.RepeatTypeId = _repeatTypeId;
				daoPromotionRepeatType.RepeatTypeCode = _repeatTypeCode;
				daoPromotionRepeatType.RepeatTypeNameEn = _repeatTypeNameEn;
				daoPromotionRepeatType.RepeatTypeNameAr = _repeatTypeNameAr;
				daoPromotionRepeatType.IsActive = _isActive;
				daoPromotionRepeatType.CanEdit = _canEdit;
				daoPromotionRepeatType.CanDelete = _canDelete;
				daoPromotionRepeatType.DisplayOrder = _displayOrder;
				daoPromotionRepeatType.Color = _color;
				daoPromotionRepeatType.Icon = _icon;
				daoPromotionRepeatType.CBy = _cBy;
				daoPromotionRepeatType.CDate = _cDate;
				daoPromotionRepeatType.EBy = _eBy;
				daoPromotionRepeatType.EDate = _eDate;
				daoPromotionRepeatType.Insert();
				CommitTransaction();
				
				_repeatTypeId = daoPromotionRepeatType.RepeatTypeId;
				_repeatTypeCode = daoPromotionRepeatType.RepeatTypeCode;
				_repeatTypeNameEn = daoPromotionRepeatType.RepeatTypeNameEn;
				_repeatTypeNameAr = daoPromotionRepeatType.RepeatTypeNameAr;
				_isActive = daoPromotionRepeatType.IsActive;
				_canEdit = daoPromotionRepeatType.CanEdit;
				_canDelete = daoPromotionRepeatType.CanDelete;
				_displayOrder = daoPromotionRepeatType.DisplayOrder;
				_color = daoPromotionRepeatType.Color;
				_icon = daoPromotionRepeatType.Icon;
				_cBy = daoPromotionRepeatType.CBy;
				_cDate = daoPromotionRepeatType.CDate;
				_eBy = daoPromotionRepeatType.EBy;
				_eDate = daoPromotionRepeatType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOPromotionRepeatType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one PromotionRepeatType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotionRepeatType
		///</parameters>
		public virtual void Update()
		{
			DAOPromotionRepeatType daoPromotionRepeatType = new DAOPromotionRepeatType();
			RegisterDataObject(daoPromotionRepeatType);
			BeginTransaction("updateBOPromotionRepeatType");
			try
			{
				daoPromotionRepeatType.RepeatTypeId = _repeatTypeId;
				daoPromotionRepeatType.RepeatTypeCode = _repeatTypeCode;
				daoPromotionRepeatType.RepeatTypeNameEn = _repeatTypeNameEn;
				daoPromotionRepeatType.RepeatTypeNameAr = _repeatTypeNameAr;
				daoPromotionRepeatType.IsActive = _isActive;
				daoPromotionRepeatType.CanEdit = _canEdit;
				daoPromotionRepeatType.CanDelete = _canDelete;
				daoPromotionRepeatType.DisplayOrder = _displayOrder;
				daoPromotionRepeatType.Color = _color;
				daoPromotionRepeatType.Icon = _icon;
				daoPromotionRepeatType.CBy = _cBy;
				daoPromotionRepeatType.CDate = _cDate;
				daoPromotionRepeatType.EBy = _eBy;
				daoPromotionRepeatType.EDate = _eDate;
				daoPromotionRepeatType.Update();
				CommitTransaction();
				
				_repeatTypeId = daoPromotionRepeatType.RepeatTypeId;
				_repeatTypeCode = daoPromotionRepeatType.RepeatTypeCode;
				_repeatTypeNameEn = daoPromotionRepeatType.RepeatTypeNameEn;
				_repeatTypeNameAr = daoPromotionRepeatType.RepeatTypeNameAr;
				_isActive = daoPromotionRepeatType.IsActive;
				_canEdit = daoPromotionRepeatType.CanEdit;
				_canDelete = daoPromotionRepeatType.CanDelete;
				_displayOrder = daoPromotionRepeatType.DisplayOrder;
				_color = daoPromotionRepeatType.Color;
				_icon = daoPromotionRepeatType.Icon;
				_cBy = daoPromotionRepeatType.CBy;
				_cDate = daoPromotionRepeatType.CDate;
				_eBy = daoPromotionRepeatType.EBy;
				_eDate = daoPromotionRepeatType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOPromotionRepeatType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PromotionRepeatType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOPromotionRepeatType daoPromotionRepeatType = new DAOPromotionRepeatType();
			RegisterDataObject(daoPromotionRepeatType);
			BeginTransaction("deleteBOPromotionRepeatType");
			try
			{
				daoPromotionRepeatType.RepeatTypeId = _repeatTypeId;
				daoPromotionRepeatType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOPromotionRepeatType");
				throw;
			}
		}
		
		///<Summary>
		///PromotionRepeatTypeCollection
		///This method returns the collection of BOPromotionRepeatType objects
		///</Summary>
		///<returns>
		///List[BOPromotionRepeatType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOPromotionRepeatType> PromotionRepeatTypeCollection()
		{
			try
			{
				IList<BOPromotionRepeatType> boPromotionRepeatTypeCollection = new List<BOPromotionRepeatType>();
				IList<DAOPromotionRepeatType> daoPromotionRepeatTypeCollection = DAOPromotionRepeatType.SelectAll();
			
				foreach(DAOPromotionRepeatType daoPromotionRepeatType in daoPromotionRepeatTypeCollection)
					boPromotionRepeatTypeCollection.Add(new BOPromotionRepeatType(daoPromotionRepeatType));
			
				return boPromotionRepeatTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionRepeatTypeCollectionCount
		///This method returns the collection count of BOPromotionRepeatType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PromotionRepeatTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOPromotionRepeatType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PromotionCollection
		///This method returns its collection of BOPromotion objects
		///</Summary>
		///<returns>
		///IList[BOPromotion]
		///</returns>
		///<parameters>
		///BOPromotionRepeatType
		///</parameters>
		public virtual IList<BOPromotion> PromotionCollection()
		{
			try
			{
				if(_boPromotionCollection == null)
					LoadPromotionCollection();
				
				return _boPromotionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOPromotionRepeatType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOPromotionRepeatType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionRepeatTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOPromotionRepeatType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPromotionRepeatTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOPromotionRepeatType> daoPromotionRepeatTypeCollection = DAOPromotionRepeatType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOPromotionRepeatType resdaoPromotionRepeatType in daoPromotionRepeatTypeCollection)
					boPromotionRepeatTypeCollection.Add((T)(object)new BOPromotionRepeatType(resdaoPromotionRepeatType));
			
				return boPromotionRepeatTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PromotionRepeatTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOPromotionRepeatType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOPromotionRepeatType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadPromotionCollection
		///This method loads the internal collection of BOPromotion objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPromotionCollection()
		{
			try
			{
				_boPromotionCollection = new List<BOPromotion>();
				IList<DAOPromotion> daoPromotionCollection = DAOPromotion.SelectAllByRepeatTypeId(_repeatTypeId.Value);
				
				foreach(DAOPromotion daoPromotion in daoPromotionCollection)
					_boPromotionCollection.Add(new BOPromotion(daoPromotion));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPromotion
		///This method persists a BOPromotion object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPromotion
		///</parameters>
		public virtual void AddPromotion(BOPromotion boPromotion)
		{
			DAOPromotion daoPromotion = new DAOPromotion();
			RegisterDataObject(daoPromotion);
			BeginTransaction("addPromotion");
			try
			{
				daoPromotion.PromotionId = boPromotion.PromotionId;
				daoPromotion.PromotionCode = boPromotion.PromotionCode;
				daoPromotion.VendorCode = boPromotion.VendorCode;
				daoPromotion.CompanyId = boPromotion.CompanyId;
				daoPromotion.ValidFrom = boPromotion.ValidFrom;
				daoPromotion.ValidTo = boPromotion.ValidTo;
				daoPromotion.IsActive = boPromotion.IsActive;
				daoPromotion.PromotionTypeId = boPromotion.PromotionTypeId;
				daoPromotion.Priority = boPromotion.Priority;
				daoPromotion.Repeats = boPromotion.Repeats;
				daoPromotion.Icon = boPromotion.Icon;
				daoPromotion.Color = boPromotion.Color;
				daoPromotion.PromotionDesc = boPromotion.PromotionDesc;
				daoPromotion.PromotionGroupId = boPromotion.PromotionGroupId;
				daoPromotion.DisplayOrder = boPromotion.DisplayOrder;
				daoPromotion.EnableNotification = boPromotion.EnableNotification;
				daoPromotion.NotificationDate = boPromotion.NotificationDate;
				daoPromotion.NotificationDone = boPromotion.NotificationDone;
				daoPromotion.CBy = boPromotion.CBy;
				daoPromotion.CDate = boPromotion.CDate;
				daoPromotion.EBy = boPromotion.EBy;
				daoPromotion.EDate = boPromotion.EDate;
				daoPromotion.IsApproved = boPromotion.IsApproved;
				daoPromotion.PromotionCategoryId = boPromotion.PromotionCategoryId;
				daoPromotion.RepeatTypeId = _repeatTypeId.Value;
				daoPromotion.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPromotion = new BOPromotion(daoPromotion);
				if(_boPromotionCollection != null)
					_boPromotionCollection.Add(boPromotion);
			}
			catch
			{
				RollbackTransaction("addPromotion");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPromotion
		///This method deletes all BOPromotion objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPromotion()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPromotion");
			try
			{
				DAOPromotion.DeleteAllByRepeatTypeId(ConnectionProvider, _repeatTypeId.Value);
				CommitTransaction();
				if(_boPromotionCollection != null)
				{
					_boPromotionCollection.Clear();
					_boPromotionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPromotion");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RepeatTypeId
		{
			get
			{
				 return _repeatTypeId;
			}
			set
			{
				_repeatTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepeatTypeCode
		{
			get
			{
				 return _repeatTypeCode;
			}
			set
			{
				_repeatTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepeatTypeNameEn
		{
			get
			{
				 return _repeatTypeNameEn;
			}
			set
			{
				_repeatTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepeatTypeNameAr
		{
			get
			{
				 return _repeatTypeNameAr;
			}
			set
			{
				_repeatTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
