/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPriority.
	///It maintains a collection of BOClientComplain,BOClientServiceRequest,BONotification,BOSalesOrder objects.
	///</Summary>
	public partial class BOPriority : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _priorityId;
		protected string _priorityCode;
		protected string _priorityNameAr;
		protected string _priorityNameEn;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientComplain> _boClientComplainCollection;
		List<BOClientServiceRequest> _boClientServiceRequestCollection;
		List<BONotification> _boNotificationCollection;
		List<BOSalesOrder> _boSalesOrderCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPriority()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 priorityId
		///</parameters>
		public BOPriority(Int32 priorityId)
		{
			try
			{
				DAOPriority daoPriority = DAOPriority.SelectOne(priorityId);
				_priorityId = daoPriority.PriorityId;
				_priorityCode = daoPriority.PriorityCode;
				_priorityNameAr = daoPriority.PriorityNameAr;
				_priorityNameEn = daoPriority.PriorityNameEn;
				_icon = daoPriority.Icon;
				_color = daoPriority.Color;
				_displayOrder = daoPriority.DisplayOrder;
				_isActive = daoPriority.IsActive;
				_canEdit = daoPriority.CanEdit;
				_canDelete = daoPriority.CanDelete;
				_cBy = daoPriority.CBy;
				_cDate = daoPriority.CDate;
				_eBy = daoPriority.EBy;
				_eDate = daoPriority.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPriority
		///</parameters>
		protected internal BOPriority(DAOPriority daoPriority)
		{
			try
			{
				_priorityId = daoPriority.PriorityId;
				_priorityCode = daoPriority.PriorityCode;
				_priorityNameAr = daoPriority.PriorityNameAr;
				_priorityNameEn = daoPriority.PriorityNameEn;
				_icon = daoPriority.Icon;
				_color = daoPriority.Color;
				_displayOrder = daoPriority.DisplayOrder;
				_isActive = daoPriority.IsActive;
				_canEdit = daoPriority.CanEdit;
				_canDelete = daoPriority.CanDelete;
				_cBy = daoPriority.CBy;
				_cDate = daoPriority.CDate;
				_eBy = daoPriority.EBy;
				_eDate = daoPriority.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Priority record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOPriority daoPriority = new DAOPriority();
			RegisterDataObject(daoPriority);
			BeginTransaction("savenewBOPriority");
			try
			{
				daoPriority.PriorityId = _priorityId;
				daoPriority.PriorityCode = _priorityCode;
				daoPriority.PriorityNameAr = _priorityNameAr;
				daoPriority.PriorityNameEn = _priorityNameEn;
				daoPriority.Icon = _icon;
				daoPriority.Color = _color;
				daoPriority.DisplayOrder = _displayOrder;
				daoPriority.IsActive = _isActive;
				daoPriority.CanEdit = _canEdit;
				daoPriority.CanDelete = _canDelete;
				daoPriority.CBy = _cBy;
				daoPriority.CDate = _cDate;
				daoPriority.EBy = _eBy;
				daoPriority.EDate = _eDate;
				daoPriority.Insert();
				CommitTransaction();
				
				_priorityId = daoPriority.PriorityId;
				_priorityCode = daoPriority.PriorityCode;
				_priorityNameAr = daoPriority.PriorityNameAr;
				_priorityNameEn = daoPriority.PriorityNameEn;
				_icon = daoPriority.Icon;
				_color = daoPriority.Color;
				_displayOrder = daoPriority.DisplayOrder;
				_isActive = daoPriority.IsActive;
				_canEdit = daoPriority.CanEdit;
				_canDelete = daoPriority.CanDelete;
				_cBy = daoPriority.CBy;
				_cDate = daoPriority.CDate;
				_eBy = daoPriority.EBy;
				_eDate = daoPriority.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOPriority");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Priority record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPriority
		///</parameters>
		public virtual void Update()
		{
			DAOPriority daoPriority = new DAOPriority();
			RegisterDataObject(daoPriority);
			BeginTransaction("updateBOPriority");
			try
			{
				daoPriority.PriorityId = _priorityId;
				daoPriority.PriorityCode = _priorityCode;
				daoPriority.PriorityNameAr = _priorityNameAr;
				daoPriority.PriorityNameEn = _priorityNameEn;
				daoPriority.Icon = _icon;
				daoPriority.Color = _color;
				daoPriority.DisplayOrder = _displayOrder;
				daoPriority.IsActive = _isActive;
				daoPriority.CanEdit = _canEdit;
				daoPriority.CanDelete = _canDelete;
				daoPriority.CBy = _cBy;
				daoPriority.CDate = _cDate;
				daoPriority.EBy = _eBy;
				daoPriority.EDate = _eDate;
				daoPriority.Update();
				CommitTransaction();
				
				_priorityId = daoPriority.PriorityId;
				_priorityCode = daoPriority.PriorityCode;
				_priorityNameAr = daoPriority.PriorityNameAr;
				_priorityNameEn = daoPriority.PriorityNameEn;
				_icon = daoPriority.Icon;
				_color = daoPriority.Color;
				_displayOrder = daoPriority.DisplayOrder;
				_isActive = daoPriority.IsActive;
				_canEdit = daoPriority.CanEdit;
				_canDelete = daoPriority.CanDelete;
				_cBy = daoPriority.CBy;
				_cDate = daoPriority.CDate;
				_eBy = daoPriority.EBy;
				_eDate = daoPriority.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOPriority");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Priority record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOPriority daoPriority = new DAOPriority();
			RegisterDataObject(daoPriority);
			BeginTransaction("deleteBOPriority");
			try
			{
				daoPriority.PriorityId = _priorityId;
				daoPriority.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOPriority");
				throw;
			}
		}
		
		///<Summary>
		///PriorityCollection
		///This method returns the collection of BOPriority objects
		///</Summary>
		///<returns>
		///List[BOPriority]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOPriority> PriorityCollection()
		{
			try
			{
				IList<BOPriority> boPriorityCollection = new List<BOPriority>();
				IList<DAOPriority> daoPriorityCollection = DAOPriority.SelectAll();
			
				foreach(DAOPriority daoPriority in daoPriorityCollection)
					boPriorityCollection.Add(new BOPriority(daoPriority));
			
				return boPriorityCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PriorityCollectionCount
		///This method returns the collection count of BOPriority objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PriorityCollectionCount()
		{
			try
			{
				Int32 objCount = DAOPriority.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BOPriority
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestCollection
		///This method returns its collection of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequest]
		///</returns>
		///<parameters>
		///BOPriority
		///</parameters>
		public virtual IList<BOClientServiceRequest> ClientServiceRequestCollection()
		{
			try
			{
				if(_boClientServiceRequestCollection == null)
					LoadClientServiceRequestCollection();
				
				return _boClientServiceRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///NotificationCollection
		///This method returns its collection of BONotification objects
		///</Summary>
		///<returns>
		///IList[BONotification]
		///</returns>
		///<parameters>
		///BOPriority
		///</parameters>
		public virtual IList<BONotification> NotificationCollection()
		{
			try
			{
				if(_boNotificationCollection == null)
					LoadNotificationCollection();
				
				return _boNotificationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderCollection
		///This method returns its collection of BOSalesOrder objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrder]
		///</returns>
		///<parameters>
		///BOPriority
		///</parameters>
		public virtual IList<BOSalesOrder> SalesOrderCollection()
		{
			try
			{
				if(_boSalesOrderCollection == null)
					LoadSalesOrderCollection();
				
				return _boSalesOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOPriority>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOPriority.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PriorityCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOPriority objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPriorityCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOPriority> daoPriorityCollection = DAOPriority.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOPriority resdaoPriority in daoPriorityCollection)
					boPriorityCollection.Add((T)(object)new BOPriority(resdaoPriority));
			
				return boPriorityCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///PriorityCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOPriority objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOPriority.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByPriorityId(_priorityId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.BranchId = boClientComplain.BranchId;
				daoClientComplain.RepresentativeId = boClientComplain.RepresentativeId;
				daoClientComplain.ClientId = boClientComplain.ClientId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeId = boClientComplain.ComplainTypeId;
				daoClientComplain.ComplainTypeDetailId = boClientComplain.ComplainTypeDetailId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.ComplainStatusId = boClientComplain.ComplainStatusId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.DepartmentId = boClientComplain.DepartmentId;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.PriorityId = _priorityId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByPriorityId(ConnectionProvider, _priorityId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestCollection
		///This method loads the internal collection of BOClientServiceRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestCollection()
		{
			try
			{
				_boClientServiceRequestCollection = new List<BOClientServiceRequest>();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAllByPriorityId(_priorityId.Value);
				
				foreach(DAOClientServiceRequest daoClientServiceRequest in daoClientServiceRequestCollection)
					_boClientServiceRequestCollection.Add(new BOClientServiceRequest(daoClientServiceRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequest
		///This method persists a BOClientServiceRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual void AddClientServiceRequest(BOClientServiceRequest boClientServiceRequest)
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("addClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = boClientServiceRequest.RequestId;
				daoClientServiceRequest.RequestCode = boClientServiceRequest.RequestCode;
				daoClientServiceRequest.BranchId = boClientServiceRequest.BranchId;
				daoClientServiceRequest.RepresentativeId = boClientServiceRequest.RepresentativeId;
				daoClientServiceRequest.ClientId = boClientServiceRequest.ClientId;
				daoClientServiceRequest.RequestDate = boClientServiceRequest.RequestDate;
				daoClientServiceRequest.RequestTime = boClientServiceRequest.RequestTime;
				daoClientServiceRequest.RequestTypeId = boClientServiceRequest.RequestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = boClientServiceRequest.RequestTypeDetailId;
				daoClientServiceRequest.Phone = boClientServiceRequest.Phone;
				daoClientServiceRequest.PhoneAlternative = boClientServiceRequest.PhoneAlternative;
				daoClientServiceRequest.RequestStatusId = boClientServiceRequest.RequestStatusId;
				daoClientServiceRequest.IsClosed = boClientServiceRequest.IsClosed;
				daoClientServiceRequest.CloseDate = boClientServiceRequest.CloseDate;
				daoClientServiceRequest.Duration = boClientServiceRequest.Duration;
				daoClientServiceRequest.Latitude = boClientServiceRequest.Latitude;
				daoClientServiceRequest.Longitude = boClientServiceRequest.Longitude;
				daoClientServiceRequest.InZone = boClientServiceRequest.InZone;
				daoClientServiceRequest.Distance = boClientServiceRequest.Distance;
				daoClientServiceRequest.Notes = boClientServiceRequest.Notes;
				daoClientServiceRequest.DepartmentId = boClientServiceRequest.DepartmentId;
				daoClientServiceRequest.CBy = boClientServiceRequest.CBy;
				daoClientServiceRequest.CDate = boClientServiceRequest.CDate;
				daoClientServiceRequest.EBy = boClientServiceRequest.EBy;
				daoClientServiceRequest.EDate = boClientServiceRequest.EDate;
				daoClientServiceRequest.Replay = boClientServiceRequest.Replay;
				daoClientServiceRequest.RequestTitle = boClientServiceRequest.RequestTitle;
				daoClientServiceRequest.PriorityId = _priorityId.Value;
				daoClientServiceRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequest = new BOClientServiceRequest(daoClientServiceRequest);
				if(_boClientServiceRequestCollection != null)
					_boClientServiceRequestCollection.Add(boClientServiceRequest);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequest
		///This method deletes all BOClientServiceRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceRequest");
			try
			{
				DAOClientServiceRequest.DeleteAllByPriorityId(ConnectionProvider, _priorityId.Value);
				CommitTransaction();
				if(_boClientServiceRequestCollection != null)
				{
					_boClientServiceRequestCollection.Clear();
					_boClientServiceRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///LoadNotificationCollection
		///This method loads the internal collection of BONotification objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadNotificationCollection()
		{
			try
			{
				_boNotificationCollection = new List<BONotification>();
				IList<DAONotification> daoNotificationCollection = DAONotification.SelectAllByPriorityId(_priorityId.Value);
				
				foreach(DAONotification daoNotification in daoNotificationCollection)
					_boNotificationCollection.Add(new BONotification(daoNotification));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddNotification
		///This method persists a BONotification object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BONotification
		///</parameters>
		public virtual void AddNotification(BONotification boNotification)
		{
			DAONotification daoNotification = new DAONotification();
			RegisterDataObject(daoNotification);
			BeginTransaction("addNotification");
			try
			{
				daoNotification.NotificationId = boNotification.NotificationId;
				daoNotification.NotificationDate = boNotification.NotificationDate;
				daoNotification.ScheduleTime = boNotification.ScheduleTime;
				daoNotification.NotificationDateTime = boNotification.NotificationDateTime;
				daoNotification.Message = boNotification.Message;
				daoNotification.NotificationTypeId = boNotification.NotificationTypeId;
				daoNotification.UserGroupId = boNotification.UserGroupId;
				daoNotification.UserId = boNotification.UserId;
				daoNotification.CBy = boNotification.CBy;
				daoNotification.CDate = boNotification.CDate;
				daoNotification.EBy = boNotification.EBy;
				daoNotification.EDate = boNotification.EDate;
				daoNotification.PriorityId = _priorityId.Value;
				daoNotification.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boNotification = new BONotification(daoNotification);
				if(_boNotificationCollection != null)
					_boNotificationCollection.Add(boNotification);
			}
			catch
			{
				RollbackTransaction("addNotification");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllNotification
		///This method deletes all BONotification objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllNotification()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllNotification");
			try
			{
				DAONotification.DeleteAllByPriorityId(ConnectionProvider, _priorityId.Value);
				CommitTransaction();
				if(_boNotificationCollection != null)
				{
					_boNotificationCollection.Clear();
					_boNotificationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllNotification");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderCollection
		///This method loads the internal collection of BOSalesOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderCollection()
		{
			try
			{
				_boSalesOrderCollection = new List<BOSalesOrder>();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAllByPriorityTypeId(_priorityId.Value);
				
				foreach(DAOSalesOrder daoSalesOrder in daoSalesOrderCollection)
					_boSalesOrderCollection.Add(new BOSalesOrder(daoSalesOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrder
		///This method persists a BOSalesOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual void AddSalesOrder(BOSalesOrder boSalesOrder)
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("addSalesOrder");
			try
			{
				daoSalesOrder.SalesId = boSalesOrder.SalesId;
				daoSalesOrder.SalesCode = boSalesOrder.SalesCode;
				daoSalesOrder.SalesOrderTypeId = boSalesOrder.SalesOrderTypeId;
				daoSalesOrder.ClientId = boSalesOrder.ClientId;
				daoSalesOrder.BranchId = boSalesOrder.BranchId;
				daoSalesOrder.AgentId = boSalesOrder.AgentId;
				daoSalesOrder.RepresentativeId = boSalesOrder.RepresentativeId;
				daoSalesOrder.StoreId = boSalesOrder.StoreId;
				daoSalesOrder.PaymentTermId = boSalesOrder.PaymentTermId;
				daoSalesOrder.SalesDate = boSalesOrder.SalesDate;
				daoSalesOrder.SalesTime = boSalesOrder.SalesTime;
				daoSalesOrder.SalesOrderStatusId = boSalesOrder.SalesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = boSalesOrder.SalesOrderSourceId;
				daoSalesOrder.SalesChannelId = boSalesOrder.SalesChannelId;
				daoSalesOrder.SalesPoolId = boSalesOrder.SalesPoolId;
				daoSalesOrder.IsOpened = boSalesOrder.IsOpened;
				daoSalesOrder.OpenValue = boSalesOrder.OpenValue;
				daoSalesOrder.Latitude = boSalesOrder.Latitude;
				daoSalesOrder.Longitude = boSalesOrder.Longitude;
				daoSalesOrder.ItemTotal = boSalesOrder.ItemTotal;
				daoSalesOrder.ItemDiscountTotal = boSalesOrder.ItemDiscountTotal;
				daoSalesOrder.TaxTotal = boSalesOrder.TaxTotal;
				daoSalesOrder.CashDiscountTotal = boSalesOrder.CashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = boSalesOrder.CustomDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = boSalesOrder.CustomDiscountValue;
				daoSalesOrder.CustomDiscountTotal = boSalesOrder.CustomDiscountTotal;
				daoSalesOrder.DeliveryTotal = boSalesOrder.DeliveryTotal;
				daoSalesOrder.NetTotal = boSalesOrder.NetTotal;
				daoSalesOrder.Notes = boSalesOrder.Notes;
				daoSalesOrder.InvoiceRetry = boSalesOrder.InvoiceRetry;
				daoSalesOrder.HasError = boSalesOrder.HasError;
				daoSalesOrder.IsInvoiced = boSalesOrder.IsInvoiced;
				daoSalesOrder.InvoiceCode = boSalesOrder.InvoiceCode;
				daoSalesOrder.InvoiceDate = boSalesOrder.InvoiceDate;
				daoSalesOrder.CreateDate = boSalesOrder.CreateDate;
				daoSalesOrder.RecId = boSalesOrder.RecId;
				daoSalesOrder.CBy = boSalesOrder.CBy;
				daoSalesOrder.CDate = boSalesOrder.CDate;
				daoSalesOrder.EBy = boSalesOrder.EBy;
				daoSalesOrder.EDate = boSalesOrder.EDate;
				daoSalesOrder.SalesPerenId = boSalesOrder.SalesPerenId;
				daoSalesOrder.Inprogress = boSalesOrder.Inprogress;
				daoSalesOrder.IsBackoffice = boSalesOrder.IsBackoffice;
				daoSalesOrder.IsDeleted = boSalesOrder.IsDeleted;
				daoSalesOrder.PriorityTypeId = _priorityId.Value;
				daoSalesOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrder = new BOSalesOrder(daoSalesOrder);
				if(_boSalesOrderCollection != null)
					_boSalesOrderCollection.Add(boSalesOrder);
			}
			catch
			{
				RollbackTransaction("addSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrder
		///This method deletes all BOSalesOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrder");
			try
			{
				DAOSalesOrder.DeleteAllByPriorityTypeId(ConnectionProvider, _priorityId.Value);
				CommitTransaction();
				if(_boSalesOrderCollection != null)
				{
					_boSalesOrderCollection.Clear();
					_boSalesOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrder");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? PriorityId
		{
			get
			{
				 return _priorityId;
			}
			set
			{
				_priorityId = value;
				_isDirty = true;
			}
		}
		
		public virtual string PriorityCode
		{
			get
			{
				 return _priorityCode;
			}
			set
			{
				_priorityCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string PriorityNameAr
		{
			get
			{
				 return _priorityNameAr;
			}
			set
			{
				_priorityNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string PriorityNameEn
		{
			get
			{
				 return _priorityNameEn;
			}
			set
			{
				_priorityNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
