/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientPaymentVw.
	///</Summary>
	public partial class BOClientPaymentVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _paymentId;
		protected Int32? _clientId;
		protected DateTime? _paymentDate;
		protected Int32? _paymentMethodId;
		protected decimal? _paymentValue;
		protected string _paymentCode;
		protected Int32? _representativeId;
		protected Int32? _bankId;
		protected DateTime? _dueDate;
		protected string _bankNameEn;
		protected string _bankNameAr;
		protected string _representativeCode;
		protected string _representativeNameAr;
		protected string _representativeNameEn;
		protected string _paymentMethodNameAr;
		protected string _paymentMethodNameEn;
		protected decimal? _expr1;
		protected bool? _isRejected;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientPaymentVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientPaymentVw
		///</parameters>
		protected internal BOClientPaymentVw(DAOClientPaymentVw daoClientPaymentVw)
		{
			try
			{
				_paymentId = daoClientPaymentVw.PaymentId;
				_clientId = daoClientPaymentVw.ClientId;
				_paymentDate = daoClientPaymentVw.PaymentDate;
				_paymentMethodId = daoClientPaymentVw.PaymentMethodId;
				_paymentValue = daoClientPaymentVw.PaymentValue;
				_paymentCode = daoClientPaymentVw.PaymentCode;
				_representativeId = daoClientPaymentVw.RepresentativeId;
				_bankId = daoClientPaymentVw.BankId;
				_dueDate = daoClientPaymentVw.DueDate;
				_bankNameEn = daoClientPaymentVw.BankNameEn;
				_bankNameAr = daoClientPaymentVw.BankNameAr;
				_representativeCode = daoClientPaymentVw.RepresentativeCode;
				_representativeNameAr = daoClientPaymentVw.RepresentativeNameAr;
				_representativeNameEn = daoClientPaymentVw.RepresentativeNameEn;
				_paymentMethodNameAr = daoClientPaymentVw.PaymentMethodNameAr;
				_paymentMethodNameEn = daoClientPaymentVw.PaymentMethodNameEn;
				_expr1 = daoClientPaymentVw.Expr1;
				_isRejected = daoClientPaymentVw.IsRejected;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ClientPaymentVwCollection
		///This method returns the collection of BOClientPaymentVw objects
		///</Summary>
		///<returns>
		///List[BOClientPaymentVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientPaymentVw> ClientPaymentVwCollection()
		{
			try
			{
				IList<BOClientPaymentVw> boClientPaymentVwCollection = new List<BOClientPaymentVw>();
				IList<DAOClientPaymentVw> daoClientPaymentVwCollection = DAOClientPaymentVw.SelectAll();
			
				foreach(DAOClientPaymentVw daoClientPaymentVw in daoClientPaymentVwCollection)
					boClientPaymentVwCollection.Add(new BOClientPaymentVw(daoClientPaymentVw));
			
				return boClientPaymentVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPaymentVwCollectionCount
		///This method returns the collection count of BOClientPaymentVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientPaymentVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientPaymentVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientPaymentVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientPaymentVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPaymentVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientPaymentVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientPaymentVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientPaymentVw> daoClientPaymentVwCollection = DAOClientPaymentVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientPaymentVw resdaoClientPaymentVw in daoClientPaymentVwCollection)
					boClientPaymentVwCollection.Add((T)(object)new BOClientPaymentVw(resdaoClientPaymentVw));
			
				return boClientPaymentVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientPaymentVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientPaymentVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientPaymentVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? PaymentId
		{
			get
			{
				 return _paymentId;
			}
			set
			{
				_paymentId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? PaymentDate
		{
			get
			{
				 return _paymentDate;
			}
			set
			{
				_paymentDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PaymentMethodId
		{
			get
			{
				 return _paymentMethodId;
			}
			set
			{
				_paymentMethodId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? PaymentValue
		{
			get
			{
				 return _paymentValue;
			}
			set
			{
				_paymentValue = value;
				_isDirty = true;
			}
		}
		
		public virtual string PaymentCode
		{
			get
			{
				 return _paymentCode;
			}
			set
			{
				_paymentCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RepresentativeId
		{
			get
			{
				 return _representativeId;
			}
			set
			{
				_representativeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BankId
		{
			get
			{
				 return _bankId;
			}
			set
			{
				_bankId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? DueDate
		{
			get
			{
				 return _dueDate;
			}
			set
			{
				_dueDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string BankNameEn
		{
			get
			{
				 return _bankNameEn;
			}
			set
			{
				_bankNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BankNameAr
		{
			get
			{
				 return _bankNameAr;
			}
			set
			{
				_bankNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeCode
		{
			get
			{
				 return _representativeCode;
			}
			set
			{
				_representativeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeNameAr
		{
			get
			{
				 return _representativeNameAr;
			}
			set
			{
				_representativeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string RepresentativeNameEn
		{
			get
			{
				 return _representativeNameEn;
			}
			set
			{
				_representativeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string PaymentMethodNameAr
		{
			get
			{
				 return _paymentMethodNameAr;
			}
			set
			{
				_paymentMethodNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string PaymentMethodNameEn
		{
			get
			{
				 return _paymentMethodNameEn;
			}
			set
			{
				_paymentMethodNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Expr1
		{
			get
			{
				 return _expr1;
			}
			set
			{
				_expr1 = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsRejected
		{
			get
			{
				 return _isRejected;
			}
			set
			{
				_isRejected = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
