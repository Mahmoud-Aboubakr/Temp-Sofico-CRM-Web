/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientCreditLimit.
	///</Summary>
	public partial class BOClientCreditLimit : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _limitId;
		protected Int32? _clientId;
		protected Int32? _limitYear;
		protected Int32? _limitMonth;
		protected decimal? _limitValue;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientCreditLimit()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 limitId
		///</parameters>
		public BOClientCreditLimit(Int64 limitId)
		{
			try
			{
				DAOClientCreditLimit daoClientCreditLimit = DAOClientCreditLimit.SelectOne(limitId);
				_limitId = daoClientCreditLimit.LimitId;
				_clientId = daoClientCreditLimit.ClientId;
				_limitYear = daoClientCreditLimit.LimitYear;
				_limitMonth = daoClientCreditLimit.LimitMonth;
				_limitValue = daoClientCreditLimit.LimitValue;
				_cBy = daoClientCreditLimit.CBy;
				_cDate = daoClientCreditLimit.CDate;
				_eBy = daoClientCreditLimit.EBy;
				_eDate = daoClientCreditLimit.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientCreditLimit
		///</parameters>
		protected internal BOClientCreditLimit(DAOClientCreditLimit daoClientCreditLimit)
		{
			try
			{
				_limitId = daoClientCreditLimit.LimitId;
				_clientId = daoClientCreditLimit.ClientId;
				_limitYear = daoClientCreditLimit.LimitYear;
				_limitMonth = daoClientCreditLimit.LimitMonth;
				_limitValue = daoClientCreditLimit.LimitValue;
				_cBy = daoClientCreditLimit.CBy;
				_cDate = daoClientCreditLimit.CDate;
				_eBy = daoClientCreditLimit.EBy;
				_eDate = daoClientCreditLimit.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClientCreditLimit record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClientCreditLimit daoClientCreditLimit = new DAOClientCreditLimit();
			RegisterDataObject(daoClientCreditLimit);
			BeginTransaction("savenewBOClientCreditLimit");
			try
			{
				daoClientCreditLimit.ClientId = _clientId;
				daoClientCreditLimit.LimitYear = _limitYear;
				daoClientCreditLimit.LimitMonth = _limitMonth;
				daoClientCreditLimit.LimitValue = _limitValue;
				daoClientCreditLimit.CBy = _cBy;
				daoClientCreditLimit.CDate = _cDate;
				daoClientCreditLimit.EBy = _eBy;
				daoClientCreditLimit.EDate = _eDate;
				daoClientCreditLimit.Insert();
				CommitTransaction();
				
				_limitId = daoClientCreditLimit.LimitId;
				_clientId = daoClientCreditLimit.ClientId;
				_limitYear = daoClientCreditLimit.LimitYear;
				_limitMonth = daoClientCreditLimit.LimitMonth;
				_limitValue = daoClientCreditLimit.LimitValue;
				_cBy = daoClientCreditLimit.CBy;
				_cDate = daoClientCreditLimit.CDate;
				_eBy = daoClientCreditLimit.EBy;
				_eDate = daoClientCreditLimit.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClientCreditLimit");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClientCreditLimit record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientCreditLimit
		///</parameters>
		public virtual void Update()
		{
			DAOClientCreditLimit daoClientCreditLimit = new DAOClientCreditLimit();
			RegisterDataObject(daoClientCreditLimit);
			BeginTransaction("updateBOClientCreditLimit");
			try
			{
				daoClientCreditLimit.LimitId = _limitId;
				daoClientCreditLimit.ClientId = _clientId;
				daoClientCreditLimit.LimitYear = _limitYear;
				daoClientCreditLimit.LimitMonth = _limitMonth;
				daoClientCreditLimit.LimitValue = _limitValue;
				daoClientCreditLimit.CBy = _cBy;
				daoClientCreditLimit.CDate = _cDate;
				daoClientCreditLimit.EBy = _eBy;
				daoClientCreditLimit.EDate = _eDate;
				daoClientCreditLimit.Update();
				CommitTransaction();
				
				_limitId = daoClientCreditLimit.LimitId;
				_clientId = daoClientCreditLimit.ClientId;
				_limitYear = daoClientCreditLimit.LimitYear;
				_limitMonth = daoClientCreditLimit.LimitMonth;
				_limitValue = daoClientCreditLimit.LimitValue;
				_cBy = daoClientCreditLimit.CBy;
				_cDate = daoClientCreditLimit.CDate;
				_eBy = daoClientCreditLimit.EBy;
				_eDate = daoClientCreditLimit.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClientCreditLimit");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClientCreditLimit record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClientCreditLimit daoClientCreditLimit = new DAOClientCreditLimit();
			RegisterDataObject(daoClientCreditLimit);
			BeginTransaction("deleteBOClientCreditLimit");
			try
			{
				daoClientCreditLimit.LimitId = _limitId;
				daoClientCreditLimit.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClientCreditLimit");
				throw;
			}
		}
		
		///<Summary>
		///ClientCreditLimitCollection
		///This method returns the collection of BOClientCreditLimit objects
		///</Summary>
		///<returns>
		///List[BOClientCreditLimit]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientCreditLimit> ClientCreditLimitCollection()
		{
			try
			{
				IList<BOClientCreditLimit> boClientCreditLimitCollection = new List<BOClientCreditLimit>();
				IList<DAOClientCreditLimit> daoClientCreditLimitCollection = DAOClientCreditLimit.SelectAll();
			
				foreach(DAOClientCreditLimit daoClientCreditLimit in daoClientCreditLimitCollection)
					boClientCreditLimitCollection.Add(new BOClientCreditLimit(daoClientCreditLimit));
			
				return boClientCreditLimitCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCreditLimitCollectionCount
		///This method returns the collection count of BOClientCreditLimit objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientCreditLimitCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientCreditLimit.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientCreditLimit>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientCreditLimit.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCreditLimitCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientCreditLimit objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientCreditLimitCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientCreditLimit> daoClientCreditLimitCollection = DAOClientCreditLimit.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientCreditLimit resdaoClientCreditLimit in daoClientCreditLimitCollection)
					boClientCreditLimitCollection.Add((T)(object)new BOClientCreditLimit(resdaoClientCreditLimit));
			
				return boClientCreditLimitCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientCreditLimitCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientCreditLimit objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientCreditLimit.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? LimitId
		{
			get
			{
				 return _limitId;
			}
			set
			{
				_limitId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? LimitYear
		{
			get
			{
				 return _limitYear;
			}
			set
			{
				_limitYear = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? LimitMonth
		{
			get
			{
				 return _limitMonth;
			}
			set
			{
				_limitMonth = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? LimitValue
		{
			get
			{
				 return _limitValue;
			}
			set
			{
				_limitValue = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
