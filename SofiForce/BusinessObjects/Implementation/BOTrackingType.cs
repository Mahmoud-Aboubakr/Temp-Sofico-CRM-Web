/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTrackingType.
	///It maintains a collection of BOAppUserLocation objects.
	///</Summary>
	public partial class BOTrackingType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _trackingTypeId;
		protected string _trackingTypeCode;
		protected string _trackingTypeNameEn;
		protected string _trackingTypeNameAr;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _icon;
		protected string _color;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppUserLocation> _boAppUserLocationCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOTrackingType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 trackingTypeId
		///</parameters>
		public BOTrackingType(Int32 trackingTypeId)
		{
			try
			{
				DAOTrackingType daoTrackingType = DAOTrackingType.SelectOne(trackingTypeId);
				_trackingTypeId = daoTrackingType.TrackingTypeId;
				_trackingTypeCode = daoTrackingType.TrackingTypeCode;
				_trackingTypeNameEn = daoTrackingType.TrackingTypeNameEn;
				_trackingTypeNameAr = daoTrackingType.TrackingTypeNameAr;
				_isActive = daoTrackingType.IsActive;
				_canEdit = daoTrackingType.CanEdit;
				_canDelete = daoTrackingType.CanDelete;
				_displayOrder = daoTrackingType.DisplayOrder;
				_icon = daoTrackingType.Icon;
				_color = daoTrackingType.Color;
				_cBy = daoTrackingType.CBy;
				_cDate = daoTrackingType.CDate;
				_eBy = daoTrackingType.EBy;
				_eDate = daoTrackingType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTrackingType
		///</parameters>
		protected internal BOTrackingType(DAOTrackingType daoTrackingType)
		{
			try
			{
				_trackingTypeId = daoTrackingType.TrackingTypeId;
				_trackingTypeCode = daoTrackingType.TrackingTypeCode;
				_trackingTypeNameEn = daoTrackingType.TrackingTypeNameEn;
				_trackingTypeNameAr = daoTrackingType.TrackingTypeNameAr;
				_isActive = daoTrackingType.IsActive;
				_canEdit = daoTrackingType.CanEdit;
				_canDelete = daoTrackingType.CanDelete;
				_displayOrder = daoTrackingType.DisplayOrder;
				_icon = daoTrackingType.Icon;
				_color = daoTrackingType.Color;
				_cBy = daoTrackingType.CBy;
				_cDate = daoTrackingType.CDate;
				_eBy = daoTrackingType.EBy;
				_eDate = daoTrackingType.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new TrackingType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOTrackingType daoTrackingType = new DAOTrackingType();
			RegisterDataObject(daoTrackingType);
			BeginTransaction("savenewBOTrackingType");
			try
			{
				daoTrackingType.TrackingTypeId = _trackingTypeId;
				daoTrackingType.TrackingTypeCode = _trackingTypeCode;
				daoTrackingType.TrackingTypeNameEn = _trackingTypeNameEn;
				daoTrackingType.TrackingTypeNameAr = _trackingTypeNameAr;
				daoTrackingType.IsActive = _isActive;
				daoTrackingType.CanEdit = _canEdit;
				daoTrackingType.CanDelete = _canDelete;
				daoTrackingType.DisplayOrder = _displayOrder;
				daoTrackingType.Icon = _icon;
				daoTrackingType.Color = _color;
				daoTrackingType.CBy = _cBy;
				daoTrackingType.CDate = _cDate;
				daoTrackingType.EBy = _eBy;
				daoTrackingType.EDate = _eDate;
				daoTrackingType.Insert();
				CommitTransaction();
				
				_trackingTypeId = daoTrackingType.TrackingTypeId;
				_trackingTypeCode = daoTrackingType.TrackingTypeCode;
				_trackingTypeNameEn = daoTrackingType.TrackingTypeNameEn;
				_trackingTypeNameAr = daoTrackingType.TrackingTypeNameAr;
				_isActive = daoTrackingType.IsActive;
				_canEdit = daoTrackingType.CanEdit;
				_canDelete = daoTrackingType.CanDelete;
				_displayOrder = daoTrackingType.DisplayOrder;
				_icon = daoTrackingType.Icon;
				_color = daoTrackingType.Color;
				_cBy = daoTrackingType.CBy;
				_cDate = daoTrackingType.CDate;
				_eBy = daoTrackingType.EBy;
				_eDate = daoTrackingType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOTrackingType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one TrackingType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTrackingType
		///</parameters>
		public virtual void Update()
		{
			DAOTrackingType daoTrackingType = new DAOTrackingType();
			RegisterDataObject(daoTrackingType);
			BeginTransaction("updateBOTrackingType");
			try
			{
				daoTrackingType.TrackingTypeId = _trackingTypeId;
				daoTrackingType.TrackingTypeCode = _trackingTypeCode;
				daoTrackingType.TrackingTypeNameEn = _trackingTypeNameEn;
				daoTrackingType.TrackingTypeNameAr = _trackingTypeNameAr;
				daoTrackingType.IsActive = _isActive;
				daoTrackingType.CanEdit = _canEdit;
				daoTrackingType.CanDelete = _canDelete;
				daoTrackingType.DisplayOrder = _displayOrder;
				daoTrackingType.Icon = _icon;
				daoTrackingType.Color = _color;
				daoTrackingType.CBy = _cBy;
				daoTrackingType.CDate = _cDate;
				daoTrackingType.EBy = _eBy;
				daoTrackingType.EDate = _eDate;
				daoTrackingType.Update();
				CommitTransaction();
				
				_trackingTypeId = daoTrackingType.TrackingTypeId;
				_trackingTypeCode = daoTrackingType.TrackingTypeCode;
				_trackingTypeNameEn = daoTrackingType.TrackingTypeNameEn;
				_trackingTypeNameAr = daoTrackingType.TrackingTypeNameAr;
				_isActive = daoTrackingType.IsActive;
				_canEdit = daoTrackingType.CanEdit;
				_canDelete = daoTrackingType.CanDelete;
				_displayOrder = daoTrackingType.DisplayOrder;
				_icon = daoTrackingType.Icon;
				_color = daoTrackingType.Color;
				_cBy = daoTrackingType.CBy;
				_cDate = daoTrackingType.CDate;
				_eBy = daoTrackingType.EBy;
				_eDate = daoTrackingType.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOTrackingType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one TrackingType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOTrackingType daoTrackingType = new DAOTrackingType();
			RegisterDataObject(daoTrackingType);
			BeginTransaction("deleteBOTrackingType");
			try
			{
				daoTrackingType.TrackingTypeId = _trackingTypeId;
				daoTrackingType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOTrackingType");
				throw;
			}
		}
		
		///<Summary>
		///TrackingTypeCollection
		///This method returns the collection of BOTrackingType objects
		///</Summary>
		///<returns>
		///List[BOTrackingType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTrackingType> TrackingTypeCollection()
		{
			try
			{
				IList<BOTrackingType> boTrackingTypeCollection = new List<BOTrackingType>();
				IList<DAOTrackingType> daoTrackingTypeCollection = DAOTrackingType.SelectAll();
			
				foreach(DAOTrackingType daoTrackingType in daoTrackingTypeCollection)
					boTrackingTypeCollection.Add(new BOTrackingType(daoTrackingType));
			
				return boTrackingTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TrackingTypeCollectionCount
		///This method returns the collection count of BOTrackingType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TrackingTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOTrackingType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserLocationCollection
		///This method returns its collection of BOAppUserLocation objects
		///</Summary>
		///<returns>
		///IList[BOAppUserLocation]
		///</returns>
		///<parameters>
		///BOTrackingType
		///</parameters>
		public virtual IList<BOAppUserLocation> AppUserLocationCollection()
		{
			try
			{
				if(_boAppUserLocationCollection == null)
					LoadAppUserLocationCollection();
				
				return _boAppUserLocationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOTrackingType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOTrackingType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TrackingTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOTrackingType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boTrackingTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOTrackingType> daoTrackingTypeCollection = DAOTrackingType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOTrackingType resdaoTrackingType in daoTrackingTypeCollection)
					boTrackingTypeCollection.Add((T)(object)new BOTrackingType(resdaoTrackingType));
			
				return boTrackingTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TrackingTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOTrackingType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOTrackingType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserLocationCollection
		///This method loads the internal collection of BOAppUserLocation objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserLocationCollection()
		{
			try
			{
				_boAppUserLocationCollection = new List<BOAppUserLocation>();
				IList<DAOAppUserLocation> daoAppUserLocationCollection = DAOAppUserLocation.SelectAllByTrackingTypeId(_trackingTypeId.Value);
				
				foreach(DAOAppUserLocation daoAppUserLocation in daoAppUserLocationCollection)
					_boAppUserLocationCollection.Add(new BOAppUserLocation(daoAppUserLocation));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserLocation
		///This method persists a BOAppUserLocation object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserLocation
		///</parameters>
		public virtual void AddAppUserLocation(BOAppUserLocation boAppUserLocation)
		{
			DAOAppUserLocation daoAppUserLocation = new DAOAppUserLocation();
			RegisterDataObject(daoAppUserLocation);
			BeginTransaction("addAppUserLocation");
			try
			{
				daoAppUserLocation.TrackingId = boAppUserLocation.TrackingId;
				daoAppUserLocation.UserId = boAppUserLocation.UserId;
				daoAppUserLocation.TrackingDate = boAppUserLocation.TrackingDate;
				daoAppUserLocation.TrackingTime = boAppUserLocation.TrackingTime;
				daoAppUserLocation.Latitude = boAppUserLocation.Latitude;
				daoAppUserLocation.Longitude = boAppUserLocation.Longitude;
				daoAppUserLocation.IsPositive = boAppUserLocation.IsPositive;
				daoAppUserLocation.SalesId = boAppUserLocation.SalesId;
				daoAppUserLocation.ClientId = boAppUserLocation.ClientId;
				daoAppUserLocation.InZone = boAppUserLocation.InZone;
				daoAppUserLocation.Distance = boAppUserLocation.Distance;
				daoAppUserLocation.TrackingTypeId = _trackingTypeId.Value;
				daoAppUserLocation.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserLocation = new BOAppUserLocation(daoAppUserLocation);
				if(_boAppUserLocationCollection != null)
					_boAppUserLocationCollection.Add(boAppUserLocation);
			}
			catch
			{
				RollbackTransaction("addAppUserLocation");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserLocation
		///This method deletes all BOAppUserLocation objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserLocation()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserLocation");
			try
			{
				DAOAppUserLocation.DeleteAllByTrackingTypeId(ConnectionProvider, _trackingTypeId.Value);
				CommitTransaction();
				if(_boAppUserLocationCollection != null)
				{
					_boAppUserLocationCollection.Clear();
					_boAppUserLocationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserLocation");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? TrackingTypeId
		{
			get
			{
				 return _trackingTypeId;
			}
			set
			{
				_trackingTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string TrackingTypeCode
		{
			get
			{
				 return _trackingTypeCode;
			}
			set
			{
				_trackingTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string TrackingTypeNameEn
		{
			get
			{
				 return _trackingTypeNameEn;
			}
			set
			{
				_trackingTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string TrackingTypeNameAr
		{
			get
			{
				 return _trackingTypeNameAr;
			}
			set
			{
				_trackingTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
