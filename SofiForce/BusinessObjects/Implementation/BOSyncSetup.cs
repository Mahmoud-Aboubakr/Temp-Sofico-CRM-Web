/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSyncSetup.
	///It maintains a collection of BOSyncSetupDetail objects.
	///</Summary>
	public partial class BOSyncSetup : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _setupId;
		protected string _syncCode;
		protected string _syncNameAr;
		protected string _syncNameEn;
		protected string _icon;
		protected string _color;
		protected bool? _isActive;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOSyncSetupDetail> _boSyncSetupDetailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSyncSetup()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 setupId
		///</parameters>
		public BOSyncSetup(Int32 setupId)
		{
			try
			{
				DAOSyncSetup daoSyncSetup = DAOSyncSetup.SelectOne(setupId);
				_setupId = daoSyncSetup.SetupId;
				_syncCode = daoSyncSetup.SyncCode;
				_syncNameAr = daoSyncSetup.SyncNameAr;
				_syncNameEn = daoSyncSetup.SyncNameEn;
				_icon = daoSyncSetup.Icon;
				_color = daoSyncSetup.Color;
				_isActive = daoSyncSetup.IsActive;
				_cBy = daoSyncSetup.CBy;
				_cDate = daoSyncSetup.CDate;
				_eBy = daoSyncSetup.EBy;
				_eDate = daoSyncSetup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSyncSetup
		///</parameters>
		protected internal BOSyncSetup(DAOSyncSetup daoSyncSetup)
		{
			try
			{
				_setupId = daoSyncSetup.SetupId;
				_syncCode = daoSyncSetup.SyncCode;
				_syncNameAr = daoSyncSetup.SyncNameAr;
				_syncNameEn = daoSyncSetup.SyncNameEn;
				_icon = daoSyncSetup.Icon;
				_color = daoSyncSetup.Color;
				_isActive = daoSyncSetup.IsActive;
				_cBy = daoSyncSetup.CBy;
				_cDate = daoSyncSetup.CDate;
				_eBy = daoSyncSetup.EBy;
				_eDate = daoSyncSetup.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SyncSetup record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSyncSetup daoSyncSetup = new DAOSyncSetup();
			RegisterDataObject(daoSyncSetup);
			BeginTransaction("savenewBOSyncSetup");
			try
			{
				daoSyncSetup.SetupId = _setupId;
				daoSyncSetup.SyncCode = _syncCode;
				daoSyncSetup.SyncNameAr = _syncNameAr;
				daoSyncSetup.SyncNameEn = _syncNameEn;
				daoSyncSetup.Icon = _icon;
				daoSyncSetup.Color = _color;
				daoSyncSetup.IsActive = _isActive;
				daoSyncSetup.CBy = _cBy;
				daoSyncSetup.CDate = _cDate;
				daoSyncSetup.EBy = _eBy;
				daoSyncSetup.EDate = _eDate;
				daoSyncSetup.Insert();
				CommitTransaction();
				
				_setupId = daoSyncSetup.SetupId;
				_syncCode = daoSyncSetup.SyncCode;
				_syncNameAr = daoSyncSetup.SyncNameAr;
				_syncNameEn = daoSyncSetup.SyncNameEn;
				_icon = daoSyncSetup.Icon;
				_color = daoSyncSetup.Color;
				_isActive = daoSyncSetup.IsActive;
				_cBy = daoSyncSetup.CBy;
				_cDate = daoSyncSetup.CDate;
				_eBy = daoSyncSetup.EBy;
				_eDate = daoSyncSetup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSyncSetup");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one SyncSetup record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSyncSetup
		///</parameters>
		public virtual void Update()
		{
			DAOSyncSetup daoSyncSetup = new DAOSyncSetup();
			RegisterDataObject(daoSyncSetup);
			BeginTransaction("updateBOSyncSetup");
			try
			{
				daoSyncSetup.SetupId = _setupId;
				daoSyncSetup.SyncCode = _syncCode;
				daoSyncSetup.SyncNameAr = _syncNameAr;
				daoSyncSetup.SyncNameEn = _syncNameEn;
				daoSyncSetup.Icon = _icon;
				daoSyncSetup.Color = _color;
				daoSyncSetup.IsActive = _isActive;
				daoSyncSetup.CBy = _cBy;
				daoSyncSetup.CDate = _cDate;
				daoSyncSetup.EBy = _eBy;
				daoSyncSetup.EDate = _eDate;
				daoSyncSetup.Update();
				CommitTransaction();
				
				_setupId = daoSyncSetup.SetupId;
				_syncCode = daoSyncSetup.SyncCode;
				_syncNameAr = daoSyncSetup.SyncNameAr;
				_syncNameEn = daoSyncSetup.SyncNameEn;
				_icon = daoSyncSetup.Icon;
				_color = daoSyncSetup.Color;
				_isActive = daoSyncSetup.IsActive;
				_cBy = daoSyncSetup.CBy;
				_cDate = daoSyncSetup.CDate;
				_eBy = daoSyncSetup.EBy;
				_eDate = daoSyncSetup.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSyncSetup");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SyncSetup record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSyncSetup daoSyncSetup = new DAOSyncSetup();
			RegisterDataObject(daoSyncSetup);
			BeginTransaction("deleteBOSyncSetup");
			try
			{
				daoSyncSetup.SetupId = _setupId;
				daoSyncSetup.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSyncSetup");
				throw;
			}
		}
		
		///<Summary>
		///SyncSetupCollection
		///This method returns the collection of BOSyncSetup objects
		///</Summary>
		///<returns>
		///List[BOSyncSetup]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSyncSetup> SyncSetupCollection()
		{
			try
			{
				IList<BOSyncSetup> boSyncSetupCollection = new List<BOSyncSetup>();
				IList<DAOSyncSetup> daoSyncSetupCollection = DAOSyncSetup.SelectAll();
			
				foreach(DAOSyncSetup daoSyncSetup in daoSyncSetupCollection)
					boSyncSetupCollection.Add(new BOSyncSetup(daoSyncSetup));
			
				return boSyncSetupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SyncSetupCollectionCount
		///This method returns the collection count of BOSyncSetup objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SyncSetupCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSyncSetup.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SyncSetupDetailCollection
		///This method returns its collection of BOSyncSetupDetail objects
		///</Summary>
		///<returns>
		///IList[BOSyncSetupDetail]
		///</returns>
		///<parameters>
		///BOSyncSetup
		///</parameters>
		public virtual IList<BOSyncSetupDetail> SyncSetupDetailCollection()
		{
			try
			{
				if(_boSyncSetupDetailCollection == null)
					LoadSyncSetupDetailCollection();
				
				return _boSyncSetupDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSyncSetup>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSyncSetup.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SyncSetupCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSyncSetup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSyncSetupCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSyncSetup> daoSyncSetupCollection = DAOSyncSetup.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSyncSetup resdaoSyncSetup in daoSyncSetupCollection)
					boSyncSetupCollection.Add((T)(object)new BOSyncSetup(resdaoSyncSetup));
			
				return boSyncSetupCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SyncSetupCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSyncSetup objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSyncSetup.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadSyncSetupDetailCollection
		///This method loads the internal collection of BOSyncSetupDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSyncSetupDetailCollection()
		{
			try
			{
				_boSyncSetupDetailCollection = new List<BOSyncSetupDetail>();
				IList<DAOSyncSetupDetail> daoSyncSetupDetailCollection = DAOSyncSetupDetail.SelectAllBySetupId(_setupId.Value);
				
				foreach(DAOSyncSetupDetail daoSyncSetupDetail in daoSyncSetupDetailCollection)
					_boSyncSetupDetailCollection.Add(new BOSyncSetupDetail(daoSyncSetupDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSyncSetupDetail
		///This method persists a BOSyncSetupDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSyncSetupDetail
		///</parameters>
		public virtual void AddSyncSetupDetail(BOSyncSetupDetail boSyncSetupDetail)
		{
			DAOSyncSetupDetail daoSyncSetupDetail = new DAOSyncSetupDetail();
			RegisterDataObject(daoSyncSetupDetail);
			BeginTransaction("addSyncSetupDetail");
			try
			{
				daoSyncSetupDetail.DetailId = boSyncSetupDetail.DetailId;
				daoSyncSetupDetail.UserId = boSyncSetupDetail.UserId;
				daoSyncSetupDetail.SyncDate = boSyncSetupDetail.SyncDate;
				daoSyncSetupDetail.Payload1 = boSyncSetupDetail.Payload1;
				daoSyncSetupDetail.Payload2 = boSyncSetupDetail.Payload2;
				daoSyncSetupDetail.Payload3 = boSyncSetupDetail.Payload3;
				daoSyncSetupDetail.Payload4 = boSyncSetupDetail.Payload4;
				daoSyncSetupDetail.IsDone = boSyncSetupDetail.IsDone;
				daoSyncSetupDetail.Inprogress = boSyncSetupDetail.Inprogress;
				daoSyncSetupDetail.Message = boSyncSetupDetail.Message;
				daoSyncSetupDetail.CBy = boSyncSetupDetail.CBy;
				daoSyncSetupDetail.CDate = boSyncSetupDetail.CDate;
				daoSyncSetupDetail.EBy = boSyncSetupDetail.EBy;
				daoSyncSetupDetail.EDate = boSyncSetupDetail.EDate;
				daoSyncSetupDetail.SetupId = _setupId.Value;
				daoSyncSetupDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSyncSetupDetail = new BOSyncSetupDetail(daoSyncSetupDetail);
				if(_boSyncSetupDetailCollection != null)
					_boSyncSetupDetailCollection.Add(boSyncSetupDetail);
			}
			catch
			{
				RollbackTransaction("addSyncSetupDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSyncSetupDetail
		///This method deletes all BOSyncSetupDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSyncSetupDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSyncSetupDetail");
			try
			{
				DAOSyncSetupDetail.DeleteAllBySetupId(ConnectionProvider, _setupId.Value);
				CommitTransaction();
				if(_boSyncSetupDetailCollection != null)
				{
					_boSyncSetupDetailCollection.Clear();
					_boSyncSetupDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSyncSetupDetail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SetupId
		{
			get
			{
				 return _setupId;
			}
			set
			{
				_setupId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SyncCode
		{
			get
			{
				 return _syncCode;
			}
			set
			{
				_syncCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string SyncNameAr
		{
			get
			{
				 return _syncNameAr;
			}
			set
			{
				_syncNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string SyncNameEn
		{
			get
			{
				 return _syncNameEn;
			}
			set
			{
				_syncNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
