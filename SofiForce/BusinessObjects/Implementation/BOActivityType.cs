/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOActivityType.
	///It maintains a collection of BOClientActivity objects.
	///</Summary>
	public partial class BOActivityType : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _activityTypeId;
		protected string _activityTypeCode;
		protected string _activityTypeNameEn;
		protected string _activityTypeNameAr;
		protected bool? _isActive;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		protected Int64? _rowId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientActivity> _boClientActivityCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOActivityType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 activityTypeId
		///</parameters>
		public BOActivityType(Int32 activityTypeId)
		{
			try
			{
				DAOActivityType daoActivityType = DAOActivityType.SelectOne(activityTypeId);
				_activityTypeId = daoActivityType.ActivityTypeId;
				_activityTypeCode = daoActivityType.ActivityTypeCode;
				_activityTypeNameEn = daoActivityType.ActivityTypeNameEn;
				_activityTypeNameAr = daoActivityType.ActivityTypeNameAr;
				_isActive = daoActivityType.IsActive;
				_canDelete = daoActivityType.CanDelete;
				_canEdit = daoActivityType.CanEdit;
				_displayOrder = daoActivityType.DisplayOrder;
				_color = daoActivityType.Color;
				_icon = daoActivityType.Icon;
				_cBy = daoActivityType.CBy;
				_eBy = daoActivityType.EBy;
				_cDate = daoActivityType.CDate;
				_eDate = daoActivityType.EDate;
				_rowId = daoActivityType.RowId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOActivityType
		///</parameters>
		protected internal BOActivityType(DAOActivityType daoActivityType)
		{
			try
			{
				_activityTypeId = daoActivityType.ActivityTypeId;
				_activityTypeCode = daoActivityType.ActivityTypeCode;
				_activityTypeNameEn = daoActivityType.ActivityTypeNameEn;
				_activityTypeNameAr = daoActivityType.ActivityTypeNameAr;
				_isActive = daoActivityType.IsActive;
				_canDelete = daoActivityType.CanDelete;
				_canEdit = daoActivityType.CanEdit;
				_displayOrder = daoActivityType.DisplayOrder;
				_color = daoActivityType.Color;
				_icon = daoActivityType.Icon;
				_cBy = daoActivityType.CBy;
				_eBy = daoActivityType.EBy;
				_cDate = daoActivityType.CDate;
				_eDate = daoActivityType.EDate;
				_rowId = daoActivityType.RowId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ActivityType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOActivityType daoActivityType = new DAOActivityType();
			RegisterDataObject(daoActivityType);
			BeginTransaction("savenewBOActivityType");
			try
			{
				daoActivityType.ActivityTypeId = _activityTypeId;
				daoActivityType.ActivityTypeCode = _activityTypeCode;
				daoActivityType.ActivityTypeNameEn = _activityTypeNameEn;
				daoActivityType.ActivityTypeNameAr = _activityTypeNameAr;
				daoActivityType.IsActive = _isActive;
				daoActivityType.CanDelete = _canDelete;
				daoActivityType.CanEdit = _canEdit;
				daoActivityType.DisplayOrder = _displayOrder;
				daoActivityType.Color = _color;
				daoActivityType.Icon = _icon;
				daoActivityType.CBy = _cBy;
				daoActivityType.EBy = _eBy;
				daoActivityType.CDate = _cDate;
				daoActivityType.EDate = _eDate;
				daoActivityType.Insert();
				CommitTransaction();
				
				_activityTypeId = daoActivityType.ActivityTypeId;
				_activityTypeCode = daoActivityType.ActivityTypeCode;
				_activityTypeNameEn = daoActivityType.ActivityTypeNameEn;
				_activityTypeNameAr = daoActivityType.ActivityTypeNameAr;
				_isActive = daoActivityType.IsActive;
				_canDelete = daoActivityType.CanDelete;
				_canEdit = daoActivityType.CanEdit;
				_displayOrder = daoActivityType.DisplayOrder;
				_color = daoActivityType.Color;
				_icon = daoActivityType.Icon;
				_cBy = daoActivityType.CBy;
				_eBy = daoActivityType.EBy;
				_cDate = daoActivityType.CDate;
				_eDate = daoActivityType.EDate;
				_rowId = daoActivityType.RowId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOActivityType");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ActivityType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOActivityType
		///</parameters>
		public virtual void Update()
		{
			DAOActivityType daoActivityType = new DAOActivityType();
			RegisterDataObject(daoActivityType);
			BeginTransaction("updateBOActivityType");
			try
			{
				daoActivityType.ActivityTypeId = _activityTypeId;
				daoActivityType.ActivityTypeCode = _activityTypeCode;
				daoActivityType.ActivityTypeNameEn = _activityTypeNameEn;
				daoActivityType.ActivityTypeNameAr = _activityTypeNameAr;
				daoActivityType.IsActive = _isActive;
				daoActivityType.CanDelete = _canDelete;
				daoActivityType.CanEdit = _canEdit;
				daoActivityType.DisplayOrder = _displayOrder;
				daoActivityType.Color = _color;
				daoActivityType.Icon = _icon;
				daoActivityType.CBy = _cBy;
				daoActivityType.EBy = _eBy;
				daoActivityType.CDate = _cDate;
				daoActivityType.EDate = _eDate;
				daoActivityType.RowId = _rowId;
				daoActivityType.Update();
				CommitTransaction();
				
				_activityTypeId = daoActivityType.ActivityTypeId;
				_activityTypeCode = daoActivityType.ActivityTypeCode;
				_activityTypeNameEn = daoActivityType.ActivityTypeNameEn;
				_activityTypeNameAr = daoActivityType.ActivityTypeNameAr;
				_isActive = daoActivityType.IsActive;
				_canDelete = daoActivityType.CanDelete;
				_canEdit = daoActivityType.CanEdit;
				_displayOrder = daoActivityType.DisplayOrder;
				_color = daoActivityType.Color;
				_icon = daoActivityType.Icon;
				_cBy = daoActivityType.CBy;
				_eBy = daoActivityType.EBy;
				_cDate = daoActivityType.CDate;
				_eDate = daoActivityType.EDate;
				_rowId = daoActivityType.RowId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOActivityType");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ActivityType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOActivityType daoActivityType = new DAOActivityType();
			RegisterDataObject(daoActivityType);
			BeginTransaction("deleteBOActivityType");
			try
			{
				daoActivityType.ActivityTypeId = _activityTypeId;
				daoActivityType.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOActivityType");
				throw;
			}
		}
		
		///<Summary>
		///ActivityTypeCollection
		///This method returns the collection of BOActivityType objects
		///</Summary>
		///<returns>
		///List[BOActivityType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOActivityType> ActivityTypeCollection()
		{
			try
			{
				IList<BOActivityType> boActivityTypeCollection = new List<BOActivityType>();
				IList<DAOActivityType> daoActivityTypeCollection = DAOActivityType.SelectAll();
			
				foreach(DAOActivityType daoActivityType in daoActivityTypeCollection)
					boActivityTypeCollection.Add(new BOActivityType(daoActivityType));
			
				return boActivityTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityTypeCollectionCount
		///This method returns the collection count of BOActivityType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ActivityTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOActivityType.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientActivityCollection
		///This method returns its collection of BOClientActivity objects
		///</Summary>
		///<returns>
		///IList[BOClientActivity]
		///</returns>
		///<parameters>
		///BOActivityType
		///</parameters>
		public virtual IList<BOClientActivity> ClientActivityCollection()
		{
			try
			{
				if(_boClientActivityCollection == null)
					LoadClientActivityCollection();
				
				return _boClientActivityCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOActivityType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOActivityType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOActivityType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boActivityTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOActivityType> daoActivityTypeCollection = DAOActivityType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOActivityType resdaoActivityType in daoActivityTypeCollection)
					boActivityTypeCollection.Add((T)(object)new BOActivityType(resdaoActivityType));
			
				return boActivityTypeCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOActivityType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOActivityType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientActivityCollection
		///This method loads the internal collection of BOClientActivity objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientActivityCollection()
		{
			try
			{
				_boClientActivityCollection = new List<BOClientActivity>();
				IList<DAOClientActivity> daoClientActivityCollection = DAOClientActivity.SelectAllByActivityTypeId(_activityTypeId.Value);
				
				foreach(DAOClientActivity daoClientActivity in daoClientActivityCollection)
					_boClientActivityCollection.Add(new BOClientActivity(daoClientActivity));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientActivity
		///This method persists a BOClientActivity object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientActivity
		///</parameters>
		public virtual void AddClientActivity(BOClientActivity boClientActivity)
		{
			DAOClientActivity daoClientActivity = new DAOClientActivity();
			RegisterDataObject(daoClientActivity);
			BeginTransaction("addClientActivity");
			try
			{
				daoClientActivity.ActivityId = boClientActivity.ActivityId;
				daoClientActivity.ClientId = boClientActivity.ClientId;
				daoClientActivity.RepresentativeId = boClientActivity.RepresentativeId;
				daoClientActivity.ActivityDate = boClientActivity.ActivityDate;
				daoClientActivity.ActivityTime = boClientActivity.ActivityTime;
				daoClientActivity.Duration = boClientActivity.Duration;
				daoClientActivity.InJourney = boClientActivity.InJourney;
				daoClientActivity.IsPositive = boClientActivity.IsPositive;
				daoClientActivity.InZone = boClientActivity.InZone;
				daoClientActivity.Latitude = boClientActivity.Latitude;
				daoClientActivity.Longitude = boClientActivity.Longitude;
				daoClientActivity.Distance = boClientActivity.Distance;
				daoClientActivity.SalesId = boClientActivity.SalesId;
				daoClientActivity.CallAgain = boClientActivity.CallAgain;
				daoClientActivity.Notes = boClientActivity.Notes;
				daoClientActivity.CBy = boClientActivity.CBy;
				daoClientActivity.CDate = boClientActivity.CDate;
				daoClientActivity.EBy = boClientActivity.EBy;
				daoClientActivity.EDate = boClientActivity.EDate;
				daoClientActivity.ActivityTypeId = _activityTypeId.Value;
				daoClientActivity.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientActivity = new BOClientActivity(daoClientActivity);
				if(_boClientActivityCollection != null)
					_boClientActivityCollection.Add(boClientActivity);
			}
			catch
			{
				RollbackTransaction("addClientActivity");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientActivity
		///This method deletes all BOClientActivity objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientActivity()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientActivity");
			try
			{
				DAOClientActivity.DeleteAllByActivityTypeId(ConnectionProvider, _activityTypeId.Value);
				CommitTransaction();
				if(_boClientActivityCollection != null)
				{
					_boClientActivityCollection.Clear();
					_boClientActivityCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientActivity");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ActivityTypeId
		{
			get
			{
				 return _activityTypeId;
			}
			set
			{
				_activityTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityTypeCode
		{
			get
			{
				 return _activityTypeCode;
			}
			set
			{
				_activityTypeCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityTypeNameEn
		{
			get
			{
				 return _activityTypeNameEn;
			}
			set
			{
				_activityTypeNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityTypeNameAr
		{
			get
			{
				 return _activityTypeNameAr;
			}
			set
			{
				_activityTypeNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? RowId
		{
			get
			{
				 return _rowId;
			}
			set
			{
				_rowId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
