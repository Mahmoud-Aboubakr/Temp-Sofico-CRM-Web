/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOUnit.
	///It maintains a collection of BOPurchaseOrderDetail objects.
	///</Summary>
	public partial class BOUnit : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _unitId;
		protected string _unitCode;
		protected string _unitNameEn;
		protected string _unitNameAr;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOPurchaseOrderDetail> _boPurchaseOrderDetailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOUnit()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 unitId
		///</parameters>
		public BOUnit(Int32 unitId)
		{
			try
			{
				DAOUnit daoUnit = DAOUnit.SelectOne(unitId);
				_unitId = daoUnit.UnitId;
				_unitCode = daoUnit.UnitCode;
				_unitNameEn = daoUnit.UnitNameEn;
				_unitNameAr = daoUnit.UnitNameAr;
				_icon = daoUnit.Icon;
				_color = daoUnit.Color;
				_displayOrder = daoUnit.DisplayOrder;
				_isActive = daoUnit.IsActive;
				_cBy = daoUnit.CBy;
				_cDate = daoUnit.CDate;
				_eBy = daoUnit.EBy;
				_eDate = daoUnit.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOUnit
		///</parameters>
		protected internal BOUnit(DAOUnit daoUnit)
		{
			try
			{
				_unitId = daoUnit.UnitId;
				_unitCode = daoUnit.UnitCode;
				_unitNameEn = daoUnit.UnitNameEn;
				_unitNameAr = daoUnit.UnitNameAr;
				_icon = daoUnit.Icon;
				_color = daoUnit.Color;
				_displayOrder = daoUnit.DisplayOrder;
				_isActive = daoUnit.IsActive;
				_cBy = daoUnit.CBy;
				_cDate = daoUnit.CDate;
				_eBy = daoUnit.EBy;
				_eDate = daoUnit.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Unit record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOUnit daoUnit = new DAOUnit();
			RegisterDataObject(daoUnit);
			BeginTransaction("savenewBOUnit");
			try
			{
				daoUnit.UnitCode = _unitCode;
				daoUnit.UnitNameEn = _unitNameEn;
				daoUnit.UnitNameAr = _unitNameAr;
				daoUnit.Icon = _icon;
				daoUnit.Color = _color;
				daoUnit.DisplayOrder = _displayOrder;
				daoUnit.IsActive = _isActive;
				daoUnit.CBy = _cBy;
				daoUnit.CDate = _cDate;
				daoUnit.EBy = _eBy;
				daoUnit.EDate = _eDate;
				daoUnit.Insert();
				CommitTransaction();
				
				_unitId = daoUnit.UnitId;
				_unitCode = daoUnit.UnitCode;
				_unitNameEn = daoUnit.UnitNameEn;
				_unitNameAr = daoUnit.UnitNameAr;
				_icon = daoUnit.Icon;
				_color = daoUnit.Color;
				_displayOrder = daoUnit.DisplayOrder;
				_isActive = daoUnit.IsActive;
				_cBy = daoUnit.CBy;
				_cDate = daoUnit.CDate;
				_eBy = daoUnit.EBy;
				_eDate = daoUnit.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOUnit");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Unit record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOUnit
		///</parameters>
		public virtual void Update()
		{
			DAOUnit daoUnit = new DAOUnit();
			RegisterDataObject(daoUnit);
			BeginTransaction("updateBOUnit");
			try
			{
				daoUnit.UnitId = _unitId;
				daoUnit.UnitCode = _unitCode;
				daoUnit.UnitNameEn = _unitNameEn;
				daoUnit.UnitNameAr = _unitNameAr;
				daoUnit.Icon = _icon;
				daoUnit.Color = _color;
				daoUnit.DisplayOrder = _displayOrder;
				daoUnit.IsActive = _isActive;
				daoUnit.CBy = _cBy;
				daoUnit.CDate = _cDate;
				daoUnit.EBy = _eBy;
				daoUnit.EDate = _eDate;
				daoUnit.Update();
				CommitTransaction();
				
				_unitId = daoUnit.UnitId;
				_unitCode = daoUnit.UnitCode;
				_unitNameEn = daoUnit.UnitNameEn;
				_unitNameAr = daoUnit.UnitNameAr;
				_icon = daoUnit.Icon;
				_color = daoUnit.Color;
				_displayOrder = daoUnit.DisplayOrder;
				_isActive = daoUnit.IsActive;
				_cBy = daoUnit.CBy;
				_cDate = daoUnit.CDate;
				_eBy = daoUnit.EBy;
				_eDate = daoUnit.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOUnit");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Unit record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOUnit daoUnit = new DAOUnit();
			RegisterDataObject(daoUnit);
			BeginTransaction("deleteBOUnit");
			try
			{
				daoUnit.UnitId = _unitId;
				daoUnit.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOUnit");
				throw;
			}
		}
		
		///<Summary>
		///UnitCollection
		///This method returns the collection of BOUnit objects
		///</Summary>
		///<returns>
		///List[BOUnit]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOUnit> UnitCollection()
		{
			try
			{
				IList<BOUnit> boUnitCollection = new List<BOUnit>();
				IList<DAOUnit> daoUnitCollection = DAOUnit.SelectAll();
			
				foreach(DAOUnit daoUnit in daoUnitCollection)
					boUnitCollection.Add(new BOUnit(daoUnit));
			
				return boUnitCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UnitCollectionCount
		///This method returns the collection count of BOUnit objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 UnitCollectionCount()
		{
			try
			{
				Int32 objCount = DAOUnit.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailCollection
		///This method returns its collection of BOPurchaseOrderDetail objects
		///</Summary>
		///<returns>
		///IList[BOPurchaseOrderDetail]
		///</returns>
		///<parameters>
		///BOUnit
		///</parameters>
		public virtual IList<BOPurchaseOrderDetail> PurchaseOrderDetailCollection()
		{
			try
			{
				if(_boPurchaseOrderDetailCollection == null)
					LoadPurchaseOrderDetailCollection();
				
				return _boPurchaseOrderDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOUnit>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOUnit.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UnitCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOUnit objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boUnitCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOUnit> daoUnitCollection = DAOUnit.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOUnit resdaoUnit in daoUnitCollection)
					boUnitCollection.Add((T)(object)new BOUnit(resdaoUnit));
			
				return boUnitCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///UnitCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOUnit objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOUnit.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderDetailCollection
		///This method loads the internal collection of BOPurchaseOrderDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderDetailCollection()
		{
			try
			{
				_boPurchaseOrderDetailCollection = new List<BOPurchaseOrderDetail>();
				IList<DAOPurchaseOrderDetail> daoPurchaseOrderDetailCollection = DAOPurchaseOrderDetail.SelectAllByUnitId(_unitId.Value);
				
				foreach(DAOPurchaseOrderDetail daoPurchaseOrderDetail in daoPurchaseOrderDetailCollection)
					_boPurchaseOrderDetailCollection.Add(new BOPurchaseOrderDetail(daoPurchaseOrderDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPurchaseOrderDetail
		///This method persists a BOPurchaseOrderDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetail
		///</parameters>
		public virtual void AddPurchaseOrderDetail(BOPurchaseOrderDetail boPurchaseOrderDetail)
		{
			DAOPurchaseOrderDetail daoPurchaseOrderDetail = new DAOPurchaseOrderDetail();
			RegisterDataObject(daoPurchaseOrderDetail);
			BeginTransaction("addPurchaseOrderDetail");
			try
			{
				daoPurchaseOrderDetail.DetailId = boPurchaseOrderDetail.DetailId;
				daoPurchaseOrderDetail.PurchaseId = boPurchaseOrderDetail.PurchaseId;
				daoPurchaseOrderDetail.ItemId = boPurchaseOrderDetail.ItemId;
				daoPurchaseOrderDetail.Quanity = boPurchaseOrderDetail.Quanity;
				daoPurchaseOrderDetail.PurchasePrice = boPurchaseOrderDetail.PurchasePrice;
				daoPurchaseOrderDetail.Currency = boPurchaseOrderDetail.Currency;
				daoPurchaseOrderDetail.ExchangeRate = boPurchaseOrderDetail.ExchangeRate;
				daoPurchaseOrderDetail.PurchasePriceLocal = boPurchaseOrderDetail.PurchasePriceLocal;
				daoPurchaseOrderDetail.TaxValue = boPurchaseOrderDetail.TaxValue;
				daoPurchaseOrderDetail.DiscountValue = boPurchaseOrderDetail.DiscountValue;
				daoPurchaseOrderDetail.BatchNo = boPurchaseOrderDetail.BatchNo;
				daoPurchaseOrderDetail.ExpireDate = boPurchaseOrderDetail.ExpireDate;
				daoPurchaseOrderDetail.StatusReceipt = boPurchaseOrderDetail.StatusReceipt;
				daoPurchaseOrderDetail.ItemStoreId = boPurchaseOrderDetail.ItemStoreId;
				daoPurchaseOrderDetail.RecId = boPurchaseOrderDetail.RecId;
				daoPurchaseOrderDetail.UnitId = _unitId.Value;
				daoPurchaseOrderDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrderDetail = new BOPurchaseOrderDetail(daoPurchaseOrderDetail);
				if(_boPurchaseOrderDetailCollection != null)
					_boPurchaseOrderDetailCollection.Add(boPurchaseOrderDetail);
			}
			catch
			{
				RollbackTransaction("addPurchaseOrderDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrderDetail
		///This method deletes all BOPurchaseOrderDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrderDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPurchaseOrderDetail");
			try
			{
				DAOPurchaseOrderDetail.DeleteAllByUnitId(ConnectionProvider, _unitId.Value);
				CommitTransaction();
				if(_boPurchaseOrderDetailCollection != null)
				{
					_boPurchaseOrderDetailCollection.Clear();
					_boPurchaseOrderDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPurchaseOrderDetail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? UnitId
		{
			get
			{
				 return _unitId;
			}
			set
			{
				_unitId = value;
				_isDirty = true;
			}
		}
		
		public virtual string UnitCode
		{
			get
			{
				 return _unitCode;
			}
			set
			{
				_unitCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string UnitNameEn
		{
			get
			{
				 return _unitNameEn;
			}
			set
			{
				_unitNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string UnitNameAr
		{
			get
			{
				 return _unitNameAr;
			}
			set
			{
				_unitNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
