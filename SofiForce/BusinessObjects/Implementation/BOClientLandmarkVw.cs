/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClientLandmarkVw.
	///</Summary>
	public partial class BOClientLandmarkVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _detaillandId;
		protected Int32? _clientId;
		protected Int32? _landmarkId;
		protected string _landmarkNameEn;
		protected string _landmarkNameAr;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClientLandmarkVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClientLandmarkVw
		///</parameters>
		protected internal BOClientLandmarkVw(DAOClientLandmarkVw daoClientLandmarkVw)
		{
			try
			{
				_detaillandId = daoClientLandmarkVw.DetaillandId;
				_clientId = daoClientLandmarkVw.ClientId;
				_landmarkId = daoClientLandmarkVw.LandmarkId;
				_landmarkNameEn = daoClientLandmarkVw.LandmarkNameEn;
				_landmarkNameAr = daoClientLandmarkVw.LandmarkNameAr;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ClientLandmarkVwCollection
		///This method returns the collection of BOClientLandmarkVw objects
		///</Summary>
		///<returns>
		///List[BOClientLandmarkVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClientLandmarkVw> ClientLandmarkVwCollection()
		{
			try
			{
				IList<BOClientLandmarkVw> boClientLandmarkVwCollection = new List<BOClientLandmarkVw>();
				IList<DAOClientLandmarkVw> daoClientLandmarkVwCollection = DAOClientLandmarkVw.SelectAll();
			
				foreach(DAOClientLandmarkVw daoClientLandmarkVw in daoClientLandmarkVwCollection)
					boClientLandmarkVwCollection.Add(new BOClientLandmarkVw(daoClientLandmarkVw));
			
				return boClientLandmarkVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientLandmarkVwCollectionCount
		///This method returns the collection count of BOClientLandmarkVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClientLandmarkVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClientLandmarkVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClientLandmarkVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClientLandmarkVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientLandmarkVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClientLandmarkVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClientLandmarkVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClientLandmarkVw> daoClientLandmarkVwCollection = DAOClientLandmarkVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClientLandmarkVw resdaoClientLandmarkVw in daoClientLandmarkVwCollection)
					boClientLandmarkVwCollection.Add((T)(object)new BOClientLandmarkVw(resdaoClientLandmarkVw));
			
				return boClientLandmarkVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClientLandmarkVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClientLandmarkVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClientLandmarkVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? DetaillandId
		{
			get
			{
				 return _detaillandId;
			}
			set
			{
				_detaillandId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ClientId
		{
			get
			{
				 return _clientId;
			}
			set
			{
				_clientId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? LandmarkId
		{
			get
			{
				 return _landmarkId;
			}
			set
			{
				_landmarkId = value;
				_isDirty = true;
			}
		}
		
		public virtual string LandmarkNameEn
		{
			get
			{
				 return _landmarkNameEn;
			}
			set
			{
				_landmarkNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string LandmarkNameAr
		{
			get
			{
				 return _landmarkNameAr;
			}
			set
			{
				_landmarkNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
