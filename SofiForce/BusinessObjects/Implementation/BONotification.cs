/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BONotification.
	///It maintains a collection of BOAppUserNotification objects.
	///</Summary>
	public partial class BONotification : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _notificationId;
		protected DateTime? _notificationDate;
		protected DateTime? _scheduleTime;
		protected DateTime? _notificationDateTime;
		protected Int32? _priorityId;
		protected string _message;
		protected Int32? _notificationTypeId;
		protected Int32? _userGroupId;
		protected Int32? _userId;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppUserNotification> _boAppUserNotificationCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BONotification()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 notificationId
		///</parameters>
		public BONotification(Int32 notificationId)
		{
			try
			{
				DAONotification daoNotification = DAONotification.SelectOne(notificationId);
				_notificationId = daoNotification.NotificationId;
				_notificationDate = daoNotification.NotificationDate;
				_scheduleTime = daoNotification.ScheduleTime;
				_notificationDateTime = daoNotification.NotificationDateTime;
				_priorityId = daoNotification.PriorityId;
				_message = daoNotification.Message;
				_notificationTypeId = daoNotification.NotificationTypeId;
				_userGroupId = daoNotification.UserGroupId;
				_userId = daoNotification.UserId;
				_cBy = daoNotification.CBy;
				_cDate = daoNotification.CDate;
				_eBy = daoNotification.EBy;
				_eDate = daoNotification.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAONotification
		///</parameters>
		protected internal BONotification(DAONotification daoNotification)
		{
			try
			{
				_notificationId = daoNotification.NotificationId;
				_notificationDate = daoNotification.NotificationDate;
				_scheduleTime = daoNotification.ScheduleTime;
				_notificationDateTime = daoNotification.NotificationDateTime;
				_priorityId = daoNotification.PriorityId;
				_message = daoNotification.Message;
				_notificationTypeId = daoNotification.NotificationTypeId;
				_userGroupId = daoNotification.UserGroupId;
				_userId = daoNotification.UserId;
				_cBy = daoNotification.CBy;
				_cDate = daoNotification.CDate;
				_eBy = daoNotification.EBy;
				_eDate = daoNotification.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Notification record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAONotification daoNotification = new DAONotification();
			RegisterDataObject(daoNotification);
			BeginTransaction("savenewBONotification");
			try
			{
				daoNotification.NotificationDate = _notificationDate;
				daoNotification.ScheduleTime = _scheduleTime;
				daoNotification.NotificationDateTime = _notificationDateTime;
				daoNotification.PriorityId = _priorityId;
				daoNotification.Message = _message;
				daoNotification.NotificationTypeId = _notificationTypeId;
				daoNotification.UserGroupId = _userGroupId;
				daoNotification.UserId = _userId;
				daoNotification.CBy = _cBy;
				daoNotification.CDate = _cDate;
				daoNotification.EBy = _eBy;
				daoNotification.EDate = _eDate;
				daoNotification.Insert();
				CommitTransaction();
				
				_notificationId = daoNotification.NotificationId;
				_notificationDate = daoNotification.NotificationDate;
				_scheduleTime = daoNotification.ScheduleTime;
				_notificationDateTime = daoNotification.NotificationDateTime;
				_priorityId = daoNotification.PriorityId;
				_message = daoNotification.Message;
				_notificationTypeId = daoNotification.NotificationTypeId;
				_userGroupId = daoNotification.UserGroupId;
				_userId = daoNotification.UserId;
				_cBy = daoNotification.CBy;
				_cDate = daoNotification.CDate;
				_eBy = daoNotification.EBy;
				_eDate = daoNotification.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBONotification");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Notification record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BONotification
		///</parameters>
		public virtual void Update()
		{
			DAONotification daoNotification = new DAONotification();
			RegisterDataObject(daoNotification);
			BeginTransaction("updateBONotification");
			try
			{
				daoNotification.NotificationId = _notificationId;
				daoNotification.NotificationDate = _notificationDate;
				daoNotification.ScheduleTime = _scheduleTime;
				daoNotification.NotificationDateTime = _notificationDateTime;
				daoNotification.PriorityId = _priorityId;
				daoNotification.Message = _message;
				daoNotification.NotificationTypeId = _notificationTypeId;
				daoNotification.UserGroupId = _userGroupId;
				daoNotification.UserId = _userId;
				daoNotification.CBy = _cBy;
				daoNotification.CDate = _cDate;
				daoNotification.EBy = _eBy;
				daoNotification.EDate = _eDate;
				daoNotification.Update();
				CommitTransaction();
				
				_notificationId = daoNotification.NotificationId;
				_notificationDate = daoNotification.NotificationDate;
				_scheduleTime = daoNotification.ScheduleTime;
				_notificationDateTime = daoNotification.NotificationDateTime;
				_priorityId = daoNotification.PriorityId;
				_message = daoNotification.Message;
				_notificationTypeId = daoNotification.NotificationTypeId;
				_userGroupId = daoNotification.UserGroupId;
				_userId = daoNotification.UserId;
				_cBy = daoNotification.CBy;
				_cDate = daoNotification.CDate;
				_eBy = daoNotification.EBy;
				_eDate = daoNotification.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBONotification");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Notification record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAONotification daoNotification = new DAONotification();
			RegisterDataObject(daoNotification);
			BeginTransaction("deleteBONotification");
			try
			{
				daoNotification.NotificationId = _notificationId;
				daoNotification.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBONotification");
				throw;
			}
		}
		
		///<Summary>
		///NotificationCollection
		///This method returns the collection of BONotification objects
		///</Summary>
		///<returns>
		///List[BONotification]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BONotification> NotificationCollection()
		{
			try
			{
				IList<BONotification> boNotificationCollection = new List<BONotification>();
				IList<DAONotification> daoNotificationCollection = DAONotification.SelectAll();
			
				foreach(DAONotification daoNotification in daoNotificationCollection)
					boNotificationCollection.Add(new BONotification(daoNotification));
			
				return boNotificationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationCollectionCount
		///This method returns the collection count of BONotification objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 NotificationCollectionCount()
		{
			try
			{
				Int32 objCount = DAONotification.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserNotificationCollection
		///This method returns its collection of BOAppUserNotification objects
		///</Summary>
		///<returns>
		///IList[BOAppUserNotification]
		///</returns>
		///<parameters>
		///BONotification
		///</parameters>
		public virtual IList<BOAppUserNotification> AppUserNotificationCollection()
		{
			try
			{
				if(_boAppUserNotificationCollection == null)
					LoadAppUserNotificationCollection();
				
				return _boAppUserNotificationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BONotification>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAONotification.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BONotification objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boNotificationCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAONotification> daoNotificationCollection = DAONotification.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAONotification resdaoNotification in daoNotificationCollection)
					boNotificationCollection.Add((T)(object)new BONotification(resdaoNotification));
			
				return boNotificationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///NotificationCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BONotification objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAONotification.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserNotificationCollection
		///This method loads the internal collection of BOAppUserNotification objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserNotificationCollection()
		{
			try
			{
				_boAppUserNotificationCollection = new List<BOAppUserNotification>();
				IList<DAOAppUserNotification> daoAppUserNotificationCollection = DAOAppUserNotification.SelectAllByNotificationId(_notificationId.Value);
				
				foreach(DAOAppUserNotification daoAppUserNotification in daoAppUserNotificationCollection)
					_boAppUserNotificationCollection.Add(new BOAppUserNotification(daoAppUserNotification));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserNotification
		///This method persists a BOAppUserNotification object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserNotification
		///</parameters>
		public virtual void AddAppUserNotification(BOAppUserNotification boAppUserNotification)
		{
			DAOAppUserNotification daoAppUserNotification = new DAOAppUserNotification();
			RegisterDataObject(daoAppUserNotification);
			BeginTransaction("addAppUserNotification");
			try
			{
				daoAppUserNotification.UserNotificationId = boAppUserNotification.UserNotificationId;
				daoAppUserNotification.UserId = boAppUserNotification.UserId;
				daoAppUserNotification.ReadDate = boAppUserNotification.ReadDate;
				daoAppUserNotification.IsReaded = boAppUserNotification.IsReaded;
				daoAppUserNotification.NotificationId = _notificationId.Value;
				daoAppUserNotification.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserNotification = new BOAppUserNotification(daoAppUserNotification);
				if(_boAppUserNotificationCollection != null)
					_boAppUserNotificationCollection.Add(boAppUserNotification);
			}
			catch
			{
				RollbackTransaction("addAppUserNotification");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserNotification
		///This method deletes all BOAppUserNotification objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserNotification()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserNotification");
			try
			{
				DAOAppUserNotification.DeleteAllByNotificationId(ConnectionProvider, _notificationId.Value);
				CommitTransaction();
				if(_boAppUserNotificationCollection != null)
				{
					_boAppUserNotificationCollection.Clear();
					_boAppUserNotificationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserNotification");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? NotificationId
		{
			get
			{
				 return _notificationId;
			}
			set
			{
				_notificationId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? NotificationDate
		{
			get
			{
				 return _notificationDate;
			}
			set
			{
				_notificationDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ScheduleTime
		{
			get
			{
				 return _scheduleTime;
			}
			set
			{
				_scheduleTime = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? NotificationDateTime
		{
			get
			{
				 return _notificationDateTime;
			}
			set
			{
				_notificationDateTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? PriorityId
		{
			get
			{
				 return _priorityId;
			}
			set
			{
				_priorityId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Message
		{
			get
			{
				 return _message;
			}
			set
			{
				_message = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? NotificationTypeId
		{
			get
			{
				 return _notificationTypeId;
			}
			set
			{
				_notificationTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserGroupId
		{
			get
			{
				 return _userGroupId;
			}
			set
			{
				_userGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
