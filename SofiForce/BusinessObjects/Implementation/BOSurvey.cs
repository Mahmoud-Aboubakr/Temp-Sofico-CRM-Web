/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSurvey.
	///It maintains a collection of BOClientSurvey,BOSurveyDetailAnswer,BOSurveyDetail objects.
	///</Summary>
	public partial class BOSurvey : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _surveyId;
		protected string _surveyCode;
		protected DateTime? _createDate;
		protected Int32? _serveyGroupId;
		protected string _surveyNameEn;
		protected string _surveyNameAr;
		protected bool? _isActive;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientSurvey> _boClientSurveyCollection;
		List<BOSurveyDetailAnswer> _boSurveyDetailAnswerCollection;
		List<BOSurveyDetail> _boSurveyDetailCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSurvey()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 surveyId
		///</parameters>
		public BOSurvey(Int32 surveyId)
		{
			try
			{
				DAOSurvey daoSurvey = DAOSurvey.SelectOne(surveyId);
				_surveyId = daoSurvey.SurveyId;
				_surveyCode = daoSurvey.SurveyCode;
				_createDate = daoSurvey.CreateDate;
				_serveyGroupId = daoSurvey.ServeyGroupId;
				_surveyNameEn = daoSurvey.SurveyNameEn;
				_surveyNameAr = daoSurvey.SurveyNameAr;
				_isActive = daoSurvey.IsActive;
				_cBy = daoSurvey.CBy;
				_cDate = daoSurvey.CDate;
				_eBy = daoSurvey.EBy;
				_eDate = daoSurvey.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSurvey
		///</parameters>
		protected internal BOSurvey(DAOSurvey daoSurvey)
		{
			try
			{
				_surveyId = daoSurvey.SurveyId;
				_surveyCode = daoSurvey.SurveyCode;
				_createDate = daoSurvey.CreateDate;
				_serveyGroupId = daoSurvey.ServeyGroupId;
				_surveyNameEn = daoSurvey.SurveyNameEn;
				_surveyNameAr = daoSurvey.SurveyNameAr;
				_isActive = daoSurvey.IsActive;
				_cBy = daoSurvey.CBy;
				_cDate = daoSurvey.CDate;
				_eBy = daoSurvey.EBy;
				_eDate = daoSurvey.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Survey record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSurvey daoSurvey = new DAOSurvey();
			RegisterDataObject(daoSurvey);
			BeginTransaction("savenewBOSurvey");
			try
			{
				daoSurvey.SurveyCode = _surveyCode;
				daoSurvey.CreateDate = _createDate;
				daoSurvey.ServeyGroupId = _serveyGroupId;
				daoSurvey.SurveyNameEn = _surveyNameEn;
				daoSurvey.SurveyNameAr = _surveyNameAr;
				daoSurvey.IsActive = _isActive;
				daoSurvey.CBy = _cBy;
				daoSurvey.CDate = _cDate;
				daoSurvey.EBy = _eBy;
				daoSurvey.EDate = _eDate;
				daoSurvey.Insert();
				CommitTransaction();
				
				_surveyId = daoSurvey.SurveyId;
				_surveyCode = daoSurvey.SurveyCode;
				_createDate = daoSurvey.CreateDate;
				_serveyGroupId = daoSurvey.ServeyGroupId;
				_surveyNameEn = daoSurvey.SurveyNameEn;
				_surveyNameAr = daoSurvey.SurveyNameAr;
				_isActive = daoSurvey.IsActive;
				_cBy = daoSurvey.CBy;
				_cDate = daoSurvey.CDate;
				_eBy = daoSurvey.EBy;
				_eDate = daoSurvey.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSurvey");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Survey record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSurvey
		///</parameters>
		public virtual void Update()
		{
			DAOSurvey daoSurvey = new DAOSurvey();
			RegisterDataObject(daoSurvey);
			BeginTransaction("updateBOSurvey");
			try
			{
				daoSurvey.SurveyId = _surveyId;
				daoSurvey.SurveyCode = _surveyCode;
				daoSurvey.CreateDate = _createDate;
				daoSurvey.ServeyGroupId = _serveyGroupId;
				daoSurvey.SurveyNameEn = _surveyNameEn;
				daoSurvey.SurveyNameAr = _surveyNameAr;
				daoSurvey.IsActive = _isActive;
				daoSurvey.CBy = _cBy;
				daoSurvey.CDate = _cDate;
				daoSurvey.EBy = _eBy;
				daoSurvey.EDate = _eDate;
				daoSurvey.Update();
				CommitTransaction();
				
				_surveyId = daoSurvey.SurveyId;
				_surveyCode = daoSurvey.SurveyCode;
				_createDate = daoSurvey.CreateDate;
				_serveyGroupId = daoSurvey.ServeyGroupId;
				_surveyNameEn = daoSurvey.SurveyNameEn;
				_surveyNameAr = daoSurvey.SurveyNameAr;
				_isActive = daoSurvey.IsActive;
				_cBy = daoSurvey.CBy;
				_cDate = daoSurvey.CDate;
				_eBy = daoSurvey.EBy;
				_eDate = daoSurvey.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSurvey");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Survey record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSurvey daoSurvey = new DAOSurvey();
			RegisterDataObject(daoSurvey);
			BeginTransaction("deleteBOSurvey");
			try
			{
				daoSurvey.SurveyId = _surveyId;
				daoSurvey.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSurvey");
				throw;
			}
		}
		
		///<Summary>
		///SurveyCollection
		///This method returns the collection of BOSurvey objects
		///</Summary>
		///<returns>
		///List[BOSurvey]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSurvey> SurveyCollection()
		{
			try
			{
				IList<BOSurvey> boSurveyCollection = new List<BOSurvey>();
				IList<DAOSurvey> daoSurveyCollection = DAOSurvey.SelectAll();
			
				foreach(DAOSurvey daoSurvey in daoSurveyCollection)
					boSurveyCollection.Add(new BOSurvey(daoSurvey));
			
				return boSurveyCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyCollectionCount
		///This method returns the collection count of BOSurvey objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SurveyCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSurvey.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientSurveyCollection
		///This method returns its collection of BOClientSurvey objects
		///</Summary>
		///<returns>
		///IList[BOClientSurvey]
		///</returns>
		///<parameters>
		///BOSurvey
		///</parameters>
		public virtual IList<BOClientSurvey> ClientSurveyCollection()
		{
			try
			{
				if(_boClientSurveyCollection == null)
					LoadClientSurveyCollection();
				
				return _boClientSurveyCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SurveyDetailAnswerCollection
		///This method returns its collection of BOSurveyDetailAnswer objects
		///</Summary>
		///<returns>
		///IList[BOSurveyDetailAnswer]
		///</returns>
		///<parameters>
		///BOSurvey
		///</parameters>
		public virtual IList<BOSurveyDetailAnswer> SurveyDetailAnswerCollection()
		{
			try
			{
				if(_boSurveyDetailAnswerCollection == null)
					LoadSurveyDetailAnswerCollection();
				
				return _boSurveyDetailAnswerCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SurveyDetailCollection
		///This method returns its collection of BOSurveyDetail objects
		///</Summary>
		///<returns>
		///IList[BOSurveyDetail]
		///</returns>
		///<parameters>
		///BOSurvey
		///</parameters>
		public virtual IList<BOSurveyDetail> SurveyDetailCollection()
		{
			try
			{
				if(_boSurveyDetailCollection == null)
					LoadSurveyDetailCollection();
				
				return _boSurveyDetailCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSurvey>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSurvey.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSurvey objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSurveyCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSurvey> daoSurveyCollection = DAOSurvey.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSurvey resdaoSurvey in daoSurveyCollection)
					boSurveyCollection.Add((T)(object)new BOSurvey(resdaoSurvey));
			
				return boSurveyCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SurveyCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSurvey objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSurvey.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientSurveyCollection
		///This method loads the internal collection of BOClientSurvey objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientSurveyCollection()
		{
			try
			{
				_boClientSurveyCollection = new List<BOClientSurvey>();
				IList<DAOClientSurvey> daoClientSurveyCollection = DAOClientSurvey.SelectAllBySurveyId(_surveyId.Value);
				
				foreach(DAOClientSurvey daoClientSurvey in daoClientSurveyCollection)
					_boClientSurveyCollection.Add(new BOClientSurvey(daoClientSurvey));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientSurvey
		///This method persists a BOClientSurvey object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientSurvey
		///</parameters>
		public virtual void AddClientSurvey(BOClientSurvey boClientSurvey)
		{
			DAOClientSurvey daoClientSurvey = new DAOClientSurvey();
			RegisterDataObject(daoClientSurvey);
			BeginTransaction("addClientSurvey");
			try
			{
				daoClientSurvey.ClientServeyId = boClientSurvey.ClientServeyId;
				daoClientSurvey.BranchId = boClientSurvey.BranchId;
				daoClientSurvey.ClientId = boClientSurvey.ClientId;
				daoClientSurvey.RepresentativeId = boClientSurvey.RepresentativeId;
				daoClientSurvey.ServeyStatusId = boClientSurvey.ServeyStatusId;
				daoClientSurvey.CreateDate = boClientSurvey.CreateDate;
				daoClientSurvey.CreateTime = boClientSurvey.CreateTime;
				daoClientSurvey.StartDate = boClientSurvey.StartDate;
				daoClientSurvey.StartTime = boClientSurvey.StartTime;
				daoClientSurvey.IsClosed = boClientSurvey.IsClosed;
				daoClientSurvey.Notes = boClientSurvey.Notes;
				daoClientSurvey.Latitude = boClientSurvey.Latitude;
				daoClientSurvey.Longitude = boClientSurvey.Longitude;
				daoClientSurvey.InZone = boClientSurvey.InZone;
				daoClientSurvey.Distance = boClientSurvey.Distance;
				daoClientSurvey.CanDelete = boClientSurvey.CanDelete;
				daoClientSurvey.CBy = boClientSurvey.CBy;
				daoClientSurvey.CDate = boClientSurvey.CDate;
				daoClientSurvey.EBy = boClientSurvey.EBy;
				daoClientSurvey.EDate = boClientSurvey.EDate;
				daoClientSurvey.SurveyId = _surveyId.Value;
				daoClientSurvey.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientSurvey = new BOClientSurvey(daoClientSurvey);
				if(_boClientSurveyCollection != null)
					_boClientSurveyCollection.Add(boClientSurvey);
			}
			catch
			{
				RollbackTransaction("addClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientSurvey
		///This method deletes all BOClientSurvey objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientSurvey()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientSurvey");
			try
			{
				DAOClientSurvey.DeleteAllBySurveyId(ConnectionProvider, _surveyId.Value);
				CommitTransaction();
				if(_boClientSurveyCollection != null)
				{
					_boClientSurveyCollection.Clear();
					_boClientSurveyCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientSurvey");
				throw;
			}
		}
		
		///<Summary>
		///LoadSurveyDetailAnswerCollection
		///This method loads the internal collection of BOSurveyDetailAnswer objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSurveyDetailAnswerCollection()
		{
			try
			{
				_boSurveyDetailAnswerCollection = new List<BOSurveyDetailAnswer>();
				IList<DAOSurveyDetailAnswer> daoSurveyDetailAnswerCollection = DAOSurveyDetailAnswer.SelectAllBySurveyId(_surveyId.Value);
				
				foreach(DAOSurveyDetailAnswer daoSurveyDetailAnswer in daoSurveyDetailAnswerCollection)
					_boSurveyDetailAnswerCollection.Add(new BOSurveyDetailAnswer(daoSurveyDetailAnswer));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSurveyDetailAnswer
		///This method persists a BOSurveyDetailAnswer object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSurveyDetailAnswer
		///</parameters>
		public virtual void AddSurveyDetailAnswer(BOSurveyDetailAnswer boSurveyDetailAnswer)
		{
			DAOSurveyDetailAnswer daoSurveyDetailAnswer = new DAOSurveyDetailAnswer();
			RegisterDataObject(daoSurveyDetailAnswer);
			BeginTransaction("addSurveyDetailAnswer");
			try
			{
				daoSurveyDetailAnswer.DetailAnswerId = boSurveyDetailAnswer.DetailAnswerId;
				daoSurveyDetailAnswer.SurveyDetailId = boSurveyDetailAnswer.SurveyDetailId;
				daoSurveyDetailAnswer.AnswerEn = boSurveyDetailAnswer.AnswerEn;
				daoSurveyDetailAnswer.AnswerAr = boSurveyDetailAnswer.AnswerAr;
				daoSurveyDetailAnswer.CBy = boSurveyDetailAnswer.CBy;
				daoSurveyDetailAnswer.CDate = boSurveyDetailAnswer.CDate;
				daoSurveyDetailAnswer.EBy = boSurveyDetailAnswer.EBy;
				daoSurveyDetailAnswer.EDate = boSurveyDetailAnswer.EDate;
				daoSurveyDetailAnswer.SurveyId = _surveyId.Value;
				daoSurveyDetailAnswer.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSurveyDetailAnswer = new BOSurveyDetailAnswer(daoSurveyDetailAnswer);
				if(_boSurveyDetailAnswerCollection != null)
					_boSurveyDetailAnswerCollection.Add(boSurveyDetailAnswer);
			}
			catch
			{
				RollbackTransaction("addSurveyDetailAnswer");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSurveyDetailAnswer
		///This method deletes all BOSurveyDetailAnswer objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSurveyDetailAnswer()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSurveyDetailAnswer");
			try
			{
				DAOSurveyDetailAnswer.DeleteAllBySurveyId(ConnectionProvider, _surveyId.Value);
				CommitTransaction();
				if(_boSurveyDetailAnswerCollection != null)
				{
					_boSurveyDetailAnswerCollection.Clear();
					_boSurveyDetailAnswerCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSurveyDetailAnswer");
				throw;
			}
		}
		
		///<Summary>
		///LoadSurveyDetailCollection
		///This method loads the internal collection of BOSurveyDetail objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSurveyDetailCollection()
		{
			try
			{
				_boSurveyDetailCollection = new List<BOSurveyDetail>();
				IList<DAOSurveyDetail> daoSurveyDetailCollection = DAOSurveyDetail.SelectAllBySurveyId(_surveyId.Value);
				
				foreach(DAOSurveyDetail daoSurveyDetail in daoSurveyDetailCollection)
					_boSurveyDetailCollection.Add(new BOSurveyDetail(daoSurveyDetail));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSurveyDetail
		///This method persists a BOSurveyDetail object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSurveyDetail
		///</parameters>
		public virtual void AddSurveyDetail(BOSurveyDetail boSurveyDetail)
		{
			DAOSurveyDetail daoSurveyDetail = new DAOSurveyDetail();
			RegisterDataObject(daoSurveyDetail);
			BeginTransaction("addSurveyDetail");
			try
			{
				daoSurveyDetail.SurveyDetailId = boSurveyDetail.SurveyDetailId;
				daoSurveyDetail.SurveyQuestionEn = boSurveyDetail.SurveyQuestionEn;
				daoSurveyDetail.SurveyQuestionAr = boSurveyDetail.SurveyQuestionAr;
				daoSurveyDetail.IsMuliSelect = boSurveyDetail.IsMuliSelect;
				daoSurveyDetail.CBy = boSurveyDetail.CBy;
				daoSurveyDetail.CDate = boSurveyDetail.CDate;
				daoSurveyDetail.EBy = boSurveyDetail.EBy;
				daoSurveyDetail.EDate = boSurveyDetail.EDate;
				daoSurveyDetail.SurveyId = _surveyId.Value;
				daoSurveyDetail.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSurveyDetail = new BOSurveyDetail(daoSurveyDetail);
				if(_boSurveyDetailCollection != null)
					_boSurveyDetailCollection.Add(boSurveyDetail);
			}
			catch
			{
				RollbackTransaction("addSurveyDetail");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSurveyDetail
		///This method deletes all BOSurveyDetail objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSurveyDetail()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSurveyDetail");
			try
			{
				DAOSurveyDetail.DeleteAllBySurveyId(ConnectionProvider, _surveyId.Value);
				CommitTransaction();
				if(_boSurveyDetailCollection != null)
				{
					_boSurveyDetailCollection.Clear();
					_boSurveyDetailCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSurveyDetail");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SurveyId
		{
			get
			{
				 return _surveyId;
			}
			set
			{
				_surveyId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SurveyCode
		{
			get
			{
				 return _surveyCode;
			}
			set
			{
				_surveyCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CreateDate
		{
			get
			{
				 return _createDate;
			}
			set
			{
				_createDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ServeyGroupId
		{
			get
			{
				 return _serveyGroupId;
			}
			set
			{
				_serveyGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SurveyNameEn
		{
			get
			{
				 return _surveyNameEn;
			}
			set
			{
				_surveyNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string SurveyNameAr
		{
			get
			{
				 return _surveyNameAr;
			}
			set
			{
				_surveyNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
