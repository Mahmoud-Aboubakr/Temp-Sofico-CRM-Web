/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOActivityChannel.
	///</Summary>
	public partial class BOActivityChannel : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _activityChannelId;
		protected string _activityChannelCode;
		protected string _activityChannelNameEn;
		protected string _activityChannelNameAr;
		protected bool? _isActive;
		protected bool? _canDelete;
		protected bool? _canEdit;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected Int32? _eBy;
		protected DateTime? _cDate;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOActivityChannel()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 activityChannelId
		///</parameters>
		public BOActivityChannel(Int32 activityChannelId)
		{
			try
			{
				DAOActivityChannel daoActivityChannel = DAOActivityChannel.SelectOne(activityChannelId);
				_activityChannelId = daoActivityChannel.ActivityChannelId;
				_activityChannelCode = daoActivityChannel.ActivityChannelCode;
				_activityChannelNameEn = daoActivityChannel.ActivityChannelNameEn;
				_activityChannelNameAr = daoActivityChannel.ActivityChannelNameAr;
				_isActive = daoActivityChannel.IsActive;
				_canDelete = daoActivityChannel.CanDelete;
				_canEdit = daoActivityChannel.CanEdit;
				_displayOrder = daoActivityChannel.DisplayOrder;
				_color = daoActivityChannel.Color;
				_icon = daoActivityChannel.Icon;
				_cBy = daoActivityChannel.CBy;
				_eBy = daoActivityChannel.EBy;
				_cDate = daoActivityChannel.CDate;
				_eDate = daoActivityChannel.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOActivityChannel
		///</parameters>
		protected internal BOActivityChannel(DAOActivityChannel daoActivityChannel)
		{
			try
			{
				_activityChannelId = daoActivityChannel.ActivityChannelId;
				_activityChannelCode = daoActivityChannel.ActivityChannelCode;
				_activityChannelNameEn = daoActivityChannel.ActivityChannelNameEn;
				_activityChannelNameAr = daoActivityChannel.ActivityChannelNameAr;
				_isActive = daoActivityChannel.IsActive;
				_canDelete = daoActivityChannel.CanDelete;
				_canEdit = daoActivityChannel.CanEdit;
				_displayOrder = daoActivityChannel.DisplayOrder;
				_color = daoActivityChannel.Color;
				_icon = daoActivityChannel.Icon;
				_cBy = daoActivityChannel.CBy;
				_eBy = daoActivityChannel.EBy;
				_cDate = daoActivityChannel.CDate;
				_eDate = daoActivityChannel.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ActivityChannel record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOActivityChannel daoActivityChannel = new DAOActivityChannel();
			RegisterDataObject(daoActivityChannel);
			BeginTransaction("savenewBOActivityChannel");
			try
			{
				daoActivityChannel.ActivityChannelId = _activityChannelId;
				daoActivityChannel.ActivityChannelCode = _activityChannelCode;
				daoActivityChannel.ActivityChannelNameEn = _activityChannelNameEn;
				daoActivityChannel.ActivityChannelNameAr = _activityChannelNameAr;
				daoActivityChannel.IsActive = _isActive;
				daoActivityChannel.CanDelete = _canDelete;
				daoActivityChannel.CanEdit = _canEdit;
				daoActivityChannel.DisplayOrder = _displayOrder;
				daoActivityChannel.Color = _color;
				daoActivityChannel.Icon = _icon;
				daoActivityChannel.CBy = _cBy;
				daoActivityChannel.EBy = _eBy;
				daoActivityChannel.CDate = _cDate;
				daoActivityChannel.EDate = _eDate;
				daoActivityChannel.Insert();
				CommitTransaction();
				
				_activityChannelId = daoActivityChannel.ActivityChannelId;
				_activityChannelCode = daoActivityChannel.ActivityChannelCode;
				_activityChannelNameEn = daoActivityChannel.ActivityChannelNameEn;
				_activityChannelNameAr = daoActivityChannel.ActivityChannelNameAr;
				_isActive = daoActivityChannel.IsActive;
				_canDelete = daoActivityChannel.CanDelete;
				_canEdit = daoActivityChannel.CanEdit;
				_displayOrder = daoActivityChannel.DisplayOrder;
				_color = daoActivityChannel.Color;
				_icon = daoActivityChannel.Icon;
				_cBy = daoActivityChannel.CBy;
				_eBy = daoActivityChannel.EBy;
				_cDate = daoActivityChannel.CDate;
				_eDate = daoActivityChannel.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOActivityChannel");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ActivityChannel record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOActivityChannel
		///</parameters>
		public virtual void Update()
		{
			DAOActivityChannel daoActivityChannel = new DAOActivityChannel();
			RegisterDataObject(daoActivityChannel);
			BeginTransaction("updateBOActivityChannel");
			try
			{
				daoActivityChannel.ActivityChannelId = _activityChannelId;
				daoActivityChannel.ActivityChannelCode = _activityChannelCode;
				daoActivityChannel.ActivityChannelNameEn = _activityChannelNameEn;
				daoActivityChannel.ActivityChannelNameAr = _activityChannelNameAr;
				daoActivityChannel.IsActive = _isActive;
				daoActivityChannel.CanDelete = _canDelete;
				daoActivityChannel.CanEdit = _canEdit;
				daoActivityChannel.DisplayOrder = _displayOrder;
				daoActivityChannel.Color = _color;
				daoActivityChannel.Icon = _icon;
				daoActivityChannel.CBy = _cBy;
				daoActivityChannel.EBy = _eBy;
				daoActivityChannel.CDate = _cDate;
				daoActivityChannel.EDate = _eDate;
				daoActivityChannel.Update();
				CommitTransaction();
				
				_activityChannelId = daoActivityChannel.ActivityChannelId;
				_activityChannelCode = daoActivityChannel.ActivityChannelCode;
				_activityChannelNameEn = daoActivityChannel.ActivityChannelNameEn;
				_activityChannelNameAr = daoActivityChannel.ActivityChannelNameAr;
				_isActive = daoActivityChannel.IsActive;
				_canDelete = daoActivityChannel.CanDelete;
				_canEdit = daoActivityChannel.CanEdit;
				_displayOrder = daoActivityChannel.DisplayOrder;
				_color = daoActivityChannel.Color;
				_icon = daoActivityChannel.Icon;
				_cBy = daoActivityChannel.CBy;
				_eBy = daoActivityChannel.EBy;
				_cDate = daoActivityChannel.CDate;
				_eDate = daoActivityChannel.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOActivityChannel");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ActivityChannel record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOActivityChannel daoActivityChannel = new DAOActivityChannel();
			RegisterDataObject(daoActivityChannel);
			BeginTransaction("deleteBOActivityChannel");
			try
			{
				daoActivityChannel.ActivityChannelId = _activityChannelId;
				daoActivityChannel.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOActivityChannel");
				throw;
			}
		}
		
		///<Summary>
		///ActivityChannelCollection
		///This method returns the collection of BOActivityChannel objects
		///</Summary>
		///<returns>
		///List[BOActivityChannel]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOActivityChannel> ActivityChannelCollection()
		{
			try
			{
				IList<BOActivityChannel> boActivityChannelCollection = new List<BOActivityChannel>();
				IList<DAOActivityChannel> daoActivityChannelCollection = DAOActivityChannel.SelectAll();
			
				foreach(DAOActivityChannel daoActivityChannel in daoActivityChannelCollection)
					boActivityChannelCollection.Add(new BOActivityChannel(daoActivityChannel));
			
				return boActivityChannelCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityChannelCollectionCount
		///This method returns the collection count of BOActivityChannel objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ActivityChannelCollectionCount()
		{
			try
			{
				Int32 objCount = DAOActivityChannel.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOActivityChannel>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOActivityChannel.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityChannelCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOActivityChannel objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boActivityChannelCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOActivityChannel> daoActivityChannelCollection = DAOActivityChannel.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOActivityChannel resdaoActivityChannel in daoActivityChannelCollection)
					boActivityChannelCollection.Add((T)(object)new BOActivityChannel(resdaoActivityChannel));
			
				return boActivityChannelCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ActivityChannelCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOActivityChannel objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOActivityChannel.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ActivityChannelId
		{
			get
			{
				 return _activityChannelId;
			}
			set
			{
				_activityChannelId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityChannelCode
		{
			get
			{
				 return _activityChannelCode;
			}
			set
			{
				_activityChannelCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityChannelNameEn
		{
			get
			{
				 return _activityChannelNameEn;
			}
			set
			{
				_activityChannelNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ActivityChannelNameAr
		{
			get
			{
				 return _activityChannelNameAr;
			}
			set
			{
				_activityChannelNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
