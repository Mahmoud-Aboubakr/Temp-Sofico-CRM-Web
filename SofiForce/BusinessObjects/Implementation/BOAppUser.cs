/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppUser.
	///It maintains a collection of BOAppUser,BOAppUserBranch,BOAppUserCart,BOAppUserClientGroup,BOAppUserInvitation,BOAppUserItemInterest,BOAppUserNotification,BOAppUserQuickOrder,BOAppUserStore,BOAppUserWish,BOAppUserLocation,BORepresentative,BOSalesOrder objects.
	///</Summary>
	public partial class BOAppUser : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _userId;
		protected Int32? _appRoleId;
		protected Int32? _userGroupId;
		protected string _realName;
		protected string _userName;
		protected string _password;
		protected bool? _isOnline;
		protected bool? _isLocked;
		protected bool? _mustChangeData;
		protected DateTime? _lastLogin;
		protected bool? _mustChangePassword;
		protected bool? _emailVerified;
		protected string _firebaseId;
		protected string _signalrId;
		protected Int32? _failedCount;
		protected string _defaultRoute;
		protected string _phone;
		protected string _whatsApp;
		protected string _zoomId;
		protected string _linkedIn;
		protected string _userBio;
		protected double? _latitude;
		protected double? _longitude;
		protected string _address;
		protected string _email;
		protected string _fax;
		protected string _internal;
		protected string _jobTitle;
		protected string _avatar;
		protected string _mobile;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _primaryMobile;
		protected bool? _mobileVerified;
		protected string _verificationCode;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppUser> _boUserIdAppUserCollection;
		List<BOAppUserBranch> _boAppUserBranchCollection;
		List<BOAppUserCart> _boAppUserCartCollection;
		List<BOAppUserClientGroup> _boAppUserClientGroupCollection;
		List<BOAppUserInvitation> _boAppUserInvitationCollection;
		List<BOAppUserItemInterest> _boAppUserItemInterestCollection;
		List<BOAppUserNotification> _boAppUserNotificationCollection;
		List<BOAppUserQuickOrder> _boAppUserQuickOrderCollection;
		List<BOAppUserStore> _boAppUserStoreCollection;
		List<BOAppUserWish> _boAppUserWishCollection;
		List<BOAppUserLocation> _boAppUserLocationCollection;
		List<BORepresentative> _boRepresentativeCollection;
		List<BOSalesOrder> _boSalesOrderCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppUser()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 userId
		///</parameters>
		public BOAppUser(Int32 userId)
		{
			try
			{
				DAOAppUser daoAppUser = DAOAppUser.SelectOne(userId);
				_userId = daoAppUser.UserId;
				_appRoleId = daoAppUser.AppRoleId;
				_userGroupId = daoAppUser.UserGroupId;
				_realName = daoAppUser.RealName;
				_userName = daoAppUser.UserName;
				_password = daoAppUser.Password;
				_isOnline = daoAppUser.IsOnline;
				_isLocked = daoAppUser.IsLocked;
				_mustChangeData = daoAppUser.MustChangeData;
				_lastLogin = daoAppUser.LastLogin;
				_mustChangePassword = daoAppUser.MustChangePassword;
				_emailVerified = daoAppUser.EmailVerified;
				_firebaseId = daoAppUser.FirebaseId;
				_signalrId = daoAppUser.SignalrId;
				_failedCount = daoAppUser.FailedCount;
				_defaultRoute = daoAppUser.DefaultRoute;
				_phone = daoAppUser.Phone;
				_whatsApp = daoAppUser.WhatsApp;
				_zoomId = daoAppUser.ZoomId;
				_linkedIn = daoAppUser.LinkedIn;
				_userBio = daoAppUser.UserBio;
				_latitude = daoAppUser.Latitude;
				_longitude = daoAppUser.Longitude;
				_address = daoAppUser.Address;
				_email = daoAppUser.Email;
				_fax = daoAppUser.Fax;
				_internal = daoAppUser.Internal;
				_jobTitle = daoAppUser.JobTitle;
				_avatar = daoAppUser.Avatar;
				_mobile = daoAppUser.Mobile;
				_cBy = daoAppUser.CBy;
				_cDate = daoAppUser.CDate;
				_eBy = daoAppUser.EBy;
				_eDate = daoAppUser.EDate;
				_primaryMobile = daoAppUser.PrimaryMobile;
				_mobileVerified = daoAppUser.MobileVerified;
				_verificationCode = daoAppUser.VerificationCode;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppUser
		///</parameters>
		protected internal BOAppUser(DAOAppUser daoAppUser)
		{
			try
			{
				_userId = daoAppUser.UserId;
				_appRoleId = daoAppUser.AppRoleId;
				_userGroupId = daoAppUser.UserGroupId;
				_realName = daoAppUser.RealName;
				_userName = daoAppUser.UserName;
				_password = daoAppUser.Password;
				_isOnline = daoAppUser.IsOnline;
				_isLocked = daoAppUser.IsLocked;
				_mustChangeData = daoAppUser.MustChangeData;
				_lastLogin = daoAppUser.LastLogin;
				_mustChangePassword = daoAppUser.MustChangePassword;
				_emailVerified = daoAppUser.EmailVerified;
				_firebaseId = daoAppUser.FirebaseId;
				_signalrId = daoAppUser.SignalrId;
				_failedCount = daoAppUser.FailedCount;
				_defaultRoute = daoAppUser.DefaultRoute;
				_phone = daoAppUser.Phone;
				_whatsApp = daoAppUser.WhatsApp;
				_zoomId = daoAppUser.ZoomId;
				_linkedIn = daoAppUser.LinkedIn;
				_userBio = daoAppUser.UserBio;
				_latitude = daoAppUser.Latitude;
				_longitude = daoAppUser.Longitude;
				_address = daoAppUser.Address;
				_email = daoAppUser.Email;
				_fax = daoAppUser.Fax;
				_internal = daoAppUser.Internal;
				_jobTitle = daoAppUser.JobTitle;
				_avatar = daoAppUser.Avatar;
				_mobile = daoAppUser.Mobile;
				_cBy = daoAppUser.CBy;
				_cDate = daoAppUser.CDate;
				_eBy = daoAppUser.EBy;
				_eDate = daoAppUser.EDate;
				_primaryMobile = daoAppUser.PrimaryMobile;
				_mobileVerified = daoAppUser.MobileVerified;
				_verificationCode = daoAppUser.VerificationCode;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppUser record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppUser daoAppUser = new DAOAppUser();
			RegisterDataObject(daoAppUser);
			BeginTransaction("savenewBOAppUser");
			try
			{
				daoAppUser.AppRoleId = _appRoleId;
				daoAppUser.UserGroupId = _userGroupId;
				daoAppUser.RealName = _realName;
				daoAppUser.UserName = _userName;
				daoAppUser.Password = _password;
				daoAppUser.IsOnline = _isOnline;
				daoAppUser.IsLocked = _isLocked;
				daoAppUser.MustChangeData = _mustChangeData;
				daoAppUser.LastLogin = _lastLogin;
				daoAppUser.MustChangePassword = _mustChangePassword;
				daoAppUser.EmailVerified = _emailVerified;
				daoAppUser.FirebaseId = _firebaseId;
				daoAppUser.SignalrId = _signalrId;
				daoAppUser.FailedCount = _failedCount;
				daoAppUser.DefaultRoute = _defaultRoute;
				daoAppUser.Phone = _phone;
				daoAppUser.WhatsApp = _whatsApp;
				daoAppUser.ZoomId = _zoomId;
				daoAppUser.LinkedIn = _linkedIn;
				daoAppUser.UserBio = _userBio;
				daoAppUser.Latitude = _latitude;
				daoAppUser.Longitude = _longitude;
				daoAppUser.Address = _address;
				daoAppUser.Email = _email;
				daoAppUser.Fax = _fax;
				daoAppUser.Internal = _internal;
				daoAppUser.JobTitle = _jobTitle;
				daoAppUser.Avatar = _avatar;
				daoAppUser.Mobile = _mobile;
				daoAppUser.CBy = _cBy;
				daoAppUser.CDate = _cDate;
				daoAppUser.EBy = _eBy;
				daoAppUser.EDate = _eDate;
				daoAppUser.PrimaryMobile = _primaryMobile;
				daoAppUser.MobileVerified = _mobileVerified;
				daoAppUser.VerificationCode = _verificationCode;
				daoAppUser.Insert();
				CommitTransaction();
				
				_userId = daoAppUser.UserId;
				_appRoleId = daoAppUser.AppRoleId;
				_userGroupId = daoAppUser.UserGroupId;
				_realName = daoAppUser.RealName;
				_userName = daoAppUser.UserName;
				_password = daoAppUser.Password;
				_isOnline = daoAppUser.IsOnline;
				_isLocked = daoAppUser.IsLocked;
				_mustChangeData = daoAppUser.MustChangeData;
				_lastLogin = daoAppUser.LastLogin;
				_mustChangePassword = daoAppUser.MustChangePassword;
				_emailVerified = daoAppUser.EmailVerified;
				_firebaseId = daoAppUser.FirebaseId;
				_signalrId = daoAppUser.SignalrId;
				_failedCount = daoAppUser.FailedCount;
				_defaultRoute = daoAppUser.DefaultRoute;
				_phone = daoAppUser.Phone;
				_whatsApp = daoAppUser.WhatsApp;
				_zoomId = daoAppUser.ZoomId;
				_linkedIn = daoAppUser.LinkedIn;
				_userBio = daoAppUser.UserBio;
				_latitude = daoAppUser.Latitude;
				_longitude = daoAppUser.Longitude;
				_address = daoAppUser.Address;
				_email = daoAppUser.Email;
				_fax = daoAppUser.Fax;
				_internal = daoAppUser.Internal;
				_jobTitle = daoAppUser.JobTitle;
				_avatar = daoAppUser.Avatar;
				_mobile = daoAppUser.Mobile;
				_cBy = daoAppUser.CBy;
				_cDate = daoAppUser.CDate;
				_eBy = daoAppUser.EBy;
				_eDate = daoAppUser.EDate;
				_primaryMobile = daoAppUser.PrimaryMobile;
				_mobileVerified = daoAppUser.MobileVerified;
				_verificationCode = daoAppUser.VerificationCode;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppUser");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppUser record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual void Update()
		{
			DAOAppUser daoAppUser = new DAOAppUser();
			RegisterDataObject(daoAppUser);
			BeginTransaction("updateBOAppUser");
			try
			{
				daoAppUser.UserId = _userId;
				daoAppUser.AppRoleId = _appRoleId;
				daoAppUser.UserGroupId = _userGroupId;
				daoAppUser.RealName = _realName;
				daoAppUser.UserName = _userName;
				daoAppUser.Password = _password;
				daoAppUser.IsOnline = _isOnline;
				daoAppUser.IsLocked = _isLocked;
				daoAppUser.MustChangeData = _mustChangeData;
				daoAppUser.LastLogin = _lastLogin;
				daoAppUser.MustChangePassword = _mustChangePassword;
				daoAppUser.EmailVerified = _emailVerified;
				daoAppUser.FirebaseId = _firebaseId;
				daoAppUser.SignalrId = _signalrId;
				daoAppUser.FailedCount = _failedCount;
				daoAppUser.DefaultRoute = _defaultRoute;
				daoAppUser.Phone = _phone;
				daoAppUser.WhatsApp = _whatsApp;
				daoAppUser.ZoomId = _zoomId;
				daoAppUser.LinkedIn = _linkedIn;
				daoAppUser.UserBio = _userBio;
				daoAppUser.Latitude = _latitude;
				daoAppUser.Longitude = _longitude;
				daoAppUser.Address = _address;
				daoAppUser.Email = _email;
				daoAppUser.Fax = _fax;
				daoAppUser.Internal = _internal;
				daoAppUser.JobTitle = _jobTitle;
				daoAppUser.Avatar = _avatar;
				daoAppUser.Mobile = _mobile;
				daoAppUser.CBy = _cBy;
				daoAppUser.CDate = _cDate;
				daoAppUser.EBy = _eBy;
				daoAppUser.EDate = _eDate;
				daoAppUser.PrimaryMobile = _primaryMobile;
				daoAppUser.MobileVerified = _mobileVerified;
				daoAppUser.VerificationCode = _verificationCode;
				daoAppUser.Update();
				CommitTransaction();
				
				_userId = daoAppUser.UserId;
				_appRoleId = daoAppUser.AppRoleId;
				_userGroupId = daoAppUser.UserGroupId;
				_realName = daoAppUser.RealName;
				_userName = daoAppUser.UserName;
				_password = daoAppUser.Password;
				_isOnline = daoAppUser.IsOnline;
				_isLocked = daoAppUser.IsLocked;
				_mustChangeData = daoAppUser.MustChangeData;
				_lastLogin = daoAppUser.LastLogin;
				_mustChangePassword = daoAppUser.MustChangePassword;
				_emailVerified = daoAppUser.EmailVerified;
				_firebaseId = daoAppUser.FirebaseId;
				_signalrId = daoAppUser.SignalrId;
				_failedCount = daoAppUser.FailedCount;
				_defaultRoute = daoAppUser.DefaultRoute;
				_phone = daoAppUser.Phone;
				_whatsApp = daoAppUser.WhatsApp;
				_zoomId = daoAppUser.ZoomId;
				_linkedIn = daoAppUser.LinkedIn;
				_userBio = daoAppUser.UserBio;
				_latitude = daoAppUser.Latitude;
				_longitude = daoAppUser.Longitude;
				_address = daoAppUser.Address;
				_email = daoAppUser.Email;
				_fax = daoAppUser.Fax;
				_internal = daoAppUser.Internal;
				_jobTitle = daoAppUser.JobTitle;
				_avatar = daoAppUser.Avatar;
				_mobile = daoAppUser.Mobile;
				_cBy = daoAppUser.CBy;
				_cDate = daoAppUser.CDate;
				_eBy = daoAppUser.EBy;
				_eDate = daoAppUser.EDate;
				_primaryMobile = daoAppUser.PrimaryMobile;
				_mobileVerified = daoAppUser.MobileVerified;
				_verificationCode = daoAppUser.VerificationCode;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppUser");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppUser record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppUser daoAppUser = new DAOAppUser();
			RegisterDataObject(daoAppUser);
			BeginTransaction("deleteBOAppUser");
			try
			{
				daoAppUser.UserId = _userId;
				daoAppUser.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppUser");
				throw;
			}
		}
		
		///<Summary>
		///AppUserCollection
		///This method returns the collection of BOAppUser objects
		///</Summary>
		///<returns>
		///List[BOAppUser]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppUser> AppUserCollection()
		{
			try
			{
				IList<BOAppUser> boAppUserCollection = new List<BOAppUser>();
				IList<DAOAppUser> daoAppUserCollection = DAOAppUser.SelectAll();
			
				foreach(DAOAppUser daoAppUser in daoAppUserCollection)
					boAppUserCollection.Add(new BOAppUser(daoAppUser));
			
				return boAppUserCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserCollectionCount
		///This method returns the collection count of BOAppUser objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppUserCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppUser.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///UserIdAppUserCollection
		///This method returns its collection of BOAppUser objects
		///</Summary>
		///<returns>
		///IList[BOAppUser]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUser> UserIdAppUserCollection()
		{
			try
			{
				if(_boUserIdAppUserCollection == null)
					LoadUserIdAppUserCollection();
				
				return _boUserIdAppUserCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserBranchCollection
		///This method returns its collection of BOAppUserBranch objects
		///</Summary>
		///<returns>
		///IList[BOAppUserBranch]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserBranch> AppUserBranchCollection()
		{
			try
			{
				if(_boAppUserBranchCollection == null)
					LoadAppUserBranchCollection();
				
				return _boAppUserBranchCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserCartCollection
		///This method returns its collection of BOAppUserCart objects
		///</Summary>
		///<returns>
		///IList[BOAppUserCart]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserCart> AppUserCartCollection()
		{
			try
			{
				if(_boAppUserCartCollection == null)
					LoadAppUserCartCollection();
				
				return _boAppUserCartCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserClientGroupCollection
		///This method returns its collection of BOAppUserClientGroup objects
		///</Summary>
		///<returns>
		///IList[BOAppUserClientGroup]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserClientGroup> AppUserClientGroupCollection()
		{
			try
			{
				if(_boAppUserClientGroupCollection == null)
					LoadAppUserClientGroupCollection();
				
				return _boAppUserClientGroupCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserInvitationCollection
		///This method returns its collection of BOAppUserInvitation objects
		///</Summary>
		///<returns>
		///IList[BOAppUserInvitation]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserInvitation> AppUserInvitationCollection()
		{
			try
			{
				if(_boAppUserInvitationCollection == null)
					LoadAppUserInvitationCollection();
				
				return _boAppUserInvitationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserItemInterestCollection
		///This method returns its collection of BOAppUserItemInterest objects
		///</Summary>
		///<returns>
		///IList[BOAppUserItemInterest]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserItemInterest> AppUserItemInterestCollection()
		{
			try
			{
				if(_boAppUserItemInterestCollection == null)
					LoadAppUserItemInterestCollection();
				
				return _boAppUserItemInterestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserNotificationCollection
		///This method returns its collection of BOAppUserNotification objects
		///</Summary>
		///<returns>
		///IList[BOAppUserNotification]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserNotification> AppUserNotificationCollection()
		{
			try
			{
				if(_boAppUserNotificationCollection == null)
					LoadAppUserNotificationCollection();
				
				return _boAppUserNotificationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserQuickOrderCollection
		///This method returns its collection of BOAppUserQuickOrder objects
		///</Summary>
		///<returns>
		///IList[BOAppUserQuickOrder]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserQuickOrder> AppUserQuickOrderCollection()
		{
			try
			{
				if(_boAppUserQuickOrderCollection == null)
					LoadAppUserQuickOrderCollection();
				
				return _boAppUserQuickOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserStoreCollection
		///This method returns its collection of BOAppUserStore objects
		///</Summary>
		///<returns>
		///IList[BOAppUserStore]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserStore> AppUserStoreCollection()
		{
			try
			{
				if(_boAppUserStoreCollection == null)
					LoadAppUserStoreCollection();
				
				return _boAppUserStoreCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserWishCollection
		///This method returns its collection of BOAppUserWish objects
		///</Summary>
		///<returns>
		///IList[BOAppUserWish]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserWish> AppUserWishCollection()
		{
			try
			{
				if(_boAppUserWishCollection == null)
					LoadAppUserWishCollection();
				
				return _boAppUserWishCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserLocationCollection
		///This method returns its collection of BOAppUserLocation objects
		///</Summary>
		///<returns>
		///IList[BOAppUserLocation]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOAppUserLocation> AppUserLocationCollection()
		{
			try
			{
				if(_boAppUserLocationCollection == null)
					LoadAppUserLocationCollection();
				
				return _boAppUserLocationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///RepresentativeCollection
		///This method returns its collection of BORepresentative objects
		///</Summary>
		///<returns>
		///IList[BORepresentative]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BORepresentative> RepresentativeCollection()
		{
			try
			{
				if(_boRepresentativeCollection == null)
					LoadRepresentativeCollection();
				
				return _boRepresentativeCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///SalesOrderCollection
		///This method returns its collection of BOSalesOrder objects
		///</Summary>
		///<returns>
		///IList[BOSalesOrder]
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual IList<BOSalesOrder> SalesOrderCollection()
		{
			try
			{
				if(_boSalesOrderCollection == null)
					LoadSalesOrderCollection();
				
				return _boSalesOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppUser>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppUser.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppUser objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppUserCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppUser> daoAppUserCollection = DAOAppUser.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppUser resdaoAppUser in daoAppUserCollection)
					boAppUserCollection.Add((T)(object)new BOAppUser(resdaoAppUser));
			
				return boAppUserCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppUserCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppUser objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppUser.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadUserIdAppUserCollection
		///This method loads the internal collection of BOAppUser objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadUserIdAppUserCollection()
		{
			try
			{
				_boUserIdAppUserCollection = new List<BOAppUser>();
				IList<DAOAppUser> daoAppUserCollection = DAOAppUser.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUser daoAppUser in daoAppUserCollection)
					_boUserIdAppUserCollection.Add(new BOAppUser(daoAppUser));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddUserIdAppUser
		///This method persists a BOAppUser object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual void AddUserIdAppUser(BOAppUser boAppUser)
		{
			DAOAppUser daoAppUser = new DAOAppUser();
			RegisterDataObject(daoAppUser);
			BeginTransaction("addUserIdAppUser");
			try
			{
				daoAppUser.AppRoleId = boAppUser.AppRoleId;
				daoAppUser.UserGroupId = boAppUser.UserGroupId;
				daoAppUser.RealName = boAppUser.RealName;
				daoAppUser.UserName = boAppUser.UserName;
				daoAppUser.Password = boAppUser.Password;
				daoAppUser.IsOnline = boAppUser.IsOnline;
				daoAppUser.IsLocked = boAppUser.IsLocked;
				daoAppUser.MustChangeData = boAppUser.MustChangeData;
				daoAppUser.LastLogin = boAppUser.LastLogin;
				daoAppUser.MustChangePassword = boAppUser.MustChangePassword;
				daoAppUser.EmailVerified = boAppUser.EmailVerified;
				daoAppUser.FirebaseId = boAppUser.FirebaseId;
				daoAppUser.SignalrId = boAppUser.SignalrId;
				daoAppUser.FailedCount = boAppUser.FailedCount;
				daoAppUser.DefaultRoute = boAppUser.DefaultRoute;
				daoAppUser.Phone = boAppUser.Phone;
				daoAppUser.WhatsApp = boAppUser.WhatsApp;
				daoAppUser.ZoomId = boAppUser.ZoomId;
				daoAppUser.LinkedIn = boAppUser.LinkedIn;
				daoAppUser.UserBio = boAppUser.UserBio;
				daoAppUser.Latitude = boAppUser.Latitude;
				daoAppUser.Longitude = boAppUser.Longitude;
				daoAppUser.Address = boAppUser.Address;
				daoAppUser.Email = boAppUser.Email;
				daoAppUser.Fax = boAppUser.Fax;
				daoAppUser.Internal = boAppUser.Internal;
				daoAppUser.JobTitle = boAppUser.JobTitle;
				daoAppUser.Avatar = boAppUser.Avatar;
				daoAppUser.Mobile = boAppUser.Mobile;
				daoAppUser.CBy = boAppUser.CBy;
				daoAppUser.CDate = boAppUser.CDate;
				daoAppUser.EBy = boAppUser.EBy;
				daoAppUser.EDate = boAppUser.EDate;
				daoAppUser.PrimaryMobile = boAppUser.PrimaryMobile;
				daoAppUser.MobileVerified = boAppUser.MobileVerified;
				daoAppUser.VerificationCode = boAppUser.VerificationCode;
				daoAppUser.UserId = _userId.Value;
				daoAppUser.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUser = new BOAppUser(daoAppUser);
				if(_boUserIdAppUserCollection != null)
					_boUserIdAppUserCollection.Add(boAppUser);
			}
			catch
			{
				RollbackTransaction("addUserIdAppUser");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllUserIdAppUser
		///This method deletes all BOAppUser objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllUserIdAppUser()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllUserIdAppUser");
			try
			{
				DAOAppUser.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boUserIdAppUserCollection != null)
				{
					_boUserIdAppUserCollection.Clear();
					_boUserIdAppUserCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllUserIdAppUser");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserBranchCollection
		///This method loads the internal collection of BOAppUserBranch objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserBranchCollection()
		{
			try
			{
				_boAppUserBranchCollection = new List<BOAppUserBranch>();
				IList<DAOAppUserBranch> daoAppUserBranchCollection = DAOAppUserBranch.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserBranch daoAppUserBranch in daoAppUserBranchCollection)
					_boAppUserBranchCollection.Add(new BOAppUserBranch(daoAppUserBranch));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserBranch
		///This method persists a BOAppUserBranch object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserBranch
		///</parameters>
		public virtual void AddAppUserBranch(BOAppUserBranch boAppUserBranch)
		{
			DAOAppUserBranch daoAppUserBranch = new DAOAppUserBranch();
			RegisterDataObject(daoAppUserBranch);
			BeginTransaction("addAppUserBranch");
			try
			{
				daoAppUserBranch.UserBranchId = boAppUserBranch.UserBranchId;
				daoAppUserBranch.BranchId = boAppUserBranch.BranchId;
				daoAppUserBranch.UserId = _userId.Value;
				daoAppUserBranch.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserBranch = new BOAppUserBranch(daoAppUserBranch);
				if(_boAppUserBranchCollection != null)
					_boAppUserBranchCollection.Add(boAppUserBranch);
			}
			catch
			{
				RollbackTransaction("addAppUserBranch");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserBranch
		///This method deletes all BOAppUserBranch objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserBranch()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserBranch");
			try
			{
				DAOAppUserBranch.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserBranchCollection != null)
				{
					_boAppUserBranchCollection.Clear();
					_boAppUserBranchCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserBranch");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserCartCollection
		///This method loads the internal collection of BOAppUserCart objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserCartCollection()
		{
			try
			{
				_boAppUserCartCollection = new List<BOAppUserCart>();
				IList<DAOAppUserCart> daoAppUserCartCollection = DAOAppUserCart.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserCart daoAppUserCart in daoAppUserCartCollection)
					_boAppUserCartCollection.Add(new BOAppUserCart(daoAppUserCart));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserCart
		///This method persists a BOAppUserCart object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserCart
		///</parameters>
		public virtual void AddAppUserCart(BOAppUserCart boAppUserCart)
		{
			DAOAppUserCart daoAppUserCart = new DAOAppUserCart();
			RegisterDataObject(daoAppUserCart);
			BeginTransaction("addAppUserCart");
			try
			{
				daoAppUserCart.CartId = boAppUserCart.CartId;
				daoAppUserCart.ItemId = boAppUserCart.ItemId;
				daoAppUserCart.Quantity = boAppUserCart.Quantity;
				daoAppUserCart.CreateDate = boAppUserCart.CreateDate;
				daoAppUserCart.UserId = _userId.Value;
				daoAppUserCart.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserCart = new BOAppUserCart(daoAppUserCart);
				if(_boAppUserCartCollection != null)
					_boAppUserCartCollection.Add(boAppUserCart);
			}
			catch
			{
				RollbackTransaction("addAppUserCart");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserCart
		///This method deletes all BOAppUserCart objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserCart()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserCart");
			try
			{
				DAOAppUserCart.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserCartCollection != null)
				{
					_boAppUserCartCollection.Clear();
					_boAppUserCartCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserCart");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserClientGroupCollection
		///This method loads the internal collection of BOAppUserClientGroup objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserClientGroupCollection()
		{
			try
			{
				_boAppUserClientGroupCollection = new List<BOAppUserClientGroup>();
				IList<DAOAppUserClientGroup> daoAppUserClientGroupCollection = DAOAppUserClientGroup.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserClientGroup daoAppUserClientGroup in daoAppUserClientGroupCollection)
					_boAppUserClientGroupCollection.Add(new BOAppUserClientGroup(daoAppUserClientGroup));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserClientGroup
		///This method persists a BOAppUserClientGroup object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserClientGroup
		///</parameters>
		public virtual void AddAppUserClientGroup(BOAppUserClientGroup boAppUserClientGroup)
		{
			DAOAppUserClientGroup daoAppUserClientGroup = new DAOAppUserClientGroup();
			RegisterDataObject(daoAppUserClientGroup);
			BeginTransaction("addAppUserClientGroup");
			try
			{
				daoAppUserClientGroup.AppUserGroupId = boAppUserClientGroup.AppUserGroupId;
				daoAppUserClientGroup.ClientGroupId = boAppUserClientGroup.ClientGroupId;
				daoAppUserClientGroup.UserId = _userId.Value;
				daoAppUserClientGroup.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserClientGroup = new BOAppUserClientGroup(daoAppUserClientGroup);
				if(_boAppUserClientGroupCollection != null)
					_boAppUserClientGroupCollection.Add(boAppUserClientGroup);
			}
			catch
			{
				RollbackTransaction("addAppUserClientGroup");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserClientGroup
		///This method deletes all BOAppUserClientGroup objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserClientGroup()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserClientGroup");
			try
			{
				DAOAppUserClientGroup.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserClientGroupCollection != null)
				{
					_boAppUserClientGroupCollection.Clear();
					_boAppUserClientGroupCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserClientGroup");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserInvitationCollection
		///This method loads the internal collection of BOAppUserInvitation objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserInvitationCollection()
		{
			try
			{
				_boAppUserInvitationCollection = new List<BOAppUserInvitation>();
				IList<DAOAppUserInvitation> daoAppUserInvitationCollection = DAOAppUserInvitation.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserInvitation daoAppUserInvitation in daoAppUserInvitationCollection)
					_boAppUserInvitationCollection.Add(new BOAppUserInvitation(daoAppUserInvitation));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserInvitation
		///This method persists a BOAppUserInvitation object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserInvitation
		///</parameters>
		public virtual void AddAppUserInvitation(BOAppUserInvitation boAppUserInvitation)
		{
			DAOAppUserInvitation daoAppUserInvitation = new DAOAppUserInvitation();
			RegisterDataObject(daoAppUserInvitation);
			BeginTransaction("addAppUserInvitation");
			try
			{
				daoAppUserInvitation.InvitationId = boAppUserInvitation.InvitationId;
				daoAppUserInvitation.InvitationLink = boAppUserInvitation.InvitationLink;
				daoAppUserInvitation.Downloads = boAppUserInvitation.Downloads;
				daoAppUserInvitation.UserId = _userId.Value;
				daoAppUserInvitation.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserInvitation = new BOAppUserInvitation(daoAppUserInvitation);
				if(_boAppUserInvitationCollection != null)
					_boAppUserInvitationCollection.Add(boAppUserInvitation);
			}
			catch
			{
				RollbackTransaction("addAppUserInvitation");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserInvitation
		///This method deletes all BOAppUserInvitation objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserInvitation()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserInvitation");
			try
			{
				DAOAppUserInvitation.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserInvitationCollection != null)
				{
					_boAppUserInvitationCollection.Clear();
					_boAppUserInvitationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserInvitation");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserItemInterestCollection
		///This method loads the internal collection of BOAppUserItemInterest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserItemInterestCollection()
		{
			try
			{
				_boAppUserItemInterestCollection = new List<BOAppUserItemInterest>();
				IList<DAOAppUserItemInterest> daoAppUserItemInterestCollection = DAOAppUserItemInterest.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserItemInterest daoAppUserItemInterest in daoAppUserItemInterestCollection)
					_boAppUserItemInterestCollection.Add(new BOAppUserItemInterest(daoAppUserItemInterest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserItemInterest
		///This method persists a BOAppUserItemInterest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserItemInterest
		///</parameters>
		public virtual void AddAppUserItemInterest(BOAppUserItemInterest boAppUserItemInterest)
		{
			DAOAppUserItemInterest daoAppUserItemInterest = new DAOAppUserItemInterest();
			RegisterDataObject(daoAppUserItemInterest);
			BeginTransaction("addAppUserItemInterest");
			try
			{
				daoAppUserItemInterest.Id = boAppUserItemInterest.Id;
				daoAppUserItemInterest.ItemId = boAppUserItemInterest.ItemId;
				daoAppUserItemInterest.UserId = _userId.Value;
				daoAppUserItemInterest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserItemInterest = new BOAppUserItemInterest(daoAppUserItemInterest);
				if(_boAppUserItemInterestCollection != null)
					_boAppUserItemInterestCollection.Add(boAppUserItemInterest);
			}
			catch
			{
				RollbackTransaction("addAppUserItemInterest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserItemInterest
		///This method deletes all BOAppUserItemInterest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserItemInterest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserItemInterest");
			try
			{
				DAOAppUserItemInterest.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserItemInterestCollection != null)
				{
					_boAppUserItemInterestCollection.Clear();
					_boAppUserItemInterestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserItemInterest");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserNotificationCollection
		///This method loads the internal collection of BOAppUserNotification objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserNotificationCollection()
		{
			try
			{
				_boAppUserNotificationCollection = new List<BOAppUserNotification>();
				IList<DAOAppUserNotification> daoAppUserNotificationCollection = DAOAppUserNotification.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserNotification daoAppUserNotification in daoAppUserNotificationCollection)
					_boAppUserNotificationCollection.Add(new BOAppUserNotification(daoAppUserNotification));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserNotification
		///This method persists a BOAppUserNotification object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserNotification
		///</parameters>
		public virtual void AddAppUserNotification(BOAppUserNotification boAppUserNotification)
		{
			DAOAppUserNotification daoAppUserNotification = new DAOAppUserNotification();
			RegisterDataObject(daoAppUserNotification);
			BeginTransaction("addAppUserNotification");
			try
			{
				daoAppUserNotification.UserNotificationId = boAppUserNotification.UserNotificationId;
				daoAppUserNotification.NotificationId = boAppUserNotification.NotificationId;
				daoAppUserNotification.ReadDate = boAppUserNotification.ReadDate;
				daoAppUserNotification.IsReaded = boAppUserNotification.IsReaded;
				daoAppUserNotification.UserId = _userId.Value;
				daoAppUserNotification.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserNotification = new BOAppUserNotification(daoAppUserNotification);
				if(_boAppUserNotificationCollection != null)
					_boAppUserNotificationCollection.Add(boAppUserNotification);
			}
			catch
			{
				RollbackTransaction("addAppUserNotification");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserNotification
		///This method deletes all BOAppUserNotification objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserNotification()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserNotification");
			try
			{
				DAOAppUserNotification.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserNotificationCollection != null)
				{
					_boAppUserNotificationCollection.Clear();
					_boAppUserNotificationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserNotification");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserQuickOrderCollection
		///This method loads the internal collection of BOAppUserQuickOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserQuickOrderCollection()
		{
			try
			{
				_boAppUserQuickOrderCollection = new List<BOAppUserQuickOrder>();
				IList<DAOAppUserQuickOrder> daoAppUserQuickOrderCollection = DAOAppUserQuickOrder.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserQuickOrder daoAppUserQuickOrder in daoAppUserQuickOrderCollection)
					_boAppUserQuickOrderCollection.Add(new BOAppUserQuickOrder(daoAppUserQuickOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserQuickOrder
		///This method persists a BOAppUserQuickOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserQuickOrder
		///</parameters>
		public virtual void AddAppUserQuickOrder(BOAppUserQuickOrder boAppUserQuickOrder)
		{
			DAOAppUserQuickOrder daoAppUserQuickOrder = new DAOAppUserQuickOrder();
			RegisterDataObject(daoAppUserQuickOrder);
			BeginTransaction("addAppUserQuickOrder");
			try
			{
				daoAppUserQuickOrder.QuickOrderId = boAppUserQuickOrder.QuickOrderId;
				daoAppUserQuickOrder.ClientId = boAppUserQuickOrder.ClientId;
				daoAppUserQuickOrder.OrderDate = boAppUserQuickOrder.OrderDate;
				daoAppUserQuickOrder.OrderTime = boAppUserQuickOrder.OrderTime;
				daoAppUserQuickOrder.IsApproved = boAppUserQuickOrder.IsApproved;
				daoAppUserQuickOrder.SalesOrderId = boAppUserQuickOrder.SalesOrderId;
				daoAppUserQuickOrder.CBy = boAppUserQuickOrder.CBy;
				daoAppUserQuickOrder.CDate = boAppUserQuickOrder.CDate;
				daoAppUserQuickOrder.EBy = boAppUserQuickOrder.EBy;
				daoAppUserQuickOrder.EDate = boAppUserQuickOrder.EDate;
				daoAppUserQuickOrder.UserId = _userId.Value;
				daoAppUserQuickOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserQuickOrder = new BOAppUserQuickOrder(daoAppUserQuickOrder);
				if(_boAppUserQuickOrderCollection != null)
					_boAppUserQuickOrderCollection.Add(boAppUserQuickOrder);
			}
			catch
			{
				RollbackTransaction("addAppUserQuickOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserQuickOrder
		///This method deletes all BOAppUserQuickOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserQuickOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserQuickOrder");
			try
			{
				DAOAppUserQuickOrder.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserQuickOrderCollection != null)
				{
					_boAppUserQuickOrderCollection.Clear();
					_boAppUserQuickOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserQuickOrder");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserStoreCollection
		///This method loads the internal collection of BOAppUserStore objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserStoreCollection()
		{
			try
			{
				_boAppUserStoreCollection = new List<BOAppUserStore>();
				IList<DAOAppUserStore> daoAppUserStoreCollection = DAOAppUserStore.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserStore daoAppUserStore in daoAppUserStoreCollection)
					_boAppUserStoreCollection.Add(new BOAppUserStore(daoAppUserStore));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserStore
		///This method persists a BOAppUserStore object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserStore
		///</parameters>
		public virtual void AddAppUserStore(BOAppUserStore boAppUserStore)
		{
			DAOAppUserStore daoAppUserStore = new DAOAppUserStore();
			RegisterDataObject(daoAppUserStore);
			BeginTransaction("addAppUserStore");
			try
			{
				daoAppUserStore.AppUserStoreId = boAppUserStore.AppUserStoreId;
				daoAppUserStore.StoreId = boAppUserStore.StoreId;
				daoAppUserStore.UserId = _userId.Value;
				daoAppUserStore.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserStore = new BOAppUserStore(daoAppUserStore);
				if(_boAppUserStoreCollection != null)
					_boAppUserStoreCollection.Add(boAppUserStore);
			}
			catch
			{
				RollbackTransaction("addAppUserStore");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserStore
		///This method deletes all BOAppUserStore objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserStore()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserStore");
			try
			{
				DAOAppUserStore.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserStoreCollection != null)
				{
					_boAppUserStoreCollection.Clear();
					_boAppUserStoreCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserStore");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserWishCollection
		///This method loads the internal collection of BOAppUserWish objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserWishCollection()
		{
			try
			{
				_boAppUserWishCollection = new List<BOAppUserWish>();
				IList<DAOAppUserWish> daoAppUserWishCollection = DAOAppUserWish.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserWish daoAppUserWish in daoAppUserWishCollection)
					_boAppUserWishCollection.Add(new BOAppUserWish(daoAppUserWish));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserWish
		///This method persists a BOAppUserWish object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserWish
		///</parameters>
		public virtual void AddAppUserWish(BOAppUserWish boAppUserWish)
		{
			DAOAppUserWish daoAppUserWish = new DAOAppUserWish();
			RegisterDataObject(daoAppUserWish);
			BeginTransaction("addAppUserWish");
			try
			{
				daoAppUserWish.WishId = boAppUserWish.WishId;
				daoAppUserWish.ItemId = boAppUserWish.ItemId;
				daoAppUserWish.WishDate = boAppUserWish.WishDate;
				daoAppUserWish.WishTime = boAppUserWish.WishTime;
				daoAppUserWish.UserId = _userId.Value;
				daoAppUserWish.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserWish = new BOAppUserWish(daoAppUserWish);
				if(_boAppUserWishCollection != null)
					_boAppUserWishCollection.Add(boAppUserWish);
			}
			catch
			{
				RollbackTransaction("addAppUserWish");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserWish
		///This method deletes all BOAppUserWish objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserWish()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserWish");
			try
			{
				DAOAppUserWish.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserWishCollection != null)
				{
					_boAppUserWishCollection.Clear();
					_boAppUserWishCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserWish");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserLocationCollection
		///This method loads the internal collection of BOAppUserLocation objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserLocationCollection()
		{
			try
			{
				_boAppUserLocationCollection = new List<BOAppUserLocation>();
				IList<DAOAppUserLocation> daoAppUserLocationCollection = DAOAppUserLocation.SelectAllByUserId(_userId.Value);
				
				foreach(DAOAppUserLocation daoAppUserLocation in daoAppUserLocationCollection)
					_boAppUserLocationCollection.Add(new BOAppUserLocation(daoAppUserLocation));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUserLocation
		///This method persists a BOAppUserLocation object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUserLocation
		///</parameters>
		public virtual void AddAppUserLocation(BOAppUserLocation boAppUserLocation)
		{
			DAOAppUserLocation daoAppUserLocation = new DAOAppUserLocation();
			RegisterDataObject(daoAppUserLocation);
			BeginTransaction("addAppUserLocation");
			try
			{
				daoAppUserLocation.TrackingId = boAppUserLocation.TrackingId;
				daoAppUserLocation.TrackingTypeId = boAppUserLocation.TrackingTypeId;
				daoAppUserLocation.TrackingDate = boAppUserLocation.TrackingDate;
				daoAppUserLocation.TrackingTime = boAppUserLocation.TrackingTime;
				daoAppUserLocation.Latitude = boAppUserLocation.Latitude;
				daoAppUserLocation.Longitude = boAppUserLocation.Longitude;
				daoAppUserLocation.IsPositive = boAppUserLocation.IsPositive;
				daoAppUserLocation.SalesId = boAppUserLocation.SalesId;
				daoAppUserLocation.ClientId = boAppUserLocation.ClientId;
				daoAppUserLocation.InZone = boAppUserLocation.InZone;
				daoAppUserLocation.Distance = boAppUserLocation.Distance;
				daoAppUserLocation.UserId = _userId.Value;
				daoAppUserLocation.VisitRejectReasonId = boAppUserLocation.VisitRejectReasonId;
				daoAppUserLocation.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUserLocation = new BOAppUserLocation(daoAppUserLocation);
				if(_boAppUserLocationCollection != null)
					_boAppUserLocationCollection.Add(boAppUserLocation);
			}
			catch
			{
				RollbackTransaction("addAppUserLocation");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUserLocation
		///This method deletes all BOAppUserLocation objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUserLocation()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUserLocation");
			try
			{
				DAOAppUserLocation.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boAppUserLocationCollection != null)
				{
					_boAppUserLocationCollection.Clear();
					_boAppUserLocationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUserLocation");
				throw;
			}
		}
		
		///<Summary>
		///LoadRepresentativeCollection
		///This method loads the internal collection of BORepresentative objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRepresentativeCollection()
		{
			try
			{
				_boRepresentativeCollection = new List<BORepresentative>();
				IList<DAORepresentative> daoRepresentativeCollection = DAORepresentative.SelectAllByUserId(_userId.Value);
				
				foreach(DAORepresentative daoRepresentative in daoRepresentativeCollection)
					_boRepresentativeCollection.Add(new BORepresentative(daoRepresentative));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddRepresentative
		///This method persists a BORepresentative object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORepresentative
		///</parameters>
		public virtual void AddRepresentative(BORepresentative boRepresentative)
		{
			DAORepresentative daoRepresentative = new DAORepresentative();
			RegisterDataObject(daoRepresentative);
			BeginTransaction("addRepresentative");
			try
			{
				daoRepresentative.RepresentativeId = boRepresentative.RepresentativeId;
				daoRepresentative.BranchId = boRepresentative.BranchId;
				daoRepresentative.SupervisorId = boRepresentative.SupervisorId;
				daoRepresentative.KindId = boRepresentative.KindId;
				daoRepresentative.BusinessUnitId = boRepresentative.BusinessUnitId;
				daoRepresentative.CompanyCode = boRepresentative.CompanyCode;
				daoRepresentative.RepresentativeCode = boRepresentative.RepresentativeCode;
				daoRepresentative.RepresentativeNameAr = boRepresentative.RepresentativeNameAr;
				daoRepresentative.RepresentativeNameEn = boRepresentative.RepresentativeNameEn;
				daoRepresentative.Phone = boRepresentative.Phone;
				daoRepresentative.PhoneAlternative = boRepresentative.PhoneAlternative;
				daoRepresentative.IsActive = boRepresentative.IsActive;
				daoRepresentative.DisplayOrder = boRepresentative.DisplayOrder;
				daoRepresentative.CanEdit = boRepresentative.CanEdit;
				daoRepresentative.CanDelete = boRepresentative.CanDelete;
				daoRepresentative.JoinDate = boRepresentative.JoinDate;
				daoRepresentative.Notes = boRepresentative.Notes;
				daoRepresentative.Icon = boRepresentative.Icon;
				daoRepresentative.Color = boRepresentative.Color;
				daoRepresentative.IsTerminated = boRepresentative.IsTerminated;
				daoRepresentative.TerminationDate = boRepresentative.TerminationDate;
				daoRepresentative.TerminationReasonId = boRepresentative.TerminationReasonId;
				daoRepresentative.CBy = boRepresentative.CBy;
				daoRepresentative.CDate = boRepresentative.CDate;
				daoRepresentative.EBy = boRepresentative.EBy;
				daoRepresentative.EDate = boRepresentative.EDate;
				daoRepresentative.UserId = _userId.Value;
				daoRepresentative.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRepresentative = new BORepresentative(daoRepresentative);
				if(_boRepresentativeCollection != null)
					_boRepresentativeCollection.Add(boRepresentative);
			}
			catch
			{
				RollbackTransaction("addRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllRepresentative
		///This method deletes all BORepresentative objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRepresentative()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRepresentative");
			try
			{
				DAORepresentative.DeleteAllByUserId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boRepresentativeCollection != null)
				{
					_boRepresentativeCollection.Clear();
					_boRepresentativeCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllRepresentative");
				throw;
			}
		}
		
		///<Summary>
		///LoadSalesOrderCollection
		///This method loads the internal collection of BOSalesOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadSalesOrderCollection()
		{
			try
			{
				_boSalesOrderCollection = new List<BOSalesOrder>();
				IList<DAOSalesOrder> daoSalesOrderCollection = DAOSalesOrder.SelectAllByAgentId(_userId.Value);
				
				foreach(DAOSalesOrder daoSalesOrder in daoSalesOrderCollection)
					_boSalesOrderCollection.Add(new BOSalesOrder(daoSalesOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddSalesOrder
		///This method persists a BOSalesOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesOrder
		///</parameters>
		public virtual void AddSalesOrder(BOSalesOrder boSalesOrder)
		{
			DAOSalesOrder daoSalesOrder = new DAOSalesOrder();
			RegisterDataObject(daoSalesOrder);
			BeginTransaction("addSalesOrder");
			try
			{
				daoSalesOrder.SalesId = boSalesOrder.SalesId;
				daoSalesOrder.SalesCode = boSalesOrder.SalesCode;
				daoSalesOrder.SalesOrderTypeId = boSalesOrder.SalesOrderTypeId;
				daoSalesOrder.ClientId = boSalesOrder.ClientId;
				daoSalesOrder.BranchId = boSalesOrder.BranchId;
				daoSalesOrder.RepresentativeId = boSalesOrder.RepresentativeId;
				daoSalesOrder.StoreId = boSalesOrder.StoreId;
				daoSalesOrder.PriorityTypeId = boSalesOrder.PriorityTypeId;
				daoSalesOrder.PaymentTermId = boSalesOrder.PaymentTermId;
				daoSalesOrder.SalesDate = boSalesOrder.SalesDate;
				daoSalesOrder.SalesTime = boSalesOrder.SalesTime;
				daoSalesOrder.SalesOrderStatusId = boSalesOrder.SalesOrderStatusId;
				daoSalesOrder.SalesOrderSourceId = boSalesOrder.SalesOrderSourceId;
				daoSalesOrder.SalesChannelId = boSalesOrder.SalesChannelId;
				daoSalesOrder.SalesPoolId = boSalesOrder.SalesPoolId;
				daoSalesOrder.IsOpened = boSalesOrder.IsOpened;
				daoSalesOrder.OpenValue = boSalesOrder.OpenValue;
				daoSalesOrder.Latitude = boSalesOrder.Latitude;
				daoSalesOrder.Longitude = boSalesOrder.Longitude;
				daoSalesOrder.ItemTotal = boSalesOrder.ItemTotal;
				daoSalesOrder.ItemDiscountTotal = boSalesOrder.ItemDiscountTotal;
				daoSalesOrder.TaxTotal = boSalesOrder.TaxTotal;
				daoSalesOrder.CashDiscountTotal = boSalesOrder.CashDiscountTotal;
				daoSalesOrder.CustomDiscountTypeId = boSalesOrder.CustomDiscountTypeId;
				daoSalesOrder.CustomDiscountValue = boSalesOrder.CustomDiscountValue;
				daoSalesOrder.CustomDiscountTotal = boSalesOrder.CustomDiscountTotal;
				daoSalesOrder.DeliveryTotal = boSalesOrder.DeliveryTotal;
				daoSalesOrder.NetTotal = boSalesOrder.NetTotal;
				daoSalesOrder.Notes = boSalesOrder.Notes;
				daoSalesOrder.InvoiceRetry = boSalesOrder.InvoiceRetry;
				daoSalesOrder.HasError = boSalesOrder.HasError;
				daoSalesOrder.IsInvoiced = boSalesOrder.IsInvoiced;
				daoSalesOrder.InvoiceCode = boSalesOrder.InvoiceCode;
				daoSalesOrder.InvoiceDate = boSalesOrder.InvoiceDate;
				daoSalesOrder.CreateDate = boSalesOrder.CreateDate;
				daoSalesOrder.RecId = boSalesOrder.RecId;
				daoSalesOrder.CBy = boSalesOrder.CBy;
				daoSalesOrder.CDate = boSalesOrder.CDate;
				daoSalesOrder.EBy = boSalesOrder.EBy;
				daoSalesOrder.EDate = boSalesOrder.EDate;
				daoSalesOrder.SalesPerenId = boSalesOrder.SalesPerenId;
				daoSalesOrder.Inprogress = boSalesOrder.Inprogress;
				daoSalesOrder.IsBackoffice = boSalesOrder.IsBackoffice;
				daoSalesOrder.IsDeleted = boSalesOrder.IsDeleted;
				daoSalesOrder.AgentId = _userId.Value;
				daoSalesOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boSalesOrder = new BOSalesOrder(daoSalesOrder);
				if(_boSalesOrderCollection != null)
					_boSalesOrderCollection.Add(boSalesOrder);
			}
			catch
			{
				RollbackTransaction("addSalesOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllSalesOrder
		///This method deletes all BOSalesOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllSalesOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllSalesOrder");
			try
			{
				DAOSalesOrder.DeleteAllByAgentId(ConnectionProvider, _userId.Value);
				CommitTransaction();
				if(_boSalesOrderCollection != null)
				{
					_boSalesOrderCollection.Clear();
					_boSalesOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllSalesOrder");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AppRoleId
		{
			get
			{
				 return _appRoleId;
			}
			set
			{
				_appRoleId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UserGroupId
		{
			get
			{
				 return _userGroupId;
			}
			set
			{
				_userGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RealName
		{
			get
			{
				 return _realName;
			}
			set
			{
				_realName = value;
				_isDirty = true;
			}
		}
		
		public virtual string UserName
		{
			get
			{
				 return _userName;
			}
			set
			{
				_userName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Password
		{
			get
			{
				 return _password;
			}
			set
			{
				_password = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsOnline
		{
			get
			{
				 return _isOnline;
			}
			set
			{
				_isOnline = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsLocked
		{
			get
			{
				 return _isLocked;
			}
			set
			{
				_isLocked = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? MustChangeData
		{
			get
			{
				 return _mustChangeData;
			}
			set
			{
				_mustChangeData = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? LastLogin
		{
			get
			{
				 return _lastLogin;
			}
			set
			{
				_lastLogin = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? MustChangePassword
		{
			get
			{
				 return _mustChangePassword;
			}
			set
			{
				_mustChangePassword = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? EmailVerified
		{
			get
			{
				 return _emailVerified;
			}
			set
			{
				_emailVerified = value;
				_isDirty = true;
			}
		}
		
		public virtual string FirebaseId
		{
			get
			{
				 return _firebaseId;
			}
			set
			{
				_firebaseId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SignalrId
		{
			get
			{
				 return _signalrId;
			}
			set
			{
				_signalrId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FailedCount
		{
			get
			{
				 return _failedCount;
			}
			set
			{
				_failedCount = value;
				_isDirty = true;
			}
		}
		
		public virtual string DefaultRoute
		{
			get
			{
				 return _defaultRoute;
			}
			set
			{
				_defaultRoute = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string WhatsApp
		{
			get
			{
				 return _whatsApp;
			}
			set
			{
				_whatsApp = value;
				_isDirty = true;
			}
		}
		
		public virtual string ZoomId
		{
			get
			{
				 return _zoomId;
			}
			set
			{
				_zoomId = value;
				_isDirty = true;
			}
		}
		
		public virtual string LinkedIn
		{
			get
			{
				 return _linkedIn;
			}
			set
			{
				_linkedIn = value;
				_isDirty = true;
			}
		}
		
		public virtual string UserBio
		{
			get
			{
				 return _userBio;
			}
			set
			{
				_userBio = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Latitude
		{
			get
			{
				 return _latitude;
			}
			set
			{
				_latitude = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Longitude
		{
			get
			{
				 return _longitude;
			}
			set
			{
				_longitude = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string Email
		{
			get
			{
				 return _email;
			}
			set
			{
				_email = value;
				_isDirty = true;
			}
		}
		
		public virtual string Fax
		{
			get
			{
				 return _fax;
			}
			set
			{
				_fax = value;
				_isDirty = true;
			}
		}
		
		public virtual string Internal
		{
			get
			{
				 return _internal;
			}
			set
			{
				_internal = value;
				_isDirty = true;
			}
		}
		
		public virtual string JobTitle
		{
			get
			{
				 return _jobTitle;
			}
			set
			{
				_jobTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual string Avatar
		{
			get
			{
				 return _avatar;
			}
			set
			{
				_avatar = value;
				_isDirty = true;
			}
		}
		
		public virtual string Mobile
		{
			get
			{
				 return _mobile;
			}
			set
			{
				_mobile = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string PrimaryMobile
		{
			get
			{
				 return _primaryMobile;
			}
			set
			{
				_primaryMobile = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? MobileVerified
		{
			get
			{
				 return _mobileVerified;
			}
			set
			{
				_mobileVerified = value;
				_isDirty = true;
			}
		}
		
		public virtual string VerificationCode
		{
			get
			{
				 return _verificationCode;
			}
			set
			{
				_verificationCode = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
