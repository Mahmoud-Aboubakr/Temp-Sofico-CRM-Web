/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOApplicationFeature.
	///It maintains a collection of BOApplicationFeaturePermission,BOAppRoleFeature objects.
	///</Summary>
	public partial class BOApplicationFeature : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _featueId;
		protected Int32? _applicationId;
		protected string _featueCode;
		protected string _featueNameEn;
		protected string _featueNameAr;
		protected string _featuePath;
		protected string _icon;
		protected string _color;
		protected Int32? _displyOrder;
		protected bool? _isActive;
		protected bool? _isNew;
		protected bool? _isUpdated;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOApplicationFeaturePermission> _boApplicationFeaturePermissionCollection;
		List<BOAppRoleFeature> _boAppRoleFeatureCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOApplicationFeature()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 featueId
		///</parameters>
		public BOApplicationFeature(Int32 featueId)
		{
			try
			{
				DAOApplicationFeature daoApplicationFeature = DAOApplicationFeature.SelectOne(featueId);
				_featueId = daoApplicationFeature.FeatueId;
				_applicationId = daoApplicationFeature.ApplicationId;
				_featueCode = daoApplicationFeature.FeatueCode;
				_featueNameEn = daoApplicationFeature.FeatueNameEn;
				_featueNameAr = daoApplicationFeature.FeatueNameAr;
				_featuePath = daoApplicationFeature.FeatuePath;
				_icon = daoApplicationFeature.Icon;
				_color = daoApplicationFeature.Color;
				_displyOrder = daoApplicationFeature.DisplyOrder;
				_isActive = daoApplicationFeature.IsActive;
				_isNew = daoApplicationFeature.IsNew;
				_isUpdated = daoApplicationFeature.IsUpdated;
				_canEdit = daoApplicationFeature.CanEdit;
				_canDelete = daoApplicationFeature.CanDelete;
				_cBy = daoApplicationFeature.CBy;
				_cDate = daoApplicationFeature.CDate;
				_eBy = daoApplicationFeature.EBy;
				_eDate = daoApplicationFeature.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOApplicationFeature
		///</parameters>
		protected internal BOApplicationFeature(DAOApplicationFeature daoApplicationFeature)
		{
			try
			{
				_featueId = daoApplicationFeature.FeatueId;
				_applicationId = daoApplicationFeature.ApplicationId;
				_featueCode = daoApplicationFeature.FeatueCode;
				_featueNameEn = daoApplicationFeature.FeatueNameEn;
				_featueNameAr = daoApplicationFeature.FeatueNameAr;
				_featuePath = daoApplicationFeature.FeatuePath;
				_icon = daoApplicationFeature.Icon;
				_color = daoApplicationFeature.Color;
				_displyOrder = daoApplicationFeature.DisplyOrder;
				_isActive = daoApplicationFeature.IsActive;
				_isNew = daoApplicationFeature.IsNew;
				_isUpdated = daoApplicationFeature.IsUpdated;
				_canEdit = daoApplicationFeature.CanEdit;
				_canDelete = daoApplicationFeature.CanDelete;
				_cBy = daoApplicationFeature.CBy;
				_cDate = daoApplicationFeature.CDate;
				_eBy = daoApplicationFeature.EBy;
				_eDate = daoApplicationFeature.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ApplicationFeature record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOApplicationFeature daoApplicationFeature = new DAOApplicationFeature();
			RegisterDataObject(daoApplicationFeature);
			BeginTransaction("savenewBOApplicationFeature");
			try
			{
				daoApplicationFeature.ApplicationId = _applicationId;
				daoApplicationFeature.FeatueCode = _featueCode;
				daoApplicationFeature.FeatueNameEn = _featueNameEn;
				daoApplicationFeature.FeatueNameAr = _featueNameAr;
				daoApplicationFeature.FeatuePath = _featuePath;
				daoApplicationFeature.Icon = _icon;
				daoApplicationFeature.Color = _color;
				daoApplicationFeature.DisplyOrder = _displyOrder;
				daoApplicationFeature.IsActive = _isActive;
				daoApplicationFeature.IsNew = _isNew;
				daoApplicationFeature.IsUpdated = _isUpdated;
				daoApplicationFeature.CanEdit = _canEdit;
				daoApplicationFeature.CanDelete = _canDelete;
				daoApplicationFeature.CBy = _cBy;
				daoApplicationFeature.CDate = _cDate;
				daoApplicationFeature.EBy = _eBy;
				daoApplicationFeature.EDate = _eDate;
				daoApplicationFeature.Insert();
				CommitTransaction();
				
				_featueId = daoApplicationFeature.FeatueId;
				_applicationId = daoApplicationFeature.ApplicationId;
				_featueCode = daoApplicationFeature.FeatueCode;
				_featueNameEn = daoApplicationFeature.FeatueNameEn;
				_featueNameAr = daoApplicationFeature.FeatueNameAr;
				_featuePath = daoApplicationFeature.FeatuePath;
				_icon = daoApplicationFeature.Icon;
				_color = daoApplicationFeature.Color;
				_displyOrder = daoApplicationFeature.DisplyOrder;
				_isActive = daoApplicationFeature.IsActive;
				_isNew = daoApplicationFeature.IsNew;
				_isUpdated = daoApplicationFeature.IsUpdated;
				_canEdit = daoApplicationFeature.CanEdit;
				_canDelete = daoApplicationFeature.CanDelete;
				_cBy = daoApplicationFeature.CBy;
				_cDate = daoApplicationFeature.CDate;
				_eBy = daoApplicationFeature.EBy;
				_eDate = daoApplicationFeature.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOApplicationFeature");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ApplicationFeature record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOApplicationFeature
		///</parameters>
		public virtual void Update()
		{
			DAOApplicationFeature daoApplicationFeature = new DAOApplicationFeature();
			RegisterDataObject(daoApplicationFeature);
			BeginTransaction("updateBOApplicationFeature");
			try
			{
				daoApplicationFeature.FeatueId = _featueId;
				daoApplicationFeature.ApplicationId = _applicationId;
				daoApplicationFeature.FeatueCode = _featueCode;
				daoApplicationFeature.FeatueNameEn = _featueNameEn;
				daoApplicationFeature.FeatueNameAr = _featueNameAr;
				daoApplicationFeature.FeatuePath = _featuePath;
				daoApplicationFeature.Icon = _icon;
				daoApplicationFeature.Color = _color;
				daoApplicationFeature.DisplyOrder = _displyOrder;
				daoApplicationFeature.IsActive = _isActive;
				daoApplicationFeature.IsNew = _isNew;
				daoApplicationFeature.IsUpdated = _isUpdated;
				daoApplicationFeature.CanEdit = _canEdit;
				daoApplicationFeature.CanDelete = _canDelete;
				daoApplicationFeature.CBy = _cBy;
				daoApplicationFeature.CDate = _cDate;
				daoApplicationFeature.EBy = _eBy;
				daoApplicationFeature.EDate = _eDate;
				daoApplicationFeature.Update();
				CommitTransaction();
				
				_featueId = daoApplicationFeature.FeatueId;
				_applicationId = daoApplicationFeature.ApplicationId;
				_featueCode = daoApplicationFeature.FeatueCode;
				_featueNameEn = daoApplicationFeature.FeatueNameEn;
				_featueNameAr = daoApplicationFeature.FeatueNameAr;
				_featuePath = daoApplicationFeature.FeatuePath;
				_icon = daoApplicationFeature.Icon;
				_color = daoApplicationFeature.Color;
				_displyOrder = daoApplicationFeature.DisplyOrder;
				_isActive = daoApplicationFeature.IsActive;
				_isNew = daoApplicationFeature.IsNew;
				_isUpdated = daoApplicationFeature.IsUpdated;
				_canEdit = daoApplicationFeature.CanEdit;
				_canDelete = daoApplicationFeature.CanDelete;
				_cBy = daoApplicationFeature.CBy;
				_cDate = daoApplicationFeature.CDate;
				_eBy = daoApplicationFeature.EBy;
				_eDate = daoApplicationFeature.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOApplicationFeature");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ApplicationFeature record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOApplicationFeature daoApplicationFeature = new DAOApplicationFeature();
			RegisterDataObject(daoApplicationFeature);
			BeginTransaction("deleteBOApplicationFeature");
			try
			{
				daoApplicationFeature.FeatueId = _featueId;
				daoApplicationFeature.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOApplicationFeature");
				throw;
			}
		}
		
		///<Summary>
		///ApplicationFeatureCollection
		///This method returns the collection of BOApplicationFeature objects
		///</Summary>
		///<returns>
		///List[BOApplicationFeature]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOApplicationFeature> ApplicationFeatureCollection()
		{
			try
			{
				IList<BOApplicationFeature> boApplicationFeatureCollection = new List<BOApplicationFeature>();
				IList<DAOApplicationFeature> daoApplicationFeatureCollection = DAOApplicationFeature.SelectAll();
			
				foreach(DAOApplicationFeature daoApplicationFeature in daoApplicationFeatureCollection)
					boApplicationFeatureCollection.Add(new BOApplicationFeature(daoApplicationFeature));
			
				return boApplicationFeatureCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationFeatureCollectionCount
		///This method returns the collection count of BOApplicationFeature objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ApplicationFeatureCollectionCount()
		{
			try
			{
				Int32 objCount = DAOApplicationFeature.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ApplicationFeaturePermissionCollection
		///This method returns its collection of BOApplicationFeaturePermission objects
		///</Summary>
		///<returns>
		///IList[BOApplicationFeaturePermission]
		///</returns>
		///<parameters>
		///BOApplicationFeature
		///</parameters>
		public virtual IList<BOApplicationFeaturePermission> ApplicationFeaturePermissionCollection()
		{
			try
			{
				if(_boApplicationFeaturePermissionCollection == null)
					LoadApplicationFeaturePermissionCollection();
				
				return _boApplicationFeaturePermissionCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppRoleFeatureCollection
		///This method returns its collection of BOAppRoleFeature objects
		///</Summary>
		///<returns>
		///IList[BOAppRoleFeature]
		///</returns>
		///<parameters>
		///BOApplicationFeature
		///</parameters>
		public virtual IList<BOAppRoleFeature> AppRoleFeatureCollection()
		{
			try
			{
				if(_boAppRoleFeatureCollection == null)
					LoadAppRoleFeatureCollection();
				
				return _boAppRoleFeatureCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOApplicationFeature>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOApplicationFeature.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationFeatureCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOApplicationFeature objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boApplicationFeatureCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOApplicationFeature> daoApplicationFeatureCollection = DAOApplicationFeature.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOApplicationFeature resdaoApplicationFeature in daoApplicationFeatureCollection)
					boApplicationFeatureCollection.Add((T)(object)new BOApplicationFeature(resdaoApplicationFeature));
			
				return boApplicationFeatureCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationFeatureCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOApplicationFeature objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOApplicationFeature.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadApplicationFeaturePermissionCollection
		///This method loads the internal collection of BOApplicationFeaturePermission objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadApplicationFeaturePermissionCollection()
		{
			try
			{
				_boApplicationFeaturePermissionCollection = new List<BOApplicationFeaturePermission>();
				IList<DAOApplicationFeaturePermission> daoApplicationFeaturePermissionCollection = DAOApplicationFeaturePermission.SelectAllByFeatueId(_featueId.Value);
				
				foreach(DAOApplicationFeaturePermission daoApplicationFeaturePermission in daoApplicationFeaturePermissionCollection)
					_boApplicationFeaturePermissionCollection.Add(new BOApplicationFeaturePermission(daoApplicationFeaturePermission));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddApplicationFeaturePermission
		///This method persists a BOApplicationFeaturePermission object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOApplicationFeaturePermission
		///</parameters>
		public virtual void AddApplicationFeaturePermission(BOApplicationFeaturePermission boApplicationFeaturePermission)
		{
			DAOApplicationFeaturePermission daoApplicationFeaturePermission = new DAOApplicationFeaturePermission();
			RegisterDataObject(daoApplicationFeaturePermission);
			BeginTransaction("addApplicationFeaturePermission");
			try
			{
				daoApplicationFeaturePermission.FeaturePermissionId = boApplicationFeaturePermission.FeaturePermissionId;
				daoApplicationFeaturePermission.FeaturePermissionCode = boApplicationFeaturePermission.FeaturePermissionCode;
				daoApplicationFeaturePermission.FeaturePermissionNameEn = boApplicationFeaturePermission.FeaturePermissionNameEn;
				daoApplicationFeaturePermission.FeaturePermissionNameAr = boApplicationFeaturePermission.FeaturePermissionNameAr;
				daoApplicationFeaturePermission.Icon = boApplicationFeaturePermission.Icon;
				daoApplicationFeaturePermission.Color = boApplicationFeaturePermission.Color;
				daoApplicationFeaturePermission.IsActive = boApplicationFeaturePermission.IsActive;
				daoApplicationFeaturePermission.CanEdit = boApplicationFeaturePermission.CanEdit;
				daoApplicationFeaturePermission.CanDelete = boApplicationFeaturePermission.CanDelete;
				daoApplicationFeaturePermission.CBy = boApplicationFeaturePermission.CBy;
				daoApplicationFeaturePermission.CDate = boApplicationFeaturePermission.CDate;
				daoApplicationFeaturePermission.EBy = boApplicationFeaturePermission.EBy;
				daoApplicationFeaturePermission.EDate = boApplicationFeaturePermission.EDate;
				daoApplicationFeaturePermission.FeatueId = _featueId.Value;
				daoApplicationFeaturePermission.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boApplicationFeaturePermission = new BOApplicationFeaturePermission(daoApplicationFeaturePermission);
				if(_boApplicationFeaturePermissionCollection != null)
					_boApplicationFeaturePermissionCollection.Add(boApplicationFeaturePermission);
			}
			catch
			{
				RollbackTransaction("addApplicationFeaturePermission");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllApplicationFeaturePermission
		///This method deletes all BOApplicationFeaturePermission objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllApplicationFeaturePermission()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllApplicationFeatureP410");
			try
			{
				DAOApplicationFeaturePermission.DeleteAllByFeatueId(ConnectionProvider, _featueId.Value);
				CommitTransaction();
				if(_boApplicationFeaturePermissionCollection != null)
				{
					_boApplicationFeaturePermissionCollection.Clear();
					_boApplicationFeaturePermissionCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllApplicationFeatureP410");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppRoleFeatureCollection
		///This method loads the internal collection of BOAppRoleFeature objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppRoleFeatureCollection()
		{
			try
			{
				_boAppRoleFeatureCollection = new List<BOAppRoleFeature>();
				IList<DAOAppRoleFeature> daoAppRoleFeatureCollection = DAOAppRoleFeature.SelectAllByFeatueId(_featueId.Value);
				
				foreach(DAOAppRoleFeature daoAppRoleFeature in daoAppRoleFeatureCollection)
					_boAppRoleFeatureCollection.Add(new BOAppRoleFeature(daoAppRoleFeature));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppRoleFeature
		///This method persists a BOAppRoleFeature object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppRoleFeature
		///</parameters>
		public virtual void AddAppRoleFeature(BOAppRoleFeature boAppRoleFeature)
		{
			DAOAppRoleFeature daoAppRoleFeature = new DAOAppRoleFeature();
			RegisterDataObject(daoAppRoleFeature);
			BeginTransaction("addAppRoleFeature");
			try
			{
				daoAppRoleFeature.AppRoleFeatueId = boAppRoleFeature.AppRoleFeatueId;
				daoAppRoleFeature.AppRoleId = boAppRoleFeature.AppRoleId;
				daoAppRoleFeature.CBy = boAppRoleFeature.CBy;
				daoAppRoleFeature.CDate = boAppRoleFeature.CDate;
				daoAppRoleFeature.EBy = boAppRoleFeature.EBy;
				daoAppRoleFeature.EDate = boAppRoleFeature.EDate;
				daoAppRoleFeature.FeatueId = _featueId.Value;
				daoAppRoleFeature.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppRoleFeature = new BOAppRoleFeature(daoAppRoleFeature);
				if(_boAppRoleFeatureCollection != null)
					_boAppRoleFeatureCollection.Add(boAppRoleFeature);
			}
			catch
			{
				RollbackTransaction("addAppRoleFeature");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppRoleFeature
		///This method deletes all BOAppRoleFeature objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppRoleFeature()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppRoleFeature");
			try
			{
				DAOAppRoleFeature.DeleteAllByFeatueId(ConnectionProvider, _featueId.Value);
				CommitTransaction();
				if(_boAppRoleFeatureCollection != null)
				{
					_boAppRoleFeatureCollection.Clear();
					_boAppRoleFeatureCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppRoleFeature");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? FeatueId
		{
			get
			{
				 return _featueId;
			}
			set
			{
				_featueId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ApplicationId
		{
			get
			{
				 return _applicationId;
			}
			set
			{
				_applicationId = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatueCode
		{
			get
			{
				 return _featueCode;
			}
			set
			{
				_featueCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatueNameEn
		{
			get
			{
				 return _featueNameEn;
			}
			set
			{
				_featueNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatueNameAr
		{
			get
			{
				 return _featueNameAr;
			}
			set
			{
				_featueNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string FeatuePath
		{
			get
			{
				 return _featuePath;
			}
			set
			{
				_featuePath = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplyOrder
		{
			get
			{
				 return _displyOrder;
			}
			set
			{
				_displyOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsNew
		{
			get
			{
				 return _isNew;
			}
			set
			{
				_isNew = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsUpdated
		{
			get
			{
				 return _isUpdated;
			}
			set
			{
				_isUpdated = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
