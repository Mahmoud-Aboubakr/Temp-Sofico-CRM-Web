/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:40 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOVendorVw.
	///</Summary>
	public partial class BOVendorVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _vendorId;
		protected string _vendorCode;
		protected Int32? _vendorGroupId;
		protected string _vendorNameEn;
		protected string _vendorNameAr;
		protected bool? _isLocal;
		protected bool? _isActive;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _vendorGroupNameAr;
		protected string _vendorGroupNameEn;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOVendorVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOVendorVw
		///</parameters>
		protected internal BOVendorVw(DAOVendorVw daoVendorVw)
		{
			try
			{
				_vendorId = daoVendorVw.VendorId;
				_vendorCode = daoVendorVw.VendorCode;
				_vendorGroupId = daoVendorVw.VendorGroupId;
				_vendorNameEn = daoVendorVw.VendorNameEn;
				_vendorNameAr = daoVendorVw.VendorNameAr;
				_isLocal = daoVendorVw.IsLocal;
				_isActive = daoVendorVw.IsActive;
				_displayOrder = daoVendorVw.DisplayOrder;
				_color = daoVendorVw.Color;
				_icon = daoVendorVw.Icon;
				_canEdit = daoVendorVw.CanEdit;
				_canDelete = daoVendorVw.CanDelete;
				_vendorGroupNameAr = daoVendorVw.VendorGroupNameAr;
				_vendorGroupNameEn = daoVendorVw.VendorGroupNameEn;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///VendorVwCollection
		///This method returns the collection of BOVendorVw objects
		///</Summary>
		///<returns>
		///List[BOVendorVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOVendorVw> VendorVwCollection()
		{
			try
			{
				IList<BOVendorVw> boVendorVwCollection = new List<BOVendorVw>();
				IList<DAOVendorVw> daoVendorVwCollection = DAOVendorVw.SelectAll();
			
				foreach(DAOVendorVw daoVendorVw in daoVendorVwCollection)
					boVendorVwCollection.Add(new BOVendorVw(daoVendorVw));
			
				return boVendorVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorVwCollectionCount
		///This method returns the collection count of BOVendorVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 VendorVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOVendorVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOVendorVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOVendorVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOVendorVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boVendorVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOVendorVw> daoVendorVwCollection = DAOVendorVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOVendorVw resdaoVendorVw in daoVendorVwCollection)
					boVendorVwCollection.Add((T)(object)new BOVendorVw(resdaoVendorVw));
			
				return boVendorVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOVendorVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOVendorVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? VendorId
		{
			get
			{
				 return _vendorId;
			}
			set
			{
				_vendorId = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorCode
		{
			get
			{
				 return _vendorCode;
			}
			set
			{
				_vendorCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VendorGroupId
		{
			get
			{
				 return _vendorGroupId;
			}
			set
			{
				_vendorGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorNameEn
		{
			get
			{
				 return _vendorNameEn;
			}
			set
			{
				_vendorNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorNameAr
		{
			get
			{
				 return _vendorNameAr;
			}
			set
			{
				_vendorNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsLocal
		{
			get
			{
				 return _isLocal;
			}
			set
			{
				_isLocal = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorGroupNameAr
		{
			get
			{
				 return _vendorGroupNameAr;
			}
			set
			{
				_vendorGroupNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorGroupNameEn
		{
			get
			{
				 return _vendorGroupNameEn;
			}
			set
			{
				_vendorGroupNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
