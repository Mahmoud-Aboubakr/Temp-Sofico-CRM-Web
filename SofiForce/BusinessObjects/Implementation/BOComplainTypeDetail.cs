/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOComplainTypeDetail.
	///It maintains a collection of BOClientComplain objects.
	///</Summary>
	public partial class BOComplainTypeDetail : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _complainTypeDetailId;
		protected Int32? _complainTypeId;
		protected string _complainTypeDetailCode;
		protected string _complainTypeDetailNameAr;
		protected string _complainTypeDetailNameEn;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientComplain> _boClientComplainCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOComplainTypeDetail()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 complainTypeDetailId
		///</parameters>
		public BOComplainTypeDetail(Int32 complainTypeDetailId)
		{
			try
			{
				DAOComplainTypeDetail daoComplainTypeDetail = DAOComplainTypeDetail.SelectOne(complainTypeDetailId);
				_complainTypeDetailId = daoComplainTypeDetail.ComplainTypeDetailId;
				_complainTypeId = daoComplainTypeDetail.ComplainTypeId;
				_complainTypeDetailCode = daoComplainTypeDetail.ComplainTypeDetailCode;
				_complainTypeDetailNameAr = daoComplainTypeDetail.ComplainTypeDetailNameAr;
				_complainTypeDetailNameEn = daoComplainTypeDetail.ComplainTypeDetailNameEn;
				_isActive = daoComplainTypeDetail.IsActive;
				_canEdit = daoComplainTypeDetail.CanEdit;
				_canDelete = daoComplainTypeDetail.CanDelete;
				_displayOrder = daoComplainTypeDetail.DisplayOrder;
				_color = daoComplainTypeDetail.Color;
				_icon = daoComplainTypeDetail.Icon;
				_cBy = daoComplainTypeDetail.CBy;
				_cDate = daoComplainTypeDetail.CDate;
				_eBy = daoComplainTypeDetail.EBy;
				_eDate = daoComplainTypeDetail.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOComplainTypeDetail
		///</parameters>
		protected internal BOComplainTypeDetail(DAOComplainTypeDetail daoComplainTypeDetail)
		{
			try
			{
				_complainTypeDetailId = daoComplainTypeDetail.ComplainTypeDetailId;
				_complainTypeId = daoComplainTypeDetail.ComplainTypeId;
				_complainTypeDetailCode = daoComplainTypeDetail.ComplainTypeDetailCode;
				_complainTypeDetailNameAr = daoComplainTypeDetail.ComplainTypeDetailNameAr;
				_complainTypeDetailNameEn = daoComplainTypeDetail.ComplainTypeDetailNameEn;
				_isActive = daoComplainTypeDetail.IsActive;
				_canEdit = daoComplainTypeDetail.CanEdit;
				_canDelete = daoComplainTypeDetail.CanDelete;
				_displayOrder = daoComplainTypeDetail.DisplayOrder;
				_color = daoComplainTypeDetail.Color;
				_icon = daoComplainTypeDetail.Icon;
				_cBy = daoComplainTypeDetail.CBy;
				_cDate = daoComplainTypeDetail.CDate;
				_eBy = daoComplainTypeDetail.EBy;
				_eDate = daoComplainTypeDetail.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ComplainTypeDetail record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOComplainTypeDetail daoComplainTypeDetail = new DAOComplainTypeDetail();
			RegisterDataObject(daoComplainTypeDetail);
			BeginTransaction("savenewBOComplainTypeDetail");
			try
			{
				daoComplainTypeDetail.ComplainTypeId = _complainTypeId;
				daoComplainTypeDetail.ComplainTypeDetailCode = _complainTypeDetailCode;
				daoComplainTypeDetail.ComplainTypeDetailNameAr = _complainTypeDetailNameAr;
				daoComplainTypeDetail.ComplainTypeDetailNameEn = _complainTypeDetailNameEn;
				daoComplainTypeDetail.IsActive = _isActive;
				daoComplainTypeDetail.CanEdit = _canEdit;
				daoComplainTypeDetail.CanDelete = _canDelete;
				daoComplainTypeDetail.DisplayOrder = _displayOrder;
				daoComplainTypeDetail.Color = _color;
				daoComplainTypeDetail.Icon = _icon;
				daoComplainTypeDetail.CBy = _cBy;
				daoComplainTypeDetail.CDate = _cDate;
				daoComplainTypeDetail.EBy = _eBy;
				daoComplainTypeDetail.EDate = _eDate;
				daoComplainTypeDetail.Insert();
				CommitTransaction();
				
				_complainTypeDetailId = daoComplainTypeDetail.ComplainTypeDetailId;
				_complainTypeId = daoComplainTypeDetail.ComplainTypeId;
				_complainTypeDetailCode = daoComplainTypeDetail.ComplainTypeDetailCode;
				_complainTypeDetailNameAr = daoComplainTypeDetail.ComplainTypeDetailNameAr;
				_complainTypeDetailNameEn = daoComplainTypeDetail.ComplainTypeDetailNameEn;
				_isActive = daoComplainTypeDetail.IsActive;
				_canEdit = daoComplainTypeDetail.CanEdit;
				_canDelete = daoComplainTypeDetail.CanDelete;
				_displayOrder = daoComplainTypeDetail.DisplayOrder;
				_color = daoComplainTypeDetail.Color;
				_icon = daoComplainTypeDetail.Icon;
				_cBy = daoComplainTypeDetail.CBy;
				_cDate = daoComplainTypeDetail.CDate;
				_eBy = daoComplainTypeDetail.EBy;
				_eDate = daoComplainTypeDetail.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOComplainTypeDetail");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ComplainTypeDetail record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOComplainTypeDetail
		///</parameters>
		public virtual void Update()
		{
			DAOComplainTypeDetail daoComplainTypeDetail = new DAOComplainTypeDetail();
			RegisterDataObject(daoComplainTypeDetail);
			BeginTransaction("updateBOComplainTypeDetail");
			try
			{
				daoComplainTypeDetail.ComplainTypeDetailId = _complainTypeDetailId;
				daoComplainTypeDetail.ComplainTypeId = _complainTypeId;
				daoComplainTypeDetail.ComplainTypeDetailCode = _complainTypeDetailCode;
				daoComplainTypeDetail.ComplainTypeDetailNameAr = _complainTypeDetailNameAr;
				daoComplainTypeDetail.ComplainTypeDetailNameEn = _complainTypeDetailNameEn;
				daoComplainTypeDetail.IsActive = _isActive;
				daoComplainTypeDetail.CanEdit = _canEdit;
				daoComplainTypeDetail.CanDelete = _canDelete;
				daoComplainTypeDetail.DisplayOrder = _displayOrder;
				daoComplainTypeDetail.Color = _color;
				daoComplainTypeDetail.Icon = _icon;
				daoComplainTypeDetail.CBy = _cBy;
				daoComplainTypeDetail.CDate = _cDate;
				daoComplainTypeDetail.EBy = _eBy;
				daoComplainTypeDetail.EDate = _eDate;
				daoComplainTypeDetail.Update();
				CommitTransaction();
				
				_complainTypeDetailId = daoComplainTypeDetail.ComplainTypeDetailId;
				_complainTypeId = daoComplainTypeDetail.ComplainTypeId;
				_complainTypeDetailCode = daoComplainTypeDetail.ComplainTypeDetailCode;
				_complainTypeDetailNameAr = daoComplainTypeDetail.ComplainTypeDetailNameAr;
				_complainTypeDetailNameEn = daoComplainTypeDetail.ComplainTypeDetailNameEn;
				_isActive = daoComplainTypeDetail.IsActive;
				_canEdit = daoComplainTypeDetail.CanEdit;
				_canDelete = daoComplainTypeDetail.CanDelete;
				_displayOrder = daoComplainTypeDetail.DisplayOrder;
				_color = daoComplainTypeDetail.Color;
				_icon = daoComplainTypeDetail.Icon;
				_cBy = daoComplainTypeDetail.CBy;
				_cDate = daoComplainTypeDetail.CDate;
				_eBy = daoComplainTypeDetail.EBy;
				_eDate = daoComplainTypeDetail.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOComplainTypeDetail");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ComplainTypeDetail record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOComplainTypeDetail daoComplainTypeDetail = new DAOComplainTypeDetail();
			RegisterDataObject(daoComplainTypeDetail);
			BeginTransaction("deleteBOComplainTypeDetail");
			try
			{
				daoComplainTypeDetail.ComplainTypeDetailId = _complainTypeDetailId;
				daoComplainTypeDetail.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOComplainTypeDetail");
				throw;
			}
		}
		
		///<Summary>
		///ComplainTypeDetailCollection
		///This method returns the collection of BOComplainTypeDetail objects
		///</Summary>
		///<returns>
		///List[BOComplainTypeDetail]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOComplainTypeDetail> ComplainTypeDetailCollection()
		{
			try
			{
				IList<BOComplainTypeDetail> boComplainTypeDetailCollection = new List<BOComplainTypeDetail>();
				IList<DAOComplainTypeDetail> daoComplainTypeDetailCollection = DAOComplainTypeDetail.SelectAll();
			
				foreach(DAOComplainTypeDetail daoComplainTypeDetail in daoComplainTypeDetailCollection)
					boComplainTypeDetailCollection.Add(new BOComplainTypeDetail(daoComplainTypeDetail));
			
				return boComplainTypeDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainTypeDetailCollectionCount
		///This method returns the collection count of BOComplainTypeDetail objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ComplainTypeDetailCollectionCount()
		{
			try
			{
				Int32 objCount = DAOComplainTypeDetail.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BOComplainTypeDetail
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOComplainTypeDetail>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOComplainTypeDetail.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainTypeDetailCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOComplainTypeDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boComplainTypeDetailCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOComplainTypeDetail> daoComplainTypeDetailCollection = DAOComplainTypeDetail.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOComplainTypeDetail resdaoComplainTypeDetail in daoComplainTypeDetailCollection)
					boComplainTypeDetailCollection.Add((T)(object)new BOComplainTypeDetail(resdaoComplainTypeDetail));
			
				return boComplainTypeDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainTypeDetailCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOComplainTypeDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOComplainTypeDetail.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByComplainTypeDetailId(_complainTypeDetailId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.BranchId = boClientComplain.BranchId;
				daoClientComplain.RepresentativeId = boClientComplain.RepresentativeId;
				daoClientComplain.ClientId = boClientComplain.ClientId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeId = boClientComplain.ComplainTypeId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.PriorityId = boClientComplain.PriorityId;
				daoClientComplain.ComplainStatusId = boClientComplain.ComplainStatusId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.DepartmentId = boClientComplain.DepartmentId;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.ComplainTypeDetailId = _complainTypeDetailId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByComplainTypeDetailId(ConnectionProvider, _complainTypeDetailId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ComplainTypeDetailId
		{
			get
			{
				 return _complainTypeDetailId;
			}
			set
			{
				_complainTypeDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ComplainTypeId
		{
			get
			{
				 return _complainTypeId;
			}
			set
			{
				_complainTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainTypeDetailCode
		{
			get
			{
				 return _complainTypeDetailCode;
			}
			set
			{
				_complainTypeDetailCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainTypeDetailNameAr
		{
			get
			{
				 return _complainTypeDetailNameAr;
			}
			set
			{
				_complainTypeDetailNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainTypeDetailNameEn
		{
			get
			{
				 return _complainTypeDetailNameEn;
			}
			set
			{
				_complainTypeDetailNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
