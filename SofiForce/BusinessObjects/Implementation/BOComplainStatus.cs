/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOComplainStatus.
	///It maintains a collection of BOClientComplain,BOClientComplainTimeline objects.
	///</Summary>
	public partial class BOComplainStatus : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _complainStatusId;
		protected string _complainStatusCode;
		protected string _complainStatusNameAr;
		protected string _complainStatusNameEn;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _displayOrder;
		protected string _color;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientComplain> _boClientComplainCollection;
		List<BOClientComplainTimeline> _boClientComplainTimelineCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOComplainStatus()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 complainStatusId
		///</parameters>
		public BOComplainStatus(Int32 complainStatusId)
		{
			try
			{
				DAOComplainStatus daoComplainStatus = DAOComplainStatus.SelectOne(complainStatusId);
				_complainStatusId = daoComplainStatus.ComplainStatusId;
				_complainStatusCode = daoComplainStatus.ComplainStatusCode;
				_complainStatusNameAr = daoComplainStatus.ComplainStatusNameAr;
				_complainStatusNameEn = daoComplainStatus.ComplainStatusNameEn;
				_isActive = daoComplainStatus.IsActive;
				_canEdit = daoComplainStatus.CanEdit;
				_canDelete = daoComplainStatus.CanDelete;
				_displayOrder = daoComplainStatus.DisplayOrder;
				_color = daoComplainStatus.Color;
				_cBy = daoComplainStatus.CBy;
				_cDate = daoComplainStatus.CDate;
				_eBy = daoComplainStatus.EBy;
				_eDate = daoComplainStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOComplainStatus
		///</parameters>
		protected internal BOComplainStatus(DAOComplainStatus daoComplainStatus)
		{
			try
			{
				_complainStatusId = daoComplainStatus.ComplainStatusId;
				_complainStatusCode = daoComplainStatus.ComplainStatusCode;
				_complainStatusNameAr = daoComplainStatus.ComplainStatusNameAr;
				_complainStatusNameEn = daoComplainStatus.ComplainStatusNameEn;
				_isActive = daoComplainStatus.IsActive;
				_canEdit = daoComplainStatus.CanEdit;
				_canDelete = daoComplainStatus.CanDelete;
				_displayOrder = daoComplainStatus.DisplayOrder;
				_color = daoComplainStatus.Color;
				_cBy = daoComplainStatus.CBy;
				_cDate = daoComplainStatus.CDate;
				_eBy = daoComplainStatus.EBy;
				_eDate = daoComplainStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ComplainStatus record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOComplainStatus daoComplainStatus = new DAOComplainStatus();
			RegisterDataObject(daoComplainStatus);
			BeginTransaction("savenewBOComplainStatus");
			try
			{
				daoComplainStatus.ComplainStatusId = _complainStatusId;
				daoComplainStatus.ComplainStatusCode = _complainStatusCode;
				daoComplainStatus.ComplainStatusNameAr = _complainStatusNameAr;
				daoComplainStatus.ComplainStatusNameEn = _complainStatusNameEn;
				daoComplainStatus.IsActive = _isActive;
				daoComplainStatus.CanEdit = _canEdit;
				daoComplainStatus.CanDelete = _canDelete;
				daoComplainStatus.DisplayOrder = _displayOrder;
				daoComplainStatus.Color = _color;
				daoComplainStatus.CBy = _cBy;
				daoComplainStatus.CDate = _cDate;
				daoComplainStatus.EBy = _eBy;
				daoComplainStatus.EDate = _eDate;
				daoComplainStatus.Insert();
				CommitTransaction();
				
				_complainStatusId = daoComplainStatus.ComplainStatusId;
				_complainStatusCode = daoComplainStatus.ComplainStatusCode;
				_complainStatusNameAr = daoComplainStatus.ComplainStatusNameAr;
				_complainStatusNameEn = daoComplainStatus.ComplainStatusNameEn;
				_isActive = daoComplainStatus.IsActive;
				_canEdit = daoComplainStatus.CanEdit;
				_canDelete = daoComplainStatus.CanDelete;
				_displayOrder = daoComplainStatus.DisplayOrder;
				_color = daoComplainStatus.Color;
				_cBy = daoComplainStatus.CBy;
				_cDate = daoComplainStatus.CDate;
				_eBy = daoComplainStatus.EBy;
				_eDate = daoComplainStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOComplainStatus");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ComplainStatus record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOComplainStatus
		///</parameters>
		public virtual void Update()
		{
			DAOComplainStatus daoComplainStatus = new DAOComplainStatus();
			RegisterDataObject(daoComplainStatus);
			BeginTransaction("updateBOComplainStatus");
			try
			{
				daoComplainStatus.ComplainStatusId = _complainStatusId;
				daoComplainStatus.ComplainStatusCode = _complainStatusCode;
				daoComplainStatus.ComplainStatusNameAr = _complainStatusNameAr;
				daoComplainStatus.ComplainStatusNameEn = _complainStatusNameEn;
				daoComplainStatus.IsActive = _isActive;
				daoComplainStatus.CanEdit = _canEdit;
				daoComplainStatus.CanDelete = _canDelete;
				daoComplainStatus.DisplayOrder = _displayOrder;
				daoComplainStatus.Color = _color;
				daoComplainStatus.CBy = _cBy;
				daoComplainStatus.CDate = _cDate;
				daoComplainStatus.EBy = _eBy;
				daoComplainStatus.EDate = _eDate;
				daoComplainStatus.Update();
				CommitTransaction();
				
				_complainStatusId = daoComplainStatus.ComplainStatusId;
				_complainStatusCode = daoComplainStatus.ComplainStatusCode;
				_complainStatusNameAr = daoComplainStatus.ComplainStatusNameAr;
				_complainStatusNameEn = daoComplainStatus.ComplainStatusNameEn;
				_isActive = daoComplainStatus.IsActive;
				_canEdit = daoComplainStatus.CanEdit;
				_canDelete = daoComplainStatus.CanDelete;
				_displayOrder = daoComplainStatus.DisplayOrder;
				_color = daoComplainStatus.Color;
				_cBy = daoComplainStatus.CBy;
				_cDate = daoComplainStatus.CDate;
				_eBy = daoComplainStatus.EBy;
				_eDate = daoComplainStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOComplainStatus");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ComplainStatus record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOComplainStatus daoComplainStatus = new DAOComplainStatus();
			RegisterDataObject(daoComplainStatus);
			BeginTransaction("deleteBOComplainStatus");
			try
			{
				daoComplainStatus.ComplainStatusId = _complainStatusId;
				daoComplainStatus.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOComplainStatus");
				throw;
			}
		}
		
		///<Summary>
		///ComplainStatusCollection
		///This method returns the collection of BOComplainStatus objects
		///</Summary>
		///<returns>
		///List[BOComplainStatus]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOComplainStatus> ComplainStatusCollection()
		{
			try
			{
				IList<BOComplainStatus> boComplainStatusCollection = new List<BOComplainStatus>();
				IList<DAOComplainStatus> daoComplainStatusCollection = DAOComplainStatus.SelectAll();
			
				foreach(DAOComplainStatus daoComplainStatus in daoComplainStatusCollection)
					boComplainStatusCollection.Add(new BOComplainStatus(daoComplainStatus));
			
				return boComplainStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainStatusCollectionCount
		///This method returns the collection count of BOComplainStatus objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ComplainStatusCollectionCount()
		{
			try
			{
				Int32 objCount = DAOComplainStatus.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainCollection
		///This method returns its collection of BOClientComplain objects
		///</Summary>
		///<returns>
		///IList[BOClientComplain]
		///</returns>
		///<parameters>
		///BOComplainStatus
		///</parameters>
		public virtual IList<BOClientComplain> ClientComplainCollection()
		{
			try
			{
				if(_boClientComplainCollection == null)
					LoadClientComplainCollection();
				
				return _boClientComplainCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientComplainTimelineCollection
		///This method returns its collection of BOClientComplainTimeline objects
		///</Summary>
		///<returns>
		///IList[BOClientComplainTimeline]
		///</returns>
		///<parameters>
		///BOComplainStatus
		///</parameters>
		public virtual IList<BOClientComplainTimeline> ClientComplainTimelineCollection()
		{
			try
			{
				if(_boClientComplainTimelineCollection == null)
					LoadClientComplainTimelineCollection();
				
				return _boClientComplainTimelineCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOComplainStatus>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOComplainStatus.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainStatusCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOComplainStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boComplainStatusCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOComplainStatus> daoComplainStatusCollection = DAOComplainStatus.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOComplainStatus resdaoComplainStatus in daoComplainStatusCollection)
					boComplainStatusCollection.Add((T)(object)new BOComplainStatus(resdaoComplainStatus));
			
				return boComplainStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ComplainStatusCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOComplainStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOComplainStatus.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainCollection
		///This method loads the internal collection of BOClientComplain objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainCollection()
		{
			try
			{
				_boClientComplainCollection = new List<BOClientComplain>();
				IList<DAOClientComplain> daoClientComplainCollection = DAOClientComplain.SelectAllByComplainStatusId(_complainStatusId.Value);
				
				foreach(DAOClientComplain daoClientComplain in daoClientComplainCollection)
					_boClientComplainCollection.Add(new BOClientComplain(daoClientComplain));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplain
		///This method persists a BOClientComplain object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplain
		///</parameters>
		public virtual void AddClientComplain(BOClientComplain boClientComplain)
		{
			DAOClientComplain daoClientComplain = new DAOClientComplain();
			RegisterDataObject(daoClientComplain);
			BeginTransaction("addClientComplain");
			try
			{
				daoClientComplain.ComplainId = boClientComplain.ComplainId;
				daoClientComplain.ComplainCode = boClientComplain.ComplainCode;
				daoClientComplain.BranchId = boClientComplain.BranchId;
				daoClientComplain.RepresentativeId = boClientComplain.RepresentativeId;
				daoClientComplain.ClientId = boClientComplain.ClientId;
				daoClientComplain.ComplainDate = boClientComplain.ComplainDate;
				daoClientComplain.ComplainTime = boClientComplain.ComplainTime;
				daoClientComplain.ComplainTypeId = boClientComplain.ComplainTypeId;
				daoClientComplain.ComplainTypeDetailId = boClientComplain.ComplainTypeDetailId;
				daoClientComplain.Phone = boClientComplain.Phone;
				daoClientComplain.PhoneAlternative = boClientComplain.PhoneAlternative;
				daoClientComplain.PriorityId = boClientComplain.PriorityId;
				daoClientComplain.IsClosed = boClientComplain.IsClosed;
				daoClientComplain.CloseDate = boClientComplain.CloseDate;
				daoClientComplain.Duration = boClientComplain.Duration;
				daoClientComplain.Latitude = boClientComplain.Latitude;
				daoClientComplain.Longitude = boClientComplain.Longitude;
				daoClientComplain.InZone = boClientComplain.InZone;
				daoClientComplain.Distance = boClientComplain.Distance;
				daoClientComplain.Notes = boClientComplain.Notes;
				daoClientComplain.DepartmentId = boClientComplain.DepartmentId;
				daoClientComplain.CBy = boClientComplain.CBy;
				daoClientComplain.CDate = boClientComplain.CDate;
				daoClientComplain.EBy = boClientComplain.EBy;
				daoClientComplain.EDate = boClientComplain.EDate;
				daoClientComplain.Replay = boClientComplain.Replay;
				daoClientComplain.ComplainTitle = boClientComplain.ComplainTitle;
				daoClientComplain.ComplainStatusId = _complainStatusId.Value;
				daoClientComplain.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplain = new BOClientComplain(daoClientComplain);
				if(_boClientComplainCollection != null)
					_boClientComplainCollection.Add(boClientComplain);
			}
			catch
			{
				RollbackTransaction("addClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplain
		///This method deletes all BOClientComplain objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplain()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplain");
			try
			{
				DAOClientComplain.DeleteAllByComplainStatusId(ConnectionProvider, _complainStatusId.Value);
				CommitTransaction();
				if(_boClientComplainCollection != null)
				{
					_boClientComplainCollection.Clear();
					_boClientComplainCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplain");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientComplainTimelineCollection
		///This method loads the internal collection of BOClientComplainTimeline objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientComplainTimelineCollection()
		{
			try
			{
				_boClientComplainTimelineCollection = new List<BOClientComplainTimeline>();
				IList<DAOClientComplainTimeline> daoClientComplainTimelineCollection = DAOClientComplainTimeline.SelectAllByComplainStatusId(_complainStatusId.Value);
				
				foreach(DAOClientComplainTimeline daoClientComplainTimeline in daoClientComplainTimelineCollection)
					_boClientComplainTimelineCollection.Add(new BOClientComplainTimeline(daoClientComplainTimeline));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientComplainTimeline
		///This method persists a BOClientComplainTimeline object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientComplainTimeline
		///</parameters>
		public virtual void AddClientComplainTimeline(BOClientComplainTimeline boClientComplainTimeline)
		{
			DAOClientComplainTimeline daoClientComplainTimeline = new DAOClientComplainTimeline();
			RegisterDataObject(daoClientComplainTimeline);
			BeginTransaction("addClientComplainTimeline");
			try
			{
				daoClientComplainTimeline.TimelineId = boClientComplainTimeline.TimelineId;
				daoClientComplainTimeline.ComplainId = boClientComplainTimeline.ComplainId;
				daoClientComplainTimeline.UserId = boClientComplainTimeline.UserId;
				daoClientComplainTimeline.TimelineDate = boClientComplainTimeline.TimelineDate;
				daoClientComplainTimeline.Notes = boClientComplainTimeline.Notes;
				daoClientComplainTimeline.ComplainStatusId = _complainStatusId.Value;
				daoClientComplainTimeline.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientComplainTimeline = new BOClientComplainTimeline(daoClientComplainTimeline);
				if(_boClientComplainTimelineCollection != null)
					_boClientComplainTimelineCollection.Add(boClientComplainTimeline);
			}
			catch
			{
				RollbackTransaction("addClientComplainTimeline");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientComplainTimeline
		///This method deletes all BOClientComplainTimeline objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientComplainTimeline()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientComplainTimeline");
			try
			{
				DAOClientComplainTimeline.DeleteAllByComplainStatusId(ConnectionProvider, _complainStatusId.Value);
				CommitTransaction();
				if(_boClientComplainTimelineCollection != null)
				{
					_boClientComplainTimelineCollection.Clear();
					_boClientComplainTimelineCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientComplainTimeline");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ComplainStatusId
		{
			get
			{
				 return _complainStatusId;
			}
			set
			{
				_complainStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainStatusCode
		{
			get
			{
				 return _complainStatusCode;
			}
			set
			{
				_complainStatusCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainStatusNameAr
		{
			get
			{
				 return _complainStatusNameAr;
			}
			set
			{
				_complainStatusNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string ComplainStatusNameEn
		{
			get
			{
				 return _complainStatusNameEn;
			}
			set
			{
				_complainStatusNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
