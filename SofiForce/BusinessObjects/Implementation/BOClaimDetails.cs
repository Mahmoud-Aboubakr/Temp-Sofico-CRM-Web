/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOClaimDetails.
	///</Summary>
	public partial class BOClaimDetails : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int64? _detailId;
		protected Int64? _claimId;
		protected string _invoiceCode;
		protected DateTime? _invoiceDate;
		protected decimal? _invoiceValue;
		protected Int32? _invoiceType;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOClaimDetails()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64 detailId
		///</parameters>
		public BOClaimDetails(Int64 detailId)
		{
			try
			{
				DAOClaimDetails daoClaimDetails = DAOClaimDetails.SelectOne(detailId);
				_detailId = daoClaimDetails.DetailId;
				_claimId = daoClaimDetails.ClaimId;
				_invoiceCode = daoClaimDetails.InvoiceCode;
				_invoiceDate = daoClaimDetails.InvoiceDate;
				_invoiceValue = daoClaimDetails.InvoiceValue;
				_invoiceType = daoClaimDetails.InvoiceType;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOClaimDetails
		///</parameters>
		protected internal BOClaimDetails(DAOClaimDetails daoClaimDetails)
		{
			try
			{
				_detailId = daoClaimDetails.DetailId;
				_claimId = daoClaimDetails.ClaimId;
				_invoiceCode = daoClaimDetails.InvoiceCode;
				_invoiceDate = daoClaimDetails.InvoiceDate;
				_invoiceValue = daoClaimDetails.InvoiceValue;
				_invoiceType = daoClaimDetails.InvoiceType;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new ClaimDetails record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOClaimDetails daoClaimDetails = new DAOClaimDetails();
			RegisterDataObject(daoClaimDetails);
			BeginTransaction("savenewBOClaimDetails");
			try
			{
				daoClaimDetails.ClaimId = _claimId;
				daoClaimDetails.InvoiceCode = _invoiceCode;
				daoClaimDetails.InvoiceDate = _invoiceDate;
				daoClaimDetails.InvoiceValue = _invoiceValue;
				daoClaimDetails.InvoiceType = _invoiceType;
				daoClaimDetails.Insert();
				CommitTransaction();
				
				_detailId = daoClaimDetails.DetailId;
				_claimId = daoClaimDetails.ClaimId;
				_invoiceCode = daoClaimDetails.InvoiceCode;
				_invoiceDate = daoClaimDetails.InvoiceDate;
				_invoiceValue = daoClaimDetails.InvoiceValue;
				_invoiceType = daoClaimDetails.InvoiceType;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOClaimDetails");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one ClaimDetails record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClaimDetails
		///</parameters>
		public virtual void Update()
		{
			DAOClaimDetails daoClaimDetails = new DAOClaimDetails();
			RegisterDataObject(daoClaimDetails);
			BeginTransaction("updateBOClaimDetails");
			try
			{
				daoClaimDetails.DetailId = _detailId;
				daoClaimDetails.ClaimId = _claimId;
				daoClaimDetails.InvoiceCode = _invoiceCode;
				daoClaimDetails.InvoiceDate = _invoiceDate;
				daoClaimDetails.InvoiceValue = _invoiceValue;
				daoClaimDetails.InvoiceType = _invoiceType;
				daoClaimDetails.Update();
				CommitTransaction();
				
				_detailId = daoClaimDetails.DetailId;
				_claimId = daoClaimDetails.ClaimId;
				_invoiceCode = daoClaimDetails.InvoiceCode;
				_invoiceDate = daoClaimDetails.InvoiceDate;
				_invoiceValue = daoClaimDetails.InvoiceValue;
				_invoiceType = daoClaimDetails.InvoiceType;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOClaimDetails");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one ClaimDetails record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOClaimDetails daoClaimDetails = new DAOClaimDetails();
			RegisterDataObject(daoClaimDetails);
			BeginTransaction("deleteBOClaimDetails");
			try
			{
				daoClaimDetails.DetailId = _detailId;
				daoClaimDetails.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOClaimDetails");
				throw;
			}
		}
		
		///<Summary>
		///ClaimDetailsCollection
		///This method returns the collection of BOClaimDetails objects
		///</Summary>
		///<returns>
		///List[BOClaimDetails]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOClaimDetails> ClaimDetailsCollection()
		{
			try
			{
				IList<BOClaimDetails> boClaimDetailsCollection = new List<BOClaimDetails>();
				IList<DAOClaimDetails> daoClaimDetailsCollection = DAOClaimDetails.SelectAll();
			
				foreach(DAOClaimDetails daoClaimDetails in daoClaimDetailsCollection)
					boClaimDetailsCollection.Add(new BOClaimDetails(daoClaimDetails));
			
				return boClaimDetailsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClaimDetailsCollectionCount
		///This method returns the collection count of BOClaimDetails objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ClaimDetailsCollectionCount()
		{
			try
			{
				Int32 objCount = DAOClaimDetails.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOClaimDetails>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOClaimDetails.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClaimDetailsCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOClaimDetails objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boClaimDetailsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOClaimDetails> daoClaimDetailsCollection = DAOClaimDetails.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOClaimDetails resdaoClaimDetails in daoClaimDetailsCollection)
					boClaimDetailsCollection.Add((T)(object)new BOClaimDetails(resdaoClaimDetails));
			
				return boClaimDetailsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ClaimDetailsCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOClaimDetails objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOClaimDetails.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int64? DetailId
		{
			get
			{
				 return _detailId;
			}
			set
			{
				_detailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? ClaimId
		{
			get
			{
				 return _claimId;
			}
			set
			{
				_claimId = value;
				_isDirty = true;
			}
		}
		
		public virtual string InvoiceCode
		{
			get
			{
				 return _invoiceCode;
			}
			set
			{
				_invoiceCode = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? InvoiceDate
		{
			get
			{
				 return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? InvoiceValue
		{
			get
			{
				 return _invoiceValue;
			}
			set
			{
				_invoiceValue = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? InvoiceType
		{
			get
			{
				 return _invoiceType;
			}
			set
			{
				_invoiceType = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
