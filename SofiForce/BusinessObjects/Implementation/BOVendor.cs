/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOVendor.
	///It maintains a collection of BOItem,BOPurchaseOrder objects.
	///</Summary>
	public partial class BOVendor : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _vendorId;
		protected string _vendorCode;
		protected Int32? _vendorGroupId;
		protected string _vendorNameEn;
		protected string _vendorNameAr;
		protected bool? _isLocal;
		protected bool? _isActive;
		protected bool? _isHot;
		protected Int32? _displayOrder;
		protected string _color;
		protected string _icon;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected string _vendorImage;
		protected bool? _isNew;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOItem> _boItemCollection;
		List<BOPurchaseOrder> _boPurchaseOrderCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOVendor()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 vendorId
		///</parameters>
		public BOVendor(Int32 vendorId)
		{
			try
			{
				DAOVendor daoVendor = DAOVendor.SelectOne(vendorId);
				_vendorId = daoVendor.VendorId;
				_vendorCode = daoVendor.VendorCode;
				_vendorGroupId = daoVendor.VendorGroupId;
				_vendorNameEn = daoVendor.VendorNameEn;
				_vendorNameAr = daoVendor.VendorNameAr;
				_isLocal = daoVendor.IsLocal;
				_isActive = daoVendor.IsActive;
				_isHot = daoVendor.IsHot;
				_displayOrder = daoVendor.DisplayOrder;
				_color = daoVendor.Color;
				_icon = daoVendor.Icon;
				_canEdit = daoVendor.CanEdit;
				_canDelete = daoVendor.CanDelete;
				_cBy = daoVendor.CBy;
				_cDate = daoVendor.CDate;
				_eBy = daoVendor.EBy;
				_eDate = daoVendor.EDate;
				_vendorImage = daoVendor.VendorImage;
				_isNew = daoVendor.IsNew;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOVendor
		///</parameters>
		protected internal BOVendor(DAOVendor daoVendor)
		{
			try
			{
				_vendorId = daoVendor.VendorId;
				_vendorCode = daoVendor.VendorCode;
				_vendorGroupId = daoVendor.VendorGroupId;
				_vendorNameEn = daoVendor.VendorNameEn;
				_vendorNameAr = daoVendor.VendorNameAr;
				_isLocal = daoVendor.IsLocal;
				_isActive = daoVendor.IsActive;
				_isHot = daoVendor.IsHot;
				_displayOrder = daoVendor.DisplayOrder;
				_color = daoVendor.Color;
				_icon = daoVendor.Icon;
				_canEdit = daoVendor.CanEdit;
				_canDelete = daoVendor.CanDelete;
				_cBy = daoVendor.CBy;
				_cDate = daoVendor.CDate;
				_eBy = daoVendor.EBy;
				_eDate = daoVendor.EDate;
				_vendorImage = daoVendor.VendorImage;
				_isNew = daoVendor.IsNew;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Vendor record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOVendor daoVendor = new DAOVendor();
			RegisterDataObject(daoVendor);
			BeginTransaction("savenewBOVendor");
			try
			{
				daoVendor.VendorCode = _vendorCode;
				daoVendor.VendorGroupId = _vendorGroupId;
				daoVendor.VendorNameEn = _vendorNameEn;
				daoVendor.VendorNameAr = _vendorNameAr;
				daoVendor.IsLocal = _isLocal;
				daoVendor.IsActive = _isActive;
				daoVendor.IsHot = _isHot;
				daoVendor.DisplayOrder = _displayOrder;
				daoVendor.Color = _color;
				daoVendor.Icon = _icon;
				daoVendor.CanEdit = _canEdit;
				daoVendor.CanDelete = _canDelete;
				daoVendor.CBy = _cBy;
				daoVendor.CDate = _cDate;
				daoVendor.EBy = _eBy;
				daoVendor.EDate = _eDate;
				daoVendor.VendorImage = _vendorImage;
				daoVendor.IsNew = _isNew;
				daoVendor.Insert();
				CommitTransaction();
				
				_vendorId = daoVendor.VendorId;
				_vendorCode = daoVendor.VendorCode;
				_vendorGroupId = daoVendor.VendorGroupId;
				_vendorNameEn = daoVendor.VendorNameEn;
				_vendorNameAr = daoVendor.VendorNameAr;
				_isLocal = daoVendor.IsLocal;
				_isActive = daoVendor.IsActive;
				_isHot = daoVendor.IsHot;
				_displayOrder = daoVendor.DisplayOrder;
				_color = daoVendor.Color;
				_icon = daoVendor.Icon;
				_canEdit = daoVendor.CanEdit;
				_canDelete = daoVendor.CanDelete;
				_cBy = daoVendor.CBy;
				_cDate = daoVendor.CDate;
				_eBy = daoVendor.EBy;
				_eDate = daoVendor.EDate;
				_vendorImage = daoVendor.VendorImage;
				_isNew = daoVendor.IsNew;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOVendor");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Vendor record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVendor
		///</parameters>
		public virtual void Update()
		{
			DAOVendor daoVendor = new DAOVendor();
			RegisterDataObject(daoVendor);
			BeginTransaction("updateBOVendor");
			try
			{
				daoVendor.VendorId = _vendorId;
				daoVendor.VendorCode = _vendorCode;
				daoVendor.VendorGroupId = _vendorGroupId;
				daoVendor.VendorNameEn = _vendorNameEn;
				daoVendor.VendorNameAr = _vendorNameAr;
				daoVendor.IsLocal = _isLocal;
				daoVendor.IsActive = _isActive;
				daoVendor.IsHot = _isHot;
				daoVendor.DisplayOrder = _displayOrder;
				daoVendor.Color = _color;
				daoVendor.Icon = _icon;
				daoVendor.CanEdit = _canEdit;
				daoVendor.CanDelete = _canDelete;
				daoVendor.CBy = _cBy;
				daoVendor.CDate = _cDate;
				daoVendor.EBy = _eBy;
				daoVendor.EDate = _eDate;
				daoVendor.VendorImage = _vendorImage;
				daoVendor.IsNew = _isNew;
				daoVendor.Update();
				CommitTransaction();
				
				_vendorId = daoVendor.VendorId;
				_vendorCode = daoVendor.VendorCode;
				_vendorGroupId = daoVendor.VendorGroupId;
				_vendorNameEn = daoVendor.VendorNameEn;
				_vendorNameAr = daoVendor.VendorNameAr;
				_isLocal = daoVendor.IsLocal;
				_isActive = daoVendor.IsActive;
				_isHot = daoVendor.IsHot;
				_displayOrder = daoVendor.DisplayOrder;
				_color = daoVendor.Color;
				_icon = daoVendor.Icon;
				_canEdit = daoVendor.CanEdit;
				_canDelete = daoVendor.CanDelete;
				_cBy = daoVendor.CBy;
				_cDate = daoVendor.CDate;
				_eBy = daoVendor.EBy;
				_eDate = daoVendor.EDate;
				_vendorImage = daoVendor.VendorImage;
				_isNew = daoVendor.IsNew;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOVendor");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Vendor record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOVendor daoVendor = new DAOVendor();
			RegisterDataObject(daoVendor);
			BeginTransaction("deleteBOVendor");
			try
			{
				daoVendor.VendorId = _vendorId;
				daoVendor.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOVendor");
				throw;
			}
		}
		
		///<Summary>
		///VendorCollection
		///This method returns the collection of BOVendor objects
		///</Summary>
		///<returns>
		///List[BOVendor]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOVendor> VendorCollection()
		{
			try
			{
				IList<BOVendor> boVendorCollection = new List<BOVendor>();
				IList<DAOVendor> daoVendorCollection = DAOVendor.SelectAll();
			
				foreach(DAOVendor daoVendor in daoVendorCollection)
					boVendorCollection.Add(new BOVendor(daoVendor));
			
				return boVendorCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorCollectionCount
		///This method returns the collection count of BOVendor objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 VendorCollectionCount()
		{
			try
			{
				Int32 objCount = DAOVendor.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ItemCollection
		///This method returns its collection of BOItem objects
		///</Summary>
		///<returns>
		///IList[BOItem]
		///</returns>
		///<parameters>
		///BOVendor
		///</parameters>
		public virtual IList<BOItem> ItemCollection()
		{
			try
			{
				if(_boItemCollection == null)
					LoadItemCollection();
				
				return _boItemCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///PurchaseOrderCollection
		///This method returns its collection of BOPurchaseOrder objects
		///</Summary>
		///<returns>
		///IList[BOPurchaseOrder]
		///</returns>
		///<parameters>
		///BOVendor
		///</parameters>
		public virtual IList<BOPurchaseOrder> PurchaseOrderCollection()
		{
			try
			{
				if(_boPurchaseOrderCollection == null)
					LoadPurchaseOrderCollection();
				
				return _boPurchaseOrderCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOVendor>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOVendor.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOVendor objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boVendorCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOVendor> daoVendorCollection = DAOVendor.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOVendor resdaoVendor in daoVendorCollection)
					boVendorCollection.Add((T)(object)new BOVendor(resdaoVendor));
			
				return boVendorCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VendorCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOVendor objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOVendor.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadItemCollection
		///This method loads the internal collection of BOItem objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadItemCollection()
		{
			try
			{
				_boItemCollection = new List<BOItem>();
				IList<DAOItem> daoItemCollection = DAOItem.SelectAllByVendorId(_vendorId.Value);
				
				foreach(DAOItem daoItem in daoItemCollection)
					_boItemCollection.Add(new BOItem(daoItem));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddItem
		///This method persists a BOItem object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOItem
		///</parameters>
		public virtual void AddItem(BOItem boItem)
		{
			DAOItem daoItem = new DAOItem();
			RegisterDataObject(daoItem);
			BeginTransaction("addItem");
			try
			{
				daoItem.ItemId = boItem.ItemId;
				daoItem.ItemGroupId = boItem.ItemGroupId;
				daoItem.AcceptDays = boItem.AcceptDays;
				daoItem.UnitId = boItem.UnitId;
				daoItem.IsTaxable = boItem.IsTaxable;
				daoItem.ItemCode = boItem.ItemCode;
				daoItem.ItemNameEn = boItem.ItemNameEn;
				daoItem.ItemNameAr = boItem.ItemNameAr;
				daoItem.PublicPrice = boItem.PublicPrice;
				daoItem.ClientPrice = boItem.ClientPrice;
				daoItem.ReturnPrice = boItem.ReturnPrice;
				daoItem.CostPrice = boItem.CostPrice;
				daoItem.Discount = boItem.Discount;
				daoItem.IsLocal = boItem.IsLocal;
				daoItem.IsActive = boItem.IsActive;
				daoItem.DisplayOrder = boItem.DisplayOrder;
				daoItem.Color = boItem.Color;
				daoItem.Icon = boItem.Icon;
				daoItem.HasPromotion = boItem.HasPromotion;
				daoItem.IsNewAdded = boItem.IsNewAdded;
				daoItem.IsNewStocked = boItem.IsNewStocked;
				daoItem.CanEdit = boItem.CanEdit;
				daoItem.CanDelete = boItem.CanDelete;
				daoItem.CBy = boItem.CBy;
				daoItem.CDate = boItem.CDate;
				daoItem.EBy = boItem.EBy;
				daoItem.EDate = boItem.EDate;
				daoItem.ProductImage = boItem.ProductImage;
				daoItem.ItemCategoryId = boItem.ItemCategoryId;
				daoItem.ItemSourceId = boItem.ItemSourceId;
				daoItem.DescriptionEn = boItem.DescriptionEn;
				daoItem.DescriptionAr = boItem.DescriptionAr;
				daoItem.VendorId = _vendorId.Value;
				daoItem.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boItem = new BOItem(daoItem);
				if(_boItemCollection != null)
					_boItemCollection.Add(boItem);
			}
			catch
			{
				RollbackTransaction("addItem");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllItem
		///This method deletes all BOItem objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllItem()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllItem");
			try
			{
				DAOItem.DeleteAllByVendorId(ConnectionProvider, _vendorId.Value);
				CommitTransaction();
				if(_boItemCollection != null)
				{
					_boItemCollection.Clear();
					_boItemCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllItem");
				throw;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderCollection
		///This method loads the internal collection of BOPurchaseOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderCollection()
		{
			try
			{
				_boPurchaseOrderCollection = new List<BOPurchaseOrder>();
				IList<DAOPurchaseOrder> daoPurchaseOrderCollection = DAOPurchaseOrder.SelectAllByVendorId(_vendorId.Value);
				
				foreach(DAOPurchaseOrder daoPurchaseOrder in daoPurchaseOrderCollection)
					_boPurchaseOrderCollection.Add(new BOPurchaseOrder(daoPurchaseOrder));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddPurchaseOrder
		///This method persists a BOPurchaseOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrder
		///</parameters>
		public virtual void AddPurchaseOrder(BOPurchaseOrder boPurchaseOrder)
		{
			DAOPurchaseOrder daoPurchaseOrder = new DAOPurchaseOrder();
			RegisterDataObject(daoPurchaseOrder);
			BeginTransaction("addPurchaseOrder");
			try
			{
				daoPurchaseOrder.PurchaseId = boPurchaseOrder.PurchaseId;
				daoPurchaseOrder.PurchaseCode = boPurchaseOrder.PurchaseCode;
				daoPurchaseOrder.BranchId = boPurchaseOrder.BranchId;
				daoPurchaseOrder.StoreId = boPurchaseOrder.StoreId;
				daoPurchaseOrder.InvoiceCode = boPurchaseOrder.InvoiceCode;
				daoPurchaseOrder.InvoiceDate = boPurchaseOrder.InvoiceDate;
				daoPurchaseOrder.InvoiceAmount = boPurchaseOrder.InvoiceAmount;
				daoPurchaseOrder.Currency = boPurchaseOrder.Currency;
				daoPurchaseOrder.ExchangeRate = boPurchaseOrder.ExchangeRate;
				daoPurchaseOrder.InvoiceAmountLocal = boPurchaseOrder.InvoiceAmountLocal;
				daoPurchaseOrder.SumTax = boPurchaseOrder.SumTax;
				daoPurchaseOrder.SumExpense = boPurchaseOrder.SumExpense;
				daoPurchaseOrder.OpenValue = boPurchaseOrder.OpenValue;
				daoPurchaseOrder.RecId = boPurchaseOrder.RecId;
				daoPurchaseOrder.CBy = boPurchaseOrder.CBy;
				daoPurchaseOrder.CDate = boPurchaseOrder.CDate;
				daoPurchaseOrder.EBy = boPurchaseOrder.EBy;
				daoPurchaseOrder.EDate = boPurchaseOrder.EDate;
				daoPurchaseOrder.VendorId = _vendorId.Value;
				daoPurchaseOrder.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrder = new BOPurchaseOrder(daoPurchaseOrder);
				if(_boPurchaseOrderCollection != null)
					_boPurchaseOrderCollection.Add(boPurchaseOrder);
			}
			catch
			{
				RollbackTransaction("addPurchaseOrder");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrder
		///This method deletes all BOPurchaseOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrder()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllPurchaseOrder");
			try
			{
				DAOPurchaseOrder.DeleteAllByVendorId(ConnectionProvider, _vendorId.Value);
				CommitTransaction();
				if(_boPurchaseOrderCollection != null)
				{
					_boPurchaseOrderCollection.Clear();
					_boPurchaseOrderCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllPurchaseOrder");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? VendorId
		{
			get
			{
				 return _vendorId;
			}
			set
			{
				_vendorId = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorCode
		{
			get
			{
				 return _vendorCode;
			}
			set
			{
				_vendorCode = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? VendorGroupId
		{
			get
			{
				 return _vendorGroupId;
			}
			set
			{
				_vendorGroupId = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorNameEn
		{
			get
			{
				 return _vendorNameEn;
			}
			set
			{
				_vendorNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorNameAr
		{
			get
			{
				 return _vendorNameAr;
			}
			set
			{
				_vendorNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsLocal
		{
			get
			{
				 return _isLocal;
			}
			set
			{
				_isLocal = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsHot
		{
			get
			{
				 return _isHot;
			}
			set
			{
				_isHot = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string VendorImage
		{
			get
			{
				 return _vendorImage;
			}
			set
			{
				_vendorImage = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsNew
		{
			get
			{
				 return _isNew;
			}
			set
			{
				_isNew = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
