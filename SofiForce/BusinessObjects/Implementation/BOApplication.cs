/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOApplication.
	///It maintains a collection of BOApplicationFeature,BOApplicationSetting objects.
	///</Summary>
	public partial class BOApplication : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _applicationId;
		protected string _applicationCode;
		protected string _applicationNameEn;
		protected string _applicationNameAr;
		protected string _color;
		protected string _icon;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOApplicationFeature> _boApplicationFeatureCollection;
		List<BOApplicationSetting> _boApplicationSettingCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOApplication()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 applicationId
		///</parameters>
		public BOApplication(Int32 applicationId)
		{
			try
			{
				DAOApplication daoApplication = DAOApplication.SelectOne(applicationId);
				_applicationId = daoApplication.ApplicationId;
				_applicationCode = daoApplication.ApplicationCode;
				_applicationNameEn = daoApplication.ApplicationNameEn;
				_applicationNameAr = daoApplication.ApplicationNameAr;
				_color = daoApplication.Color;
				_icon = daoApplication.Icon;
				_displayOrder = daoApplication.DisplayOrder;
				_isActive = daoApplication.IsActive;
				_canEdit = daoApplication.CanEdit;
				_canDelete = daoApplication.CanDelete;
				_cBy = daoApplication.CBy;
				_cDate = daoApplication.CDate;
				_eBy = daoApplication.EBy;
				_eDate = daoApplication.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOApplication
		///</parameters>
		protected internal BOApplication(DAOApplication daoApplication)
		{
			try
			{
				_applicationId = daoApplication.ApplicationId;
				_applicationCode = daoApplication.ApplicationCode;
				_applicationNameEn = daoApplication.ApplicationNameEn;
				_applicationNameAr = daoApplication.ApplicationNameAr;
				_color = daoApplication.Color;
				_icon = daoApplication.Icon;
				_displayOrder = daoApplication.DisplayOrder;
				_isActive = daoApplication.IsActive;
				_canEdit = daoApplication.CanEdit;
				_canDelete = daoApplication.CanDelete;
				_cBy = daoApplication.CBy;
				_cDate = daoApplication.CDate;
				_eBy = daoApplication.EBy;
				_eDate = daoApplication.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Application record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOApplication daoApplication = new DAOApplication();
			RegisterDataObject(daoApplication);
			BeginTransaction("savenewBOApplication");
			try
			{
				daoApplication.ApplicationId = _applicationId;
				daoApplication.ApplicationCode = _applicationCode;
				daoApplication.ApplicationNameEn = _applicationNameEn;
				daoApplication.ApplicationNameAr = _applicationNameAr;
				daoApplication.Color = _color;
				daoApplication.Icon = _icon;
				daoApplication.DisplayOrder = _displayOrder;
				daoApplication.IsActive = _isActive;
				daoApplication.CanEdit = _canEdit;
				daoApplication.CanDelete = _canDelete;
				daoApplication.CBy = _cBy;
				daoApplication.CDate = _cDate;
				daoApplication.EBy = _eBy;
				daoApplication.EDate = _eDate;
				daoApplication.Insert();
				CommitTransaction();
				
				_applicationId = daoApplication.ApplicationId;
				_applicationCode = daoApplication.ApplicationCode;
				_applicationNameEn = daoApplication.ApplicationNameEn;
				_applicationNameAr = daoApplication.ApplicationNameAr;
				_color = daoApplication.Color;
				_icon = daoApplication.Icon;
				_displayOrder = daoApplication.DisplayOrder;
				_isActive = daoApplication.IsActive;
				_canEdit = daoApplication.CanEdit;
				_canDelete = daoApplication.CanDelete;
				_cBy = daoApplication.CBy;
				_cDate = daoApplication.CDate;
				_eBy = daoApplication.EBy;
				_eDate = daoApplication.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOApplication");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Application record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOApplication
		///</parameters>
		public virtual void Update()
		{
			DAOApplication daoApplication = new DAOApplication();
			RegisterDataObject(daoApplication);
			BeginTransaction("updateBOApplication");
			try
			{
				daoApplication.ApplicationId = _applicationId;
				daoApplication.ApplicationCode = _applicationCode;
				daoApplication.ApplicationNameEn = _applicationNameEn;
				daoApplication.ApplicationNameAr = _applicationNameAr;
				daoApplication.Color = _color;
				daoApplication.Icon = _icon;
				daoApplication.DisplayOrder = _displayOrder;
				daoApplication.IsActive = _isActive;
				daoApplication.CanEdit = _canEdit;
				daoApplication.CanDelete = _canDelete;
				daoApplication.CBy = _cBy;
				daoApplication.CDate = _cDate;
				daoApplication.EBy = _eBy;
				daoApplication.EDate = _eDate;
				daoApplication.Update();
				CommitTransaction();
				
				_applicationId = daoApplication.ApplicationId;
				_applicationCode = daoApplication.ApplicationCode;
				_applicationNameEn = daoApplication.ApplicationNameEn;
				_applicationNameAr = daoApplication.ApplicationNameAr;
				_color = daoApplication.Color;
				_icon = daoApplication.Icon;
				_displayOrder = daoApplication.DisplayOrder;
				_isActive = daoApplication.IsActive;
				_canEdit = daoApplication.CanEdit;
				_canDelete = daoApplication.CanDelete;
				_cBy = daoApplication.CBy;
				_cDate = daoApplication.CDate;
				_eBy = daoApplication.EBy;
				_eDate = daoApplication.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOApplication");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Application record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOApplication daoApplication = new DAOApplication();
			RegisterDataObject(daoApplication);
			BeginTransaction("deleteBOApplication");
			try
			{
				daoApplication.ApplicationId = _applicationId;
				daoApplication.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOApplication");
				throw;
			}
		}
		
		///<Summary>
		///ApplicationCollection
		///This method returns the collection of BOApplication objects
		///</Summary>
		///<returns>
		///List[BOApplication]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOApplication> ApplicationCollection()
		{
			try
			{
				IList<BOApplication> boApplicationCollection = new List<BOApplication>();
				IList<DAOApplication> daoApplicationCollection = DAOApplication.SelectAll();
			
				foreach(DAOApplication daoApplication in daoApplicationCollection)
					boApplicationCollection.Add(new BOApplication(daoApplication));
			
				return boApplicationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationCollectionCount
		///This method returns the collection count of BOApplication objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ApplicationCollectionCount()
		{
			try
			{
				Int32 objCount = DAOApplication.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ApplicationFeatureCollection
		///This method returns its collection of BOApplicationFeature objects
		///</Summary>
		///<returns>
		///IList[BOApplicationFeature]
		///</returns>
		///<parameters>
		///BOApplication
		///</parameters>
		public virtual IList<BOApplicationFeature> ApplicationFeatureCollection()
		{
			try
			{
				if(_boApplicationFeatureCollection == null)
					LoadApplicationFeatureCollection();
				
				return _boApplicationFeatureCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ApplicationSettingCollection
		///This method returns its collection of BOApplicationSetting objects
		///</Summary>
		///<returns>
		///IList[BOApplicationSetting]
		///</returns>
		///<parameters>
		///BOApplication
		///</parameters>
		public virtual IList<BOApplicationSetting> ApplicationSettingCollection()
		{
			try
			{
				if(_boApplicationSettingCollection == null)
					LoadApplicationSettingCollection();
				
				return _boApplicationSettingCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOApplication>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOApplication.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOApplication objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boApplicationCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOApplication> daoApplicationCollection = DAOApplication.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOApplication resdaoApplication in daoApplicationCollection)
					boApplicationCollection.Add((T)(object)new BOApplication(resdaoApplication));
			
				return boApplicationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApplicationCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOApplication objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOApplication.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadApplicationFeatureCollection
		///This method loads the internal collection of BOApplicationFeature objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadApplicationFeatureCollection()
		{
			try
			{
				_boApplicationFeatureCollection = new List<BOApplicationFeature>();
				IList<DAOApplicationFeature> daoApplicationFeatureCollection = DAOApplicationFeature.SelectAllByApplicationId(_applicationId.Value);
				
				foreach(DAOApplicationFeature daoApplicationFeature in daoApplicationFeatureCollection)
					_boApplicationFeatureCollection.Add(new BOApplicationFeature(daoApplicationFeature));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddApplicationFeature
		///This method persists a BOApplicationFeature object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOApplicationFeature
		///</parameters>
		public virtual void AddApplicationFeature(BOApplicationFeature boApplicationFeature)
		{
			DAOApplicationFeature daoApplicationFeature = new DAOApplicationFeature();
			RegisterDataObject(daoApplicationFeature);
			BeginTransaction("addApplicationFeature");
			try
			{
				daoApplicationFeature.FeatueId = boApplicationFeature.FeatueId;
				daoApplicationFeature.FeatueCode = boApplicationFeature.FeatueCode;
				daoApplicationFeature.FeatueNameEn = boApplicationFeature.FeatueNameEn;
				daoApplicationFeature.FeatueNameAr = boApplicationFeature.FeatueNameAr;
				daoApplicationFeature.FeatuePath = boApplicationFeature.FeatuePath;
				daoApplicationFeature.Icon = boApplicationFeature.Icon;
				daoApplicationFeature.Color = boApplicationFeature.Color;
				daoApplicationFeature.DisplyOrder = boApplicationFeature.DisplyOrder;
				daoApplicationFeature.IsActive = boApplicationFeature.IsActive;
				daoApplicationFeature.IsNew = boApplicationFeature.IsNew;
				daoApplicationFeature.IsUpdated = boApplicationFeature.IsUpdated;
				daoApplicationFeature.CanEdit = boApplicationFeature.CanEdit;
				daoApplicationFeature.CanDelete = boApplicationFeature.CanDelete;
				daoApplicationFeature.CBy = boApplicationFeature.CBy;
				daoApplicationFeature.CDate = boApplicationFeature.CDate;
				daoApplicationFeature.EBy = boApplicationFeature.EBy;
				daoApplicationFeature.EDate = boApplicationFeature.EDate;
				daoApplicationFeature.ApplicationId = _applicationId.Value;
				daoApplicationFeature.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boApplicationFeature = new BOApplicationFeature(daoApplicationFeature);
				if(_boApplicationFeatureCollection != null)
					_boApplicationFeatureCollection.Add(boApplicationFeature);
			}
			catch
			{
				RollbackTransaction("addApplicationFeature");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllApplicationFeature
		///This method deletes all BOApplicationFeature objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllApplicationFeature()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllApplicationFeature");
			try
			{
				DAOApplicationFeature.DeleteAllByApplicationId(ConnectionProvider, _applicationId.Value);
				CommitTransaction();
				if(_boApplicationFeatureCollection != null)
				{
					_boApplicationFeatureCollection.Clear();
					_boApplicationFeatureCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllApplicationFeature");
				throw;
			}
		}
		
		///<Summary>
		///LoadApplicationSettingCollection
		///This method loads the internal collection of BOApplicationSetting objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadApplicationSettingCollection()
		{
			try
			{
				_boApplicationSettingCollection = new List<BOApplicationSetting>();
				IList<DAOApplicationSetting> daoApplicationSettingCollection = DAOApplicationSetting.SelectAllByApplicationId(_applicationId.Value);
				
				foreach(DAOApplicationSetting daoApplicationSetting in daoApplicationSettingCollection)
					_boApplicationSettingCollection.Add(new BOApplicationSetting(daoApplicationSetting));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddApplicationSetting
		///This method persists a BOApplicationSetting object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOApplicationSetting
		///</parameters>
		public virtual void AddApplicationSetting(BOApplicationSetting boApplicationSetting)
		{
			DAOApplicationSetting daoApplicationSetting = new DAOApplicationSetting();
			RegisterDataObject(daoApplicationSetting);
			BeginTransaction("addApplicationSetting");
			try
			{
				daoApplicationSetting.AppSettingId = boApplicationSetting.AppSettingId;
				daoApplicationSetting.AppSettingCode = boApplicationSetting.AppSettingCode;
				daoApplicationSetting.AppSettingName = boApplicationSetting.AppSettingName;
				daoApplicationSetting.AppSettingValue = boApplicationSetting.AppSettingValue;
				daoApplicationSetting.AppSettingLastDate = boApplicationSetting.AppSettingLastDate;
				daoApplicationSetting.ApplicationId = _applicationId.Value;
				daoApplicationSetting.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boApplicationSetting = new BOApplicationSetting(daoApplicationSetting);
				if(_boApplicationSettingCollection != null)
					_boApplicationSettingCollection.Add(boApplicationSetting);
			}
			catch
			{
				RollbackTransaction("addApplicationSetting");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllApplicationSetting
		///This method deletes all BOApplicationSetting objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllApplicationSetting()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllApplicationSetting");
			try
			{
				DAOApplicationSetting.DeleteAllByApplicationId(ConnectionProvider, _applicationId.Value);
				CommitTransaction();
				if(_boApplicationSettingCollection != null)
				{
					_boApplicationSettingCollection.Clear();
					_boApplicationSettingCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllApplicationSetting");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ApplicationId
		{
			get
			{
				 return _applicationId;
			}
			set
			{
				_applicationId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ApplicationCode
		{
			get
			{
				 return _applicationCode;
			}
			set
			{
				_applicationCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ApplicationNameEn
		{
			get
			{
				 return _applicationNameEn;
			}
			set
			{
				_applicationNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ApplicationNameAr
		{
			get
			{
				 return _applicationNameAr;
			}
			set
			{
				_applicationNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
