/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORequestStatus.
	///It maintains a collection of BOClientServiceRequest,BOClientServiceRequestTimline objects.
	///</Summary>
	public partial class BORequestStatus : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _requestStatusId;
		protected string _requestStatusCode;
		protected string _requestStatusNameEn;
		protected string _requestStatusNameAr;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOClientServiceRequest> _boClientServiceRequestCollection;
		List<BOClientServiceRequestTimline> _boClientServiceRequestTimlineCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORequestStatus()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 requestStatusId
		///</parameters>
		public BORequestStatus(Int32 requestStatusId)
		{
			try
			{
				DAORequestStatus daoRequestStatus = DAORequestStatus.SelectOne(requestStatusId);
				_requestStatusId = daoRequestStatus.RequestStatusId;
				_requestStatusCode = daoRequestStatus.RequestStatusCode;
				_requestStatusNameEn = daoRequestStatus.RequestStatusNameEn;
				_requestStatusNameAr = daoRequestStatus.RequestStatusNameAr;
				_icon = daoRequestStatus.Icon;
				_color = daoRequestStatus.Color;
				_displayOrder = daoRequestStatus.DisplayOrder;
				_isActive = daoRequestStatus.IsActive;
				_canEdit = daoRequestStatus.CanEdit;
				_canDelete = daoRequestStatus.CanDelete;
				_cBy = daoRequestStatus.CBy;
				_cDate = daoRequestStatus.CDate;
				_eBy = daoRequestStatus.EBy;
				_eDate = daoRequestStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORequestStatus
		///</parameters>
		protected internal BORequestStatus(DAORequestStatus daoRequestStatus)
		{
			try
			{
				_requestStatusId = daoRequestStatus.RequestStatusId;
				_requestStatusCode = daoRequestStatus.RequestStatusCode;
				_requestStatusNameEn = daoRequestStatus.RequestStatusNameEn;
				_requestStatusNameAr = daoRequestStatus.RequestStatusNameAr;
				_icon = daoRequestStatus.Icon;
				_color = daoRequestStatus.Color;
				_displayOrder = daoRequestStatus.DisplayOrder;
				_isActive = daoRequestStatus.IsActive;
				_canEdit = daoRequestStatus.CanEdit;
				_canDelete = daoRequestStatus.CanDelete;
				_cBy = daoRequestStatus.CBy;
				_cDate = daoRequestStatus.CDate;
				_eBy = daoRequestStatus.EBy;
				_eDate = daoRequestStatus.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new RequestStatus record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORequestStatus daoRequestStatus = new DAORequestStatus();
			RegisterDataObject(daoRequestStatus);
			BeginTransaction("savenewBORequestStatus");
			try
			{
				daoRequestStatus.RequestStatusId = _requestStatusId;
				daoRequestStatus.RequestStatusCode = _requestStatusCode;
				daoRequestStatus.RequestStatusNameEn = _requestStatusNameEn;
				daoRequestStatus.RequestStatusNameAr = _requestStatusNameAr;
				daoRequestStatus.Icon = _icon;
				daoRequestStatus.Color = _color;
				daoRequestStatus.DisplayOrder = _displayOrder;
				daoRequestStatus.IsActive = _isActive;
				daoRequestStatus.CanEdit = _canEdit;
				daoRequestStatus.CanDelete = _canDelete;
				daoRequestStatus.CBy = _cBy;
				daoRequestStatus.CDate = _cDate;
				daoRequestStatus.EBy = _eBy;
				daoRequestStatus.EDate = _eDate;
				daoRequestStatus.Insert();
				CommitTransaction();
				
				_requestStatusId = daoRequestStatus.RequestStatusId;
				_requestStatusCode = daoRequestStatus.RequestStatusCode;
				_requestStatusNameEn = daoRequestStatus.RequestStatusNameEn;
				_requestStatusNameAr = daoRequestStatus.RequestStatusNameAr;
				_icon = daoRequestStatus.Icon;
				_color = daoRequestStatus.Color;
				_displayOrder = daoRequestStatus.DisplayOrder;
				_isActive = daoRequestStatus.IsActive;
				_canEdit = daoRequestStatus.CanEdit;
				_canDelete = daoRequestStatus.CanDelete;
				_cBy = daoRequestStatus.CBy;
				_cDate = daoRequestStatus.CDate;
				_eBy = daoRequestStatus.EBy;
				_eDate = daoRequestStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORequestStatus");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one RequestStatus record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORequestStatus
		///</parameters>
		public virtual void Update()
		{
			DAORequestStatus daoRequestStatus = new DAORequestStatus();
			RegisterDataObject(daoRequestStatus);
			BeginTransaction("updateBORequestStatus");
			try
			{
				daoRequestStatus.RequestStatusId = _requestStatusId;
				daoRequestStatus.RequestStatusCode = _requestStatusCode;
				daoRequestStatus.RequestStatusNameEn = _requestStatusNameEn;
				daoRequestStatus.RequestStatusNameAr = _requestStatusNameAr;
				daoRequestStatus.Icon = _icon;
				daoRequestStatus.Color = _color;
				daoRequestStatus.DisplayOrder = _displayOrder;
				daoRequestStatus.IsActive = _isActive;
				daoRequestStatus.CanEdit = _canEdit;
				daoRequestStatus.CanDelete = _canDelete;
				daoRequestStatus.CBy = _cBy;
				daoRequestStatus.CDate = _cDate;
				daoRequestStatus.EBy = _eBy;
				daoRequestStatus.EDate = _eDate;
				daoRequestStatus.Update();
				CommitTransaction();
				
				_requestStatusId = daoRequestStatus.RequestStatusId;
				_requestStatusCode = daoRequestStatus.RequestStatusCode;
				_requestStatusNameEn = daoRequestStatus.RequestStatusNameEn;
				_requestStatusNameAr = daoRequestStatus.RequestStatusNameAr;
				_icon = daoRequestStatus.Icon;
				_color = daoRequestStatus.Color;
				_displayOrder = daoRequestStatus.DisplayOrder;
				_isActive = daoRequestStatus.IsActive;
				_canEdit = daoRequestStatus.CanEdit;
				_canDelete = daoRequestStatus.CanDelete;
				_cBy = daoRequestStatus.CBy;
				_cDate = daoRequestStatus.CDate;
				_eBy = daoRequestStatus.EBy;
				_eDate = daoRequestStatus.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORequestStatus");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one RequestStatus record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORequestStatus daoRequestStatus = new DAORequestStatus();
			RegisterDataObject(daoRequestStatus);
			BeginTransaction("deleteBORequestStatus");
			try
			{
				daoRequestStatus.RequestStatusId = _requestStatusId;
				daoRequestStatus.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORequestStatus");
				throw;
			}
		}
		
		///<Summary>
		///RequestStatusCollection
		///This method returns the collection of BORequestStatus objects
		///</Summary>
		///<returns>
		///List[BORequestStatus]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORequestStatus> RequestStatusCollection()
		{
			try
			{
				IList<BORequestStatus> boRequestStatusCollection = new List<BORequestStatus>();
				IList<DAORequestStatus> daoRequestStatusCollection = DAORequestStatus.SelectAll();
			
				foreach(DAORequestStatus daoRequestStatus in daoRequestStatusCollection)
					boRequestStatusCollection.Add(new BORequestStatus(daoRequestStatus));
			
				return boRequestStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RequestStatusCollectionCount
		///This method returns the collection count of BORequestStatus objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RequestStatusCollectionCount()
		{
			try
			{
				Int32 objCount = DAORequestStatus.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestCollection
		///This method returns its collection of BOClientServiceRequest objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequest]
		///</returns>
		///<parameters>
		///BORequestStatus
		///</parameters>
		public virtual IList<BOClientServiceRequest> ClientServiceRequestCollection()
		{
			try
			{
				if(_boClientServiceRequestCollection == null)
					LoadClientServiceRequestCollection();
				
				return _boClientServiceRequestCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ClientServiceRequestTimlineCollection
		///This method returns its collection of BOClientServiceRequestTimline objects
		///</Summary>
		///<returns>
		///IList[BOClientServiceRequestTimline]
		///</returns>
		///<parameters>
		///BORequestStatus
		///</parameters>
		public virtual IList<BOClientServiceRequestTimline> ClientServiceRequestTimlineCollection()
		{
			try
			{
				if(_boClientServiceRequestTimlineCollection == null)
					LoadClientServiceRequestTimlineCollection();
				
				return _boClientServiceRequestTimlineCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORequestStatus>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORequestStatus.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RequestStatusCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORequestStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRequestStatusCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORequestStatus> daoRequestStatusCollection = DAORequestStatus.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORequestStatus resdaoRequestStatus in daoRequestStatusCollection)
					boRequestStatusCollection.Add((T)(object)new BORequestStatus(resdaoRequestStatus));
			
				return boRequestStatusCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RequestStatusCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORequestStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORequestStatus.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestCollection
		///This method loads the internal collection of BOClientServiceRequest objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestCollection()
		{
			try
			{
				_boClientServiceRequestCollection = new List<BOClientServiceRequest>();
				IList<DAOClientServiceRequest> daoClientServiceRequestCollection = DAOClientServiceRequest.SelectAllByRequestStatusId(_requestStatusId.Value);
				
				foreach(DAOClientServiceRequest daoClientServiceRequest in daoClientServiceRequestCollection)
					_boClientServiceRequestCollection.Add(new BOClientServiceRequest(daoClientServiceRequest));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequest
		///This method persists a BOClientServiceRequest object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequest
		///</parameters>
		public virtual void AddClientServiceRequest(BOClientServiceRequest boClientServiceRequest)
		{
			DAOClientServiceRequest daoClientServiceRequest = new DAOClientServiceRequest();
			RegisterDataObject(daoClientServiceRequest);
			BeginTransaction("addClientServiceRequest");
			try
			{
				daoClientServiceRequest.RequestId = boClientServiceRequest.RequestId;
				daoClientServiceRequest.RequestCode = boClientServiceRequest.RequestCode;
				daoClientServiceRequest.BranchId = boClientServiceRequest.BranchId;
				daoClientServiceRequest.RepresentativeId = boClientServiceRequest.RepresentativeId;
				daoClientServiceRequest.ClientId = boClientServiceRequest.ClientId;
				daoClientServiceRequest.RequestDate = boClientServiceRequest.RequestDate;
				daoClientServiceRequest.RequestTime = boClientServiceRequest.RequestTime;
				daoClientServiceRequest.RequestTypeId = boClientServiceRequest.RequestTypeId;
				daoClientServiceRequest.RequestTypeDetailId = boClientServiceRequest.RequestTypeDetailId;
				daoClientServiceRequest.Phone = boClientServiceRequest.Phone;
				daoClientServiceRequest.PhoneAlternative = boClientServiceRequest.PhoneAlternative;
				daoClientServiceRequest.PriorityId = boClientServiceRequest.PriorityId;
				daoClientServiceRequest.IsClosed = boClientServiceRequest.IsClosed;
				daoClientServiceRequest.CloseDate = boClientServiceRequest.CloseDate;
				daoClientServiceRequest.Duration = boClientServiceRequest.Duration;
				daoClientServiceRequest.Latitude = boClientServiceRequest.Latitude;
				daoClientServiceRequest.Longitude = boClientServiceRequest.Longitude;
				daoClientServiceRequest.InZone = boClientServiceRequest.InZone;
				daoClientServiceRequest.Distance = boClientServiceRequest.Distance;
				daoClientServiceRequest.Notes = boClientServiceRequest.Notes;
				daoClientServiceRequest.DepartmentId = boClientServiceRequest.DepartmentId;
				daoClientServiceRequest.CBy = boClientServiceRequest.CBy;
				daoClientServiceRequest.CDate = boClientServiceRequest.CDate;
				daoClientServiceRequest.EBy = boClientServiceRequest.EBy;
				daoClientServiceRequest.EDate = boClientServiceRequest.EDate;
				daoClientServiceRequest.Replay = boClientServiceRequest.Replay;
				daoClientServiceRequest.RequestTitle = boClientServiceRequest.RequestTitle;
				daoClientServiceRequest.RequestStatusId = _requestStatusId.Value;
				daoClientServiceRequest.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequest = new BOClientServiceRequest(daoClientServiceRequest);
				if(_boClientServiceRequestCollection != null)
					_boClientServiceRequestCollection.Add(boClientServiceRequest);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequest
		///This method deletes all BOClientServiceRequest objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequest()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceRequest");
			try
			{
				DAOClientServiceRequest.DeleteAllByRequestStatusId(ConnectionProvider, _requestStatusId.Value);
				CommitTransaction();
				if(_boClientServiceRequestCollection != null)
				{
					_boClientServiceRequestCollection.Clear();
					_boClientServiceRequestCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceRequest");
				throw;
			}
		}
		
		///<Summary>
		///LoadClientServiceRequestTimlineCollection
		///This method loads the internal collection of BOClientServiceRequestTimline objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadClientServiceRequestTimlineCollection()
		{
			try
			{
				_boClientServiceRequestTimlineCollection = new List<BOClientServiceRequestTimline>();
				IList<DAOClientServiceRequestTimline> daoClientServiceRequestTimlineCollection = DAOClientServiceRequestTimline.SelectAllByRequestStatusId(_requestStatusId.Value);
				
				foreach(DAOClientServiceRequestTimline daoClientServiceRequestTimline in daoClientServiceRequestTimlineCollection)
					_boClientServiceRequestTimlineCollection.Add(new BOClientServiceRequestTimline(daoClientServiceRequestTimline));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddClientServiceRequestTimline
		///This method persists a BOClientServiceRequestTimline object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOClientServiceRequestTimline
		///</parameters>
		public virtual void AddClientServiceRequestTimline(BOClientServiceRequestTimline boClientServiceRequestTimline)
		{
			DAOClientServiceRequestTimline daoClientServiceRequestTimline = new DAOClientServiceRequestTimline();
			RegisterDataObject(daoClientServiceRequestTimline);
			BeginTransaction("addClientServiceRequestTimline");
			try
			{
				daoClientServiceRequestTimline.TimelineId = boClientServiceRequestTimline.TimelineId;
				daoClientServiceRequestTimline.RequestId = boClientServiceRequestTimline.RequestId;
				daoClientServiceRequestTimline.UserId = boClientServiceRequestTimline.UserId;
				daoClientServiceRequestTimline.TimelineDate = boClientServiceRequestTimline.TimelineDate;
				daoClientServiceRequestTimline.Notes = boClientServiceRequestTimline.Notes;
				daoClientServiceRequestTimline.RequestStatusId = _requestStatusId.Value;
				daoClientServiceRequestTimline.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boClientServiceRequestTimline = new BOClientServiceRequestTimline(daoClientServiceRequestTimline);
				if(_boClientServiceRequestTimlineCollection != null)
					_boClientServiceRequestTimlineCollection.Add(boClientServiceRequestTimline);
			}
			catch
			{
				RollbackTransaction("addClientServiceRequestTimline");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllClientServiceRequestTimline
		///This method deletes all BOClientServiceRequestTimline objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllClientServiceRequestTimline()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllClientServiceReques7220");
			try
			{
				DAOClientServiceRequestTimline.DeleteAllByRequestStatusId(ConnectionProvider, _requestStatusId.Value);
				CommitTransaction();
				if(_boClientServiceRequestTimlineCollection != null)
				{
					_boClientServiceRequestTimlineCollection.Clear();
					_boClientServiceRequestTimlineCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllClientServiceReques7220");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RequestStatusId
		{
			get
			{
				 return _requestStatusId;
			}
			set
			{
				_requestStatusId = value;
				_isDirty = true;
			}
		}
		
		public virtual string RequestStatusCode
		{
			get
			{
				 return _requestStatusCode;
			}
			set
			{
				_requestStatusCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string RequestStatusNameEn
		{
			get
			{
				 return _requestStatusNameEn;
			}
			set
			{
				_requestStatusNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string RequestStatusNameAr
		{
			get
			{
				 return _requestStatusNameAr;
			}
			set
			{
				_requestStatusNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
