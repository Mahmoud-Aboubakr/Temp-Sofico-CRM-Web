/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 9/9/2023 5:10:24 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOAppRole.
	///It maintains a collection of BOAppRoleFeature,BOAppUser objects.
	///</Summary>
	public partial class BOAppRole : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _appRoleId;
		protected string _appRoleCode;
		protected string _appRoleNameEn;
		protected string _appRoleNameAr;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected bool? _fullAccess;
		protected Int32? _cBy;
		protected DateTime? _cDate;
		protected Int32? _eBy;
		protected DateTime? _eDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOAppRoleFeature> _boAppRoleFeatureCollection;
		List<BOAppUser> _boAppUserCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOAppRole()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 appRoleId
		///</parameters>
		public BOAppRole(Int32 appRoleId)
		{
			try
			{
				DAOAppRole daoAppRole = DAOAppRole.SelectOne(appRoleId);
				_appRoleId = daoAppRole.AppRoleId;
				_appRoleCode = daoAppRole.AppRoleCode;
				_appRoleNameEn = daoAppRole.AppRoleNameEn;
				_appRoleNameAr = daoAppRole.AppRoleNameAr;
				_icon = daoAppRole.Icon;
				_color = daoAppRole.Color;
				_displayOrder = daoAppRole.DisplayOrder;
				_isActive = daoAppRole.IsActive;
				_canEdit = daoAppRole.CanEdit;
				_canDelete = daoAppRole.CanDelete;
				_fullAccess = daoAppRole.FullAccess;
				_cBy = daoAppRole.CBy;
				_cDate = daoAppRole.CDate;
				_eBy = daoAppRole.EBy;
				_eDate = daoAppRole.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOAppRole
		///</parameters>
		protected internal BOAppRole(DAOAppRole daoAppRole)
		{
			try
			{
				_appRoleId = daoAppRole.AppRoleId;
				_appRoleCode = daoAppRole.AppRoleCode;
				_appRoleNameEn = daoAppRole.AppRoleNameEn;
				_appRoleNameAr = daoAppRole.AppRoleNameAr;
				_icon = daoAppRole.Icon;
				_color = daoAppRole.Color;
				_displayOrder = daoAppRole.DisplayOrder;
				_isActive = daoAppRole.IsActive;
				_canEdit = daoAppRole.CanEdit;
				_canDelete = daoAppRole.CanDelete;
				_fullAccess = daoAppRole.FullAccess;
				_cBy = daoAppRole.CBy;
				_cDate = daoAppRole.CDate;
				_eBy = daoAppRole.EBy;
				_eDate = daoAppRole.EDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new AppRole record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOAppRole daoAppRole = new DAOAppRole();
			RegisterDataObject(daoAppRole);
			BeginTransaction("savenewBOAppRole");
			try
			{
				daoAppRole.AppRoleCode = _appRoleCode;
				daoAppRole.AppRoleNameEn = _appRoleNameEn;
				daoAppRole.AppRoleNameAr = _appRoleNameAr;
				daoAppRole.Icon = _icon;
				daoAppRole.Color = _color;
				daoAppRole.DisplayOrder = _displayOrder;
				daoAppRole.IsActive = _isActive;
				daoAppRole.CanEdit = _canEdit;
				daoAppRole.CanDelete = _canDelete;
				daoAppRole.FullAccess = _fullAccess;
				daoAppRole.CBy = _cBy;
				daoAppRole.CDate = _cDate;
				daoAppRole.EBy = _eBy;
				daoAppRole.EDate = _eDate;
				daoAppRole.Insert();
				CommitTransaction();
				
				_appRoleId = daoAppRole.AppRoleId;
				_appRoleCode = daoAppRole.AppRoleCode;
				_appRoleNameEn = daoAppRole.AppRoleNameEn;
				_appRoleNameAr = daoAppRole.AppRoleNameAr;
				_icon = daoAppRole.Icon;
				_color = daoAppRole.Color;
				_displayOrder = daoAppRole.DisplayOrder;
				_isActive = daoAppRole.IsActive;
				_canEdit = daoAppRole.CanEdit;
				_canDelete = daoAppRole.CanDelete;
				_fullAccess = daoAppRole.FullAccess;
				_cBy = daoAppRole.CBy;
				_cDate = daoAppRole.CDate;
				_eBy = daoAppRole.EBy;
				_eDate = daoAppRole.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOAppRole");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one AppRole record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppRole
		///</parameters>
		public virtual void Update()
		{
			DAOAppRole daoAppRole = new DAOAppRole();
			RegisterDataObject(daoAppRole);
			BeginTransaction("updateBOAppRole");
			try
			{
				daoAppRole.AppRoleId = _appRoleId;
				daoAppRole.AppRoleCode = _appRoleCode;
				daoAppRole.AppRoleNameEn = _appRoleNameEn;
				daoAppRole.AppRoleNameAr = _appRoleNameAr;
				daoAppRole.Icon = _icon;
				daoAppRole.Color = _color;
				daoAppRole.DisplayOrder = _displayOrder;
				daoAppRole.IsActive = _isActive;
				daoAppRole.CanEdit = _canEdit;
				daoAppRole.CanDelete = _canDelete;
				daoAppRole.FullAccess = _fullAccess;
				daoAppRole.CBy = _cBy;
				daoAppRole.CDate = _cDate;
				daoAppRole.EBy = _eBy;
				daoAppRole.EDate = _eDate;
				daoAppRole.Update();
				CommitTransaction();
				
				_appRoleId = daoAppRole.AppRoleId;
				_appRoleCode = daoAppRole.AppRoleCode;
				_appRoleNameEn = daoAppRole.AppRoleNameEn;
				_appRoleNameAr = daoAppRole.AppRoleNameAr;
				_icon = daoAppRole.Icon;
				_color = daoAppRole.Color;
				_displayOrder = daoAppRole.DisplayOrder;
				_isActive = daoAppRole.IsActive;
				_canEdit = daoAppRole.CanEdit;
				_canDelete = daoAppRole.CanDelete;
				_fullAccess = daoAppRole.FullAccess;
				_cBy = daoAppRole.CBy;
				_cDate = daoAppRole.CDate;
				_eBy = daoAppRole.EBy;
				_eDate = daoAppRole.EDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOAppRole");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one AppRole record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOAppRole daoAppRole = new DAOAppRole();
			RegisterDataObject(daoAppRole);
			BeginTransaction("deleteBOAppRole");
			try
			{
				daoAppRole.AppRoleId = _appRoleId;
				daoAppRole.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOAppRole");
				throw;
			}
		}
		
		///<Summary>
		///AppRoleCollection
		///This method returns the collection of BOAppRole objects
		///</Summary>
		///<returns>
		///List[BOAppRole]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOAppRole> AppRoleCollection()
		{
			try
			{
				IList<BOAppRole> boAppRoleCollection = new List<BOAppRole>();
				IList<DAOAppRole> daoAppRoleCollection = DAOAppRole.SelectAll();
			
				foreach(DAOAppRole daoAppRole in daoAppRoleCollection)
					boAppRoleCollection.Add(new BOAppRole(daoAppRole));
			
				return boAppRoleCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleCollectionCount
		///This method returns the collection count of BOAppRole objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 AppRoleCollectionCount()
		{
			try
			{
				Int32 objCount = DAOAppRole.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppRoleFeatureCollection
		///This method returns its collection of BOAppRoleFeature objects
		///</Summary>
		///<returns>
		///IList[BOAppRoleFeature]
		///</returns>
		///<parameters>
		///BOAppRole
		///</parameters>
		public virtual IList<BOAppRoleFeature> AppRoleFeatureCollection()
		{
			try
			{
				if(_boAppRoleFeatureCollection == null)
					LoadAppRoleFeatureCollection();
				
				return _boAppRoleFeatureCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AppUserCollection
		///This method returns its collection of BOAppUser objects
		///</Summary>
		///<returns>
		///IList[BOAppUser]
		///</returns>
		///<parameters>
		///BOAppRole
		///</parameters>
		public virtual IList<BOAppUser> AppUserCollection()
		{
			try
			{
				if(_boAppUserCollection == null)
					LoadAppUserCollection();
				
				return _boAppUserCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOAppRole>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOAppRole.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOAppRole objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boAppRoleCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOAppRole> daoAppRoleCollection = DAOAppRole.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOAppRole resdaoAppRole in daoAppRoleCollection)
					boAppRoleCollection.Add((T)(object)new BOAppRole(resdaoAppRole));
			
				return boAppRoleCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///AppRoleCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOAppRole objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOAppRole.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadAppRoleFeatureCollection
		///This method loads the internal collection of BOAppRoleFeature objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppRoleFeatureCollection()
		{
			try
			{
				_boAppRoleFeatureCollection = new List<BOAppRoleFeature>();
				IList<DAOAppRoleFeature> daoAppRoleFeatureCollection = DAOAppRoleFeature.SelectAllByAppRoleId(_appRoleId.Value);
				
				foreach(DAOAppRoleFeature daoAppRoleFeature in daoAppRoleFeatureCollection)
					_boAppRoleFeatureCollection.Add(new BOAppRoleFeature(daoAppRoleFeature));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppRoleFeature
		///This method persists a BOAppRoleFeature object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppRoleFeature
		///</parameters>
		public virtual void AddAppRoleFeature(BOAppRoleFeature boAppRoleFeature)
		{
			DAOAppRoleFeature daoAppRoleFeature = new DAOAppRoleFeature();
			RegisterDataObject(daoAppRoleFeature);
			BeginTransaction("addAppRoleFeature");
			try
			{
				daoAppRoleFeature.AppRoleFeatueId = boAppRoleFeature.AppRoleFeatueId;
				daoAppRoleFeature.FeatueId = boAppRoleFeature.FeatueId;
				daoAppRoleFeature.CBy = boAppRoleFeature.CBy;
				daoAppRoleFeature.CDate = boAppRoleFeature.CDate;
				daoAppRoleFeature.EBy = boAppRoleFeature.EBy;
				daoAppRoleFeature.EDate = boAppRoleFeature.EDate;
				daoAppRoleFeature.AppRoleId = _appRoleId.Value;
				daoAppRoleFeature.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppRoleFeature = new BOAppRoleFeature(daoAppRoleFeature);
				if(_boAppRoleFeatureCollection != null)
					_boAppRoleFeatureCollection.Add(boAppRoleFeature);
			}
			catch
			{
				RollbackTransaction("addAppRoleFeature");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppRoleFeature
		///This method deletes all BOAppRoleFeature objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppRoleFeature()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppRoleFeature");
			try
			{
				DAOAppRoleFeature.DeleteAllByAppRoleId(ConnectionProvider, _appRoleId.Value);
				CommitTransaction();
				if(_boAppRoleFeatureCollection != null)
				{
					_boAppRoleFeatureCollection.Clear();
					_boAppRoleFeatureCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppRoleFeature");
				throw;
			}
		}
		
		///<Summary>
		///LoadAppUserCollection
		///This method loads the internal collection of BOAppUser objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadAppUserCollection()
		{
			try
			{
				_boAppUserCollection = new List<BOAppUser>();
				IList<DAOAppUser> daoAppUserCollection = DAOAppUser.SelectAllByAppRoleId(_appRoleId.Value);
				
				foreach(DAOAppUser daoAppUser in daoAppUserCollection)
					_boAppUserCollection.Add(new BOAppUser(daoAppUser));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddAppUser
		///This method persists a BOAppUser object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOAppUser
		///</parameters>
		public virtual void AddAppUser(BOAppUser boAppUser)
		{
			DAOAppUser daoAppUser = new DAOAppUser();
			RegisterDataObject(daoAppUser);
			BeginTransaction("addAppUser");
			try
			{
				daoAppUser.UserId = boAppUser.UserId;
				daoAppUser.UserGroupId = boAppUser.UserGroupId;
				daoAppUser.RealName = boAppUser.RealName;
				daoAppUser.UserName = boAppUser.UserName;
				daoAppUser.Password = boAppUser.Password;
				daoAppUser.IsOnline = boAppUser.IsOnline;
				daoAppUser.IsLocked = boAppUser.IsLocked;
				daoAppUser.MustChangeData = boAppUser.MustChangeData;
				daoAppUser.LastLogin = boAppUser.LastLogin;
				daoAppUser.MustChangePassword = boAppUser.MustChangePassword;
				daoAppUser.EmailVerified = boAppUser.EmailVerified;
				daoAppUser.FirebaseId = boAppUser.FirebaseId;
				daoAppUser.SignalrId = boAppUser.SignalrId;
				daoAppUser.FailedCount = boAppUser.FailedCount;
				daoAppUser.DefaultRoute = boAppUser.DefaultRoute;
				daoAppUser.Phone = boAppUser.Phone;
				daoAppUser.WhatsApp = boAppUser.WhatsApp;
				daoAppUser.ZoomId = boAppUser.ZoomId;
				daoAppUser.LinkedIn = boAppUser.LinkedIn;
				daoAppUser.UserBio = boAppUser.UserBio;
				daoAppUser.Latitude = boAppUser.Latitude;
				daoAppUser.Longitude = boAppUser.Longitude;
				daoAppUser.Address = boAppUser.Address;
				daoAppUser.Email = boAppUser.Email;
				daoAppUser.Fax = boAppUser.Fax;
				daoAppUser.Internal = boAppUser.Internal;
				daoAppUser.JobTitle = boAppUser.JobTitle;
				daoAppUser.Avatar = boAppUser.Avatar;
				daoAppUser.Mobile = boAppUser.Mobile;
				daoAppUser.CBy = boAppUser.CBy;
				daoAppUser.CDate = boAppUser.CDate;
				daoAppUser.EBy = boAppUser.EBy;
				daoAppUser.EDate = boAppUser.EDate;
				daoAppUser.PrimaryMobile = boAppUser.PrimaryMobile;
				daoAppUser.MobileVerified = boAppUser.MobileVerified;
				daoAppUser.VerificationCode = boAppUser.VerificationCode;
				daoAppUser.AppRoleId = _appRoleId.Value;
				daoAppUser.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boAppUser = new BOAppUser(daoAppUser);
				if(_boAppUserCollection != null)
					_boAppUserCollection.Add(boAppUser);
			}
			catch
			{
				RollbackTransaction("addAppUser");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllAppUser
		///This method deletes all BOAppUser objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllAppUser()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllAppUser");
			try
			{
				DAOAppUser.DeleteAllByAppRoleId(ConnectionProvider, _appRoleId.Value);
				CommitTransaction();
				if(_boAppUserCollection != null)
				{
					_boAppUserCollection.Clear();
					_boAppUserCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllAppUser");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? AppRoleId
		{
			get
			{
				 return _appRoleId;
			}
			set
			{
				_appRoleId = value;
				_isDirty = true;
			}
		}
		
		public virtual string AppRoleCode
		{
			get
			{
				 return _appRoleCode;
			}
			set
			{
				_appRoleCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string AppRoleNameEn
		{
			get
			{
				 return _appRoleNameEn;
			}
			set
			{
				_appRoleNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string AppRoleNameAr
		{
			get
			{
				 return _appRoleNameAr;
			}
			set
			{
				_appRoleNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? FullAccess
		{
			get
			{
				 return _fullAccess;
			}
			set
			{
				_fullAccess = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CBy
		{
			get
			{
				 return _cBy;
			}
			set
			{
				_cBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? CDate
		{
			get
			{
				 return _cDate;
			}
			set
			{
				_cDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EBy
		{
			get
			{
				 return _eBy;
			}
			set
			{
				_eBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EDate
		{
			get
			{
				 return _eDate;
			}
			set
			{
				_eDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
