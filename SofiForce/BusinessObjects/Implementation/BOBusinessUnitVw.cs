/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 3/23/2023 3:30:39 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SofiForce.DataObjects;
using SofiForce.DataObjects.Interfaces;
using SofiForce.BusinessObjects.Interfaces;

namespace SofiForce.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOBusinessUnitVw.
	///</Summary>
	public partial class BOBusinessUnitVw : zSofiForceConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _businessUnitId;
		protected Int32? _branchId;
		protected string _businessUnitCode;
		protected string _businessUnitNameEn;
		protected string _businessUnitNameAr;
		protected string _icon;
		protected string _color;
		protected Int32? _displayOrder;
		protected bool? _isActive;
		protected bool? _canEdit;
		protected bool? _canDelete;
		protected string _branchCode;
		protected string _branchNameAr;
		protected string _branchNameEn;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOBusinessUnitVw()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOBusinessUnitVw
		///</parameters>
		protected internal BOBusinessUnitVw(DAOBusinessUnitVw daoBusinessUnitVw)
		{
			try
			{
				_businessUnitId = daoBusinessUnitVw.BusinessUnitId;
				_branchId = daoBusinessUnitVw.BranchId;
				_businessUnitCode = daoBusinessUnitVw.BusinessUnitCode;
				_businessUnitNameEn = daoBusinessUnitVw.BusinessUnitNameEn;
				_businessUnitNameAr = daoBusinessUnitVw.BusinessUnitNameAr;
				_icon = daoBusinessUnitVw.Icon;
				_color = daoBusinessUnitVw.Color;
				_displayOrder = daoBusinessUnitVw.DisplayOrder;
				_isActive = daoBusinessUnitVw.IsActive;
				_canEdit = daoBusinessUnitVw.CanEdit;
				_canDelete = daoBusinessUnitVw.CanDelete;
				_branchCode = daoBusinessUnitVw.BranchCode;
				_branchNameAr = daoBusinessUnitVw.BranchNameAr;
				_branchNameEn = daoBusinessUnitVw.BranchNameEn;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///BusinessUnitVwCollection
		///This method returns the collection of BOBusinessUnitVw objects
		///</Summary>
		///<returns>
		///List[BOBusinessUnitVw]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOBusinessUnitVw> BusinessUnitVwCollection()
		{
			try
			{
				IList<BOBusinessUnitVw> boBusinessUnitVwCollection = new List<BOBusinessUnitVw>();
				IList<DAOBusinessUnitVw> daoBusinessUnitVwCollection = DAOBusinessUnitVw.SelectAll();
			
				foreach(DAOBusinessUnitVw daoBusinessUnitVw in daoBusinessUnitVwCollection)
					boBusinessUnitVwCollection.Add(new BOBusinessUnitVw(daoBusinessUnitVw));
			
				return boBusinessUnitVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BusinessUnitVwCollectionCount
		///This method returns the collection count of BOBusinessUnitVw objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 BusinessUnitVwCollectionCount()
		{
			try
			{
				Int32 objCount = DAOBusinessUnitVw.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOBusinessUnitVw>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOBusinessUnitVw.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BusinessUnitVwCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOBusinessUnitVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boBusinessUnitVwCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOBusinessUnitVw> daoBusinessUnitVwCollection = DAOBusinessUnitVw.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOBusinessUnitVw resdaoBusinessUnitVw in daoBusinessUnitVwCollection)
					boBusinessUnitVwCollection.Add((T)(object)new BOBusinessUnitVw(resdaoBusinessUnitVw));
			
				return boBusinessUnitVwCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BusinessUnitVwCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOBusinessUnitVw objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOBusinessUnitVw.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? BusinessUnitId
		{
			get
			{
				 return _businessUnitId;
			}
			set
			{
				_businessUnitId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BranchId
		{
			get
			{
				 return _branchId;
			}
			set
			{
				_branchId = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessUnitCode
		{
			get
			{
				 return _businessUnitCode;
			}
			set
			{
				_businessUnitCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessUnitNameEn
		{
			get
			{
				 return _businessUnitNameEn;
			}
			set
			{
				_businessUnitNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessUnitNameAr
		{
			get
			{
				 return _businessUnitNameAr;
			}
			set
			{
				_businessUnitNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string Icon
		{
			get
			{
				 return _icon;
			}
			set
			{
				_icon = value;
				_isDirty = true;
			}
		}
		
		public virtual string Color
		{
			get
			{
				 return _color;
			}
			set
			{
				_color = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DisplayOrder
		{
			get
			{
				 return _displayOrder;
			}
			set
			{
				_displayOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanEdit
		{
			get
			{
				 return _canEdit;
			}
			set
			{
				_canEdit = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? CanDelete
		{
			get
			{
				 return _canDelete;
			}
			set
			{
				_canDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchCode
		{
			get
			{
				 return _branchCode;
			}
			set
			{
				_branchCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameAr
		{
			get
			{
				 return _branchNameAr;
			}
			set
			{
				_branchNameAr = value;
				_isDirty = true;
			}
		}
		
		public virtual string BranchNameEn
		{
			get
			{
				 return _branchNameEn;
			}
			set
			{
				_branchNameEn = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
